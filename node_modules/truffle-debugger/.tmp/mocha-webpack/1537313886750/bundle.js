(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define("Debugger", [], factory);
	else if(typeof exports === 'object')
		exports["Debugger"] = factory();
	else
		root["Debugger"] = factory();
})(typeof self !== 'undefined' ? self : this, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 38);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports) {

module.exports = require("debug");

/***/ }),
/* 1 */
/***/ (function(module, exports) {

module.exports = require("babel-runtime/core-js/object/entries");

/***/ }),
/* 2 */
/***/ (function(module, exports) {

module.exports = require("babel-runtime/helpers/extends");

/***/ }),
/* 3 */
/***/ (function(module, exports) {

module.exports = require("babel-runtime/core-js/object/assign");

/***/ }),
/* 4 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var cov_e1asadkir = function () {
  var path = "/Users/gnidan/src/work/truffle/packages/truffle-debugger/lib/helpers/index.js",
      hash = "39423b8623e3006be2a8ba785163e4b92ed2d27b",
      Function = function () {}.constructor,
      global = new Function('return this')(),
      gcv = "__coverage__",
      coverageData = { path: "/Users/gnidan/src/work/truffle/packages/truffle-debugger/lib/helpers/index.js", statementMap: { "0": { start: { line: 3, column: 0 }, end: { line: 5, column: 3 } }, "1": { start: { line: 6, column: 0 }, end: { line: 6, column: 32 } }, "2": { start: { line: 7, column: 0 }, end: { line: 7, column: 30 } }, "3": { start: { line: 9, column: 13 }, end: { line: 9, column: 45 } }, "4": { start: { line: 12, column: 2 }, end: { line: 15, column: 5 } }, "5": { start: { line: 17, column: 2 }, end: { line: 17, column: 12 } }, "6": { start: { line: 24, column: 2 }, end: { line: 24, column: 65 } } }, fnMap: { "0": { name: "prefixName", decl: { start: { line: 11, column: 9 }, end: { line: 11, column: 19 } }, loc: { start: { line: 11, column: 32 }, end: { line: 18, column: 1 } }, line: 11 }, "1": { name: "keccak256", decl: { start: { line: 23, column: 9 }, end: { line: 23, column: 18 } }, loc: { start: { line: 23, column: 28 }, end: { line: 25, column: 1 } }, line: 23 } }, branchMap: {}, s: { "0": 0, "1": 0, "2": 0, "3": 0, "4": 0, "5": 0, "6": 0 }, f: { "0": 0, "1": 0 }, b: {}, inputSourceMap: { version: 3, sources: ["lib/helpers/index.js"], names: ["prefixName", "keccak256", "prefix", "fn", "Object", "defineProperty", "value", "name", "configurable", "args"], mappings: ";;;;;QAEgBA,U,GAAAA,U;QAYAC,S,GAAAA,S;;AAdhB;;AAEO,SAASD,UAAT,CAAoBE,MAApB,EAA4BC,EAA5B,EAAgC;AACrCC,SAAOC,cAAP,CAAsBF,EAAtB,EAA0B,MAA1B,EAAkC;AAChCG,WAAQ,GAAEJ,MAAO,IAAGC,GAAGI,IAAK,EADI;AAEhCC,kBAAc;AAFkB,GAAlC;;AAKA,SAAOL,EAAP;AACD;;AAED;;;AAGO,SAASF,SAAT,CAAmB,GAAGQ,IAAtB,EAA4B;AACjC,SAAO,wBAAY,sBAAW,GAAGA,IAAd,CAAZ,CAAP;AACD", file: "index.js", sourceRoot: "/Users/gnidan/src/work/truffle/packages/truffle-debugger", sourcesContent: ["import { keccak256 as _keccak256, toHexString } from \"lib/data/decode/utils\";\n\nexport function prefixName(prefix, fn) {\n  Object.defineProperty(fn, 'name', {\n    value: `${prefix}.${fn.name}`,\n    configurable: true\n  });\n\n  return fn;\n}\n\n/**\n * @return 0x-prefix string of keccak256 hash\n */\nexport function keccak256(...args) {\n  return toHexString(_keccak256(...args));\n}\n"] }, _coverageSchema: "332fd63041d2c1bcb487cc26dd0d5f7d97098a6c" },
      coverage = global[gcv] || (global[gcv] = {});if (coverage[path] && coverage[path].hash === hash) {
    return coverage[path];
  }coverageData.hash = hash;return coverage[path] = coverageData;
}();cov_e1asadkir.s[0]++;Object.defineProperty(exports, "__esModule", { value: true });cov_e1asadkir.s[1]++;exports.prefixName = prefixName;cov_e1asadkir.s[2]++;exports.keccak256 = keccak256;var _utils = (cov_e1asadkir.s[3]++, __webpack_require__(11));function prefixName(prefix, fn) {
  cov_e1asadkir.f[0]++;cov_e1asadkir.s[4]++;Object.defineProperty(fn, 'name', { value: `${prefix}.${fn.name}`, configurable: true });cov_e1asadkir.s[5]++;return fn;
}function keccak256(...args) {
  cov_e1asadkir.f[1]++;cov_e1asadkir.s[6]++;return (0, _utils.toHexString)((0, _utils.keccak256)(...args));
}

/***/ }),
/* 5 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var cov_251n154c7v = function () {
  var path = "/Users/gnidan/src/work/truffle/packages/truffle-debugger/lib/evm/selectors/index.js",
      hash = "0e0485c9567132fa8814b8bb60b35bdf41a1a8b6",
      Function = function () {}.constructor,
      global = new Function('return this')(),
      gcv = "__coverage__",
      coverageData = { path: "/Users/gnidan/src/work/truffle/packages/truffle-debugger/lib/evm/selectors/index.js", statementMap: { "0": { start: { line: 3, column: 0 }, end: { line: 5, column: 3 } }, "1": { start: { line: 7, column: 16 }, end: { line: 7, column: 56 } }, "2": { start: { line: 9, column: 16 }, end: { line: 9, column: 49 } }, "3": { start: { line: 11, column: 15 }, end: { line: 11, column: 62 } }, "4": { start: { line: 13, column: 16 }, end: { line: 13, column: 48 } }, "5": { start: { line: 15, column: 14 }, end: { line: 15, column: 60 } }, "6": { start: { line: 17, column: 15 }, end: { line: 17, column: 46 } }, "7": { start: { line: 19, column: 13 }, end: { line: 19, column: 29 } }, "8": { start: { line: 21, column: 14 }, end: { line: 21, column: 44 } }, "9": { start: { line: 23, column: 20 }, end: { line: 23, column: 44 } }, "10": { start: { line: 25, column: 23 }, end: { line: 25, column: 50 } }, "11": { start: { line: 27, column: 24 }, end: { line: 27, column: 64 } }, "12": { start: { line: 29, column: 17 }, end: { line: 29, column: 47 } }, "13": { start: { line: 31, column: 18 }, end: { line: 31, column: 52 } }, "14": { start: { line: 33, column: 39 }, end: { line: 33, column: 93 } }, "15": { start: { line: 35, column: 14 }, end: { line: 35, column: 60 } }, "16": { start: { line: 37, column: 18 }, end: { line: 37, column: 22 } }, "17": { start: { line: 44, column: 13 }, end: { line: 80, column: 3 } }, "18": { start: { line: 50, column: 75 }, end: { line: 50, column: 94 } }, "19": { start: { line: 55, column: 71 }, end: { line: 55, column: 78 } }, "20": { start: { line: 60, column: 63 }, end: { line: 60, column: 116 } }, "21": { start: { line: 67, column: 63 }, end: { line: 67, column: 109 } }, "22": { start: { line: 72, column: 65 }, end: { line: 72, column: 84 } }, "23": { start: { line: 79, column: 66 }, end: { line: 79, column: 106 } }, "24": { start: { line: 82, column: 2 }, end: { line: 119, column: 3 } }, "25": { start: { line: 83, column: 23 }, end: { line: 83, column: 107 } }, "26": { start: { line: 83, column: 31 }, end: { line: 83, column: 107 } }, "27": { start: { line: 85, column: 4 }, end: { line: 87, column: 5 } }, "28": { start: { line: 86, column: 6 }, end: { line: 86, column: 28 } }, "29": { start: { line: 89, column: 4 }, end: { line: 118, column: 7 } }, "30": { start: { line: 96, column: 8 }, end: { line: 96, column: 34 } }, "31": { start: { line: 96, column: 22 }, end: { line: 96, column: 34 } }, "32": { start: { line: 98, column: 22 }, end: { line: 98, column: 45 } }, "33": { start: { line: 99, column: 8 }, end: { line: 99, column: 47 } }, "34": { start: { line: 100, column: 8 }, end: { line: 100, column: 23 } }, "35": { start: { line: 109, column: 8 }, end: { line: 109, column: 34 } }, "36": { start: { line: 109, column: 22 }, end: { line: 109, column: 34 } }, "37": { start: { line: 113, column: 23 }, end: { line: 113, column: 64 } }, "38": { start: { line: 114, column: 23 }, end: { line: 114, column: 64 } }, "39": { start: { line: 116, column: 8 }, end: { line: 116, column: 73 } }, "40": { start: { line: 121, column: 2 }, end: { line: 121, column: 14 } }, "41": { start: { line: 124, column: 12 }, end: { line: 246, column: 2 } }, "42": { start: { line: 128, column: 18 }, end: { line: 128, column: 27 } }, "43": { start: { line: 137, column: 65 }, end: { line: 137, column: 94 } }, "44": { start: { line: 142, column: 66 }, end: { line: 142, column: 96 } }, "45": { start: { line: 148, column: 60 }, end: { line: 148, column: 88 } }, "46": { start: { line: 155, column: 65 }, end: { line: 174, column: 7 } }, "47": { start: { line: 163, column: 26 }, end: { line: 163, column: 30 } }, "48": { start: { line: 165, column: 24 }, end: { line: 168, column: 125 } }, "49": { start: { line: 165, column: 94 }, end: { line: 168, column: 9 } }, "50": { start: { line: 168, column: 37 }, end: { line: 168, column: 74 } }, "51": { start: { line: 168, column: 119 }, end: { line: 168, column: 124 } }, "52": { start: { line: 170, column: 8 }, end: { line: 173, column: 9 } }, "53": { start: { line: 171, column: 30 }, end: { line: 171, column: 40 } }, "54": { start: { line: 172, column: 10 }, end: { line: 172, column: 29 } }, "55": { start: { line: 186, column: 24 }, end: { line: 186, column: 48 } }, "56": { start: { line: 191, column: 66 }, end: { line: 191, column: 109 } }, "57": { start: { line: 198, column: 6 }, end: { line: 206, column: 7 } }, "58": { start: { line: 199, column: 8 }, end: { line: 199, column: 36 } }, "59": { start: { line: 200, column: 8 }, end: { line: 202, column: 9 } }, "60": { start: { line: 201, column: 10 }, end: { line: 201, column: 29 } }, "61": { start: { line: 203, column: 8 }, end: { line: 203, column: 31 } }, "62": { start: { line: 205, column: 8 }, end: { line: 205, column: 32 } }, "63": { start: { line: 208, column: 20 }, end: { line: 208, column: 52 } }, "64": { start: { line: 210, column: 6 }, end: { line: 212, column: 9 } }, "65": { start: { line: 220, column: 110 }, end: { line: 222, column: 5 } }, "66": { start: { line: 221, column: 81 }, end: { line: 221, column: 92 } }, "67": { start: { line: 240, column: 110 }, end: { line: 242, column: 5 } }, "68": { start: { line: 241, column: 81 }, end: { line: 241, column: 92 } }, "69": { start: { line: 248, column: 0 }, end: { line: 248, column: 22 } } }, fnMap: { "0": { name: "_interopRequireDefault", decl: { start: { line: 33, column: 9 }, end: { line: 33, column: 31 } }, loc: { start: { line: 33, column: 37 }, end: { line: 33, column: 95 } }, line: 33 }, "1": { name: "createStepSelectors", decl: { start: { line: 43, column: 9 }, end: { line: 43, column: 28 } }, loc: { start: { line: 43, column: 49 }, end: { line: 122, column: 1 } }, line: 43 }, "2": { name: "(anonymous_2)", decl: { start: { line: 50, column: 49 }, end: { line: 50, column: 50 } }, loc: { start: { line: 50, column: 75 }, end: { line: 50, column: 94 } }, line: 50 }, "3": { name: "(anonymous_3)", decl: { start: { line: 55, column: 63 }, end: { line: 55, column: 64 } }, loc: { start: { line: 55, column: 71 }, end: { line: 55, column: 78 } }, line: 55 }, "4": { name: "(anonymous_4)", decl: { start: { line: 60, column: 55 }, end: { line: 60, column: 56 } }, loc: { start: { line: 60, column: 63 }, end: { line: 60, column: 116 } }, line: 60 }, "5": { name: "(anonymous_5)", decl: { start: { line: 67, column: 55 }, end: { line: 67, column: 56 } }, loc: { start: { line: 67, column: 63 }, end: { line: 67, column: 109 } }, line: 67 }, "6": { name: "(anonymous_6)", decl: { start: { line: 72, column: 57 }, end: { line: 72, column: 58 } }, loc: { start: { line: 72, column: 65 }, end: { line: 72, column: 84 } }, line: 72 }, "7": { name: "(anonymous_7)", decl: { start: { line: 79, column: 58 }, end: { line: 79, column: 59 } }, loc: { start: { line: 79, column: 66 }, end: { line: 79, column: 106 } }, line: 79 }, "8": { name: "(anonymous_8)", decl: { start: { line: 83, column: 23 }, end: { line: 83, column: 24 } }, loc: { start: { line: 83, column: 31 }, end: { line: 83, column: 107 } }, line: 83 }, "9": { name: "(anonymous_9)", decl: { start: { line: 95, column: 81 }, end: { line: 95, column: 82 } }, loc: { start: { line: 95, column: 111 }, end: { line: 101, column: 7 } }, line: 95 }, "10": { name: "(anonymous_10)", decl: { start: { line: 108, column: 84 }, end: { line: 108, column: 85 } }, loc: { start: { line: 108, column: 122 }, end: { line: 117, column: 7 } }, line: 108 }, "11": { name: "(anonymous_11)", decl: { start: { line: 128, column: 9 }, end: { line: 128, column: 10 } }, loc: { start: { line: 128, column: 18 }, end: { line: 128, column: 27 } }, line: 128 }, "12": { name: "(anonymous_12)", decl: { start: { line: 137, column: 56 }, end: { line: 137, column: 57 } }, loc: { start: { line: 137, column: 65 }, end: { line: 137, column: 94 } }, line: 137 }, "13": { name: "(anonymous_13)", decl: { start: { line: 142, column: 57 }, end: { line: 142, column: 58 } }, loc: { start: { line: 142, column: 66 }, end: { line: 142, column: 96 } }, line: 142 }, "14": { name: "(anonymous_14)", decl: { start: { line: 148, column: 51 }, end: { line: 148, column: 52 } }, loc: { start: { line: 148, column: 60 }, end: { line: 148, column: 88 } }, line: 148 }, "15": { name: "(anonymous_15)", decl: { start: { line: 155, column: 53 }, end: { line: 155, column: 54 } }, loc: { start: { line: 155, column: 65 }, end: { line: 174, column: 7 } }, line: 155 }, "16": { name: "(anonymous_16)", decl: { start: { line: 155, column: 65 }, end: { line: 155, column: 66 } }, loc: { start: { line: 155, column: 75 }, end: { line: 174, column: 7 } }, line: 155 }, "17": { name: "(anonymous_17)", decl: { start: { line: 165, column: 61 }, end: { line: 165, column: 62 } }, loc: { start: { line: 165, column: 94 }, end: { line: 168, column: 9 } }, line: 165 }, "18": { name: "(anonymous_18)", decl: { start: { line: 168, column: 19 }, end: { line: 168, column: 20 } }, loc: { start: { line: 168, column: 37 }, end: { line: 168, column: 74 } }, line: 168 }, "19": { name: "(anonymous_19)", decl: { start: { line: 168, column: 81 }, end: { line: 168, column: 82 } }, loc: { start: { line: 168, column: 119 }, end: { line: 168, column: 124 } }, line: 168 }, "20": { name: "(anonymous_20)", decl: { start: { line: 186, column: 15 }, end: { line: 186, column: 16 } }, loc: { start: { line: 186, column: 24 }, end: { line: 186, column: 48 } }, line: 186 }, "21": { name: "(anonymous_21)", decl: { start: { line: 191, column: 57 }, end: { line: 191, column: 58 } }, loc: { start: { line: 191, column: 66 }, end: { line: 191, column: 109 } }, line: 191 }, "22": { name: "(anonymous_22)", decl: { start: { line: 196, column: 117 }, end: { line: 196, column: 118 } }, loc: { start: { line: 196, column: 171 }, end: { line: 213, column: 5 } }, line: 196 }, "23": { name: "(anonymous_23)", decl: { start: { line: 220, column: 100 }, end: { line: 220, column: 101 } }, loc: { start: { line: 220, column: 110 }, end: { line: 222, column: 5 } }, line: 220 }, "24": { name: "(anonymous_24)", decl: { start: { line: 221, column: 73 }, end: { line: 221, column: 74 } }, loc: { start: { line: 221, column: 81 }, end: { line: 221, column: 92 } }, line: 221 }, "25": { name: "(anonymous_25)", decl: { start: { line: 240, column: 100 }, end: { line: 240, column: 101 } }, loc: { start: { line: 240, column: 110 }, end: { line: 242, column: 5 } }, line: 240 }, "26": { name: "(anonymous_26)", decl: { start: { line: 241, column: 73 }, end: { line: 241, column: 74 } }, loc: { start: { line: 241, column: 81 }, end: { line: 241, column: 92 } }, line: 241 } }, branchMap: { "0": { loc: { start: { line: 33, column: 46 }, end: { line: 33, column: 92 } }, type: "cond-expr", locations: [{ start: { line: 33, column: 70 }, end: { line: 33, column: 73 } }, { start: { line: 33, column: 76 }, end: { line: 33, column: 92 } }], line: 33 }, "1": { loc: { start: { line: 33, column: 46 }, end: { line: 33, column: 67 } }, type: "binary-expr", locations: [{ start: { line: 33, column: 46 }, end: { line: 33, column: 49 } }, { start: { line: 33, column: 53 }, end: { line: 33, column: 67 } }], line: 33 }, "2": { loc: { start: { line: 43, column: 35 }, end: { line: 43, column: 47 } }, type: "default-arg", locations: [{ start: { line: 43, column: 43 }, end: { line: 43, column: 47 } }], line: 43 }, "3": { loc: { start: { line: 60, column: 63 }, end: { line: 60, column: 116 } }, type: "binary-expr", locations: [{ start: { line: 60, column: 63 }, end: { line: 60, column: 84 } }, { start: { line: 60, column: 88 }, end: { line: 60, column: 116 } }], line: 60 }, "4": { loc: { start: { line: 67, column: 63 }, end: { line: 67, column: 109 } }, type: "binary-expr", locations: [{ start: { line: 67, column: 63 }, end: { line: 67, column: 80 } }, { start: { line: 67, column: 84 }, end: { line: 67, column: 109 } }], line: 67 }, "5": { loc: { start: { line: 79, column: 66 }, end: { line: 79, column: 106 } }, type: "binary-expr", locations: [{ start: { line: 79, column: 66 }, end: { line: 79, column: 83 } }, { start: { line: 79, column: 87 }, end: { line: 79, column: 106 } }], line: 79 }, "6": { loc: { start: { line: 82, column: 2 }, end: { line: 119, column: 3 } }, type: "if", locations: [{ start: { line: 82, column: 2 }, end: { line: 119, column: 3 } }, { start: { line: 82, column: 2 }, end: { line: 119, column: 3 } }], line: 82 }, "7": { loc: { start: { line: 83, column: 31 }, end: { line: 83, column: 107 } }, type: "binary-expr", locations: [{ start: { line: 83, column: 31 }, end: { line: 83, column: 54 } }, { start: { line: 83, column: 59 }, end: { line: 83, column: 80 } }, { start: { line: 83, column: 84 }, end: { line: 83, column: 106 } }], line: 83 }, "8": { loc: { start: { line: 85, column: 4 }, end: { line: 87, column: 5 } }, type: "if", locations: [{ start: { line: 85, column: 4 }, end: { line: 87, column: 5 } }, { start: { line: 85, column: 4 }, end: { line: 87, column: 5 } }], line: 85 }, "9": { loc: { start: { line: 96, column: 8 }, end: { line: 96, column: 34 } }, type: "if", locations: [{ start: { line: 96, column: 8 }, end: { line: 96, column: 34 } }, { start: { line: 96, column: 8 }, end: { line: 96, column: 34 } }], line: 96 }, "10": { loc: { start: { line: 109, column: 8 }, end: { line: 109, column: 34 } }, type: "if", locations: [{ start: { line: 109, column: 8 }, end: { line: 109, column: 34 } }, { start: { line: 109, column: 8 }, end: { line: 109, column: 34 } }], line: 109 }, "11": { loc: { start: { line: 170, column: 8 }, end: { line: 173, column: 9 } }, type: "if", locations: [{ start: { line: 170, column: 8 }, end: { line: 173, column: 9 } }, { start: { line: 170, column: 8 }, end: { line: 173, column: 9 } }], line: 170 }, "12": { loc: { start: { line: 191, column: 66 }, end: { line: 191, column: 109 } }, type: "cond-expr", locations: [{ start: { line: 191, column: 81 }, end: { line: 191, column: 104 } }, { start: { line: 191, column: 107 }, end: { line: 191, column: 109 } }], line: 191 }, "13": { loc: { start: { line: 198, column: 6 }, end: { line: 206, column: 7 } }, type: "if", locations: [{ start: { line: 198, column: 6 }, end: { line: 206, column: 7 } }, { start: { line: 198, column: 6 }, end: { line: 206, column: 7 } }], line: 198 }, "14": { loc: { start: { line: 200, column: 8 }, end: { line: 202, column: 9 } }, type: "if", locations: [{ start: { line: 200, column: 8 }, end: { line: 202, column: 9 } }, { start: { line: 200, column: 8 }, end: { line: 202, column: 9 } }], line: 200 }, "15": { loc: { start: { line: 208, column: 30 }, end: { line: 208, column: 42 } }, type: "binary-expr", locations: [{ start: { line: 208, column: 30 }, end: { line: 208, column: 36 } }, { start: { line: 208, column: 40 }, end: { line: 208, column: 42 } }], line: 208 } }, s: { "0": 0, "1": 0, "2": 0, "3": 0, "4": 0, "5": 0, "6": 0, "7": 0, "8": 0, "9": 0, "10": 0, "11": 0, "12": 0, "13": 0, "14": 0, "15": 0, "16": 0, "17": 0, "18": 0, "19": 0, "20": 0, "21": 0, "22": 0, "23": 0, "24": 0, "25": 0, "26": 0, "27": 0, "28": 0, "29": 0, "30": 0, "31": 0, "32": 0, "33": 0, "34": 0, "35": 0, "36": 0, "37": 0, "38": 0, "39": 0, "40": 0, "41": 0, "42": 0, "43": 0, "44": 0, "45": 0, "46": 0, "47": 0, "48": 0, "49": 0, "50": 0, "51": 0, "52": 0, "53": 0, "54": 0, "55": 0, "56": 0, "57": 0, "58": 0, "59": 0, "60": 0, "61": 0, "62": 0, "63": 0, "64": 0, "65": 0, "66": 0, "67": 0, "68": 0, "69": 0 }, f: { "0": 0, "1": 0, "2": 0, "3": 0, "4": 0, "5": 0, "6": 0, "7": 0, "8": 0, "9": 0, "10": 0, "11": 0, "12": 0, "13": 0, "14": 0, "15": 0, "16": 0, "17": 0, "18": 0, "19": 0, "20": 0, "21": 0, "22": 0, "23": 0, "24": 0, "25": 0, "26": 0 }, b: { "0": [0, 0], "1": [0, 0], "2": [0], "3": [0, 0], "4": [0, 0], "5": [0, 0], "6": [0, 0], "7": [0, 0, 0], "8": [0, 0], "9": [0, 0], "10": [0, 0], "11": [0, 0], "12": [0, 0], "13": [0, 0], "14": [0, 0], "15": [0, 0] }, inputSourceMap: { version: 3, sources: ["lib/evm/selectors/index.js"], names: ["debug", "WORD_SIZE", "createStepSelectors", "step", "state", "base", "trace", "gasCost", "op", "pc", "programCounter", "isJump", "indexOf", "isCall", "isCreate", "isHalting", "isRelative", "path", "startsWith", "callAddress", "matches", "stack", "address", "length", "substring", "createBinary", "memory", "offset", "parseInt", "join", "evm", "info", "contexts", "byContext", "instances", "byAddress", "binaries", "_", "byBinary", "search", "binary", "threshold", "results", "map", "knownBinary", "context", "distance", "levenshtein", "get", "filter", "sort", "a", "b", "current", "callstack", "proc", "call", "record", "param", "next"], mappings: "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", file: "index.js", sourceRoot: "/Users/gnidan/src/work/truffle/packages/truffle-debugger", sourcesContent: ["import debugModule from \"debug\";\nconst debug = debugModule(\"debugger:evm:selectors\");\n\nimport { createSelectorTree, createLeaf } from \"reselect-tree\";\nimport levenshtein from \"fast-levenshtein\";\n\nimport trace from \"lib/trace/selectors\";\n\nconst WORD_SIZE = 0x20;\n\n/**\n * create EVM-level selectors for a given trace step selector\n * may specify additional selectors to include\n */\nfunction createStepSelectors(step, state = null) {\n  let base = {\n    /**\n     * .trace\n     *\n     * trace step info related to operation\n     */\n    trace: createLeaf(\n      [step], ({gasCost, op, pc}) => ({gasCost, op, pc})\n    ),\n\n    /**\n     * .programCounter\n     */\n    programCounter: createLeaf(\n      [\"./trace\"], (step) => step.pc\n    ),\n\n    /**\n     * .isJump\n     */\n    isJump: createLeaf(\n      [\"./trace\"], (step) => (\n        step.op != \"JUMPDEST\" && step.op.indexOf(\"JUMP\") == 0\n      )\n    ),\n\n    /**\n     * .isCall\n     *\n     * whether the opcode will switch to another calling context\n     */\n    isCall: createLeaf(\n      [\"./trace\"], (step) => step.op == \"CALL\" || step.op == \"DELEGATECALL\"\n    ),\n\n    /**\n     * .isCreate\n     */\n    isCreate: createLeaf(\n      [\"./trace\"], (step) => step.op == \"CREATE\"\n    ),\n\n    /**\n     * .isHalting\n     *\n     * whether the instruction halts or returns from a calling context\n     */\n    isHalting: createLeaf(\n      [\"./trace\"], (step) => step.op == \"STOP\" || step.op == \"RETURN\"\n    )\n  };\n\n  if (state) {\n    const isRelative = (path) => (\n      typeof path == \"string\" && (\n        path.startsWith(\"./\") || path.startsWith(\"../\")\n      )\n    );\n\n    if (isRelative(state)) {\n      state = `../${state}`;\n    }\n\n    Object.assign(base, {\n      /**\n       * .callAddress\n       *\n       * address transferred to by call operation\n       */\n      callAddress: createLeaf(\n        [\"./isCall\", \"./trace\", state],\n\n        (matches, step, {stack}) => {\n          if (!matches) return null;\n\n          let address = stack[stack.length - 2]\n          address = \"0x\" + address.substring(24);\n          return address;\n        }\n      ),\n\n      /**\n       * .createBinary\n       *\n       * binary code to execute via create operation\n       */\n      createBinary: createLeaf(\n        [\"./isCreate\", \"./trace\", state],\n\n        (matches, step, {stack, memory}) => {\n          if (!matches) return null;\n\n          // Get the code that's going to be created from memory.\n          // Note we multiply by 2 because these offsets are in bytes.\n          const offset = parseInt(stack[stack.length - 2], 16) * 2;\n          const length = parseInt(stack[stack.length - 3], 16) * 2;\n\n          return \"0x\" + memory.join(\"\").substring(offset, offset + length);\n        }\n      )\n    });\n  }\n\n  return base;\n}\n\nconst evm = createSelectorTree({\n  /**\n   * evm.state\n   */\n  state: (state) => state.evm,\n\n  /**\n   * evm.info\n   */\n  info: {\n    /**\n     * evm.info.contexts\n     */\n    contexts: createLeaf(['/state'], (state) => state.info.contexts.byContext),\n\n    /**\n     * evm.info.instances\n     */\n    instances: createLeaf(['/state'], (state) => state.info.instances.byAddress),\n\n    /**\n     * evm.info.binaries\n     */\n    binaries: {\n      _: createLeaf(['/state'], (state) => state.info.contexts.byBinary),\n\n      /**\n       * evm.info.binaries.search\n       *\n       * returns function (binary) => context\n       */\n      search: createLeaf(['./_'], (binaries) =>\n        (binary) => {\n          // search for a given binary based on levenshtein distances to\n          // existing (known) context binaries.\n          //\n          // levenshtein distance is the number of textual modifications\n          // (insert, change, delete) required to convert string a to b\n          //\n          // filter by a percentage threshold\n          const threshold = 0.25;\n\n          const results = Object.entries(binaries)\n            .map( ([ knownBinary, { context }]) => ({\n              context,\n              distance: levenshtein.get(knownBinary, binary)\n            }))\n            .filter( ({ distance }) => distance <= binary.length * threshold )\n            .sort( ({distance: a}, {distance: b}) => a - b );\n\n          if (results[0]) {\n            const { context } = results[0];\n            return { context };\n          }\n        }\n      )\n    }\n  },\n\n  /**\n   * evm.current\n   */\n  current: {\n\n    /**\n     * evm.current.callstack\n     */\n    callstack: (state) => state.evm.proc.callstack,\n\n    /**\n     * evm.current.call\n     */\n    call: createLeaf(\n      [\"./callstack\"],\n\n      (stack) => stack.length ? stack[stack.length - 1] : {}\n    ),\n\n    /**\n     * evm.current.context\n     */\n    context: createLeaf(\n      [\"./call\", \"/info/instances\", \"/info/binaries/search\", \"/info/contexts\"],\n\n      ({address, binary}, instances, search, contexts) => {\n        let record;\n        if (address) {\n          record = instances[address];\n          if (!record) {\n            return { address };\n          }\n          binary = record.binary\n        } else {\n          record = search(binary);\n        }\n\n        let context = contexts[(record || {}).context];\n\n        return {\n          ...context,\n          binary\n        }\n      }\n    ),\n\n    /**\n     * evm.current.state\n     *\n     * evm state info: as of last operation, before op defined in step\n     */\n    state: Object.assign({}, ...(\n      [\n        \"depth\",\n        \"error\",\n        \"gas\",\n        \"memory\",\n        \"stack\",\n        \"storage\"\n      ].map( (param) => ({\n        [param]: createLeaf([trace.step], (step) => step[param])\n      }))\n    )),\n\n    /**\n     * evm.current.step\n     */\n    step: createStepSelectors(trace.step, \"./state\")\n  },\n\n  /**\n   * evm.next\n   */\n  next: {\n\n    /**\n     * evm.next.state\n     *\n     * evm state as a result of next step operation\n     */\n    state: Object.assign({}, ...(\n      [\n        \"depth\",\n        \"error\",\n        \"gas\",\n        \"memory\",\n        \"stack\",\n        \"storage\"\n      ].map( (param) => ({\n        [param]: createLeaf([trace.next], (step) => step[param])\n      }))\n    )),\n\n    step: createStepSelectors(trace.next, \"./state\")\n  }\n});\n\nexport default evm;\n"] }, _coverageSchema: "332fd63041d2c1bcb487cc26dd0d5f7d97098a6c" },
      coverage = global[gcv] || (global[gcv] = {});if (coverage[path] && coverage[path].hash === hash) {
    return coverage[path];
  }coverageData.hash = hash;return coverage[path] = coverageData;
}();cov_251n154c7v.s[0]++;Object.defineProperty(exports, "__esModule", { value: true });var _extends2 = (cov_251n154c7v.s[1]++, __webpack_require__(2));var _extends3 = (cov_251n154c7v.s[2]++, _interopRequireDefault(_extends2));var _entries = (cov_251n154c7v.s[3]++, __webpack_require__(1));var _entries2 = (cov_251n154c7v.s[4]++, _interopRequireDefault(_entries));var _assign = (cov_251n154c7v.s[5]++, __webpack_require__(3));var _assign2 = (cov_251n154c7v.s[6]++, _interopRequireDefault(_assign));var _debug = (cov_251n154c7v.s[7]++, __webpack_require__(0));var _debug2 = (cov_251n154c7v.s[8]++, _interopRequireDefault(_debug));var _reselectTree = (cov_251n154c7v.s[9]++, __webpack_require__(9));var _fastLevenshtein = (cov_251n154c7v.s[10]++, __webpack_require__(50));var _fastLevenshtein2 = (cov_251n154c7v.s[11]++, _interopRequireDefault(_fastLevenshtein));var _selectors = (cov_251n154c7v.s[12]++, __webpack_require__(19));var _selectors2 = (cov_251n154c7v.s[13]++, _interopRequireDefault(_selectors));function _interopRequireDefault(obj) {
  cov_251n154c7v.f[0]++;cov_251n154c7v.s[14]++;return (cov_251n154c7v.b[1][0]++, obj) && (cov_251n154c7v.b[1][1]++, obj.__esModule) ? (cov_251n154c7v.b[0][0]++, obj) : (cov_251n154c7v.b[0][1]++, { default: obj });
}const debug = (cov_251n154c7v.s[15]++, (0, _debug2.default)("debugger:evm:selectors"));const WORD_SIZE = (cov_251n154c7v.s[16]++, 0x20);function createStepSelectors(step, state = (cov_251n154c7v.b[2][0]++, null)) {
  cov_251n154c7v.f[1]++;let base = (cov_251n154c7v.s[17]++, { trace: (0, _reselectTree.createLeaf)([step], ({ gasCost, op, pc }) => {
      cov_251n154c7v.f[2]++;cov_251n154c7v.s[18]++;return { gasCost, op, pc };
    }), programCounter: (0, _reselectTree.createLeaf)(["./trace"], step => {
      cov_251n154c7v.f[3]++;cov_251n154c7v.s[19]++;return step.pc;
    }), isJump: (0, _reselectTree.createLeaf)(["./trace"], step => {
      cov_251n154c7v.f[4]++;cov_251n154c7v.s[20]++;return (cov_251n154c7v.b[3][0]++, step.op != "JUMPDEST") && (cov_251n154c7v.b[3][1]++, step.op.indexOf("JUMP") == 0);
    }), isCall: (0, _reselectTree.createLeaf)(["./trace"], step => {
      cov_251n154c7v.f[5]++;cov_251n154c7v.s[21]++;return (cov_251n154c7v.b[4][0]++, step.op == "CALL") || (cov_251n154c7v.b[4][1]++, step.op == "DELEGATECALL");
    }), isCreate: (0, _reselectTree.createLeaf)(["./trace"], step => {
      cov_251n154c7v.f[6]++;cov_251n154c7v.s[22]++;return step.op == "CREATE";
    }), isHalting: (0, _reselectTree.createLeaf)(["./trace"], step => {
      cov_251n154c7v.f[7]++;cov_251n154c7v.s[23]++;return (cov_251n154c7v.b[5][0]++, step.op == "STOP") || (cov_251n154c7v.b[5][1]++, step.op == "RETURN");
    }) });cov_251n154c7v.s[24]++;if (state) {
    cov_251n154c7v.b[6][0]++;cov_251n154c7v.s[25]++;const isRelative = path => {
      cov_251n154c7v.f[8]++;cov_251n154c7v.s[26]++;return (cov_251n154c7v.b[7][0]++, typeof path == "string") && ((cov_251n154c7v.b[7][1]++, path.startsWith("./")) || (cov_251n154c7v.b[7][2]++, path.startsWith("../")));
    };cov_251n154c7v.s[27]++;if (isRelative(state)) {
      cov_251n154c7v.b[8][0]++;cov_251n154c7v.s[28]++;state = `../${state}`;
    } else {
      cov_251n154c7v.b[8][1]++;
    }cov_251n154c7v.s[29]++;(0, _assign2.default)(base, { callAddress: (0, _reselectTree.createLeaf)(["./isCall", "./trace", state], (matches, step, { stack }) => {
        cov_251n154c7v.f[9]++;cov_251n154c7v.s[30]++;if (!matches) {
          cov_251n154c7v.b[9][0]++;cov_251n154c7v.s[31]++;return null;
        } else {
          cov_251n154c7v.b[9][1]++;
        }let address = (cov_251n154c7v.s[32]++, stack[stack.length - 2]);cov_251n154c7v.s[33]++;address = "0x" + address.substring(24);cov_251n154c7v.s[34]++;return address;
      }), createBinary: (0, _reselectTree.createLeaf)(["./isCreate", "./trace", state], (matches, step, { stack, memory }) => {
        cov_251n154c7v.f[10]++;cov_251n154c7v.s[35]++;if (!matches) {
          cov_251n154c7v.b[10][0]++;cov_251n154c7v.s[36]++;return null;
        } else {
          cov_251n154c7v.b[10][1]++;
        }const offset = (cov_251n154c7v.s[37]++, parseInt(stack[stack.length - 2], 16) * 2);const length = (cov_251n154c7v.s[38]++, parseInt(stack[stack.length - 3], 16) * 2);cov_251n154c7v.s[39]++;return "0x" + memory.join("").substring(offset, offset + length);
      }) });
  } else {
    cov_251n154c7v.b[6][1]++;
  }cov_251n154c7v.s[40]++;return base;
}const evm = (cov_251n154c7v.s[41]++, (0, _reselectTree.createSelectorTree)({ state: state => {
    cov_251n154c7v.f[11]++;cov_251n154c7v.s[42]++;return state.evm;
  }, info: { contexts: (0, _reselectTree.createLeaf)(['/state'], state => {
      cov_251n154c7v.f[12]++;cov_251n154c7v.s[43]++;return state.info.contexts.byContext;
    }), instances: (0, _reselectTree.createLeaf)(['/state'], state => {
      cov_251n154c7v.f[13]++;cov_251n154c7v.s[44]++;return state.info.instances.byAddress;
    }), binaries: { _: (0, _reselectTree.createLeaf)(['/state'], state => {
        cov_251n154c7v.f[14]++;cov_251n154c7v.s[45]++;return state.info.contexts.byBinary;
      }), search: (0, _reselectTree.createLeaf)(['./_'], binaries => {
        cov_251n154c7v.f[15]++;cov_251n154c7v.s[46]++;return binary => {
          cov_251n154c7v.f[16]++;const threshold = (cov_251n154c7v.s[47]++, 0.25);const results = (cov_251n154c7v.s[48]++, (0, _entries2.default)(binaries).map(([knownBinary, { context }]) => {
            cov_251n154c7v.f[17]++;cov_251n154c7v.s[49]++;return { context, distance: _fastLevenshtein2.default.get(knownBinary, binary) };
          }).filter(({ distance }) => {
            cov_251n154c7v.f[18]++;cov_251n154c7v.s[50]++;return distance <= binary.length * threshold;
          }).sort(({ distance: a }, { distance: b }) => {
            cov_251n154c7v.f[19]++;cov_251n154c7v.s[51]++;return a - b;
          }));cov_251n154c7v.s[52]++;if (results[0]) {
            cov_251n154c7v.b[11][0]++;const { context } = (cov_251n154c7v.s[53]++, results[0]);cov_251n154c7v.s[54]++;return { context };
          } else {
            cov_251n154c7v.b[11][1]++;
          }
        };
      }) } }, current: { callstack: state => {
      cov_251n154c7v.f[20]++;cov_251n154c7v.s[55]++;return state.evm.proc.callstack;
    }, call: (0, _reselectTree.createLeaf)(["./callstack"], stack => {
      cov_251n154c7v.f[21]++;cov_251n154c7v.s[56]++;return stack.length ? (cov_251n154c7v.b[12][0]++, stack[stack.length - 1]) : (cov_251n154c7v.b[12][1]++, {});
    }), context: (0, _reselectTree.createLeaf)(["./call", "/info/instances", "/info/binaries/search", "/info/contexts"], ({ address, binary }, instances, search, contexts) => {
      cov_251n154c7v.f[22]++;let record;cov_251n154c7v.s[57]++;if (address) {
        cov_251n154c7v.b[13][0]++;cov_251n154c7v.s[58]++;record = instances[address];cov_251n154c7v.s[59]++;if (!record) {
          cov_251n154c7v.b[14][0]++;cov_251n154c7v.s[60]++;return { address };
        } else {
          cov_251n154c7v.b[14][1]++;
        }cov_251n154c7v.s[61]++;binary = record.binary;
      } else {
        cov_251n154c7v.b[13][1]++;cov_251n154c7v.s[62]++;record = search(binary);
      }let context = (cov_251n154c7v.s[63]++, contexts[((cov_251n154c7v.b[15][0]++, record) || (cov_251n154c7v.b[15][1]++, {})).context]);cov_251n154c7v.s[64]++;return (0, _extends3.default)({}, context, { binary });
    }), state: (0, _assign2.default)({}, ...["depth", "error", "gas", "memory", "stack", "storage"].map(param => {
      cov_251n154c7v.f[23]++;cov_251n154c7v.s[65]++;return { [param]: (0, _reselectTree.createLeaf)([_selectors2.default.step], step => {
          cov_251n154c7v.f[24]++;cov_251n154c7v.s[66]++;return step[param];
        }) };
    })), step: createStepSelectors(_selectors2.default.step, "./state") }, next: { state: (0, _assign2.default)({}, ...["depth", "error", "gas", "memory", "stack", "storage"].map(param => {
      cov_251n154c7v.f[25]++;cov_251n154c7v.s[67]++;return { [param]: (0, _reselectTree.createLeaf)([_selectors2.default.next], step => {
          cov_251n154c7v.f[26]++;cov_251n154c7v.s[68]++;return step[param];
        }) };
    })), step: createStepSelectors(_selectors2.default.next, "./state") } }));cov_251n154c7v.s[69]++;exports.default = evm;

/***/ }),
/* 6 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var cov_1iyo6c3ahx = function () {
  var path = "/Users/gnidan/src/work/truffle/packages/truffle-debugger/lib/solidity/selectors/index.js",
      hash = "824898185633b01c88bfc29c43a42a1ed68ac2ea",
      Function = function () {}.constructor,
      global = new Function('return this')(),
      gcv = "__coverage__",
      coverageData = { path: "/Users/gnidan/src/work/truffle/packages/truffle-debugger/lib/solidity/selectors/index.js", statementMap: { "0": { start: { line: 3, column: 0 }, end: { line: 5, column: 3 } }, "1": { start: { line: 7, column: 16 }, end: { line: 7, column: 56 } }, "2": { start: { line: 9, column: 16 }, end: { line: 9, column: 49 } }, "3": { start: { line: 11, column: 15 }, end: { line: 11, column: 62 } }, "4": { start: { line: 13, column: 16 }, end: { line: 13, column: 48 } }, "5": { start: { line: 15, column: 14 }, end: { line: 15, column: 60 } }, "6": { start: { line: 17, column: 15 }, end: { line: 17, column: 46 } }, "7": { start: { line: 19, column: 13 }, end: { line: 19, column: 29 } }, "8": { start: { line: 21, column: 14 }, end: { line: 21, column: 44 } }, "9": { start: { line: 23, column: 20 }, end: { line: 23, column: 44 } }, "10": { start: { line: 25, column: 28 }, end: { line: 25, column: 61 } }, "11": { start: { line: 27, column: 29 }, end: { line: 27, column: 74 } }, "12": { start: { line: 29, column: 24 }, end: { line: 29, column: 53 } }, "13": { start: { line: 31, column: 25 }, end: { line: 31, column: 66 } }, "14": { start: { line: 33, column: 17 }, end: { line: 33, column: 45 } }, "15": { start: { line: 35, column: 18 }, end: { line: 35, column: 52 } }, "16": { start: { line: 37, column: 39 }, end: { line: 37, column: 93 } }, "17": { start: { line: 39, column: 14 }, end: { line: 39, column: 65 } }, "18": { start: { line: 42, column: 2 }, end: { line: 53, column: 4 } }, "19": { start: { line: 56, column: 15 }, end: { line: 226, column: 2 } }, "20": { start: { line: 60, column: 18 }, end: { line: 60, column: 32 } }, "21": { start: { line: 69, column: 64 }, end: { line: 69, column: 87 } }, "22": { start: { line: 74, column: 67 }, end: { line: 74, column: 98 } }, "23": { start: { line: 85, column: 133 }, end: { line: 85, column: 158 } }, "24": { start: { line: 90, column: 28 }, end: { line: 90, column: 61 } }, "25": { start: { line: 96, column: 6 }, end: { line: 98, column: 7 } }, "26": { start: { line: 97, column: 8 }, end: { line: 97, column: 18 } }, "27": { start: { line: 100, column: 25 }, end: { line: 100, column: 69 } }, "28": { start: { line: 102, column: 6 }, end: { line: 114, column: 7 } }, "29": { start: { line: 110, column: 8 }, end: { line: 110, column: 23 } }, "30": { start: { line: 111, column: 8 }, end: { line: 113, column: 9 } }, "31": { start: { line: 112, column: 10 }, end: { line: 112, column: 46 } }, "32": { start: { line: 116, column: 34 }, end: { line: 118, column: 10 } }, "33": { start: { line: 116, column: 122 }, end: { line: 118, column: 7 } }, "34": { start: { line: 119, column: 35 }, end: { line: 119, column: 102 } }, "35": { start: { line: 121, column: 24 }, end: { line: 121, column: 54 } }, "36": { start: { line: 122, column: 6 }, end: { line: 122, column: 43 } }, "37": { start: { line: 124, column: 6 }, end: { line: 158, column: 9 } }, "38": { start: { line: 129, column: 26 }, end: { line: 129, column: 61 } }, "39": { start: { line: 131, column: 8 }, end: { line: 134, column: 10 } }, "40": { start: { line: 139, column: 68 }, end: { line: 139, column: 77 } }, "41": { start: { line: 140, column: 37 }, end: { line: 140, column: 70 } }, "42": { start: { line: 141, column: 22 }, end: { line: 144, column: 9 } }, "43": { start: { line: 146, column: 8 }, end: { line: 148, column: 9 } }, "44": { start: { line: 147, column: 10 }, end: { line: 147, column: 43 } }, "45": { start: { line: 150, column: 8 }, end: { line: 157, column: 11 } }, "46": { start: { line: 165, column: 16 }, end: { line: 165, column: 18 } }, "47": { start: { line: 166, column: 6 }, end: { line: 168, column: 9 } }, "48": { start: { line: 167, column: 8 }, end: { line: 167, column: 42 } }, "49": { start: { line: 171, column: 21 }, end: { line: 171, column: 25 } }, "50": { start: { line: 172, column: 6 }, end: { line: 178, column: 7 } }, "51": { start: { line: 173, column: 8 }, end: { line: 177, column: 9 } }, "52": { start: { line: 174, column: 10 }, end: { line: 174, column: 33 } }, "53": { start: { line: 176, column: 10 }, end: { line: 176, column: 29 } }, "54": { start: { line: 179, column: 6 }, end: { line: 179, column: 17 } }, "55": { start: { line: 185, column: 144 }, end: { line: 185, column: 157 } }, "56": { start: { line: 190, column: 105 }, end: { line: 190, column: 122 } }, "57": { start: { line: 201, column: 6 }, end: { line: 203, column: 7 } }, "58": { start: { line: 202, column: 8 }, end: { line: 202, column: 20 } }, "59": { start: { line: 205, column: 6 }, end: { line: 205, column: 29 } }, "60": { start: { line: 206, column: 6 }, end: { line: 206, column: 23 } }, "61": { start: { line: 208, column: 6 }, end: { line: 208, column: 103 } }, "62": { start: { line: 214, column: 81 }, end: { line: 214, column: 115 } }, "63": { start: { line: 219, column: 97 }, end: { line: 219, column: 103 } }, "64": { start: { line: 224, column: 80 }, end: { line: 224, column: 93 } }, "65": { start: { line: 228, column: 0 }, end: { line: 228, column: 27 } } }, fnMap: { "0": { name: "_interopRequireDefault", decl: { start: { line: 37, column: 9 }, end: { line: 37, column: 31 } }, loc: { start: { line: 37, column: 37 }, end: { line: 37, column: 95 } }, line: 37 }, "1": { name: "getSourceRange", decl: { start: { line: 41, column: 9 }, end: { line: 41, column: 23 } }, loc: { start: { line: 41, column: 42 }, end: { line: 54, column: 1 } }, line: 41 }, "2": { name: "(anonymous_2)", decl: { start: { line: 60, column: 9 }, end: { line: 60, column: 10 } }, loc: { start: { line: 60, column: 18 }, end: { line: 60, column: 32 } }, line: 60 }, "3": { name: "(anonymous_3)", decl: { start: { line: 69, column: 55 }, end: { line: 69, column: 56 } }, loc: { start: { line: 69, column: 64 }, end: { line: 69, column: 87 } }, line: 69 }, "4": { name: "(anonymous_4)", decl: { start: { line: 74, column: 58 }, end: { line: 74, column: 59 } }, loc: { start: { line: 74, column: 67 }, end: { line: 74, column: 98 } }, line: 74 }, "5": { name: "(anonymous_5)", decl: { start: { line: 85, column: 104 }, end: { line: 85, column: 105 } }, loc: { start: { line: 85, column: 133 }, end: { line: 85, column: 158 } }, line: 85 }, "6": { name: "(anonymous_6)", decl: { start: { line: 90, column: 19 }, end: { line: 90, column: 20 } }, loc: { start: { line: 90, column: 28 }, end: { line: 90, column: 61 } }, line: 90 }, "7": { name: "(anonymous_7)", decl: { start: { line: 95, column: 119 }, end: { line: 95, column: 120 } }, loc: { start: { line: 95, column: 159 }, end: { line: 159, column: 5 } }, line: 95 }, "8": { name: "(anonymous_8)", decl: { start: { line: 116, column: 99 }, end: { line: 116, column: 100 } }, loc: { start: { line: 116, column: 122 }, end: { line: 118, column: 7 } }, line: 116 }, "9": { name: "(anonymous_9)", decl: { start: { line: 124, column: 30 }, end: { line: 124, column: 31 } }, loc: { start: { line: 124, column: 54 }, end: { line: 135, column: 7 } }, line: 124 }, "10": { name: "(anonymous_10)", decl: { start: { line: 135, column: 13 }, end: { line: 135, column: 14 } }, loc: { start: { line: 135, column: 45 }, end: { line: 158, column: 7 } }, line: 135 }, "11": { name: "(anonymous_11)", decl: { start: { line: 164, column: 83 }, end: { line: 164, column: 84 } }, loc: { start: { line: 164, column: 99 }, end: { line: 180, column: 5 } }, line: 164 }, "12": { name: "(anonymous_12)", decl: { start: { line: 166, column: 27 }, end: { line: 166, column: 28 } }, loc: { start: { line: 166, column: 50 }, end: { line: 168, column: 7 } }, line: 166 }, "13": { name: "(anonymous_13)", decl: { start: { line: 185, column: 131 }, end: { line: 185, column: 132 } }, loc: { start: { line: 185, column: 144 }, end: { line: 185, column: 157 } }, line: 185 }, "14": { name: "(anonymous_14)", decl: { start: { line: 190, column: 78 }, end: { line: 190, column: 79 } }, loc: { start: { line: 190, column: 105 }, end: { line: 190, column: 122 } }, line: 190 }, "15": { name: "(anonymous_15)", decl: { start: { line: 200, column: 184 }, end: { line: 200, column: 185 } }, loc: { start: { line: 200, column: 208 }, end: { line: 209, column: 5 } }, line: 200 }, "16": { name: "(anonymous_16)", decl: { start: { line: 214, column: 66 }, end: { line: 214, column: 67 } }, loc: { start: { line: 214, column: 81 }, end: { line: 214, column: 115 } }, line: 214 }, "17": { name: "(anonymous_17)", decl: { start: { line: 219, column: 87 }, end: { line: 219, column: 88 } }, loc: { start: { line: 219, column: 97 }, end: { line: 219, column: 103 } }, line: 219 }, "18": { name: "(anonymous_18)", decl: { start: { line: 224, column: 68 }, end: { line: 224, column: 69 } }, loc: { start: { line: 224, column: 80 }, end: { line: 224, column: 93 } }, line: 224 } }, branchMap: { "0": { loc: { start: { line: 37, column: 46 }, end: { line: 37, column: 92 } }, type: "cond-expr", locations: [{ start: { line: 37, column: 70 }, end: { line: 37, column: 73 } }, { start: { line: 37, column: 76 }, end: { line: 37, column: 92 } }], line: 37 }, "1": { loc: { start: { line: 37, column: 46 }, end: { line: 37, column: 67 } }, type: "binary-expr", locations: [{ start: { line: 37, column: 46 }, end: { line: 37, column: 49 } }, { start: { line: 37, column: 53 }, end: { line: 37, column: 67 } }], line: 37 }, "2": { loc: { start: { line: 41, column: 24 }, end: { line: 41, column: 40 } }, type: "default-arg", locations: [{ start: { line: 41, column: 38 }, end: { line: 41, column: 40 } }], line: 41 }, "3": { loc: { start: { line: 43, column: 11 }, end: { line: 43, column: 33 } }, type: "binary-expr", locations: [{ start: { line: 43, column: 11 }, end: { line: 43, column: 28 } }, { start: { line: 43, column: 32 }, end: { line: 43, column: 33 } }], line: 43 }, "4": { loc: { start: { line: 44, column: 12 }, end: { line: 44, column: 35 } }, type: "binary-expr", locations: [{ start: { line: 44, column: 12 }, end: { line: 44, column: 30 } }, { start: { line: 44, column: 34 }, end: { line: 44, column: 35 } }], line: 44 }, "5": { loc: { start: { line: 45, column: 11 }, end: { line: 52, column: 5 } }, type: "binary-expr", locations: [{ start: { line: 45, column: 11 }, end: { line: 45, column: 28 } }, { start: { line: 45, column: 32 }, end: { line: 52, column: 5 } }], line: 45 }, "6": { loc: { start: { line: 85, column: 133 }, end: { line: 85, column: 158 } }, type: "binary-expr", locations: [{ start: { line: 85, column: 133 }, end: { line: 85, column: 152 } }, { start: { line: 85, column: 156 }, end: { line: 85, column: 158 } }], line: 85 }, "7": { loc: { start: { line: 96, column: 6 }, end: { line: 98, column: 7 } }, type: "if", locations: [{ start: { line: 96, column: 6 }, end: { line: 98, column: 7 } }, { start: { line: 96, column: 6 }, end: { line: 98, column: 7 } }], line: 96 }, "8": { loc: { start: { line: 102, column: 6 }, end: { line: 114, column: 7 } }, type: "if", locations: [{ start: { line: 102, column: 6 }, end: { line: 114, column: 7 } }, { start: { line: 102, column: 6 }, end: { line: 114, column: 7 } }], line: 102 }, "9": { loc: { start: { line: 117, column: 86 }, end: { line: 117, column: 98 } }, type: "binary-expr", locations: [{ start: { line: 117, column: 86 }, end: { line: 117, column: 92 } }, { start: { line: 117, column: 96 }, end: { line: 117, column: 98 } }], line: 117 }, "10": { loc: { start: { line: 129, column: 26 }, end: { line: 129, column: 61 } }, type: "binary-expr", locations: [{ start: { line: 129, column: 26 }, end: { line: 129, column: 55 } }, { start: { line: 129, column: 59 }, end: { line: 129, column: 61 } }], line: 129 }, "11": { loc: { start: { line: 139, column: 22 }, end: { line: 139, column: 31 } }, type: "default-arg", locations: [{ start: { line: 139, column: 30 }, end: { line: 139, column: 31 } }], line: 139 }, "12": { loc: { start: { line: 139, column: 33 }, end: { line: 139, column: 43 } }, type: "default-arg", locations: [{ start: { line: 139, column: 42 }, end: { line: 139, column: 43 } }], line: 139 }, "13": { loc: { start: { line: 139, column: 45 }, end: { line: 139, column: 63 } }, type: "default-arg", locations: [{ start: { line: 139, column: 52 }, end: { line: 139, column: 63 } }], line: 139 }, "14": { loc: { start: { line: 140, column: 37 }, end: { line: 140, column: 70 } }, type: "binary-expr", locations: [{ start: { line: 140, column: 37 }, end: { line: 140, column: 64 } }, { start: { line: 140, column: 68 }, end: { line: 140, column: 70 } }], line: 140 }, "15": { loc: { start: { line: 142, column: 17 }, end: { line: 142, column: 76 } }, type: "binary-expr", locations: [{ start: { line: 142, column: 17 }, end: { line: 142, column: 44 } }, { start: { line: 142, column: 48 }, end: { line: 142, column: 76 } }], line: 142 }, "16": { loc: { start: { line: 143, column: 15 }, end: { line: 143, column: 83 } }, type: "binary-expr", locations: [{ start: { line: 143, column: 15 }, end: { line: 143, column: 51 } }, { start: { line: 143, column: 55 }, end: { line: 143, column: 83 } }], line: 143 }, "17": { loc: { start: { line: 146, column: 8 }, end: { line: 148, column: 9 } }, type: "if", locations: [{ start: { line: 146, column: 8 }, end: { line: 148, column: 9 } }, { start: { line: 146, column: 8 }, end: { line: 148, column: 9 } }], line: 146 }, "18": { loc: { start: { line: 173, column: 8 }, end: { line: 177, column: 9 } }, type: "if", locations: [{ start: { line: 173, column: 8 }, end: { line: 177, column: 9 } }, { start: { line: 173, column: 8 }, end: { line: 177, column: 9 } }], line: 173 }, "19": { loc: { start: { line: 185, column: 144 }, end: { line: 185, column: 157 } }, type: "binary-expr", locations: [{ start: { line: 185, column: 144 }, end: { line: 185, column: 151 } }, { start: { line: 185, column: 155 }, end: { line: 185, column: 157 } }], line: 185 }, "20": { loc: { start: { line: 190, column: 105 }, end: { line: 190, column: 122 } }, type: "binary-expr", locations: [{ start: { line: 190, column: 105 }, end: { line: 190, column: 116 } }, { start: { line: 190, column: 120 }, end: { line: 190, column: 122 } }], line: 190 }, "21": { loc: { start: { line: 201, column: 6 }, end: { line: 203, column: 7 } }, type: "if", locations: [{ start: { line: 201, column: 6 }, end: { line: 203, column: 7 } }, { start: { line: 201, column: 6 }, end: { line: 203, column: 7 } }], line: 201 }, "22": { loc: { start: { line: 208, column: 13 }, end: { line: 208, column: 102 } }, type: "binary-expr", locations: [{ start: { line: 208, column: 13 }, end: { line: 208, column: 40 } }, { start: { line: 208, column: 44 }, end: { line: 208, column: 73 } }, { start: { line: 208, column: 77 }, end: { line: 208, column: 102 } }], line: 208 }, "23": { loc: { start: { line: 224, column: 69 }, end: { line: 224, column: 75 } }, type: "default-arg", locations: [{ start: { line: 224, column: 73 }, end: { line: 224, column: 75 } }], line: 224 }, "24": { loc: { start: { line: 224, column: 80 }, end: { line: 224, column: 93 } }, type: "binary-expr", locations: [{ start: { line: 224, column: 80 }, end: { line: 224, column: 86 } }, { start: { line: 224, column: 90 }, end: { line: 224, column: 93 } }], line: 224 } }, s: { "0": 0, "1": 0, "2": 0, "3": 0, "4": 0, "5": 0, "6": 0, "7": 0, "8": 0, "9": 0, "10": 0, "11": 0, "12": 0, "13": 0, "14": 0, "15": 0, "16": 0, "17": 0, "18": 0, "19": 0, "20": 0, "21": 0, "22": 0, "23": 0, "24": 0, "25": 0, "26": 0, "27": 0, "28": 0, "29": 0, "30": 0, "31": 0, "32": 0, "33": 0, "34": 0, "35": 0, "36": 0, "37": 0, "38": 0, "39": 0, "40": 0, "41": 0, "42": 0, "43": 0, "44": 0, "45": 0, "46": 0, "47": 0, "48": 0, "49": 0, "50": 0, "51": 0, "52": 0, "53": 0, "54": 0, "55": 0, "56": 0, "57": 0, "58": 0, "59": 0, "60": 0, "61": 0, "62": 0, "63": 0, "64": 0, "65": 0 }, f: { "0": 0, "1": 0, "2": 0, "3": 0, "4": 0, "5": 0, "6": 0, "7": 0, "8": 0, "9": 0, "10": 0, "11": 0, "12": 0, "13": 0, "14": 0, "15": 0, "16": 0, "17": 0, "18": 0 }, b: { "0": [0, 0], "1": [0, 0], "2": [0], "3": [0, 0], "4": [0, 0], "5": [0, 0], "6": [0, 0], "7": [0, 0], "8": [0, 0], "9": [0, 0], "10": [0, 0], "11": [0], "12": [0], "13": [0], "14": [0, 0], "15": [0, 0], "16": [0, 0], "17": [0, 0], "18": [0, 0], "19": [0, 0], "20": [0, 0], "21": [0, 0], "22": [0, 0, 0], "23": [0], "24": [0, 0] }, inputSourceMap: { version: 3, sources: ["lib/solidity/selectors/index.js"], names: ["debug", "getSourceRange", "instruction", "start", "length", "lines", "range", "line", "column", "end", "solidity", "state", "info", "sources", "byId", "sourceMaps", "byContext", "current", "sourceMap", "evm", "context", "functionDepth", "proc", "instructions", "binary", "CodeUtils", "parseCode", "i", "lineAndColumnMappings", "map", "id", "source", "SolidityUtils", "getCharacterOffsetToLineAndColumnMapping", "humanReadableSourceMap", "getHumanReadableSourceMap", "primaryFile", "file", "index", "jump", "lineAndColumnMapping", "instructionAtProgramCounter", "forEach", "pc", "lastSeen", "entries", "step", "programCounter", "sourceRange", "isSourceRangeFinal", "next", "isMultiline", "willJump", "isJump", "jumpDirection"], mappings: "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", file: "index.js", sourceRoot: "/Users/gnidan/src/work/truffle/packages/truffle-debugger", sourcesContent: ["import debugModule from \"debug\";\nconst debug = debugModule(\"debugger:solidity:selectors\");\n\nimport { createSelectorTree, createLeaf } from \"reselect-tree\";\nimport SolidityUtils from \"truffle-solidity-utils\";\nimport CodeUtils from \"truffle-code-utils\";\n\nimport evm from \"lib/evm/selectors\";\n\nfunction getSourceRange(instruction = {}) {\n  return {\n    start: instruction.start || 0,\n    length: instruction.length || 0,\n    lines: instruction.range || {\n      start: {\n        line: 0, column: 0\n      },\n      end: {\n        line: 0, column: 0\n      }\n    }\n  };\n}\n\nlet solidity = createSelectorTree({\n  /**\n   * solidity.state\n   */\n  state: (state) => state.solidity,\n\n  /**\n   * solidity.info\n   */\n  info: {\n    /**\n     * solidity.info.sources\n     */\n    sources: createLeaf(['/state'], (state) => state.info.sources.byId),\n\n    /**\n     * solidity.info.sourceMaps\n     */\n    sourceMaps: createLeaf(['/state'], (state) => state.info.sourceMaps.byContext)\n  },\n\n  /**\n   * solidity.current\n   */\n  current: {\n\n    /**\n     * solidity.current.sourceMap\n     */\n    sourceMap: createLeaf(\n      [evm.current.context, \"/info/sourceMaps\"],\n\n      ({context}, sourceMaps) => sourceMaps[context] || {}\n    ),\n\n    /**\n     * solidity.current.functionDepth\n     */\n    functionDepth: (state) => state.solidity.proc.functionDepth,\n\n    /**\n     * solidity.current.instructions\n     */\n    instructions: createLeaf(\n      [\"/info/sources\", evm.current.context, \"./sourceMap\"],\n\n      (sources, {binary}, {sourceMap}) => {\n        if (!binary) {\n          return [];\n        }\n\n        let instructions = CodeUtils.parseCode(binary);\n\n        if (!sourceMap) {\n          // Let's create a source map to use since none exists. This source map\n          // maps just as many ranges as there are instructions, and ensures every\n          // instruction is marked as \"jumping out\". This will ensure all\n          // available debugger commands step one instruction at a time.\n          //\n          // This is kindof a hack; perhaps this should be broken out into separate\n          // context types. TODO\n          sourceMap = \"\";\n          for (var i = 0; i < instructions.length; i++) {\n            sourceMap += i + \":\" + i + \":1:-1;\";\n          }\n        }\n\n        var lineAndColumnMappings = Object.assign({},\n          ...Object.entries(sources).map(\n            ([id, {source}]) => ({\n              [id]: SolidityUtils.getCharacterOffsetToLineAndColumnMapping(source || \"\")\n            })\n          )\n        );\n        var humanReadableSourceMap = SolidityUtils.getHumanReadableSourceMap(sourceMap);\n\n        let primaryFile = humanReadableSourceMap[0].file;\n        debug(\"primaryFile %o\", primaryFile);\n\n        return instructions\n          .map( (instruction, index) => {\n            // lookup source map by index and add `index` property to\n            // instruction\n            //\n\n            const sourceMap = humanReadableSourceMap[index] || {};\n\n            return {\n              instruction: { ...instruction, index },\n              sourceMap,\n            };\n          })\n          .map( ({ instruction, sourceMap}) => {\n            // add source map information to instruction, or defaults\n            //\n\n            const { jump, start = 0, length = 0, file = primaryFile } = sourceMap;\n            const lineAndColumnMapping = lineAndColumnMappings[file] || {};\n            const range = {\n              start: lineAndColumnMapping[start] ||\n                { line: null, column: null },\n              end: lineAndColumnMapping[start + length] ||\n                { line: null, column: null }\n            };\n\n            if (range.start.line === null) {\n              debug(\"sourceMap %o\", sourceMap);\n            }\n\n            return {\n              ...instruction,\n\n              jump,\n              start,\n              length,\n              file,\n              range\n            }\n          });\n      }\n    ),\n\n    /**\n     * solidity.current.instructionAtProgramCounter\n     */\n    instructionAtProgramCounter: createLeaf(\n      [\"./instructions\"],\n\n      (instructions) => {\n        let map = [];\n        instructions.forEach(function(instruction) {\n          map[instruction.pc] = instruction;\n        });\n\n        // fill in gaps in map by defaulting to the last known instruction\n        let lastSeen = null;\n        for (let [pc, instruction] of map.entries()) {\n          if (instruction) {\n            lastSeen = instruction;\n          } else {\n            map[pc] = lastSeen;\n          }\n        }\n        return map;\n      }\n    ),\n\n    /**\n     * solidity.current.instruction\n     */\n    instruction: createLeaf(\n      [\"./instructionAtProgramCounter\", evm.current.step.programCounter],\n\n      (map, pc) => map[pc] || {}\n    ),\n\n    /**\n     * solidity.current.source\n     */\n    source: createLeaf(\n      [\"/info/sources\", \"./instruction\"],\n\n      (sources, {file: id}) => sources[id] || {}\n    ),\n\n    /**\n     * solidity.current.sourceRange\n     */\n    sourceRange: createLeaf([\"./instruction\"], getSourceRange),\n\n    /**\n     * solidity.current.isSourceRangeFinal\n     */\n    isSourceRangeFinal: createLeaf(\n      [\n        \"./instructionAtProgramCounter\",\n        evm.current.step.programCounter,\n        evm.next.step.programCounter\n      ],\n\n      (map, current, next) => {\n        if (!map[next]) {\n          return true;\n        }\n\n        current = map[current];\n        next = map[next];\n\n        return (\n          current.start != next.start ||\n          current.length != next.length ||\n          current.file != next.file\n        );\n      }\n    ),\n\n    /**\n     * solidity.current.isMultiline\n     */\n    isMultiline: createLeaf(\n      [\"./sourceRange\"],\n\n      ( {lines} ) => lines.start.line != lines.end.line\n    ),\n\n    /**\n     * solidity.current.willJump\n     */\n    willJump: createLeaf([evm.current.step.isJump], (isJump) => isJump),\n\n    /**\n     * solidity.current.jumpDirection\n     */\n    jumpDirection: createLeaf(\n      [\"./instruction\"], (i = {}) => (i.jump || \"-\")\n    )\n  }\n});\n\nexport default solidity;\n"] }, _coverageSchema: "332fd63041d2c1bcb487cc26dd0d5f7d97098a6c" },
      coverage = global[gcv] || (global[gcv] = {});if (coverage[path] && coverage[path].hash === hash) {
    return coverage[path];
  }coverageData.hash = hash;return coverage[path] = coverageData;
}();cov_1iyo6c3ahx.s[0]++;Object.defineProperty(exports, "__esModule", { value: true });var _extends2 = (cov_1iyo6c3ahx.s[1]++, __webpack_require__(2));var _extends3 = (cov_1iyo6c3ahx.s[2]++, _interopRequireDefault(_extends2));var _entries = (cov_1iyo6c3ahx.s[3]++, __webpack_require__(1));var _entries2 = (cov_1iyo6c3ahx.s[4]++, _interopRequireDefault(_entries));var _assign = (cov_1iyo6c3ahx.s[5]++, __webpack_require__(3));var _assign2 = (cov_1iyo6c3ahx.s[6]++, _interopRequireDefault(_assign));var _debug = (cov_1iyo6c3ahx.s[7]++, __webpack_require__(0));var _debug2 = (cov_1iyo6c3ahx.s[8]++, _interopRequireDefault(_debug));var _reselectTree = (cov_1iyo6c3ahx.s[9]++, __webpack_require__(9));var _truffleSolidityUtils = (cov_1iyo6c3ahx.s[10]++, __webpack_require__(51));var _truffleSolidityUtils2 = (cov_1iyo6c3ahx.s[11]++, _interopRequireDefault(_truffleSolidityUtils));var _truffleCodeUtils = (cov_1iyo6c3ahx.s[12]++, __webpack_require__(52));var _truffleCodeUtils2 = (cov_1iyo6c3ahx.s[13]++, _interopRequireDefault(_truffleCodeUtils));var _selectors = (cov_1iyo6c3ahx.s[14]++, __webpack_require__(5));var _selectors2 = (cov_1iyo6c3ahx.s[15]++, _interopRequireDefault(_selectors));function _interopRequireDefault(obj) {
  cov_1iyo6c3ahx.f[0]++;cov_1iyo6c3ahx.s[16]++;return (cov_1iyo6c3ahx.b[1][0]++, obj) && (cov_1iyo6c3ahx.b[1][1]++, obj.__esModule) ? (cov_1iyo6c3ahx.b[0][0]++, obj) : (cov_1iyo6c3ahx.b[0][1]++, { default: obj });
}const debug = (cov_1iyo6c3ahx.s[17]++, (0, _debug2.default)("debugger:solidity:selectors"));function getSourceRange(instruction = (cov_1iyo6c3ahx.b[2][0]++, {})) {
  cov_1iyo6c3ahx.f[1]++;cov_1iyo6c3ahx.s[18]++;return { start: (cov_1iyo6c3ahx.b[3][0]++, instruction.start) || (cov_1iyo6c3ahx.b[3][1]++, 0), length: (cov_1iyo6c3ahx.b[4][0]++, instruction.length) || (cov_1iyo6c3ahx.b[4][1]++, 0), lines: (cov_1iyo6c3ahx.b[5][0]++, instruction.range) || (cov_1iyo6c3ahx.b[5][1]++, { start: { line: 0, column: 0 }, end: { line: 0, column: 0 } }) };
}let solidity = (cov_1iyo6c3ahx.s[19]++, (0, _reselectTree.createSelectorTree)({ state: state => {
    cov_1iyo6c3ahx.f[2]++;cov_1iyo6c3ahx.s[20]++;return state.solidity;
  }, info: { sources: (0, _reselectTree.createLeaf)(['/state'], state => {
      cov_1iyo6c3ahx.f[3]++;cov_1iyo6c3ahx.s[21]++;return state.info.sources.byId;
    }), sourceMaps: (0, _reselectTree.createLeaf)(['/state'], state => {
      cov_1iyo6c3ahx.f[4]++;cov_1iyo6c3ahx.s[22]++;return state.info.sourceMaps.byContext;
    }) }, current: { sourceMap: (0, _reselectTree.createLeaf)([_selectors2.default.current.context, "/info/sourceMaps"], ({ context }, sourceMaps) => {
      cov_1iyo6c3ahx.f[5]++;cov_1iyo6c3ahx.s[23]++;return (cov_1iyo6c3ahx.b[6][0]++, sourceMaps[context]) || (cov_1iyo6c3ahx.b[6][1]++, {});
    }), functionDepth: state => {
      cov_1iyo6c3ahx.f[6]++;cov_1iyo6c3ahx.s[24]++;return state.solidity.proc.functionDepth;
    }, instructions: (0, _reselectTree.createLeaf)(["/info/sources", _selectors2.default.current.context, "./sourceMap"], (sources, { binary }, { sourceMap }) => {
      cov_1iyo6c3ahx.f[7]++;cov_1iyo6c3ahx.s[25]++;if (!binary) {
        cov_1iyo6c3ahx.b[7][0]++;cov_1iyo6c3ahx.s[26]++;return [];
      } else {
        cov_1iyo6c3ahx.b[7][1]++;
      }let instructions = (cov_1iyo6c3ahx.s[27]++, _truffleCodeUtils2.default.parseCode(binary));cov_1iyo6c3ahx.s[28]++;if (!sourceMap) {
        cov_1iyo6c3ahx.b[8][0]++;cov_1iyo6c3ahx.s[29]++;sourceMap = "";cov_1iyo6c3ahx.s[30]++;for (var i = 0; i < instructions.length; i++) {
          cov_1iyo6c3ahx.s[31]++;sourceMap += i + ":" + i + ":1:-1;";
        }
      } else {
        cov_1iyo6c3ahx.b[8][1]++;
      }var lineAndColumnMappings = (cov_1iyo6c3ahx.s[32]++, (0, _assign2.default)({}, ...(0, _entries2.default)(sources).map(([id, { source }]) => {
        cov_1iyo6c3ahx.f[8]++;cov_1iyo6c3ahx.s[33]++;return { [id]: _truffleSolidityUtils2.default.getCharacterOffsetToLineAndColumnMapping((cov_1iyo6c3ahx.b[9][0]++, source) || (cov_1iyo6c3ahx.b[9][1]++, "")) };
      })));var humanReadableSourceMap = (cov_1iyo6c3ahx.s[34]++, _truffleSolidityUtils2.default.getHumanReadableSourceMap(sourceMap));let primaryFile = (cov_1iyo6c3ahx.s[35]++, humanReadableSourceMap[0].file);cov_1iyo6c3ahx.s[36]++;debug("primaryFile %o", primaryFile);cov_1iyo6c3ahx.s[37]++;return instructions.map((instruction, index) => {
        cov_1iyo6c3ahx.f[9]++;const sourceMap = (cov_1iyo6c3ahx.s[38]++, (cov_1iyo6c3ahx.b[10][0]++, humanReadableSourceMap[index]) || (cov_1iyo6c3ahx.b[10][1]++, {}));cov_1iyo6c3ahx.s[39]++;return { instruction: (0, _extends3.default)({}, instruction, { index }), sourceMap };
      }).map(({ instruction, sourceMap }) => {
        cov_1iyo6c3ahx.f[10]++;const { jump, start = (cov_1iyo6c3ahx.b[11][0]++, 0), length = (cov_1iyo6c3ahx.b[12][0]++, 0), file = (cov_1iyo6c3ahx.b[13][0]++, primaryFile) } = (cov_1iyo6c3ahx.s[40]++, sourceMap);const lineAndColumnMapping = (cov_1iyo6c3ahx.s[41]++, (cov_1iyo6c3ahx.b[14][0]++, lineAndColumnMappings[file]) || (cov_1iyo6c3ahx.b[14][1]++, {}));const range = (cov_1iyo6c3ahx.s[42]++, { start: (cov_1iyo6c3ahx.b[15][0]++, lineAndColumnMapping[start]) || (cov_1iyo6c3ahx.b[15][1]++, { line: null, column: null }), end: (cov_1iyo6c3ahx.b[16][0]++, lineAndColumnMapping[start + length]) || (cov_1iyo6c3ahx.b[16][1]++, { line: null, column: null }) });cov_1iyo6c3ahx.s[43]++;if (range.start.line === null) {
          cov_1iyo6c3ahx.b[17][0]++;cov_1iyo6c3ahx.s[44]++;debug("sourceMap %o", sourceMap);
        } else {
          cov_1iyo6c3ahx.b[17][1]++;
        }cov_1iyo6c3ahx.s[45]++;return (0, _extends3.default)({}, instruction, { jump, start, length, file, range });
      });
    }), instructionAtProgramCounter: (0, _reselectTree.createLeaf)(["./instructions"], instructions => {
      cov_1iyo6c3ahx.f[11]++;let map = (cov_1iyo6c3ahx.s[46]++, []);cov_1iyo6c3ahx.s[47]++;instructions.forEach(function (instruction) {
        cov_1iyo6c3ahx.f[12]++;cov_1iyo6c3ahx.s[48]++;map[instruction.pc] = instruction;
      });let lastSeen = (cov_1iyo6c3ahx.s[49]++, null);cov_1iyo6c3ahx.s[50]++;for (let [pc, instruction] of map.entries()) {
        cov_1iyo6c3ahx.s[51]++;if (instruction) {
          cov_1iyo6c3ahx.b[18][0]++;cov_1iyo6c3ahx.s[52]++;lastSeen = instruction;
        } else {
          cov_1iyo6c3ahx.b[18][1]++;cov_1iyo6c3ahx.s[53]++;map[pc] = lastSeen;
        }
      }cov_1iyo6c3ahx.s[54]++;return map;
    }), instruction: (0, _reselectTree.createLeaf)(["./instructionAtProgramCounter", _selectors2.default.current.step.programCounter], (map, pc) => {
      cov_1iyo6c3ahx.f[13]++;cov_1iyo6c3ahx.s[55]++;return (cov_1iyo6c3ahx.b[19][0]++, map[pc]) || (cov_1iyo6c3ahx.b[19][1]++, {});
    }), source: (0, _reselectTree.createLeaf)(["/info/sources", "./instruction"], (sources, { file: id }) => {
      cov_1iyo6c3ahx.f[14]++;cov_1iyo6c3ahx.s[56]++;return (cov_1iyo6c3ahx.b[20][0]++, sources[id]) || (cov_1iyo6c3ahx.b[20][1]++, {});
    }), sourceRange: (0, _reselectTree.createLeaf)(["./instruction"], getSourceRange), isSourceRangeFinal: (0, _reselectTree.createLeaf)(["./instructionAtProgramCounter", _selectors2.default.current.step.programCounter, _selectors2.default.next.step.programCounter], (map, current, next) => {
      cov_1iyo6c3ahx.f[15]++;cov_1iyo6c3ahx.s[57]++;if (!map[next]) {
        cov_1iyo6c3ahx.b[21][0]++;cov_1iyo6c3ahx.s[58]++;return true;
      } else {
        cov_1iyo6c3ahx.b[21][1]++;
      }cov_1iyo6c3ahx.s[59]++;current = map[current];cov_1iyo6c3ahx.s[60]++;next = map[next];cov_1iyo6c3ahx.s[61]++;return (cov_1iyo6c3ahx.b[22][0]++, current.start != next.start) || (cov_1iyo6c3ahx.b[22][1]++, current.length != next.length) || (cov_1iyo6c3ahx.b[22][2]++, current.file != next.file);
    }), isMultiline: (0, _reselectTree.createLeaf)(["./sourceRange"], ({ lines }) => {
      cov_1iyo6c3ahx.f[16]++;cov_1iyo6c3ahx.s[62]++;return lines.start.line != lines.end.line;
    }), willJump: (0, _reselectTree.createLeaf)([_selectors2.default.current.step.isJump], isJump => {
      cov_1iyo6c3ahx.f[17]++;cov_1iyo6c3ahx.s[63]++;return isJump;
    }), jumpDirection: (0, _reselectTree.createLeaf)(["./instruction"], (i = (cov_1iyo6c3ahx.b[23][0]++, {})) => {
      cov_1iyo6c3ahx.f[18]++;cov_1iyo6c3ahx.s[64]++;return (cov_1iyo6c3ahx.b[24][0]++, i.jump) || (cov_1iyo6c3ahx.b[24][1]++, "-");
    }) } }));cov_1iyo6c3ahx.s[65]++;exports.default = solidity;

/***/ }),
/* 7 */
/***/ (function(module, exports) {

module.exports = require("babel-runtime/helpers/asyncToGenerator");

/***/ }),
/* 8 */
/***/ (function(module, exports) {

module.exports = require("web3");

/***/ }),
/* 9 */
/***/ (function(module, exports) {

module.exports = require("reselect-tree");

/***/ }),
/* 10 */
/***/ (function(module, exports) {

module.exports = require("redux-saga/effects");

/***/ }),
/* 11 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var cov_1cqg3qhd2j = function () {
  var path = "/Users/gnidan/src/work/truffle/packages/truffle-debugger/lib/data/decode/utils.js",
      hash = "afbf954c9644cfac1f17df4046df0d0abd4f5909",
      Function = function () {}.constructor,
      global = new Function('return this')(),
      gcv = "__coverage__",
      coverageData = { path: "/Users/gnidan/src/work/truffle/packages/truffle-debugger/lib/data/decode/utils.js", statementMap: { "0": { start: { line: 3, column: 0 }, end: { line: 5, column: 3 } }, "1": { start: { line: 6, column: 0 }, end: { line: 6, column: 49 } }, "2": { start: { line: 8, column: 15 }, end: { line: 8, column: 62 } }, "3": { start: { line: 10, column: 16 }, end: { line: 10, column: 48 } }, "4": { start: { line: 12, column: 14 }, end: { line: 12, column: 60 } }, "5": { start: { line: 14, column: 15 }, end: { line: 14, column: 46 } }, "6": { start: { line: 16, column: 0 }, end: { line: 16, column: 42 } }, "7": { start: { line: 17, column: 0 }, end: { line: 17, column: 40 } }, "8": { start: { line: 18, column: 0 }, end: { line: 18, column: 30 } }, "9": { start: { line: 19, column: 0 }, end: { line: 19, column: 52 } }, "10": { start: { line: 20, column: 0 }, end: { line: 20, column: 38 } }, "11": { start: { line: 21, column: 0 }, end: { line: 21, column: 38 } }, "12": { start: { line: 22, column: 0 }, end: { line: 22, column: 34 } }, "13": { start: { line: 23, column: 0 }, end: { line: 23, column: 30 } }, "14": { start: { line: 24, column: 0 }, end: { line: 24, column: 34 } }, "15": { start: { line: 25, column: 0 }, end: { line: 25, column: 38 } }, "16": { start: { line: 26, column: 0 }, end: { line: 26, column: 40 } }, "17": { start: { line: 27, column: 0 }, end: { line: 27, column: 34 } }, "18": { start: { line: 28, column: 0 }, end: { line: 28, column: 46 } }, "19": { start: { line: 29, column: 0 }, end: { line: 29, column: 34 } }, "20": { start: { line: 30, column: 0 }, end: { line: 30, column: 26 } }, "21": { start: { line: 31, column: 0 }, end: { line: 31, column: 30 } }, "22": { start: { line: 33, column: 13 }, end: { line: 33, column: 29 } }, "23": { start: { line: 35, column: 14 }, end: { line: 35, column: 44 } }, "24": { start: { line: 37, column: 17 }, end: { line: 37, column: 40 } }, "25": { start: { line: 39, column: 11 }, end: { line: 39, column: 26 } }, "26": { start: { line: 41, column: 12 }, end: { line: 41, column: 40 } }, "27": { start: { line: 43, column: 39 }, end: { line: 43, column: 93 } }, "28": { start: { line: 45, column: 14 }, end: { line: 45, column: 64 } }, "29": { start: { line: 47, column: 18 }, end: { line: 47, column: 42 } }, "30": { start: { line: 48, column: 17 }, end: { line: 48, column: 81 } }, "31": { start: { line: 54, column: 2 }, end: { line: 62, column: 3 } }, "32": { start: { line: 55, column: 4 }, end: { line: 55, column: 28 } }, "33": { start: { line: 56, column: 9 }, end: { line: 62, column: 3 } }, "34": { start: { line: 57, column: 4 }, end: { line: 57, column: 54 } }, "35": { start: { line: 57, column: 30 }, end: { line: 57, column: 52 } }, "36": { start: { line: 58, column: 9 }, end: { line: 62, column: 3 } }, "37": { start: { line: 59, column: 4 }, end: { line: 59, column: 130 } }, "38": { start: { line: 59, column: 93 }, end: { line: 59, column: 126 } }, "39": { start: { line: 61, column: 4 }, end: { line: 61, column: 17 } }, "40": { start: { line: 66, column: 2 }, end: { line: 66, column: 52 } }, "41": { start: { line: 76, column: 2 }, end: { line: 76, column: 62 } }, "42": { start: { line: 85, column: 2 }, end: { line: 85, column: 29 } }, "43": { start: { line: 87, column: 2 }, end: { line: 94, column: 3 } }, "44": { start: { line: 89, column: 4 }, end: { line: 92, column: 6 } }, "45": { start: { line: 93, column: 4 }, end: { line: 93, column: 26 } }, "46": { start: { line: 96, column: 19 }, end: { line: 96, column: 37 } }, "47": { start: { line: 97, column: 17 }, end: { line: 97, column: 47 } }, "48": { start: { line: 98, column: 16 }, end: { line: 98, column: 18 } }, "49": { start: { line: 100, column: 2 }, end: { line: 112, column: 3 } }, "50": { start: { line: 101, column: 39 }, end: { line: 101, column: 90 } }, "51": { start: { line: 103, column: 4 }, end: { line: 103, column: 67 } }, "52": { start: { line: 104, column: 4 }, end: { line: 106, column: 5 } }, "53": { start: { line: 105, column: 6 }, end: { line: 105, column: 50 } }, "54": { start: { line: 108, column: 4 }, end: { line: 108, column: 21 } }, "55": { start: { line: 109, column: 4 }, end: { line: 109, column: 23 } }, "56": { start: { line: 111, column: 4 }, end: { line: 111, column: 55 } }, "57": { start: { line: 114, column: 2 }, end: { line: 120, column: 3 } }, "58": { start: { line: 115, column: 4 }, end: { line: 118, column: 6 } }, "59": { start: { line: 119, column: 4 }, end: { line: 119, column: 26 } }, "60": { start: { line: 122, column: 2 }, end: { line: 127, column: 4 } }, "61": { start: { line: 131, column: 13 }, end: { line: 137, column: 3 } }, "62": { start: { line: 139, column: 11 }, end: { line: 139, column: 61 } }, "63": { start: { line: 141, column: 13 }, end: { line: 147, column: 48 } }, "64": { start: { line: 149, column: 2 }, end: { line: 149, column: 28 } }, "65": { start: { line: 153, column: 19 }, end: { line: 153, column: 50 } }, "66": { start: { line: 154, column: 17 }, end: { line: 154, column: 40 } }, "67": { start: { line: 156, column: 2 }, end: { line: 158, column: 3 } }, "68": { start: { line: 157, column: 4 }, end: { line: 157, column: 48 } }, "69": { start: { line: 160, column: 15 }, end: { line: 160, column: 62 } }, "70": { start: { line: 161, column: 2 }, end: { line: 161, column: 30 } }, "71": { start: { line: 163, column: 15 }, end: { line: 163, column: 78 } }, "72": { start: { line: 164, column: 2 }, end: { line: 164, column: 36 } }, "73": { start: { line: 165, column: 2 }, end: { line: 165, column: 16 } }, "74": { start: { line: 172, column: 2 }, end: { line: 177, column: 3 } }, "75": { start: { line: 173, column: 4 }, end: { line: 176, column: 6 } }, "76": { start: { line: 179, column: 2 }, end: { line: 182, column: 4 } }, "77": { start: { line: 190, column: 18 }, end: { line: 190, column: 70 } }, "78": { start: { line: 192, column: 2 }, end: { line: 194, column: 3 } }, "79": { start: { line: 193, column: 4 }, end: { line: 193, column: 16 } }, "80": { start: { line: 196, column: 12 }, end: { line: 196, column: 24 } }, "81": { start: { line: 198, column: 2 }, end: { line: 208, column: 3 } }, "82": { start: { line: 201, column: 6 }, end: { line: 201, column: 21 } }, "83": { start: { line: 204, column: 6 }, end: { line: 204, column: 17 } }, "84": { start: { line: 207, column: 6 }, end: { line: 207, column: 83 } }, "85": { start: { line: 212, column: 2 }, end: { line: 232, column: 3 } }, "86": { start: { line: 214, column: 6 }, end: { line: 214, column: 15 } }, "87": { start: { line: 217, column: 6 }, end: { line: 217, column: 16 } }, "88": { start: { line: 222, column: 6 }, end: { line: 222, column: 73 } }, "89": { start: { line: 227, column: 6 }, end: { line: 227, column: 23 } }, "90": { start: { line: 231, column: 6 }, end: { line: 231, column: 23 } }, "91": { start: { line: 236, column: 2 }, end: { line: 236, column: 64 } }, "92": { start: { line: 240, column: 2 }, end: { line: 240, column: 79 } }, "93": { start: { line: 244, column: 2 }, end: { line: 244, column: 65 } }, "94": { start: { line: 248, column: 23 }, end: { line: 251, column: 37 } }, "95": { start: { line: 255, column: 2 }, end: { line: 257, column: 3 } }, "96": { start: { line: 256, column: 4 }, end: { line: 256, column: 45 } }, "97": { start: { line: 260, column: 2 }, end: { line: 264, column: 4 } }, "98": { start: { line: 268, column: 2 }, end: { line: 276, column: 3 } }, "99": { start: { line: 269, column: 4 }, end: { line: 269, column: 21 } }, "100": { start: { line: 270, column: 9 }, end: { line: 276, column: 3 } }, "101": { start: { line: 271, column: 4 }, end: { line: 271, column: 47 } }, "102": { start: { line: 272, column: 9 }, end: { line: 276, column: 3 } }, "103": { start: { line: 273, column: 4 }, end: { line: 273, column: 43 } }, "104": { start: { line: 274, column: 9 }, end: { line: 276, column: 3 } }, "105": { start: { line: 275, column: 4 }, end: { line: 275, column: 97 } }, "106": { start: { line: 275, column: 39 }, end: { line: 275, column: 66 } }, "107": { start: { line: 280, column: 2 }, end: { line: 285, column: 3 } }, "108": { start: { line: 282, column: 4 }, end: { line: 282, column: 30 } }, "109": { start: { line: 284, column: 4 }, end: { line: 284, column: 67 } }, "110": { start: { line: 284, column: 38 }, end: { line: 284, column: 46 } }, "111": { start: { line: 294, column: 2 }, end: { line: 297, column: 3 } }, "112": { start: { line: 295, column: 4 }, end: { line: 295, column: 18 } }, "113": { start: { line: 296, column: 4 }, end: { line: 296, column: 15 } }, "114": { start: { line: 299, column: 2 }, end: { line: 301, column: 3 } }, "115": { start: { line: 300, column: 4 }, end: { line: 300, column: 27 } }, "116": { start: { line: 303, column: 14 }, end: { line: 303, column: 55 } }, "117": { start: { line: 303, column: 19 }, end: { line: 303, column: 55 } }, "118": { start: { line: 311, column: 2 }, end: { line: 316, column: 3 } }, "119": { start: { line: 312, column: 16 }, end: { line: 312, column: 21 } }, "120": { start: { line: 313, column: 4 }, end: { line: 313, column: 35 } }, "121": { start: { line: 315, column: 4 }, end: { line: 315, column: 44 } }, "122": { start: { line: 318, column: 2 }, end: { line: 318, column: 28 } }, "123": { start: { line: 320, column: 15 }, end: { line: 320, column: 81 } }, "124": { start: { line: 320, column: 43 }, end: { line: 320, column: 76 } }, "125": { start: { line: 322, column: 2 }, end: { line: 324, column: 3 } }, "126": { start: { line: 323, column: 4 }, end: { line: 323, column: 42 } }, "127": { start: { line: 326, column: 2 }, end: { line: 328, column: 3 } }, "128": { start: { line: 327, column: 4 }, end: { line: 327, column: 18 } }, "129": { start: { line: 330, column: 2 }, end: { line: 330, column: 23 } }, "130": { start: { line: 334, column: 2 }, end: { line: 336, column: 3 } }, "131": { start: { line: 335, column: 4 }, end: { line: 335, column: 14 } }, "132": { start: { line: 338, column: 12 }, end: { line: 338, column: 31 } }, "133": { start: { line: 339, column: 2 }, end: { line: 341, column: 3 } }, "134": { start: { line: 340, column: 4 }, end: { line: 340, column: 20 } }, "135": { start: { line: 343, column: 14 }, end: { line: 343, column: 80 } }, "136": { start: { line: 343, column: 60 }, end: { line: 343, column: 78 } }, "137": { start: { line: 345, column: 2 }, end: { line: 349, column: 3 } }, "138": { start: { line: 346, column: 16 }, end: { line: 346, column: 21 } }, "139": { start: { line: 347, column: 4 }, end: { line: 347, column: 35 } }, "140": { start: { line: 348, column: 4 }, end: { line: 348, column: 44 } }, "141": { start: { line: 351, column: 2 }, end: { line: 351, column: 15 } }, "142": { start: { line: 355, column: 13 }, end: { line: 355, column: 32 } }, "143": { start: { line: 357, column: 2 }, end: { line: 357, column: 25 } }, "144": { start: { line: 359, column: 12 }, end: { line: 359, column: 44 } }, "145": { start: { line: 360, column: 2 }, end: { line: 360, column: 23 } }, "146": { start: { line: 361, column: 2 }, end: { line: 361, column: 26 } } }, fnMap: { "0": { name: "_interopRequireDefault", decl: { start: { line: 43, column: 9 }, end: { line: 43, column: 31 } }, loc: { start: { line: 43, column: 37 }, end: { line: 43, column: 95 } }, line: 43 }, "1": { name: "cleanBigNumbers", decl: { start: { line: 53, column: 9 }, end: { line: 53, column: 24 } }, loc: { start: { line: 53, column: 32 }, end: { line: 63, column: 1 } }, line: 53 }, "2": { name: "(anonymous_2)", decl: { start: { line: 57, column: 21 }, end: { line: 57, column: 22 } }, loc: { start: { line: 57, column: 30 }, end: { line: 57, column: 52 } }, line: 57 }, "3": { name: "(anonymous_3)", decl: { start: { line: 59, column: 74 }, end: { line: 59, column: 75 } }, loc: { start: { line: 59, column: 93 }, end: { line: 59, column: 126 } }, line: 59 }, "4": { name: "typeIdentifier", decl: { start: { line: 65, column: 9 }, end: { line: 65, column: 23 } }, loc: { start: { line: 65, column: 36 }, end: { line: 67, column: 1 } }, line: 65 }, "5": { name: "typeClass", decl: { start: { line: 75, column: 9 }, end: { line: 75, column: 18 } }, loc: { start: { line: 75, column: 31 }, end: { line: 77, column: 1 } }, line: 75 }, "6": { name: "allocateDeclarations", decl: { start: { line: 84, column: 9 }, end: { line: 84, column: 29 } }, loc: { start: { line: 84, column: 83 }, end: { line: 128, column: 1 } }, line: 84 }, "7": { name: "allocateValue", decl: { start: { line: 130, column: 9 }, end: { line: 130, column: 22 } }, loc: { start: { line: 130, column: 43 }, end: { line: 150, column: 1 } }, line: 130 }, "8": { name: "allocateDeclaration", decl: { start: { line: 152, column: 9 }, end: { line: 152, column: 28 } }, loc: { start: { line: 152, column: 61 }, end: { line: 166, column: 1 } }, line: 152 }, "9": { name: "normalizeSlot", decl: { start: { line: 171, column: 9 }, end: { line: 171, column: 22 } }, loc: { start: { line: 171, column: 29 }, end: { line: 183, column: 1 } }, line: 171 }, "10": { name: "specifiedSize", decl: { start: { line: 189, column: 9 }, end: { line: 189, column: 22 } }, loc: { start: { line: 189, column: 35 }, end: { line: 209, column: 1 } }, line: 189 }, "11": { name: "storageSize", decl: { start: { line: 211, column: 9 }, end: { line: 211, column: 20 } }, loc: { start: { line: 211, column: 33 }, end: { line: 233, column: 1 } }, line: 211 }, "12": { name: "isMapping", decl: { start: { line: 235, column: 9 }, end: { line: 235, column: 18 } }, loc: { start: { line: 235, column: 31 }, end: { line: 237, column: 1 } }, line: 235 }, "13": { name: "isReference", decl: { start: { line: 239, column: 9 }, end: { line: 239, column: 20 } }, loc: { start: { line: 239, column: 33 }, end: { line: 241, column: 1 } }, line: 239 }, "14": { name: "referenceType", decl: { start: { line: 243, column: 9 }, end: { line: 243, column: 22 } }, loc: { start: { line: 243, column: 35 }, end: { line: 245, column: 1 } }, line: 243 }, "15": { name: "baseDefinition", decl: { start: { line: 247, column: 9 }, end: { line: 247, column: 23 } }, loc: { start: { line: 247, column: 36 }, end: { line: 265, column: 1 } }, line: 247 }, "16": { name: "toBigNumber", decl: { start: { line: 267, column: 9 }, end: { line: 267, column: 20 } }, loc: { start: { line: 267, column: 28 }, end: { line: 277, column: 1 } }, line: 267 }, "17": { name: "(anonymous_17)", decl: { start: { line: 275, column: 24 }, end: { line: 275, column: 25 } }, loc: { start: { line: 275, column: 39 }, end: { line: 275, column: 66 } }, line: 275 }, "18": { name: "toSignedBigNumber", decl: { start: { line: 279, column: 9 }, end: { line: 279, column: 26 } }, loc: { start: { line: 279, column: 34 }, end: { line: 286, column: 1 } }, line: 279 }, "19": { name: "(anonymous_19)", decl: { start: { line: 284, column: 33 }, end: { line: 284, column: 34 } }, loc: { start: { line: 284, column: 38 }, end: { line: 284, column: 46 } }, line: 284 }, "20": { name: "toHexString", decl: { start: { line: 293, column: 9 }, end: { line: 293, column: 20 } }, loc: { start: { line: 293, column: 54 }, end: { line: 331, column: 1 } }, line: 293 }, "21": { name: "(anonymous_21)", decl: { start: { line: 303, column: 14 }, end: { line: 303, column: 15 } }, loc: { start: { line: 303, column: 19 }, end: { line: 303, column: 55 } }, line: 303 }, "22": { name: "(anonymous_22)", decl: { start: { line: 320, column: 28 }, end: { line: 320, column: 29 } }, loc: { start: { line: 320, column: 43 }, end: { line: 320, column: 76 } }, line: 320 }, "23": { name: "toBytes", decl: { start: { line: 333, column: 9 }, end: { line: 333, column: 16 } }, loc: { start: { line: 333, column: 37 }, end: { line: 352, column: 1 } }, line: 333 }, "24": { name: "(anonymous_24)", decl: { start: { line: 343, column: 52 }, end: { line: 343, column: 53 } }, loc: { start: { line: 343, column: 60 }, end: { line: 343, column: 78 } }, line: 343 }, "25": { name: "keccak256", decl: { start: { line: 354, column: 9 }, end: { line: 354, column: 18 } }, loc: { start: { line: 354, column: 28 }, end: { line: 362, column: 1 } }, line: 354 } }, branchMap: { "0": { loc: { start: { line: 43, column: 46 }, end: { line: 43, column: 92 } }, type: "cond-expr", locations: [{ start: { line: 43, column: 70 }, end: { line: 43, column: 73 } }, { start: { line: 43, column: 76 }, end: { line: 43, column: 92 } }], line: 43 }, "1": { loc: { start: { line: 43, column: 46 }, end: { line: 43, column: 67 } }, type: "binary-expr", locations: [{ start: { line: 43, column: 46 }, end: { line: 43, column: 49 } }, { start: { line: 43, column: 53 }, end: { line: 43, column: 67 } }], line: 43 }, "2": { loc: { start: { line: 54, column: 2 }, end: { line: 62, column: 3 } }, type: "if", locations: [{ start: { line: 54, column: 2 }, end: { line: 62, column: 3 } }, { start: { line: 54, column: 2 }, end: { line: 62, column: 3 } }], line: 54 }, "3": { loc: { start: { line: 56, column: 9 }, end: { line: 62, column: 3 } }, type: "if", locations: [{ start: { line: 56, column: 9 }, end: { line: 62, column: 3 } }, { start: { line: 56, column: 9 }, end: { line: 62, column: 3 } }], line: 56 }, "4": { loc: { start: { line: 56, column: 13 }, end: { line: 56, column: 44 } }, type: "binary-expr", locations: [{ start: { line: 56, column: 13 }, end: { line: 56, column: 18 } }, { start: { line: 56, column: 22 }, end: { line: 56, column: 44 } }], line: 56 }, "5": { loc: { start: { line: 58, column: 9 }, end: { line: 62, column: 3 } }, type: "if", locations: [{ start: { line: 58, column: 9 }, end: { line: 62, column: 3 } }, { start: { line: 58, column: 9 }, end: { line: 62, column: 3 } }], line: 58 }, "6": { loc: { start: { line: 58, column: 13 }, end: { line: 58, column: 46 } }, type: "binary-expr", locations: [{ start: { line: 58, column: 13 }, end: { line: 58, column: 18 } }, { start: { line: 58, column: 22 }, end: { line: 58, column: 46 } }], line: 58 }, "7": { loc: { start: { line: 84, column: 50 }, end: { line: 84, column: 58 } }, type: "default-arg", locations: [{ start: { line: 84, column: 57 }, end: { line: 84, column: 58 } }], line: 84 }, "8": { loc: { start: { line: 84, column: 60 }, end: { line: 84, column: 81 } }, type: "default-arg", locations: [{ start: { line: 84, column: 68 }, end: { line: 84, column: 81 } }], line: 84 }, "9": { loc: { start: { line: 87, column: 2 }, end: { line: 94, column: 3 } }, type: "if", locations: [{ start: { line: 87, column: 2 }, end: { line: 94, column: 3 } }, { start: { line: 87, column: 2 }, end: { line: 94, column: 3 } }], line: 87 }, "10": { loc: { start: { line: 104, column: 4 }, end: { line: 106, column: 5 } }, type: "if", locations: [{ start: { line: 104, column: 4 }, end: { line: 106, column: 5 } }, { start: { line: 104, column: 4 }, end: { line: 106, column: 5 } }], line: 104 }, "11": { loc: { start: { line: 114, column: 2 }, end: { line: 120, column: 3 } }, type: "if", locations: [{ start: { line: 114, column: 2 }, end: { line: 120, column: 3 } }, { start: { line: 114, column: 2 }, end: { line: 120, column: 3 } }], line: 114 }, "12": { loc: { start: { line: 131, column: 13 }, end: { line: 137, column: 3 } }, type: "cond-expr", locations: [{ start: { line: 131, column: 38 }, end: { line: 131, column: 72 } }, { start: { line: 131, column: 75 }, end: { line: 137, column: 3 } }], line: 131 }, "13": { loc: { start: { line: 141, column: 13 }, end: { line: 147, column: 48 } }, type: "cond-expr", locations: [{ start: { line: 141, column: 31 }, end: { line: 147, column: 3 } }, { start: { line: 147, column: 6 }, end: { line: 147, column: 48 } }], line: 141 }, "14": { loc: { start: { line: 156, column: 2 }, end: { line: 158, column: 3 } }, type: "if", locations: [{ start: { line: 156, column: 2 }, end: { line: 158, column: 3 } }, { start: { line: 156, column: 2 }, end: { line: 158, column: 3 } }], line: 156 }, "15": { loc: { start: { line: 163, column: 36 }, end: { line: 163, column: 58 } }, type: "binary-expr", locations: [{ start: { line: 163, column: 36 }, end: { line: 163, column: 52 } }, { start: { line: 163, column: 56 }, end: { line: 163, column: 58 } }], line: 163 }, "16": { loc: { start: { line: 172, column: 2 }, end: { line: 177, column: 3 } }, type: "if", locations: [{ start: { line: 172, column: 2 }, end: { line: 177, column: 3 } }, { start: { line: 172, column: 2 }, end: { line: 177, column: 3 } }], line: 172 }, "17": { loc: { start: { line: 172, column: 6 }, end: { line: 172, column: 55 } }, type: "binary-expr", locations: [{ start: { line: 172, column: 6 }, end: { line: 172, column: 29 } }, { start: { line: 172, column: 33 }, end: { line: 172, column: 55 } }], line: 172 }, "18": { loc: { start: { line: 175, column: 14 }, end: { line: 175, column: 30 } }, type: "binary-expr", locations: [{ start: { line: 175, column: 14 }, end: { line: 175, column: 25 } }, { start: { line: 175, column: 29 }, end: { line: 175, column: 30 } }], line: 175 }, "19": { loc: { start: { line: 192, column: 2 }, end: { line: 194, column: 3 } }, type: "if", locations: [{ start: { line: 192, column: 2 }, end: { line: 194, column: 3 } }, { start: { line: 192, column: 2 }, end: { line: 194, column: 3 } }], line: 192 }, "20": { loc: { start: { line: 198, column: 2 }, end: { line: 208, column: 3 } }, type: "switch", locations: [{ start: { line: 199, column: 4 }, end: { line: 199, column: 15 } }, { start: { line: 200, column: 4 }, end: { line: 201, column: 21 } }, { start: { line: 203, column: 4 }, end: { line: 204, column: 17 } }, { start: { line: 206, column: 4 }, end: { line: 207, column: 83 } }], line: 198 }, "21": { loc: { start: { line: 212, column: 2 }, end: { line: 232, column: 3 } }, type: "switch", locations: [{ start: { line: 213, column: 4 }, end: { line: 214, column: 15 } }, { start: { line: 216, column: 4 }, end: { line: 217, column: 16 } }, { start: { line: 219, column: 4 }, end: { line: 219, column: 15 } }, { start: { line: 220, column: 4 }, end: { line: 222, column: 73 } }, { start: { line: 224, column: 4 }, end: { line: 224, column: 18 } }, { start: { line: 225, column: 4 }, end: { line: 225, column: 17 } }, { start: { line: 226, column: 4 }, end: { line: 227, column: 23 } }, { start: { line: 229, column: 4 }, end: { line: 231, column: 23 } }], line: 212 }, "22": { loc: { start: { line: 255, column: 2 }, end: { line: 257, column: 3 } }, type: "if", locations: [{ start: { line: 255, column: 2 }, end: { line: 257, column: 3 } }, { start: { line: 255, column: 2 }, end: { line: 257, column: 3 } }], line: 255 }, "23": { loc: { start: { line: 268, column: 2 }, end: { line: 276, column: 3 } }, type: "if", locations: [{ start: { line: 268, column: 2 }, end: { line: 276, column: 3 } }, { start: { line: 268, column: 2 }, end: { line: 276, column: 3 } }], line: 268 }, "24": { loc: { start: { line: 270, column: 9 }, end: { line: 276, column: 3 } }, type: "if", locations: [{ start: { line: 270, column: 9 }, end: { line: 276, column: 3 } }, { start: { line: 270, column: 9 }, end: { line: 276, column: 3 } }], line: 270 }, "25": { loc: { start: { line: 272, column: 9 }, end: { line: 276, column: 3 } }, type: "if", locations: [{ start: { line: 272, column: 9 }, end: { line: 276, column: 3 } }, { start: { line: 272, column: 9 }, end: { line: 276, column: 3 } }], line: 272 }, "26": { loc: { start: { line: 272, column: 13 }, end: { line: 272, column: 80 } }, type: "binary-expr", locations: [{ start: { line: 272, column: 13 }, end: { line: 272, column: 37 } }, { start: { line: 272, column: 41 }, end: { line: 272, column: 80 } }], line: 272 }, "27": { loc: { start: { line: 274, column: 9 }, end: { line: 276, column: 3 } }, type: "if", locations: [{ start: { line: 274, column: 9 }, end: { line: 276, column: 3 } }, { start: { line: 274, column: 9 }, end: { line: 276, column: 3 } }], line: 274 }, "28": { loc: { start: { line: 280, column: 2 }, end: { line: 285, column: 3 } }, type: "if", locations: [{ start: { line: 280, column: 2 }, end: { line: 285, column: 3 } }, { start: { line: 280, column: 2 }, end: { line: 285, column: 3 } }], line: 280 }, "29": { loc: { start: { line: 293, column: 28 }, end: { line: 293, column: 38 } }, type: "default-arg", locations: [{ start: { line: 293, column: 37 }, end: { line: 293, column: 38 } }], line: 293 }, "30": { loc: { start: { line: 293, column: 40 }, end: { line: 293, column: 52 } }, type: "default-arg", locations: [{ start: { line: 293, column: 47 }, end: { line: 293, column: 52 } }], line: 293 }, "31": { loc: { start: { line: 294, column: 2 }, end: { line: 297, column: 3 } }, type: "if", locations: [{ start: { line: 294, column: 2 }, end: { line: 297, column: 3 } }, { start: { line: 294, column: 2 }, end: { line: 297, column: 3 } }], line: 294 }, "32": { loc: { start: { line: 299, column: 2 }, end: { line: 301, column: 3 } }, type: "if", locations: [{ start: { line: 299, column: 2 }, end: { line: 301, column: 3 } }, { start: { line: 299, column: 2 }, end: { line: 301, column: 3 } }], line: 299 }, "33": { loc: { start: { line: 311, column: 2 }, end: { line: 316, column: 3 } }, type: "if", locations: [{ start: { line: 311, column: 2 }, end: { line: 316, column: 3 } }, { start: { line: 311, column: 2 }, end: { line: 316, column: 3 } }], line: 311 }, "34": { loc: { start: { line: 322, column: 2 }, end: { line: 324, column: 3 } }, type: "if", locations: [{ start: { line: 322, column: 2 }, end: { line: 324, column: 3 } }, { start: { line: 322, column: 2 }, end: { line: 324, column: 3 } }], line: 322 }, "35": { loc: { start: { line: 326, column: 2 }, end: { line: 328, column: 3 } }, type: "if", locations: [{ start: { line: 326, column: 2 }, end: { line: 328, column: 3 } }, { start: { line: 326, column: 2 }, end: { line: 328, column: 3 } }], line: 326 }, "36": { loc: { start: { line: 333, column: 25 }, end: { line: 333, column: 35 } }, type: "default-arg", locations: [{ start: { line: 333, column: 34 }, end: { line: 333, column: 35 } }], line: 333 }, "37": { loc: { start: { line: 334, column: 2 }, end: { line: 336, column: 3 } }, type: "if", locations: [{ start: { line: 334, column: 2 }, end: { line: 336, column: 3 } }, { start: { line: 334, column: 2 }, end: { line: 336, column: 3 } }], line: 334 }, "38": { loc: { start: { line: 334, column: 6 }, end: { line: 334, column: 33 } }, type: "binary-expr", locations: [{ start: { line: 334, column: 6 }, end: { line: 334, column: 16 } }, { start: { line: 334, column: 20 }, end: { line: 334, column: 33 } }], line: 334 }, "39": { loc: { start: { line: 339, column: 2 }, end: { line: 341, column: 3 } }, type: "if", locations: [{ start: { line: 339, column: 2 }, end: { line: 341, column: 3 } }, { start: { line: 339, column: 2 }, end: { line: 341, column: 3 } }], line: 339 }, "40": { loc: { start: { line: 345, column: 2 }, end: { line: 349, column: 3 } }, type: "if", locations: [{ start: { line: 345, column: 2 }, end: { line: 349, column: 3 } }, { start: { line: 345, column: 2 }, end: { line: 349, column: 3 } }], line: 345 } }, s: { "0": 0, "1": 0, "2": 0, "3": 0, "4": 0, "5": 0, "6": 0, "7": 0, "8": 0, "9": 0, "10": 0, "11": 0, "12": 0, "13": 0, "14": 0, "15": 0, "16": 0, "17": 0, "18": 0, "19": 0, "20": 0, "21": 0, "22": 0, "23": 0, "24": 0, "25": 0, "26": 0, "27": 0, "28": 0, "29": 0, "30": 0, "31": 0, "32": 0, "33": 0, "34": 0, "35": 0, "36": 0, "37": 0, "38": 0, "39": 0, "40": 0, "41": 0, "42": 0, "43": 0, "44": 0, "45": 0, "46": 0, "47": 0, "48": 0, "49": 0, "50": 0, "51": 0, "52": 0, "53": 0, "54": 0, "55": 0, "56": 0, "57": 0, "58": 0, "59": 0, "60": 0, "61": 0, "62": 0, "63": 0, "64": 0, "65": 0, "66": 0, "67": 0, "68": 0, "69": 0, "70": 0, "71": 0, "72": 0, "73": 0, "74": 0, "75": 0, "76": 0, "77": 0, "78": 0, "79": 0, "80": 0, "81": 0, "82": 0, "83": 0, "84": 0, "85": 0, "86": 0, "87": 0, "88": 0, "89": 0, "90": 0, "91": 0, "92": 0, "93": 0, "94": 0, "95": 0, "96": 0, "97": 0, "98": 0, "99": 0, "100": 0, "101": 0, "102": 0, "103": 0, "104": 0, "105": 0, "106": 0, "107": 0, "108": 0, "109": 0, "110": 0, "111": 0, "112": 0, "113": 0, "114": 0, "115": 0, "116": 0, "117": 0, "118": 0, "119": 0, "120": 0, "121": 0, "122": 0, "123": 0, "124": 0, "125": 0, "126": 0, "127": 0, "128": 0, "129": 0, "130": 0, "131": 0, "132": 0, "133": 0, "134": 0, "135": 0, "136": 0, "137": 0, "138": 0, "139": 0, "140": 0, "141": 0, "142": 0, "143": 0, "144": 0, "145": 0, "146": 0 }, f: { "0": 0, "1": 0, "2": 0, "3": 0, "4": 0, "5": 0, "6": 0, "7": 0, "8": 0, "9": 0, "10": 0, "11": 0, "12": 0, "13": 0, "14": 0, "15": 0, "16": 0, "17": 0, "18": 0, "19": 0, "20": 0, "21": 0, "22": 0, "23": 0, "24": 0, "25": 0 }, b: { "0": [0, 0], "1": [0, 0], "2": [0, 0], "3": [0, 0], "4": [0, 0], "5": [0, 0], "6": [0, 0], "7": [0], "8": [0], "9": [0, 0], "10": [0, 0], "11": [0, 0], "12": [0, 0], "13": [0, 0], "14": [0, 0], "15": [0, 0], "16": [0, 0], "17": [0, 0], "18": [0, 0], "19": [0, 0], "20": [0, 0, 0, 0], "21": [0, 0, 0, 0, 0, 0, 0, 0], "22": [0, 0], "23": [0, 0], "24": [0, 0], "25": [0, 0], "26": [0, 0], "27": [0, 0], "28": [0, 0], "29": [0], "30": [0], "31": [0, 0], "32": [0, 0], "33": [0, 0], "34": [0, 0], "35": [0, 0], "36": [0], "37": [0, 0], "38": [0, 0], "39": [0, 0], "40": [0, 0] }, inputSourceMap: { version: 3, sources: ["lib/data/decode/utils.js"], names: ["cleanBigNumbers", "typeIdentifier", "typeClass", "allocateDeclarations", "normalizeSlot", "specifiedSize", "storageSize", "isMapping", "isReference", "referenceType", "baseDefinition", "toBigNumber", "toSignedBigNumber", "toHexString", "toBytes", "keccak256", "debug", "WORD_SIZE", "MAX_WORD", "BigNumber", "pow", "minus", "value", "isBigNumber", "toNumber", "map", "undefined", "inner", "key", "definition", "typeDescriptions", "match", "declarations", "refs", "slot", "index", "path", "offset", "parentFrom", "parentTo", "mapping", "declaration", "from", "to", "next", "children", "allocateDeclaration", "id", "name", "allocateValue", "bytes", "byteSize", "struct", "typeName", "referencedDeclaration", "result", "variables", "specified", "num", "baseIdentifier", "reduce", "byte", "times", "plus", "b", "negated", "length", "trim", "pad", "s", "slice", "prior", "Uint8Array", "set", "string", "str", "toString", "replace", "number", "hex", "parseInt", "args", "web3", "Web3", "sha", "utils", "soliditySha3"], mappings: "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", file: "utils.js", sourceRoot: "/Users/gnidan/src/work/truffle/packages/truffle-debugger", sourcesContent: ["import debugModule from \"debug\";\nconst debug = debugModule(\"debugger:data:decode:utils\");\n\nimport { BigNumber } from \"bignumber.js\";\nimport Web3 from \"web3\";\n\nexport const WORD_SIZE = 0x20;\nexport const MAX_WORD = new BigNumber(2).pow(256).minus(1);\n\n/**\n * recursively converts big numbers into something nicer to look at\n */\nexport function cleanBigNumbers(value) {\n  if (BigNumber.isBigNumber(value)) {\n    return value.toNumber();\n\n  } else if (value && value.map != undefined) {\n    return value.map( (inner) => cleanBigNumbers(inner) );\n\n  } else if (value && typeof value == \"object\") {\n    return Object.assign(\n      {}, ...Object.entries(value)\n        .map( ([key, inner]) => ({ [key]: cleanBigNumbers(inner) }) )\n    );\n\n  } else {\n    return value;\n  }\n}\n\nexport function typeIdentifier(definition) {\n  return definition.typeDescriptions.typeIdentifier;\n}\n\n/**\n * returns basic type class for a variable definition node\n * e.g.:\n *  `t_uint256` becomes `uint`\n *  `t_struct$_Thing_$20_memory_ptr` becomes `struct`\n */\nexport function typeClass(definition) {\n  return typeIdentifier(definition).match(/t_([^$_0-9]+)/)[1];\n}\n\n/**\n * Allocate storage for given variable declarations\n *\n * Postcondition: starts a new slot and occupies whole slots\n */\nexport function allocateDeclarations(\n  declarations,\n  refs,\n  slot = 0,\n  index = WORD_SIZE - 1,\n) {\n  slot = normalizeSlot(slot);\n\n  if (index < WORD_SIZE - 1) {  // starts a new slot\n    slot = {\n      path: slot,\n      offset: 1\n    };\n    index = WORD_SIZE - 1;\n  }\n\n  let parentFrom = { slot, index: 0 };\n  var parentTo = { slot, index: WORD_SIZE - 1 };\n  let mapping = {};\n\n  for (let declaration of declarations) {\n    let { from, to, next, children } =\n      allocateDeclaration(declaration, refs, slot, index);\n\n    mapping[declaration.id] = { from, to, name: declaration.name };\n    if (children !== undefined) {\n      mapping[declaration.id].children = children;\n    }\n\n    slot = next.slot;\n    index = next.index;\n\n    parentTo = { slot: to.slot, index: WORD_SIZE - 1 };\n  }\n\n  if (index < WORD_SIZE - 1) {\n    slot = {\n      path: slot,\n      offset: 1\n    };\n    index = WORD_SIZE - 1;\n  }\n\n  return {\n    from: parentFrom,\n    to: parentTo,\n    next: { slot, index },\n    children: mapping\n  };\n}\n\nfunction allocateValue(slot, index, bytes) {\n  let from = (index - bytes + 1 >= 0)\n    ? { slot, index: index - bytes + 1 }\n    : {\n        slot: {\n          path: slot.path,\n          offset: slot.offset + 1\n        },\n        index: WORD_SIZE - bytes\n      };\n\n  let to = { slot: from.slot, index: from.index + bytes - 1 };\n\n  let next = (from.index == 0)\n    ? {\n        slot: {\n          path: from.slot.path,\n          offset: from.slot.offset + 1\n        },\n        index: WORD_SIZE - 1\n      }\n    : { slot: from.slot, index: from.index - 1 };\n\n  return { from, to, next };\n}\n\nfunction allocateDeclaration(declaration, refs, slot, index) {\n  let definition = refs[declaration.id].definition;\n  var byteSize = storageSize(definition);  // yum\n\n  if (typeClass(definition) != \"struct\") {\n    return allocateValue(slot, index, byteSize);\n  }\n\n  let struct = refs[definition.typeName.referencedDeclaration];\n  debug(\"struct: %O\", struct);\n\n  let result =  allocateDeclarations(struct.variables || [], refs, slot, index);\n  debug(\"struct result %o\", result);\n  return result;\n}\n\n/**\n * Convert polymorphic slot value into canonical { path, offset } pair.\n */\nexport function normalizeSlot(slot) {\n  if (typeof slot == \"object\" && slot.path != undefined) {\n    return {\n      path: slot.path,\n      offset: slot.offset || 0\n    };\n  }\n\n  return {\n    path: slot,\n    offset: 0\n  };\n}\n\n\n/**\n * e.g. uint48 -> 6\n * @return size in bytes for explicit type size, or `null` if not stated\n */\nexport function specifiedSize(definition) {\n  let specified = typeIdentifier(definition).match(/t_[a-z]+([0-9]+)/);\n\n  if (!specified) {\n    return null;\n  }\n\n  let num = specified[1];\n\n  switch (typeClass(definition)) {\n    case \"int\":\n    case \"uint\":\n      return num / 8;\n\n    case \"bytes\":\n      return num;\n\n    default:\n      debug(\"Unknown type for size specification: %s\", typeIdentifier(definition));\n  }\n}\n\nexport function storageSize(definition) {\n  switch (typeClass(definition)) {\n    case \"bool\":\n      return 1;\n\n    case \"address\":\n      return 20;\n\n    case \"int\":\n    case \"uint\":\n      // is this a HACK? (\"256\" / 8)\n      return typeIdentifier(definition).match(/t_[a-z]+([0-9]+)/)[1] / 8;\n\n    case \"string\":\n    case \"bytes\":\n    case \"array\":\n      return WORD_SIZE;\n\n    case \"mapping\":\n      // HACK just to reserve slot. mappings have no size as such\n      return WORD_SIZE;\n  }\n}\n\nexport function isMapping(definition) {\n  return typeIdentifier(definition).match(/^t_mapping/) != null;\n}\n\nexport function isReference(definition) {\n  return typeIdentifier(definition).match(/_(memory|storage)(_ptr)?$/) != null;\n}\n\nexport function referenceType(definition) {\n  return typeIdentifier(definition).match(/_([^_]+)(_ptr)?$/)[1];\n}\n\nexport function baseDefinition(definition) {\n  let baseIdentifier = typeIdentifier(definition)\n    // first dollar sign     last dollar sign\n    //   `---------.       ,---'\n    .match(/^[^$]+\\$_(.+)_\\$[^$]+$/)[1]\n    //              `----' greedy match\n\n  // HACK - internal types for memory or storage also seem to be pointers\n  if (baseIdentifier.match(/_(memory|storage)$/) != null) {\n    baseIdentifier = `${baseIdentifier}_ptr`;\n  }\n\n  // another HACK - we get away with it becausewe're only using that one property\n  return {\n    typeDescriptions: {\n      typeIdentifier: baseIdentifier\n    }\n  };\n}\n\n\nexport function toBigNumber(bytes) {\n  if (bytes == undefined) {\n    return undefined;\n  } else if (typeof bytes == \"string\") {\n    return new BigNumber(bytes, 16);\n  } else if (typeof bytes == \"number\" || BigNumber.isBigNumber(bytes)) {\n    return new BigNumber(bytes);\n  } else if (bytes.reduce) {\n    return bytes.reduce(\n      (num, byte) => num.times(0x100).plus(byte),\n      new BigNumber(0)\n    );\n  }\n}\n\nexport function toSignedBigNumber(bytes) {\n  if (bytes[0] < 0b10000000) {  // first bit is 0\n    return toBigNumber(bytes);\n  } else {\n    return toBigNumber(bytes.map( (b) => 0xff - b )).plus(1).negated();\n  }\n}\n\n/**\n * @param bytes - Uint8Array\n * @param length - desired byte length (pad with zeroes)\n * @param trim - omit leading zeroes\n */\nexport function toHexString(bytes, length = 0, trim = false) {\n  if (typeof length == \"boolean\") {\n    trim = length;\n    length = 0;\n  }\n\n  if (BigNumber.isBigNumber(bytes)) {\n    bytes = toBytes(bytes);\n  }\n\n  const pad = (s) => `${\"00\".slice(0, 2 - s.length)}${s}`\n\n  //                                          0  1  2  3  4\n  //                                 0  1  2  3  4  5  6  7\n  // bytes.length:        5  -  0x(          e5 c2 aa 09 11 )\n  // length (preferred):  8  -  0x( 00 00 00 e5 c2 aa 09 11 )\n  //                                `--.---'\n  //                                     offset 3\n  if (bytes.length < length) {\n    let prior = bytes;\n    bytes = new Uint8Array(length);\n\n    bytes.set(prior, length - prior.length);\n  }\n\n  debug(\"bytes: %o\", bytes);\n\n  let string = bytes.reduce(\n    (str, byte) => `${str}${pad(byte.toString(16))}`, \"\"\n  );\n\n  if (trim) {\n    string = string.replace(/^(00)+/, \"\");\n  }\n\n  if (string.length == 0) {\n    string = \"00\";\n  }\n\n  return `0x${string}`;\n}\n\nexport function toBytes(number, length = 0) {\n  if (number < 0 || number === \"\") {\n    return [];\n  }\n\n  let hex = number.toString(16);\n  if (hex.length % 2 == 1) {\n    hex = `0${hex}`;\n  }\n\n  let bytes = new Uint8Array(\n    hex.match(/.{2}/g)\n      .map( (byte) => parseInt(byte, 16) )\n  );\n\n  if (bytes.length < length) {\n    let prior = bytes;\n    bytes = new Uint8Array(length);\n    bytes.set(prior, length - prior.length);\n  }\n\n  return bytes;\n}\n\nexport function keccak256(...args) {\n  let web3 = new Web3();\n\n  debug(\"args %o\", args);\n\n  let sha = web3.utils.soliditySha3(...args);\n  debug(\"sha %o\", sha);\n  return toBigNumber(sha);\n}\n"] }, _coverageSchema: "332fd63041d2c1bcb487cc26dd0d5f7d97098a6c" },
      coverage = global[gcv] || (global[gcv] = {});if (coverage[path] && coverage[path].hash === hash) {
    return coverage[path];
  }coverageData.hash = hash;return coverage[path] = coverageData;
}();cov_1cqg3qhd2j.s[0]++;Object.defineProperty(exports, "__esModule", { value: true });cov_1cqg3qhd2j.s[1]++;exports.MAX_WORD = exports.WORD_SIZE = undefined;var _entries = (cov_1cqg3qhd2j.s[2]++, __webpack_require__(1));var _entries2 = (cov_1cqg3qhd2j.s[3]++, _interopRequireDefault(_entries));var _assign = (cov_1cqg3qhd2j.s[4]++, __webpack_require__(3));var _assign2 = (cov_1cqg3qhd2j.s[5]++, _interopRequireDefault(_assign));cov_1cqg3qhd2j.s[6]++;exports.cleanBigNumbers = cleanBigNumbers;cov_1cqg3qhd2j.s[7]++;exports.typeIdentifier = typeIdentifier;cov_1cqg3qhd2j.s[8]++;exports.typeClass = typeClass;cov_1cqg3qhd2j.s[9]++;exports.allocateDeclarations = allocateDeclarations;cov_1cqg3qhd2j.s[10]++;exports.normalizeSlot = normalizeSlot;cov_1cqg3qhd2j.s[11]++;exports.specifiedSize = specifiedSize;cov_1cqg3qhd2j.s[12]++;exports.storageSize = storageSize;cov_1cqg3qhd2j.s[13]++;exports.isMapping = isMapping;cov_1cqg3qhd2j.s[14]++;exports.isReference = isReference;cov_1cqg3qhd2j.s[15]++;exports.referenceType = referenceType;cov_1cqg3qhd2j.s[16]++;exports.baseDefinition = baseDefinition;cov_1cqg3qhd2j.s[17]++;exports.toBigNumber = toBigNumber;cov_1cqg3qhd2j.s[18]++;exports.toSignedBigNumber = toSignedBigNumber;cov_1cqg3qhd2j.s[19]++;exports.toHexString = toHexString;cov_1cqg3qhd2j.s[20]++;exports.toBytes = toBytes;cov_1cqg3qhd2j.s[21]++;exports.keccak256 = keccak256;var _debug = (cov_1cqg3qhd2j.s[22]++, __webpack_require__(0));var _debug2 = (cov_1cqg3qhd2j.s[23]++, _interopRequireDefault(_debug));var _bignumber = (cov_1cqg3qhd2j.s[24]++, __webpack_require__(20));var _web = (cov_1cqg3qhd2j.s[25]++, __webpack_require__(8));var _web2 = (cov_1cqg3qhd2j.s[26]++, _interopRequireDefault(_web));function _interopRequireDefault(obj) {
  cov_1cqg3qhd2j.f[0]++;cov_1cqg3qhd2j.s[27]++;return (cov_1cqg3qhd2j.b[1][0]++, obj) && (cov_1cqg3qhd2j.b[1][1]++, obj.__esModule) ? (cov_1cqg3qhd2j.b[0][0]++, obj) : (cov_1cqg3qhd2j.b[0][1]++, { default: obj });
}const debug = (cov_1cqg3qhd2j.s[28]++, (0, _debug2.default)("debugger:data:decode:utils"));const WORD_SIZE = (cov_1cqg3qhd2j.s[29]++, exports.WORD_SIZE = 0x20);const MAX_WORD = (cov_1cqg3qhd2j.s[30]++, exports.MAX_WORD = new _bignumber.BigNumber(2).pow(256).minus(1));function cleanBigNumbers(value) {
  cov_1cqg3qhd2j.f[1]++;cov_1cqg3qhd2j.s[31]++;if (_bignumber.BigNumber.isBigNumber(value)) {
    cov_1cqg3qhd2j.b[2][0]++;cov_1cqg3qhd2j.s[32]++;return value.toNumber();
  } else {
    cov_1cqg3qhd2j.b[2][1]++;cov_1cqg3qhd2j.s[33]++;if ((cov_1cqg3qhd2j.b[4][0]++, value) && (cov_1cqg3qhd2j.b[4][1]++, value.map != undefined)) {
      cov_1cqg3qhd2j.b[3][0]++;cov_1cqg3qhd2j.s[34]++;return value.map(inner => {
        cov_1cqg3qhd2j.f[2]++;cov_1cqg3qhd2j.s[35]++;return cleanBigNumbers(inner);
      });
    } else {
      cov_1cqg3qhd2j.b[3][1]++;cov_1cqg3qhd2j.s[36]++;if ((cov_1cqg3qhd2j.b[6][0]++, value) && (cov_1cqg3qhd2j.b[6][1]++, typeof value == "object")) {
        cov_1cqg3qhd2j.b[5][0]++;cov_1cqg3qhd2j.s[37]++;return (0, _assign2.default)({}, ...(0, _entries2.default)(value).map(([key, inner]) => {
          cov_1cqg3qhd2j.f[3]++;cov_1cqg3qhd2j.s[38]++;return { [key]: cleanBigNumbers(inner) };
        }));
      } else {
        cov_1cqg3qhd2j.b[5][1]++;cov_1cqg3qhd2j.s[39]++;return value;
      }
    }
  }
}function typeIdentifier(definition) {
  cov_1cqg3qhd2j.f[4]++;cov_1cqg3qhd2j.s[40]++;return definition.typeDescriptions.typeIdentifier;
}function typeClass(definition) {
  cov_1cqg3qhd2j.f[5]++;cov_1cqg3qhd2j.s[41]++;return typeIdentifier(definition).match(/t_([^$_0-9]+)/)[1];
}function allocateDeclarations(declarations, refs, slot = (cov_1cqg3qhd2j.b[7][0]++, 0), index = (cov_1cqg3qhd2j.b[8][0]++, WORD_SIZE - 1)) {
  cov_1cqg3qhd2j.f[6]++;cov_1cqg3qhd2j.s[42]++;slot = normalizeSlot(slot);cov_1cqg3qhd2j.s[43]++;if (index < WORD_SIZE - 1) {
    cov_1cqg3qhd2j.b[9][0]++;cov_1cqg3qhd2j.s[44]++;slot = { path: slot, offset: 1 };cov_1cqg3qhd2j.s[45]++;index = WORD_SIZE - 1;
  } else {
    cov_1cqg3qhd2j.b[9][1]++;
  }let parentFrom = (cov_1cqg3qhd2j.s[46]++, { slot, index: 0 });var parentTo = (cov_1cqg3qhd2j.s[47]++, { slot, index: WORD_SIZE - 1 });let mapping = (cov_1cqg3qhd2j.s[48]++, {});cov_1cqg3qhd2j.s[49]++;for (let declaration of declarations) {
    let { from, to, next, children } = (cov_1cqg3qhd2j.s[50]++, allocateDeclaration(declaration, refs, slot, index));cov_1cqg3qhd2j.s[51]++;mapping[declaration.id] = { from, to, name: declaration.name };cov_1cqg3qhd2j.s[52]++;if (children !== undefined) {
      cov_1cqg3qhd2j.b[10][0]++;cov_1cqg3qhd2j.s[53]++;mapping[declaration.id].children = children;
    } else {
      cov_1cqg3qhd2j.b[10][1]++;
    }cov_1cqg3qhd2j.s[54]++;slot = next.slot;cov_1cqg3qhd2j.s[55]++;index = next.index;cov_1cqg3qhd2j.s[56]++;parentTo = { slot: to.slot, index: WORD_SIZE - 1 };
  }cov_1cqg3qhd2j.s[57]++;if (index < WORD_SIZE - 1) {
    cov_1cqg3qhd2j.b[11][0]++;cov_1cqg3qhd2j.s[58]++;slot = { path: slot, offset: 1 };cov_1cqg3qhd2j.s[59]++;index = WORD_SIZE - 1;
  } else {
    cov_1cqg3qhd2j.b[11][1]++;
  }cov_1cqg3qhd2j.s[60]++;return { from: parentFrom, to: parentTo, next: { slot, index }, children: mapping };
}function allocateValue(slot, index, bytes) {
  cov_1cqg3qhd2j.f[7]++;let from = (cov_1cqg3qhd2j.s[61]++, index - bytes + 1 >= 0 ? (cov_1cqg3qhd2j.b[12][0]++, { slot, index: index - bytes + 1 }) : (cov_1cqg3qhd2j.b[12][1]++, { slot: { path: slot.path, offset: slot.offset + 1 }, index: WORD_SIZE - bytes }));let to = (cov_1cqg3qhd2j.s[62]++, { slot: from.slot, index: from.index + bytes - 1 });let next = (cov_1cqg3qhd2j.s[63]++, from.index == 0 ? (cov_1cqg3qhd2j.b[13][0]++, { slot: { path: from.slot.path, offset: from.slot.offset + 1 }, index: WORD_SIZE - 1 }) : (cov_1cqg3qhd2j.b[13][1]++, { slot: from.slot, index: from.index - 1 }));cov_1cqg3qhd2j.s[64]++;return { from, to, next };
}function allocateDeclaration(declaration, refs, slot, index) {
  cov_1cqg3qhd2j.f[8]++;let definition = (cov_1cqg3qhd2j.s[65]++, refs[declaration.id].definition);var byteSize = (cov_1cqg3qhd2j.s[66]++, storageSize(definition));cov_1cqg3qhd2j.s[67]++;if (typeClass(definition) != "struct") {
    cov_1cqg3qhd2j.b[14][0]++;cov_1cqg3qhd2j.s[68]++;return allocateValue(slot, index, byteSize);
  } else {
    cov_1cqg3qhd2j.b[14][1]++;
  }let struct = (cov_1cqg3qhd2j.s[69]++, refs[definition.typeName.referencedDeclaration]);cov_1cqg3qhd2j.s[70]++;debug("struct: %O", struct);let result = (cov_1cqg3qhd2j.s[71]++, allocateDeclarations((cov_1cqg3qhd2j.b[15][0]++, struct.variables) || (cov_1cqg3qhd2j.b[15][1]++, []), refs, slot, index));cov_1cqg3qhd2j.s[72]++;debug("struct result %o", result);cov_1cqg3qhd2j.s[73]++;return result;
}function normalizeSlot(slot) {
  cov_1cqg3qhd2j.f[9]++;cov_1cqg3qhd2j.s[74]++;if ((cov_1cqg3qhd2j.b[17][0]++, typeof slot == "object") && (cov_1cqg3qhd2j.b[17][1]++, slot.path != undefined)) {
    cov_1cqg3qhd2j.b[16][0]++;cov_1cqg3qhd2j.s[75]++;return { path: slot.path, offset: (cov_1cqg3qhd2j.b[18][0]++, slot.offset) || (cov_1cqg3qhd2j.b[18][1]++, 0) };
  } else {
    cov_1cqg3qhd2j.b[16][1]++;
  }cov_1cqg3qhd2j.s[76]++;return { path: slot, offset: 0 };
}function specifiedSize(definition) {
  cov_1cqg3qhd2j.f[10]++;let specified = (cov_1cqg3qhd2j.s[77]++, typeIdentifier(definition).match(/t_[a-z]+([0-9]+)/));cov_1cqg3qhd2j.s[78]++;if (!specified) {
    cov_1cqg3qhd2j.b[19][0]++;cov_1cqg3qhd2j.s[79]++;return null;
  } else {
    cov_1cqg3qhd2j.b[19][1]++;
  }let num = (cov_1cqg3qhd2j.s[80]++, specified[1]);cov_1cqg3qhd2j.s[81]++;switch (typeClass(definition)) {case "int":
      cov_1cqg3qhd2j.b[20][0]++;case "uint":
      cov_1cqg3qhd2j.b[20][1]++;cov_1cqg3qhd2j.s[82]++;return num / 8;case "bytes":
      cov_1cqg3qhd2j.b[20][2]++;cov_1cqg3qhd2j.s[83]++;return num;default:
      cov_1cqg3qhd2j.b[20][3]++;cov_1cqg3qhd2j.s[84]++;debug("Unknown type for size specification: %s", typeIdentifier(definition));}
}function storageSize(definition) {
  cov_1cqg3qhd2j.f[11]++;cov_1cqg3qhd2j.s[85]++;switch (typeClass(definition)) {case "bool":
      cov_1cqg3qhd2j.b[21][0]++;cov_1cqg3qhd2j.s[86]++;return 1;case "address":
      cov_1cqg3qhd2j.b[21][1]++;cov_1cqg3qhd2j.s[87]++;return 20;case "int":
      cov_1cqg3qhd2j.b[21][2]++;case "uint":
      cov_1cqg3qhd2j.b[21][3]++;cov_1cqg3qhd2j.s[88]++;return typeIdentifier(definition).match(/t_[a-z]+([0-9]+)/)[1] / 8;case "string":
      cov_1cqg3qhd2j.b[21][4]++;case "bytes":
      cov_1cqg3qhd2j.b[21][5]++;case "array":
      cov_1cqg3qhd2j.b[21][6]++;cov_1cqg3qhd2j.s[89]++;return WORD_SIZE;case "mapping":
      cov_1cqg3qhd2j.b[21][7]++;cov_1cqg3qhd2j.s[90]++;return WORD_SIZE;}
}function isMapping(definition) {
  cov_1cqg3qhd2j.f[12]++;cov_1cqg3qhd2j.s[91]++;return typeIdentifier(definition).match(/^t_mapping/) != null;
}function isReference(definition) {
  cov_1cqg3qhd2j.f[13]++;cov_1cqg3qhd2j.s[92]++;return typeIdentifier(definition).match(/_(memory|storage)(_ptr)?$/) != null;
}function referenceType(definition) {
  cov_1cqg3qhd2j.f[14]++;cov_1cqg3qhd2j.s[93]++;return typeIdentifier(definition).match(/_([^_]+)(_ptr)?$/)[1];
}function baseDefinition(definition) {
  cov_1cqg3qhd2j.f[15]++;let baseIdentifier = (cov_1cqg3qhd2j.s[94]++, typeIdentifier(definition).match(/^[^$]+\$_(.+)_\$[^$]+$/)[1]);cov_1cqg3qhd2j.s[95]++;if (baseIdentifier.match(/_(memory|storage)$/) != null) {
    cov_1cqg3qhd2j.b[22][0]++;cov_1cqg3qhd2j.s[96]++;baseIdentifier = `${baseIdentifier}_ptr`;
  } else {
    cov_1cqg3qhd2j.b[22][1]++;
  }cov_1cqg3qhd2j.s[97]++;return { typeDescriptions: { typeIdentifier: baseIdentifier } };
}function toBigNumber(bytes) {
  cov_1cqg3qhd2j.f[16]++;cov_1cqg3qhd2j.s[98]++;if (bytes == undefined) {
    cov_1cqg3qhd2j.b[23][0]++;cov_1cqg3qhd2j.s[99]++;return undefined;
  } else {
    cov_1cqg3qhd2j.b[23][1]++;cov_1cqg3qhd2j.s[100]++;if (typeof bytes == "string") {
      cov_1cqg3qhd2j.b[24][0]++;cov_1cqg3qhd2j.s[101]++;return new _bignumber.BigNumber(bytes, 16);
    } else {
      cov_1cqg3qhd2j.b[24][1]++;cov_1cqg3qhd2j.s[102]++;if ((cov_1cqg3qhd2j.b[26][0]++, typeof bytes == "number") || (cov_1cqg3qhd2j.b[26][1]++, _bignumber.BigNumber.isBigNumber(bytes))) {
        cov_1cqg3qhd2j.b[25][0]++;cov_1cqg3qhd2j.s[103]++;return new _bignumber.BigNumber(bytes);
      } else {
        cov_1cqg3qhd2j.b[25][1]++;cov_1cqg3qhd2j.s[104]++;if (bytes.reduce) {
          cov_1cqg3qhd2j.b[27][0]++;cov_1cqg3qhd2j.s[105]++;return bytes.reduce((num, byte) => {
            cov_1cqg3qhd2j.f[17]++;cov_1cqg3qhd2j.s[106]++;return num.times(0x100).plus(byte);
          }, new _bignumber.BigNumber(0));
        } else {
          cov_1cqg3qhd2j.b[27][1]++;
        }
      }
    }
  }
}function toSignedBigNumber(bytes) {
  cov_1cqg3qhd2j.f[18]++;cov_1cqg3qhd2j.s[107]++;if (bytes[0] < 0b10000000) {
    cov_1cqg3qhd2j.b[28][0]++;cov_1cqg3qhd2j.s[108]++;return toBigNumber(bytes);
  } else {
    cov_1cqg3qhd2j.b[28][1]++;cov_1cqg3qhd2j.s[109]++;return toBigNumber(bytes.map(b => {
      cov_1cqg3qhd2j.f[19]++;cov_1cqg3qhd2j.s[110]++;return 0xff - b;
    })).plus(1).negated();
  }
}function toHexString(bytes, length = (cov_1cqg3qhd2j.b[29][0]++, 0), trim = (cov_1cqg3qhd2j.b[30][0]++, false)) {
  cov_1cqg3qhd2j.f[20]++;cov_1cqg3qhd2j.s[111]++;if (typeof length == "boolean") {
    cov_1cqg3qhd2j.b[31][0]++;cov_1cqg3qhd2j.s[112]++;trim = length;cov_1cqg3qhd2j.s[113]++;length = 0;
  } else {
    cov_1cqg3qhd2j.b[31][1]++;
  }cov_1cqg3qhd2j.s[114]++;if (_bignumber.BigNumber.isBigNumber(bytes)) {
    cov_1cqg3qhd2j.b[32][0]++;cov_1cqg3qhd2j.s[115]++;bytes = toBytes(bytes);
  } else {
    cov_1cqg3qhd2j.b[32][1]++;
  }cov_1cqg3qhd2j.s[116]++;const pad = s => {
    cov_1cqg3qhd2j.f[21]++;cov_1cqg3qhd2j.s[117]++;return `${"00".slice(0, 2 - s.length)}${s}`;
  };cov_1cqg3qhd2j.s[118]++;if (bytes.length < length) {
    cov_1cqg3qhd2j.b[33][0]++;let prior = (cov_1cqg3qhd2j.s[119]++, bytes);cov_1cqg3qhd2j.s[120]++;bytes = new Uint8Array(length);cov_1cqg3qhd2j.s[121]++;bytes.set(prior, length - prior.length);
  } else {
    cov_1cqg3qhd2j.b[33][1]++;
  }cov_1cqg3qhd2j.s[122]++;debug("bytes: %o", bytes);let string = (cov_1cqg3qhd2j.s[123]++, bytes.reduce((str, byte) => {
    cov_1cqg3qhd2j.f[22]++;cov_1cqg3qhd2j.s[124]++;return `${str}${pad(byte.toString(16))}`;
  }, ""));cov_1cqg3qhd2j.s[125]++;if (trim) {
    cov_1cqg3qhd2j.b[34][0]++;cov_1cqg3qhd2j.s[126]++;string = string.replace(/^(00)+/, "");
  } else {
    cov_1cqg3qhd2j.b[34][1]++;
  }cov_1cqg3qhd2j.s[127]++;if (string.length == 0) {
    cov_1cqg3qhd2j.b[35][0]++;cov_1cqg3qhd2j.s[128]++;string = "00";
  } else {
    cov_1cqg3qhd2j.b[35][1]++;
  }cov_1cqg3qhd2j.s[129]++;return `0x${string}`;
}function toBytes(number, length = (cov_1cqg3qhd2j.b[36][0]++, 0)) {
  cov_1cqg3qhd2j.f[23]++;cov_1cqg3qhd2j.s[130]++;if ((cov_1cqg3qhd2j.b[38][0]++, number < 0) || (cov_1cqg3qhd2j.b[38][1]++, number === "")) {
    cov_1cqg3qhd2j.b[37][0]++;cov_1cqg3qhd2j.s[131]++;return [];
  } else {
    cov_1cqg3qhd2j.b[37][1]++;
  }let hex = (cov_1cqg3qhd2j.s[132]++, number.toString(16));cov_1cqg3qhd2j.s[133]++;if (hex.length % 2 == 1) {
    cov_1cqg3qhd2j.b[39][0]++;cov_1cqg3qhd2j.s[134]++;hex = `0${hex}`;
  } else {
    cov_1cqg3qhd2j.b[39][1]++;
  }let bytes = (cov_1cqg3qhd2j.s[135]++, new Uint8Array(hex.match(/.{2}/g).map(byte => {
    cov_1cqg3qhd2j.f[24]++;cov_1cqg3qhd2j.s[136]++;return parseInt(byte, 16);
  })));cov_1cqg3qhd2j.s[137]++;if (bytes.length < length) {
    cov_1cqg3qhd2j.b[40][0]++;let prior = (cov_1cqg3qhd2j.s[138]++, bytes);cov_1cqg3qhd2j.s[139]++;bytes = new Uint8Array(length);cov_1cqg3qhd2j.s[140]++;bytes.set(prior, length - prior.length);
  } else {
    cov_1cqg3qhd2j.b[40][1]++;
  }cov_1cqg3qhd2j.s[141]++;return bytes;
}function keccak256(...args) {
  cov_1cqg3qhd2j.f[25]++;let web3 = (cov_1cqg3qhd2j.s[142]++, new _web2.default());cov_1cqg3qhd2j.s[143]++;debug("args %o", args);let sha = (cov_1cqg3qhd2j.s[144]++, web3.utils.soliditySha3(...args));cov_1cqg3qhd2j.s[145]++;debug("sha %o", sha);cov_1cqg3qhd2j.s[146]++;return toBigNumber(sha);
}

/***/ }),
/* 12 */
/***/ (function(module, exports) {

module.exports = require("chai");

/***/ }),
/* 13 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var cov_1m0wghs4ze=function(){var path="/Users/gnidan/src/work/truffle/packages/truffle-debugger/test/helpers.js",hash="7b068b7eb1131cb1783b10ee26f6f28a83c4a1a9",Function=function(){}.constructor,global=new Function('return this')(),gcv="__coverage__",coverageData={path:"/Users/gnidan/src/work/truffle/packages/truffle-debugger/test/helpers.js",statementMap:{"0":{start:{line:3,column:0},end:{line:5,column:3}},"1":{start:{line:6,column:0},end:{line:6,column:198}},"2":{start:{line:8,column:15},end:{line:8,column:55}},"3":{start:{line:10,column:16},end:{line:10,column:48}},"4":{start:{line:12,column:12},end:{line:12,column:56}},"5":{start:{line:14,column:13},end:{line:14,column:42}},"6":{start:{line:16,column:25},end:{line:16,column:74}},"7":{start:{line:18,column:25},end:{line:18,column:67}},"8":{start:{line:20,column:23},end:{line:65,column:4}},"9":{start:{line:21,column:13},end:{line:60,column:4}},"10":{start:{line:22,column:17},end:{line:22,column:38}},"11":{start:{line:24,column:19},end:{line:24,column:46}},"12":{start:{line:26,column:4},end:{line:30,column:6}},"13":{start:{line:31,column:4},end:{line:31,column:32}},"14":{start:{line:33,column:4},end:{line:33,column:40}},"15":{start:{line:34,column:31},end:{line:34,column:52}},"16":{start:{line:35,column:24},end:{line:35,column:54}},"17":{start:{line:37,column:4},end:{line:39,column:5}},"18":{start:{line:38,column:6},end:{line:38,column:58}},"19":{start:{line:41,column:4},end:{line:41,column:44}},"20":{start:{line:42,column:4},end:{line:42,column:26}},"21":{start:{line:44,column:20},end:{line:44,column:49}},"22":{start:{line:45,column:4},end:{line:47,column:8}},"23":{start:{line:46,column:6},end:{line:46,column:28}},"24":{start:{line:49,column:23},end:{line:49,column:25}},"25":{start:{line:50,column:4},end:{line:52,column:7}},"26":{start:{line:51,column:6},end:{line:51,column:57}},"27":{start:{line:54,column:4},end:{line:59,column:6}},"28":{start:{line:62,column:2},end:{line:64,column:4}},"29":{start:{line:63,column:4},end:{line:63,column:39}},"30":{start:{line:67,column:20},end:{line:90,column:4}},"31":{start:{line:68,column:14},end:{line:85,column:4}},"32":{start:{line:69,column:17},end:{line:78,column:6}},"33":{start:{line:70,column:6},end:{line:77,column:9}},"34":{start:{line:71,column:8},end:{line:71,column:36}},"35":{start:{line:71,column:17},end:{line:71,column:36}},"36":{start:{line:72,column:8},end:{line:72,column:64}},"37":{start:{line:73,column:8},end:{line:73,column:94}},"38":{start:{line:74,column:8},end:{line:74,column:29}},"39":{start:{line:76,column:8},end:{line:76,column:23}},"40":{start:{line:80,column:4},end:{line:80,column:100}},"41":{start:{line:81,column:4},end:{line:81,column:102}},"42":{start:{line:82,column:4},end:{line:82,column:110}},"43":{start:{line:84,column:4},end:{line:84,column:18}},"44":{start:{line:87,column:2},end:{line:89,column:4}},"45":{start:{line:88,column:4},end:{line:88,column:40}},"46":{start:{line:92,column:19},end:{line:106,column:4}},"47":{start:{line:93,column:14},end:{line:101,column:4}},"48":{start:{line:94,column:19},end:{line:94,column:21}},"49":{start:{line:95,column:4},end:{line:98,column:5}},"50":{start:{line:96,column:19},end:{line:96,column:36}},"51":{start:{line:97,column:6},end:{line:97,column:117}},"52":{start:{line:100,column:4},end:{line:100,column:49}},"53":{start:{line:103,column:2},end:{line:105,column:4}},"54":{start:{line:104,column:4},end:{line:104,column:40}},"55":{start:{line:108,column:20},end:{line:122,column:4}},"56":{start:{line:109,column:14},end:{line:117,column:4}},"57":{start:{line:110,column:19},end:{line:110,column:21}},"58":{start:{line:111,column:4},end:{line:114,column:5}},"59":{start:{line:112,column:19},end:{line:112,column:39}},"60":{start:{line:113,column:6},end:{line:113,column:118}},"61":{start:{line:116,column:4},end:{line:116,column:49}},"62":{start:{line:119,column:2},end:{line:121,column:4}},"63":{start:{line:120,column:4},end:{line:120,column:40}},"64":{start:{line:124,column:24},end:{line:152,column:4}},"65":{start:{line:125,column:14},end:{line:147,column:4}},"66":{start:{line:126,column:4},end:{line:128,column:7}},"67":{start:{line:127,column:6},end:{line:127,column:34}},"68":{start:{line:130,column:21},end:{line:130,column:23}},"69":{start:{line:132,column:4},end:{line:144,column:7}},"70":{start:{line:133,column:18},end:{line:133,column:23}},"71":{start:{line:134,column:21},end:{line:134,column:58}},"72":{start:{line:135,column:19},end:{line:141,column:5}},"73":{start:{line:143,column:6},end:{line:143,column:36}},"74":{start:{line:146,column:4},end:{line:146,column:22}},"75":{start:{line:149,column:2},end:{line:151,column:4}},"76":{start:{line:150,column:4},end:{line:150,column:40}},"77":{start:{line:154,column:14},end:{line:172,column:4}},"78":{start:{line:155,column:14},end:{line:167,column:4}},"79":{start:{line:156,column:4},end:{line:166,column:7}},"80":{start:{line:157,column:6},end:{line:165,column:9}},"81":{start:{line:161,column:8},end:{line:161,column:36}},"82":{start:{line:161,column:17},end:{line:161,column:36}},"83":{start:{line:162,column:39},end:{line:162,column:45}},"84":{start:{line:163,column:8},end:{line:163,column:35}},"85":{start:{line:164,column:8},end:{line:164,column:58}},"86":{start:{line:169,column:2},end:{line:171,column:4}},"87":{start:{line:170,column:4},end:{line:170,column:40}},"88":{start:{line:174,column:14},end:{line:189,column:4}},"89":{start:{line:175,column:14},end:{line:184,column:4}},"90":{start:{line:176,column:4},end:{line:183,column:7}},"91":{start:{line:177,column:6},end:{line:182,column:9}},"92":{start:{line:180,column:8},end:{line:180,column:36}},"93":{start:{line:180,column:17},end:{line:180,column:36}},"94":{start:{line:181,column:8},end:{line:181,column:26}},"95":{start:{line:186,column:2},end:{line:188,column:4}},"96":{start:{line:187,column:4},end:{line:187,column:40}},"97":{start:{line:191,column:22},end:{line:199,column:4}},"98":{start:{line:192,column:14},end:{line:194,column:4}},"99":{start:{line:193,column:4},end:{line:193,column:63}},"100":{start:{line:196,column:2},end:{line:198,column:4}},"101":{start:{line:197,column:4},end:{line:197,column:40}},"102":{start:{line:201,column:0},end:{line:201,column:34}},"103":{start:{line:203,column:13},end:{line:203,column:29}},"104":{start:{line:205,column:14},end:{line:205,column:44}},"105":{start:{line:207,column:12},end:{line:207,column:27}},"106":{start:{line:209,column:13},end:{line:209,column:42}},"107":{start:{line:211,column:15},end:{line:211,column:34}},"108":{start:{line:213,column:16},end:{line:213,column:48}},"109":{start:{line:215,column:13},end:{line:215,column:29}},"110":{start:{line:217,column:14},end:{line:217,column:44}},"111":{start:{line:219,column:30},end:{line:219,column:65}},"112":{start:{line:221,column:31},end:{line:221,column:78}},"113":{start:{line:223,column:25},end:{line:223,column:55}},"114":{start:{line:225,column:26},end:{line:225,column:68}},"115":{start:{line:227,column:25},end:{line:227,column:54}},"116":{start:{line:229,column:26},end:{line:229,column:68}},"117":{start:{line:231,column:11},end:{line:231,column:26}},"118":{start:{line:233,column:12},end:{line:233,column:40}},"119":{start:{line:235,column:22},end:{line:235,column:48}},"120":{start:{line:237,column:23},end:{line:237,column:62}},"121":{start:{line:239,column:18},end:{line:239,column:40}},"122":{start:{line:241,column:19},end:{line:241,column:54}},"123":{start:{line:243,column:23},end:{line:243,column:50}},"124":{start:{line:245,column:24},end:{line:245,column:64}},"125":{start:{line:247,column:21},end:{line:247,column:46}},"126":{start:{line:249,column:22},end:{line:249,column:60}},"127":{start:{line:251,column:39},end:{line:251,column:93}},"128":{start:{line:253,column:14},end:{line:253,column:50}},"129":{start:{line:256,column:13},end:{line:256,column:40}},"130":{start:{line:257,column:2},end:{line:262,column:5}},"131":{start:{line:258,column:4},end:{line:261,column:7}},"132":{start:{line:259,column:6},end:{line:259,column:34}},"133":{start:{line:259,column:15},end:{line:259,column:34}},"134":{start:{line:260,column:6},end:{line:260,column:23}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:20,column:51},end:{line:20,column:52}},loc:{start:{line:20,column:57},end:{line:65,column:1}},line:20},"1":{name:"(anonymous_1)",decl:{start:{line:21,column:45},end:{line:21,column:46}},loc:{start:{line:21,column:92},end:{line:60,column:3}},line:21},"2":{name:"(anonymous_2)",decl:{start:{line:45,column:41},end:{line:45,column:42}},loc:{start:{line:45,column:54},end:{line:47,column:5}},line:45},"3":{name:"(anonymous_3)",decl:{start:{line:50,column:26},end:{line:50,column:27}},loc:{start:{line:50,column:42},end:{line:52,column:5}},line:50},"4":{name:"prepareContracts",decl:{start:{line:62,column:18},end:{line:62,column:34}},loc:{start:{line:62,column:39},end:{line:64,column:3}},line:62},"5":{name:"(anonymous_5)",decl:{start:{line:67,column:45},end:{line:67,column:46}},loc:{start:{line:67,column:51},end:{line:90,column:1}},line:67},"6":{name:"(anonymous_6)",decl:{start:{line:68,column:46},end:{line:68,column:47}},loc:{start:{line:68,column:59},end:{line:85,column:3}},line:68},"7":{name:"(anonymous_7)",decl:{start:{line:69,column:45},end:{line:69,column:46}},loc:{start:{line:69,column:71},end:{line:78,column:5}},line:69},"8":{name:"(anonymous_8)",decl:{start:{line:70,column:35},end:{line:70,column:36}},loc:{start:{line:70,column:58},end:{line:77,column:7}},line:70},"9":{name:"createSandbox",decl:{start:{line:87,column:18},end:{line:87,column:31}},loc:{start:{line:87,column:34},end:{line:89,column:3}},line:87},"10":{name:"(anonymous_10)",decl:{start:{line:92,column:43},end:{line:92,column:44}},loc:{start:{line:92,column:49},end:{line:106,column:1}},line:92},"11":{name:"(anonymous_11)",decl:{start:{line:93,column:46},end:{line:93,column:47}},loc:{start:{line:93,column:79},end:{line:101,column:3}},line:93},"12":{name:"addContracts",decl:{start:{line:103,column:18},end:{line:103,column:30}},loc:{start:{line:103,column:36},end:{line:105,column:3}},line:103},"13":{name:"(anonymous_13)",decl:{start:{line:108,column:45},end:{line:108,column:46}},loc:{start:{line:108,column:51},end:{line:122,column:1}},line:108},"14":{name:"(anonymous_14)",decl:{start:{line:109,column:46},end:{line:109,column:47}},loc:{start:{line:109,column:82},end:{line:117,column:3}},line:109},"15":{name:"addMigrations",decl:{start:{line:119,column:18},end:{line:119,column:31}},loc:{start:{line:119,column:37},end:{line:121,column:3}},line:119},"16":{name:"(anonymous_16)",decl:{start:{line:124,column:53},end:{line:124,column:54}},loc:{start:{line:124,column:59},end:{line:152,column:1}},line:124},"17":{name:"(anonymous_17)",decl:{start:{line:125,column:46},end:{line:125,column:47}},loc:{start:{line:125,column:72},end:{line:147,column:3}},line:125},"18":{name:"(anonymous_18)",decl:{start:{line:126,column:41},end:{line:126,column:42}},loc:{start:{line:126,column:57},end:{line:128,column:5}},line:126},"19":{name:"(anonymous_19)",decl:{start:{line:132,column:26},end:{line:132,column:27}},loc:{start:{line:132,column:53},end:{line:144,column:5}},line:132},"20":{name:"defaultMigrations",decl:{start:{line:149,column:18},end:{line:149,column:35}},loc:{start:{line:149,column:41},end:{line:151,column:3}},line:149},"21":{name:"(anonymous_21)",decl:{start:{line:154,column:33},end:{line:154,column:34}},loc:{start:{line:154,column:39},end:{line:172,column:1}},line:154},"22":{name:"(anonymous_22)",decl:{start:{line:155,column:46},end:{line:155,column:47}},loc:{start:{line:155,column:65},end:{line:167,column:3}},line:155},"23":{name:"(anonymous_23)",decl:{start:{line:156,column:33},end:{line:156,column:34}},loc:{start:{line:156,column:59},end:{line:166,column:5}},line:156},"24":{name:"(anonymous_24)",decl:{start:{line:160,column:10},end:{line:160,column:11}},loc:{start:{line:160,column:33},end:{line:165,column:7}},line:160},"25":{name:"compile",decl:{start:{line:169,column:18},end:{line:169,column:25}},loc:{start:{line:169,column:31},end:{line:171,column:3}},line:169},"26":{name:"(anonymous_26)",decl:{start:{line:174,column:33},end:{line:174,column:34}},loc:{start:{line:174,column:39},end:{line:189,column:1}},line:174},"27":{name:"(anonymous_27)",decl:{start:{line:175,column:46},end:{line:175,column:47}},loc:{start:{line:175,column:65},end:{line:184,column:3}},line:175},"28":{name:"(anonymous_28)",decl:{start:{line:176,column:33},end:{line:176,column:34}},loc:{start:{line:176,column:59},end:{line:183,column:5}},line:176},"29":{name:"(anonymous_29)",decl:{start:{line:179,column:10},end:{line:179,column:11}},loc:{start:{line:179,column:36},end:{line:182,column:7}},line:179},"30":{name:"migrate",decl:{start:{line:186,column:18},end:{line:186,column:25}},loc:{start:{line:186,column:31},end:{line:188,column:3}},line:186},"31":{name:"(anonymous_31)",decl:{start:{line:191,column:49},end:{line:191,column:50}},loc:{start:{line:191,column:55},end:{line:199,column:1}},line:191},"32":{name:"(anonymous_32)",decl:{start:{line:192,column:46},end:{line:192,column:47}},loc:{start:{line:192,column:65},end:{line:194,column:3}},line:192},"33":{name:"gatherArtifacts",decl:{start:{line:196,column:18},end:{line:196,column:33}},loc:{start:{line:196,column:39},end:{line:198,column:3}},line:196},"34":{name:"_interopRequireDefault",decl:{start:{line:251,column:9},end:{line:251,column:31}},loc:{start:{line:251,column:37},end:{line:251,column:95}},line:251},"35":{name:"getAccounts",decl:{start:{line:255,column:9},end:{line:255,column:20}},loc:{start:{line:255,column:31},end:{line:263,column:1}},line:255},"36":{name:"(anonymous_36)",decl:{start:{line:257,column:31},end:{line:257,column:32}},loc:{start:{line:257,column:57},end:{line:262,column:3}},line:257},"37":{name:"(anonymous_37)",decl:{start:{line:258,column:25},end:{line:258,column:26}},loc:{start:{line:258,column:50},end:{line:261,column:5}},line:258}},branchMap:{"0":{loc:{start:{line:21,column:66},end:{line:21,column:78}},type:"default-arg",locations:[{start:{line:21,column:76},end:{line:21,column:78}}],line:21},"1":{loc:{start:{line:37,column:4},end:{line:39,column:5}},type:"if",locations:[{start:{line:37,column:4},end:{line:39,column:5}},{start:{line:37,column:4},end:{line:39,column:5}}],line:37},"2":{loc:{start:{line:71,column:8},end:{line:71,column:36}},type:"if",locations:[{start:{line:71,column:8},end:{line:71,column:36}},{start:{line:71,column:8},end:{line:71,column:36}}],line:71},"3":{loc:{start:{line:93,column:65},end:{line:93,column:77}},type:"default-arg",locations:[{start:{line:93,column:75},end:{line:93,column:77}}],line:93},"4":{loc:{start:{line:109,column:65},end:{line:109,column:80}},type:"default-arg",locations:[{start:{line:109,column:78},end:{line:109,column:80}}],line:109},"5":{loc:{start:{line:161,column:8},end:{line:161,column:36}},type:"if",locations:[{start:{line:161,column:8},end:{line:161,column:36}},{start:{line:161,column:8},end:{line:161,column:36}}],line:161},"6":{loc:{start:{line:180,column:8},end:{line:180,column:36}},type:"if",locations:[{start:{line:180,column:8},end:{line:180,column:36}},{start:{line:180,column:8},end:{line:180,column:36}}],line:180},"7":{loc:{start:{line:251,column:46},end:{line:251,column:92}},type:"cond-expr",locations:[{start:{line:251,column:70},end:{line:251,column:73}},{start:{line:251,column:76},end:{line:251,column:92}}],line:251},"8":{loc:{start:{line:251,column:46},end:{line:251,column:67}},type:"binary-expr",locations:[{start:{line:251,column:46},end:{line:251,column:49}},{start:{line:251,column:53},end:{line:251,column:67}}],line:251},"9":{loc:{start:{line:259,column:6},end:{line:259,column:34}},type:"if",locations:[{start:{line:259,column:6},end:{line:259,column:34}},{start:{line:259,column:6},end:{line:259,column:34}}],line:259}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0,"80":0,"81":0,"82":0,"83":0,"84":0,"85":0,"86":0,"87":0,"88":0,"89":0,"90":0,"91":0,"92":0,"93":0,"94":0,"95":0,"96":0,"97":0,"98":0,"99":0,"100":0,"101":0,"102":0,"103":0,"104":0,"105":0,"106":0,"107":0,"108":0,"109":0,"110":0,"111":0,"112":0,"113":0,"114":0,"115":0,"116":0,"117":0,"118":0,"119":0,"120":0,"121":0,"122":0,"123":0,"124":0,"125":0,"126":0,"127":0,"128":0,"129":0,"130":0,"131":0,"132":0,"133":0,"134":0},f:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0},b:{"0":[0],"1":[0,0],"2":[0,0],"3":[0],"4":[0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0]},inputSourceMap:{version:3,sources:["test/helpers.js"],names:["provider","sources","migrations","config","createSandbox","accounts","getAccounts","networks","network_id","from","network","addContracts","contracts","files","compile","contractNames","defaultMigrations","addMigrations","migrate","artifacts","gatherArtifacts","debug","map","a","contractName","abstractions","forEach","name","resolver","require","prepareContracts","accept","reject","Box","sandbox","err","result","Resolver","artifactor","Artifactor","contracts_build_directory","fs","remove","path","join","contracts_directory","migrations_directory","promises","filename","source","push","outputFile","all","filter","i","index","Contracts","with","quiet","outputs","solc","Migrate","run","Debug","web3","Web3","eth"],mappings:"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",file:"helpers.js",sourceRoot:"/Users/gnidan/src/work/truffle/packages/truffle-debugger",sourcesContent:["import debugModule from \"debug\";\nconst debug = debugModule(\"test:helpers\");\n\nimport path from \"path\";\nimport fs from \"fs-extra\";\nimport async from \"async\";\nimport Contracts from \"truffle-workflow-compile\";\nimport Debug from \"truffle-debug-utils\";\nimport Artifactor from \"truffle-artifactor\";\nimport Web3 from \"web3\";\nimport Migrate from \"truffle-migrate\";\nimport Box from \"truffle-box\";\nimport Resolver from \"truffle-resolver\";\nimport expect from \"truffle-expect\";\n\nexport async function prepareContracts(provider, sources = {}, migrations) {\n  let config = await createSandbox();\n\n  let accounts = await getAccounts(provider);\n\n  config.networks[\"debugger\"] = {\n    provider: provider,\n    network_id: \"*\",\n    from: accounts[0]\n  }\n  config.network = \"debugger\";\n\n  await addContracts(config, sources);\n  let { contracts, files } = await compile(config);\n  let contractNames = Object.keys(contracts);\n\n  if (!migrations) {\n    migrations = await defaultMigrations(contractNames);\n  }\n\n  await addMigrations(config, migrations);\n  await migrate(config);\n\n  let artifacts = await gatherArtifacts(config);\n  debug(\"artifacts: %o\", artifacts.map((a) => a.contractName));\n\n  let abstractions = {};\n  contractNames.forEach( (name) => {\n    abstractions[name] = config.resolver.require(name);\n  });\n\n  return {\n    files,\n    abstractions,\n    artifacts,\n    config\n  };\n}\n\nexport function getAccounts(provider) {\n  let web3 = new Web3(provider);\n  return new Promise(function(accept, reject) {\n    web3.eth.getAccounts(function(err, accounts) {\n      if (err) return reject(err);\n      accept(accounts);\n    });\n  });\n}\n\nexport async function createSandbox() {\n  let config = await new Promise(function(accept, reject) {\n    Box.sandbox(function(err, result) {\n      if (err) return reject(err);\n      result.resolver = new Resolver(result);\n      result.artifactor = new Artifactor(result.contracts_build_directory);\n      result.networks = {};\n\n      accept(result);\n    });\n  });\n\n  await fs.remove(path.join(config.contracts_directory, \"MetaCoin.sol\"));\n  await fs.remove(path.join(config.contracts_directory, \"ConvertLib.sol\"));\n  await fs.remove(path.join(config.migrations_directory, \"2_deploy_contracts.js\"));\n\n  return config;\n}\n\nexport async function addContracts(config, sources = {}) {\n  let promises = [];\n  for (let filename of Object.keys(sources)) {\n    let source = sources[filename];\n    promises.push(\n      fs.outputFile(path.join(config.contracts_directory, filename), source)\n    );\n  }\n\n  return await Promise.all(promises);\n}\n\nexport async function addMigrations(config, migrations = {}) {\n  let promises = [];\n  for (let filename of Object.keys(migrations)) {\n    let source = migrations[filename];\n    promises.push(\n      fs.outputFile(path.join(config.migrations_directory, filename), source)\n    );\n  }\n\n  return await Promise.all(promises);\n}\n\nexport async function defaultMigrations(contractNames) {\n  contractNames = contractNames.filter((name) => name != \"Migrations\");\n\n  let migrations = {};\n\n  contractNames.forEach( (contractName, i) => {\n    let index = i + 2;  // start at 2 cause Migrations migration\n    let filename = `${index}_migrate_${contractName}.js`;\n    let source = `\n      var ${contractName} = artifacts.require(\"${contractName}\");\n\n      module.exports = function(deployer) {\n        deployer.deploy(${contractName});\n      };\n    `;\n\n    migrations[filename] = source\n  });\n\n  return migrations;\n}\n\nexport async function compile(config) {\n  return new Promise(function(accept, reject) {\n    Contracts.compile(config.with({\n      all: true,\n      quiet: true\n    }), function(err, result) {\n      if (err) return reject(err);\n      const { contracts, outputs } = result;\n      debug(\"result %O\", result);\n      return accept({ contracts, files: outputs.solc });\n    });\n  });\n}\n\nexport async function migrate(config) {\n  return new Promise(function(accept, reject) {\n    Migrate.run(config.with({\n      quiet: true\n    }), function(err, contracts) {\n      if (err) return reject(err);\n      accept(contracts);\n    });\n  });\n}\n\nexport async function gatherArtifacts(config) {\n  return Debug.gatherArtifacts(config);\n}\n"]},_coverageSchema:"332fd63041d2c1bcb487cc26dd0d5f7d97098a6c"},coverage=global[gcv]||(global[gcv]={});if(coverage[path]&&coverage[path].hash===hash){return coverage[path];}coverageData.hash=hash;return coverage[path]=coverageData;}();cov_1m0wghs4ze.s[0]++;Object.defineProperty(exports,"__esModule",{value:true});cov_1m0wghs4ze.s[1]++;exports.gatherArtifacts=exports.migrate=exports.compile=exports.defaultMigrations=exports.addMigrations=exports.addContracts=exports.createSandbox=exports.prepareContracts=undefined;var _promise=(cov_1m0wghs4ze.s[2]++,__webpack_require__(23));var _promise2=(cov_1m0wghs4ze.s[3]++,_interopRequireDefault(_promise));var _keys=(cov_1m0wghs4ze.s[4]++,__webpack_require__(17));var _keys2=(cov_1m0wghs4ze.s[5]++,_interopRequireDefault(_keys));var _asyncToGenerator2=(cov_1m0wghs4ze.s[6]++,__webpack_require__(7));var _asyncToGenerator3=(cov_1m0wghs4ze.s[7]++,_interopRequireDefault(_asyncToGenerator2));let prepareContracts=(cov_1m0wghs4ze.s[8]++,exports.prepareContracts=(()=>{cov_1m0wghs4ze.f[0]++;var _ref=(cov_1m0wghs4ze.s[9]++,(0,_asyncToGenerator3.default)(function*(provider,sources=(cov_1m0wghs4ze.b[0][0]++,{}),migrations){cov_1m0wghs4ze.f[1]++;let config=(cov_1m0wghs4ze.s[10]++,yield createSandbox());let accounts=(cov_1m0wghs4ze.s[11]++,yield getAccounts(provider));cov_1m0wghs4ze.s[12]++;config.networks["debugger"]={provider:provider,network_id:"*",from:accounts[0]};cov_1m0wghs4ze.s[13]++;config.network="debugger";cov_1m0wghs4ze.s[14]++;yield addContracts(config,sources);let{contracts,files}=(cov_1m0wghs4ze.s[15]++,yield compile(config));let contractNames=(cov_1m0wghs4ze.s[16]++,(0,_keys2.default)(contracts));cov_1m0wghs4ze.s[17]++;if(!migrations){cov_1m0wghs4ze.b[1][0]++;cov_1m0wghs4ze.s[18]++;migrations=yield defaultMigrations(contractNames);}else{cov_1m0wghs4ze.b[1][1]++;}cov_1m0wghs4ze.s[19]++;yield addMigrations(config,migrations);cov_1m0wghs4ze.s[20]++;yield migrate(config);let artifacts=(cov_1m0wghs4ze.s[21]++,yield gatherArtifacts(config));cov_1m0wghs4ze.s[22]++;debug("artifacts: %o",artifacts.map(function(a){cov_1m0wghs4ze.f[2]++;cov_1m0wghs4ze.s[23]++;return a.contractName;}));let abstractions=(cov_1m0wghs4ze.s[24]++,{});cov_1m0wghs4ze.s[25]++;contractNames.forEach(function(name){cov_1m0wghs4ze.f[3]++;cov_1m0wghs4ze.s[26]++;abstractions[name]=config.resolver.require(name);});cov_1m0wghs4ze.s[27]++;return{files,abstractions,artifacts,config};}));cov_1m0wghs4ze.s[28]++;return function prepareContracts(_x){cov_1m0wghs4ze.f[4]++;cov_1m0wghs4ze.s[29]++;return _ref.apply(this,arguments);};})());let createSandbox=(cov_1m0wghs4ze.s[30]++,exports.createSandbox=(()=>{cov_1m0wghs4ze.f[5]++;var _ref2=(cov_1m0wghs4ze.s[31]++,(0,_asyncToGenerator3.default)(function*(){cov_1m0wghs4ze.f[6]++;let config=(cov_1m0wghs4ze.s[32]++,yield new _promise2.default(function(accept,reject){cov_1m0wghs4ze.f[7]++;cov_1m0wghs4ze.s[33]++;_truffleBox2.default.sandbox(function(err,result){cov_1m0wghs4ze.f[8]++;cov_1m0wghs4ze.s[34]++;if(err){cov_1m0wghs4ze.b[2][0]++;cov_1m0wghs4ze.s[35]++;return reject(err);}else{cov_1m0wghs4ze.b[2][1]++;}cov_1m0wghs4ze.s[36]++;result.resolver=new _truffleResolver2.default(result);cov_1m0wghs4ze.s[37]++;result.artifactor=new _truffleArtifactor2.default(result.contracts_build_directory);cov_1m0wghs4ze.s[38]++;result.networks={};cov_1m0wghs4ze.s[39]++;accept(result);});}));cov_1m0wghs4ze.s[40]++;yield _fsExtra2.default.remove(_path2.default.join(config.contracts_directory,"MetaCoin.sol"));cov_1m0wghs4ze.s[41]++;yield _fsExtra2.default.remove(_path2.default.join(config.contracts_directory,"ConvertLib.sol"));cov_1m0wghs4ze.s[42]++;yield _fsExtra2.default.remove(_path2.default.join(config.migrations_directory,"2_deploy_contracts.js"));cov_1m0wghs4ze.s[43]++;return config;}));cov_1m0wghs4ze.s[44]++;return function createSandbox(){cov_1m0wghs4ze.f[9]++;cov_1m0wghs4ze.s[45]++;return _ref2.apply(this,arguments);};})());let addContracts=(cov_1m0wghs4ze.s[46]++,exports.addContracts=(()=>{cov_1m0wghs4ze.f[10]++;var _ref3=(cov_1m0wghs4ze.s[47]++,(0,_asyncToGenerator3.default)(function*(config,sources=(cov_1m0wghs4ze.b[3][0]++,{})){cov_1m0wghs4ze.f[11]++;let promises=(cov_1m0wghs4ze.s[48]++,[]);cov_1m0wghs4ze.s[49]++;for(let filename of(0,_keys2.default)(sources)){let source=(cov_1m0wghs4ze.s[50]++,sources[filename]);cov_1m0wghs4ze.s[51]++;promises.push(_fsExtra2.default.outputFile(_path2.default.join(config.contracts_directory,filename),source));}cov_1m0wghs4ze.s[52]++;return yield _promise2.default.all(promises);}));cov_1m0wghs4ze.s[53]++;return function addContracts(_x2){cov_1m0wghs4ze.f[12]++;cov_1m0wghs4ze.s[54]++;return _ref3.apply(this,arguments);};})());let addMigrations=(cov_1m0wghs4ze.s[55]++,exports.addMigrations=(()=>{cov_1m0wghs4ze.f[13]++;var _ref4=(cov_1m0wghs4ze.s[56]++,(0,_asyncToGenerator3.default)(function*(config,migrations=(cov_1m0wghs4ze.b[4][0]++,{})){cov_1m0wghs4ze.f[14]++;let promises=(cov_1m0wghs4ze.s[57]++,[]);cov_1m0wghs4ze.s[58]++;for(let filename of(0,_keys2.default)(migrations)){let source=(cov_1m0wghs4ze.s[59]++,migrations[filename]);cov_1m0wghs4ze.s[60]++;promises.push(_fsExtra2.default.outputFile(_path2.default.join(config.migrations_directory,filename),source));}cov_1m0wghs4ze.s[61]++;return yield _promise2.default.all(promises);}));cov_1m0wghs4ze.s[62]++;return function addMigrations(_x3){cov_1m0wghs4ze.f[15]++;cov_1m0wghs4ze.s[63]++;return _ref4.apply(this,arguments);};})());let defaultMigrations=(cov_1m0wghs4ze.s[64]++,exports.defaultMigrations=(()=>{cov_1m0wghs4ze.f[16]++;var _ref5=(cov_1m0wghs4ze.s[65]++,(0,_asyncToGenerator3.default)(function*(contractNames){cov_1m0wghs4ze.f[17]++;cov_1m0wghs4ze.s[66]++;contractNames=contractNames.filter(function(name){cov_1m0wghs4ze.f[18]++;cov_1m0wghs4ze.s[67]++;return name!="Migrations";});let migrations=(cov_1m0wghs4ze.s[68]++,{});cov_1m0wghs4ze.s[69]++;contractNames.forEach(function(contractName,i){cov_1m0wghs4ze.f[19]++;let index=(cov_1m0wghs4ze.s[70]++,i+2);let filename=(cov_1m0wghs4ze.s[71]++,`${index}_migrate_${contractName}.js`);let source=(cov_1m0wghs4ze.s[72]++,`
      var ${contractName} = artifacts.require("${contractName}");

      module.exports = function(deployer) {
        deployer.deploy(${contractName});
      };
    `);cov_1m0wghs4ze.s[73]++;migrations[filename]=source;});cov_1m0wghs4ze.s[74]++;return migrations;}));cov_1m0wghs4ze.s[75]++;return function defaultMigrations(_x4){cov_1m0wghs4ze.f[20]++;cov_1m0wghs4ze.s[76]++;return _ref5.apply(this,arguments);};})());let compile=(cov_1m0wghs4ze.s[77]++,exports.compile=(()=>{cov_1m0wghs4ze.f[21]++;var _ref6=(cov_1m0wghs4ze.s[78]++,(0,_asyncToGenerator3.default)(function*(config){cov_1m0wghs4ze.f[22]++;cov_1m0wghs4ze.s[79]++;return new _promise2.default(function(accept,reject){cov_1m0wghs4ze.f[23]++;cov_1m0wghs4ze.s[80]++;_truffleWorkflowCompile2.default.compile(config.with({all:true,quiet:true}),function(err,result){cov_1m0wghs4ze.f[24]++;cov_1m0wghs4ze.s[81]++;if(err){cov_1m0wghs4ze.b[5][0]++;cov_1m0wghs4ze.s[82]++;return reject(err);}else{cov_1m0wghs4ze.b[5][1]++;}const{contracts,outputs}=(cov_1m0wghs4ze.s[83]++,result);cov_1m0wghs4ze.s[84]++;debug("result %O",result);cov_1m0wghs4ze.s[85]++;return accept({contracts,files:outputs.solc});});});}));cov_1m0wghs4ze.s[86]++;return function compile(_x5){cov_1m0wghs4ze.f[25]++;cov_1m0wghs4ze.s[87]++;return _ref6.apply(this,arguments);};})());let migrate=(cov_1m0wghs4ze.s[88]++,exports.migrate=(()=>{cov_1m0wghs4ze.f[26]++;var _ref7=(cov_1m0wghs4ze.s[89]++,(0,_asyncToGenerator3.default)(function*(config){cov_1m0wghs4ze.f[27]++;cov_1m0wghs4ze.s[90]++;return new _promise2.default(function(accept,reject){cov_1m0wghs4ze.f[28]++;cov_1m0wghs4ze.s[91]++;_truffleMigrate2.default.run(config.with({quiet:true}),function(err,contracts){cov_1m0wghs4ze.f[29]++;cov_1m0wghs4ze.s[92]++;if(err){cov_1m0wghs4ze.b[6][0]++;cov_1m0wghs4ze.s[93]++;return reject(err);}else{cov_1m0wghs4ze.b[6][1]++;}cov_1m0wghs4ze.s[94]++;accept(contracts);});});}));cov_1m0wghs4ze.s[95]++;return function migrate(_x6){cov_1m0wghs4ze.f[30]++;cov_1m0wghs4ze.s[96]++;return _ref7.apply(this,arguments);};})());let gatherArtifacts=(cov_1m0wghs4ze.s[97]++,exports.gatherArtifacts=(()=>{cov_1m0wghs4ze.f[31]++;var _ref8=(cov_1m0wghs4ze.s[98]++,(0,_asyncToGenerator3.default)(function*(config){cov_1m0wghs4ze.f[32]++;cov_1m0wghs4ze.s[99]++;return _truffleDebugUtils2.default.gatherArtifacts(config);}));cov_1m0wghs4ze.s[100]++;return function gatherArtifacts(_x7){cov_1m0wghs4ze.f[33]++;cov_1m0wghs4ze.s[101]++;return _ref8.apply(this,arguments);};})());cov_1m0wghs4ze.s[102]++;exports.getAccounts=getAccounts;var _debug=(cov_1m0wghs4ze.s[103]++,__webpack_require__(0));var _debug2=(cov_1m0wghs4ze.s[104]++,_interopRequireDefault(_debug));var _path=(cov_1m0wghs4ze.s[105]++,__webpack_require__(40));var _path2=(cov_1m0wghs4ze.s[106]++,_interopRequireDefault(_path));var _fsExtra=(cov_1m0wghs4ze.s[107]++,__webpack_require__(41));var _fsExtra2=(cov_1m0wghs4ze.s[108]++,_interopRequireDefault(_fsExtra));var _async=(cov_1m0wghs4ze.s[109]++,__webpack_require__(42));var _async2=(cov_1m0wghs4ze.s[110]++,_interopRequireDefault(_async));var _truffleWorkflowCompile=(cov_1m0wghs4ze.s[111]++,__webpack_require__(43));var _truffleWorkflowCompile2=(cov_1m0wghs4ze.s[112]++,_interopRequireDefault(_truffleWorkflowCompile));var _truffleDebugUtils=(cov_1m0wghs4ze.s[113]++,__webpack_require__(44));var _truffleDebugUtils2=(cov_1m0wghs4ze.s[114]++,_interopRequireDefault(_truffleDebugUtils));var _truffleArtifactor=(cov_1m0wghs4ze.s[115]++,__webpack_require__(45));var _truffleArtifactor2=(cov_1m0wghs4ze.s[116]++,_interopRequireDefault(_truffleArtifactor));var _web=(cov_1m0wghs4ze.s[117]++,__webpack_require__(8));var _web2=(cov_1m0wghs4ze.s[118]++,_interopRequireDefault(_web));var _truffleMigrate=(cov_1m0wghs4ze.s[119]++,__webpack_require__(46));var _truffleMigrate2=(cov_1m0wghs4ze.s[120]++,_interopRequireDefault(_truffleMigrate));var _truffleBox=(cov_1m0wghs4ze.s[121]++,__webpack_require__(47));var _truffleBox2=(cov_1m0wghs4ze.s[122]++,_interopRequireDefault(_truffleBox));var _truffleResolver=(cov_1m0wghs4ze.s[123]++,__webpack_require__(48));var _truffleResolver2=(cov_1m0wghs4ze.s[124]++,_interopRequireDefault(_truffleResolver));var _truffleExpect=(cov_1m0wghs4ze.s[125]++,__webpack_require__(27));var _truffleExpect2=(cov_1m0wghs4ze.s[126]++,_interopRequireDefault(_truffleExpect));function _interopRequireDefault(obj){cov_1m0wghs4ze.f[34]++;cov_1m0wghs4ze.s[127]++;return(cov_1m0wghs4ze.b[8][0]++,obj)&&(cov_1m0wghs4ze.b[8][1]++,obj.__esModule)?(cov_1m0wghs4ze.b[7][0]++,obj):(cov_1m0wghs4ze.b[7][1]++,{default:obj});}const debug=(cov_1m0wghs4ze.s[128]++,(0,_debug2.default)("test:helpers"));function getAccounts(provider){cov_1m0wghs4ze.f[35]++;let web3=(cov_1m0wghs4ze.s[129]++,new _web2.default(provider));cov_1m0wghs4ze.s[130]++;return new _promise2.default(function(accept,reject){cov_1m0wghs4ze.f[36]++;cov_1m0wghs4ze.s[131]++;web3.eth.getAccounts(function(err,accounts){cov_1m0wghs4ze.f[37]++;cov_1m0wghs4ze.s[132]++;if(err){cov_1m0wghs4ze.b[9][0]++;cov_1m0wghs4ze.s[133]++;return reject(err);}else{cov_1m0wghs4ze.b[9][1]++;}cov_1m0wghs4ze.s[134]++;accept(accounts);});});}

/***/ }),
/* 14 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var cov_2o0ye68xt7 = function () {
  var path = "/Users/gnidan/src/work/truffle/packages/truffle-debugger/lib/ast/selectors/index.js",
      hash = "d64d16994fa3701261fdb67da675fecb4915650e",
      Function = function () {}.constructor,
      global = new Function('return this')(),
      gcv = "__coverage__",
      coverageData = { path: "/Users/gnidan/src/work/truffle/packages/truffle-debugger/lib/ast/selectors/index.js", statementMap: { "0": { start: { line: 3, column: 0 }, end: { line: 5, column: 3 } }, "1": { start: { line: 7, column: 13 }, end: { line: 7, column: 29 } }, "2": { start: { line: 9, column: 14 }, end: { line: 9, column: 44 } }, "3": { start: { line: 11, column: 20 }, end: { line: 11, column: 44 } }, "4": { start: { line: 13, column: 19 }, end: { line: 13, column: 42 } }, "5": { start: { line: 15, column: 20 }, end: { line: 15, column: 56 } }, "6": { start: { line: 17, column: 17 }, end: { line: 17, column: 50 } }, "7": { start: { line: 19, column: 18 }, end: { line: 19, column: 52 } }, "8": { start: { line: 21, column: 11 }, end: { line: 21, column: 28 } }, "9": { start: { line: 23, column: 39 }, end: { line: 23, column: 93 } }, "10": { start: { line: 25, column: 14 }, end: { line: 25, column: 60 } }, "11": { start: { line: 30, column: 12 }, end: { line: 75, column: 2 } }, "12": { start: { line: 38, column: 90 }, end: { line: 38, column: 97 } }, "13": { start: { line: 51, column: 91 }, end: { line: 51, column: 94 } }, "14": { start: { line: 58, column: 91 }, end: { line: 58, column: 93 } }, "15": { start: { line: 65, column: 112 }, end: { line: 65, column: 163 } }, "16": { start: { line: 72, column: 83 }, end: { line: 72, column: 169 } }, "17": { start: { line: 77, column: 0 }, end: { line: 77, column: 22 } } }, fnMap: { "0": { name: "_interopRequireDefault", decl: { start: { line: 23, column: 9 }, end: { line: 23, column: 31 } }, loc: { start: { line: 23, column: 37 }, end: { line: 23, column: 95 } }, line: 23 }, "1": { name: "(anonymous_1)", decl: { start: { line: 38, column: 79 }, end: { line: 38, column: 80 } }, loc: { start: { line: 38, column: 90 }, end: { line: 38, column: 97 } }, line: 38 }, "2": { name: "(anonymous_2)", decl: { start: { line: 51, column: 78 }, end: { line: 51, column: 79 } }, loc: { start: { line: 51, column: 91 }, end: { line: 51, column: 94 } }, line: 51 }, "3": { name: "(anonymous_3)", decl: { start: { line: 58, column: 79 }, end: { line: 58, column: 80 } }, loc: { start: { line: 58, column: 91 }, end: { line: 58, column: 93 } }, line: 58 }, "4": { name: "(anonymous_4)", decl: { start: { line: 65, column: 96 }, end: { line: 65, column: 97 } }, loc: { start: { line: 65, column: 112 }, end: { line: 65, column: 163 } }, line: 65 }, "5": { name: "(anonymous_5)", decl: { start: { line: 72, column: 65 }, end: { line: 72, column: 66 } }, loc: { start: { line: 72, column: 83 }, end: { line: 72, column: 169 } }, line: 72 } }, branchMap: { "0": { loc: { start: { line: 23, column: 46 }, end: { line: 23, column: 92 } }, type: "cond-expr", locations: [{ start: { line: 23, column: 70 }, end: { line: 23, column: 73 } }, { start: { line: 23, column: 76 }, end: { line: 23, column: 92 } }], line: 23 }, "1": { loc: { start: { line: 23, column: 46 }, end: { line: 23, column: 67 } }, type: "binary-expr", locations: [{ start: { line: 23, column: 46 }, end: { line: 23, column: 49 } }, { start: { line: 23, column: 53 }, end: { line: 23, column: 67 } }], line: 23 }, "2": { loc: { start: { line: 72, column: 83 }, end: { line: 72, column: 169 } }, type: "cond-expr", locations: [{ start: { line: 72, column: 93 }, end: { line: 72, column: 132 } }, { start: { line: 72, column: 135 }, end: { line: 72, column: 169 } }], line: 72 } }, s: { "0": 0, "1": 0, "2": 0, "3": 0, "4": 0, "5": 0, "6": 0, "7": 0, "8": 0, "9": 0, "10": 0, "11": 0, "12": 0, "13": 0, "14": 0, "15": 0, "16": 0, "17": 0 }, f: { "0": 0, "1": 0, "2": 0, "3": 0, "4": 0, "5": 0 }, b: { "0": [0, 0], "1": [0, 0], "2": [0, 0] }, inputSourceMap: { version: 3, sources: ["lib/ast/selectors/index.js"], names: ["debug", "ast", "views", "sources", "solidity", "info", "current", "tree", "source", "index", "id", "pointer", "sourceRange", "range", "start", "length", "node", "jsonpointer", "get"], mappings: ";;;;;;AAAA;;;;AAGA;;AACA;;;;AAEA;;;;AAEA;;;;AAPA,MAAMA,QAAQ,qBAAY,wBAAZ,CAAd;;AAUA;;;AAGA,MAAMC,MAAM,sCAAmB;AAC7B;;;AAGAC,SAAO;AACL;;;AAGAC,aAAS,8BAAW,CAACC,oBAASC,IAAT,CAAcF,OAAf,CAAX,EAAoCA,WAAWA,OAA/C;AAJJ,GAJsB;;AAW7B;;;AAGAG,WAAS;;AAEP;;;;;AAKAC,UAAM,8BACJ,CAACH,oBAASE,OAAT,CAAiBE,MAAlB,CADI,EACuB,CAAC,EAACP,GAAD,EAAD,KAAWA,GADlC,CAPC;;AAWP;;;;;AAKAQ,WAAO,8BACL,CAACL,oBAASE,OAAT,CAAiBE,MAAlB,CADK,EACsB,CAAC,EAACE,EAAD,EAAD,KAAUA,EADhC,CAhBA;;AAoBP;;;;;AAKAC,aAAS,8BACP,CAAC,QAAD,EAAWP,oBAASE,OAAT,CAAiBM,WAA5B,CADO,EAGP,CAACX,GAAD,EAAMY,KAAN,KAAgB,oBAAUZ,GAAV,EAAeY,MAAMC,KAArB,EAA4BD,MAAME,MAAlC,CAHT,CAzBF;;AA+BP;;;;;AAKAC,UAAM,8BACJ,CAAC,QAAD,EAAW,WAAX,CADI,EACqB,CAACf,GAAD,EAAMU,OAAN,KACtBA,OAAD,GACIM,sBAAYC,GAAZ,CAAgBjB,GAAhB,EAAqBU,OAArB,CADJ,GAEIM,sBAAYC,GAAZ,CAAgBjB,GAAhB,EAAqB,EAArB,CAJF;;AApCC;AAdoB,CAAnB,CAAZ;;kBA4DeA,G", file: "index.js", sourceRoot: "/Users/gnidan/src/work/truffle/packages/truffle-debugger", sourcesContent: ["import debugModule from \"debug\";\nconst debug = debugModule(\"debugger:ast:selectors\");\n\nimport { createSelectorTree, createLeaf } from \"reselect-tree\";\nimport jsonpointer from \"json-pointer\";\n\nimport solidity from \"lib/solidity/selectors\";\n\nimport { findRange } from \"../map\";\n\n\n/**\n * ast\n */\nconst ast = createSelectorTree({\n  /**\n   * ast.views\n   */\n  views: {\n    /**\n     * ast.views.sources\n     */\n    sources: createLeaf([solidity.info.sources], sources => sources)\n  },\n\n  /**\n   * ast.current\n   */\n  current: {\n\n    /**\n     * ast.current.tree\n     *\n     * ast for current source\n     */\n    tree: createLeaf(\n      [solidity.current.source], ({ast}) => ast\n    ),\n\n    /**\n     * ast.current.index\n     *\n     * source ID\n     */\n    index: createLeaf(\n      [solidity.current.source], ({id}) => id\n    ),\n\n    /**\n     * ast.current.pointer\n     *\n     * jsonpointer for current ast node\n     */\n    pointer: createLeaf(\n      [\"./tree\", solidity.current.sourceRange],\n\n      (ast, range) => findRange(ast, range.start, range.length)\n    ),\n\n    /**\n     * ast.current.node\n     *\n     * current ast node to execute\n     */\n    node: createLeaf(\n      [\"./tree\", \"./pointer\"], (ast, pointer) =>\n        (pointer)\n          ? jsonpointer.get(ast, pointer)\n          : jsonpointer.get(ast, \"\")\n    ),\n\n  }\n});\n\nexport default ast;\n"] }, _coverageSchema: "332fd63041d2c1bcb487cc26dd0d5f7d97098a6c" },
      coverage = global[gcv] || (global[gcv] = {});if (coverage[path] && coverage[path].hash === hash) {
    return coverage[path];
  }coverageData.hash = hash;return coverage[path] = coverageData;
}();cov_2o0ye68xt7.s[0]++;Object.defineProperty(exports, "__esModule", { value: true });var _debug = (cov_2o0ye68xt7.s[1]++, __webpack_require__(0));var _debug2 = (cov_2o0ye68xt7.s[2]++, _interopRequireDefault(_debug));var _reselectTree = (cov_2o0ye68xt7.s[3]++, __webpack_require__(9));var _jsonPointer = (cov_2o0ye68xt7.s[4]++, __webpack_require__(24));var _jsonPointer2 = (cov_2o0ye68xt7.s[5]++, _interopRequireDefault(_jsonPointer));var _selectors = (cov_2o0ye68xt7.s[6]++, __webpack_require__(6));var _selectors2 = (cov_2o0ye68xt7.s[7]++, _interopRequireDefault(_selectors));var _map = (cov_2o0ye68xt7.s[8]++, __webpack_require__(29));function _interopRequireDefault(obj) {
  cov_2o0ye68xt7.f[0]++;cov_2o0ye68xt7.s[9]++;return (cov_2o0ye68xt7.b[1][0]++, obj) && (cov_2o0ye68xt7.b[1][1]++, obj.__esModule) ? (cov_2o0ye68xt7.b[0][0]++, obj) : (cov_2o0ye68xt7.b[0][1]++, { default: obj });
}const debug = (cov_2o0ye68xt7.s[10]++, (0, _debug2.default)("debugger:ast:selectors"));const ast = (cov_2o0ye68xt7.s[11]++, (0, _reselectTree.createSelectorTree)({ views: { sources: (0, _reselectTree.createLeaf)([_selectors2.default.info.sources], sources => {
      cov_2o0ye68xt7.f[1]++;cov_2o0ye68xt7.s[12]++;return sources;
    }) }, current: { tree: (0, _reselectTree.createLeaf)([_selectors2.default.current.source], ({ ast }) => {
      cov_2o0ye68xt7.f[2]++;cov_2o0ye68xt7.s[13]++;return ast;
    }), index: (0, _reselectTree.createLeaf)([_selectors2.default.current.source], ({ id }) => {
      cov_2o0ye68xt7.f[3]++;cov_2o0ye68xt7.s[14]++;return id;
    }), pointer: (0, _reselectTree.createLeaf)(["./tree", _selectors2.default.current.sourceRange], (ast, range) => {
      cov_2o0ye68xt7.f[4]++;cov_2o0ye68xt7.s[15]++;return (0, _map.findRange)(ast, range.start, range.length);
    }), node: (0, _reselectTree.createLeaf)(["./tree", "./pointer"], (ast, pointer) => {
      cov_2o0ye68xt7.f[5]++;cov_2o0ye68xt7.s[16]++;return pointer ? (cov_2o0ye68xt7.b[2][0]++, _jsonPointer2.default.get(ast, pointer)) : (cov_2o0ye68xt7.b[2][1]++, _jsonPointer2.default.get(ast, ""));
    }) } }));cov_2o0ye68xt7.s[17]++;exports.default = ast;

/***/ }),
/* 15 */
/***/ (function(module, exports) {

module.exports = require("redux");

/***/ }),
/* 16 */
/***/ (function(module, exports) {

module.exports = require("ganache-cli");

/***/ }),
/* 17 */
/***/ (function(module, exports) {

module.exports = require("babel-runtime/core-js/object/keys");

/***/ }),
/* 18 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var cov_2dt8u0v6f0 = function () {
  var path = "/Users/gnidan/src/work/truffle/packages/truffle-debugger/lib/debugger.js",
      hash = "e0cdfb925ee33bca095f11aa804f23ad070a4dd5",
      Function = function () {}.constructor,
      global = new Function('return this')(),
      gcv = "__coverage__",
      coverageData = { path: "/Users/gnidan/src/work/truffle/packages/truffle-debugger/lib/debugger.js", statementMap: { "0": { start: { line: 3, column: 0 }, end: { line: 5, column: 3 } }, "1": { start: { line: 7, column: 25 }, end: { line: 7, column: 74 } }, "2": { start: { line: 9, column: 25 }, end: { line: 9, column: 67 } }, "3": { start: { line: 11, column: 13 }, end: { line: 11, column: 29 } }, "4": { start: { line: 13, column: 14 }, end: { line: 13, column: 44 } }, "5": { start: { line: 15, column: 21 }, end: { line: 15, column: 46 } }, "6": { start: { line: 17, column: 22 }, end: { line: 17, column: 60 } }, "7": { start: { line: 19, column: 15 }, end: { line: 19, column: 35 } }, "8": { start: { line: 21, column: 16 }, end: { line: 21, column: 48 } }, "9": { start: { line: 23, column: 20 }, end: { line: 23, column: 44 } }, "10": { start: { line: 25, column: 17 }, end: { line: 25, column: 44 } }, "11": { start: { line: 27, column: 18 }, end: { line: 27, column: 52 } }, "12": { start: { line: 29, column: 18 }, end: { line: 29, column: 44 } }, "13": { start: { line: 31, column: 18 }, end: { line: 31, column: 53 } }, "14": { start: { line: 33, column: 18 }, end: { line: 33, column: 46 } }, "15": { start: { line: 35, column: 18 }, end: { line: 35, column: 53 } }, "16": { start: { line: 37, column: 18 }, end: { line: 37, column: 44 } }, "17": { start: { line: 39, column: 18 }, end: { line: 39, column: 53 } }, "18": { start: { line: 41, column: 18 }, end: { line: 41, column: 49 } }, "19": { start: { line: 43, column: 19 }, end: { line: 43, column: 54 } }, "20": { start: { line: 45, column: 19 }, end: { line: 45, column: 49 } }, "21": { start: { line: 47, column: 19 }, end: { line: 47, column: 55 } }, "22": { start: { line: 49, column: 39 }, end: { line: 49, column: 93 } }, "23": { start: { line: 51, column: 14 }, end: { line: 51, column: 46 } }, "24": { start: { line: 71, column: 4 }, end: { line: 71, column: 28 } }, "25": { start: { line: 82, column: 16 }, end: { line: 82, column: 20 } }, "26": { start: { line: 84, column: 4 }, end: { line: 96, column: 9 } }, "27": { start: { line: 85, column: 6 }, end: { line: 85, column: 74 } }, "28": { start: { line: 87, column: 20 }, end: { line: 87, column: 101 } }, "29": { start: { line: 89, column: 6 }, end: { line: 93, column: 7 } }, "30": { start: { line: 90, column: 8 }, end: { line: 90, column: 30 } }, "31": { start: { line: 92, column: 8 }, end: { line: 92, column: 16 } }, "32": { start: { line: 95, column: 6 }, end: { line: 95, column: 32 } }, "33": { start: { line: 105, column: 4 }, end: { line: 105, column: 25 } }, "34": { start: { line: 123, column: 4 }, end: { line: 130, column: 7 } }, "35": { start: { line: 134, column: 0 }, end: { line: 134, column: 27 } } }, fnMap: { "0": { name: "_interopRequireDefault", decl: { start: { line: 49, column: 9 }, end: { line: 49, column: 31 } }, loc: { start: { line: 49, column: 37 }, end: { line: 49, column: 95 } }, line: 49 }, "1": { name: "(anonymous_1)", decl: { start: { line: 67, column: 2 }, end: { line: 67, column: 3 } }, loc: { start: { line: 67, column: 23 }, end: { line: 72, column: 3 } }, line: 67 }, "2": { name: "(anonymous_2)", decl: { start: { line: 81, column: 2 }, end: { line: 81, column: 3 } }, loc: { start: { line: 81, column: 37 }, end: { line: 97, column: 3 } }, line: 81 }, "3": { name: "(anonymous_3)", decl: { start: { line: 84, column: 43 }, end: { line: 84, column: 44 } }, loc: { start: { line: 84, column: 56 }, end: { line: 96, column: 5 } }, line: 84 }, "4": { name: "(anonymous_4)", decl: { start: { line: 104, column: 2 }, end: { line: 104, column: 3 } }, loc: { start: { line: 104, column: 12 }, end: { line: 106, column: 3 } }, line: 104 }, "5": { name: "(anonymous_5)", decl: { start: { line: 122, column: 2 }, end: { line: 122, column: 3 } }, loc: { start: { line: 122, column: 25 }, end: { line: 131, column: 3 } }, line: 122 } }, branchMap: { "0": { loc: { start: { line: 49, column: 46 }, end: { line: 49, column: 92 } }, type: "cond-expr", locations: [{ start: { line: 49, column: 70 }, end: { line: 49, column: 73 } }, { start: { line: 49, column: 76 }, end: { line: 49, column: 92 } }], line: 49 }, "1": { loc: { start: { line: 49, column: 46 }, end: { line: 49, column: 67 } }, type: "binary-expr", locations: [{ start: { line: 49, column: 46 }, end: { line: 49, column: 49 } }, { start: { line: 49, column: 53 }, end: { line: 49, column: 67 } }], line: 49 }, "2": { loc: { start: { line: 81, column: 23 }, end: { line: 81, column: 35 } }, type: "default-arg", locations: [{ start: { line: 81, column: 33 }, end: { line: 81, column: 35 } }], line: 81 } }, s: { "0": 0, "1": 0, "2": 0, "3": 0, "4": 0, "5": 0, "6": 0, "7": 0, "8": 0, "9": 0, "10": 0, "11": 0, "12": 0, "13": 0, "14": 0, "15": 0, "16": 0, "17": 0, "18": 0, "19": 0, "20": 0, "21": 0, "22": 0, "23": 0, "24": 0, "25": 0, "26": 0, "27": 0, "28": 0, "29": 0, "30": 0, "31": 0, "32": 0, "33": 0, "34": 0, "35": 0 }, f: { "0": 0, "1": 0, "2": 0, "3": 0, "4": 0, "5": 0 }, b: { "0": [0, 0], "1": [0, 0], "2": [0] }, inputSourceMap: { version: 3, sources: ["lib/debugger.js"], names: ["debug", "Debugger", "constructor", "session", "_session", "forTx", "txHash", "options", "expect", "Session", "contracts", "files", "provider", "ready", "e", "connect", "selectors", "ast", "astSelector", "data", "dataSelector", "trace", "traceSelector", "evm", "evmSelector", "solidity", "soliditySelector", "sessionSelector"], mappings: ";;;;;;;;;;AAAA;;;;AACA;;;;AAEA;;;;AAEA;;AAEA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;AAEA,MAAMA,QAAQ,qBAAY,UAAZ,CAAd;;AAEA;;;;;;;;;AASe,MAAMC,QAAN,CAAe;AAC5B;;;;AAIAC,cAAYC,OAAZ,EAAqB;AACnB;;;AAGA,SAAKC,QAAL,GAAgBD,OAAhB;AACD;;AAED;;;;;;;AAOA,SAAaE,KAAb,CAAmBC,MAAnB,EAA2BC,UAAU,EAArC,EAAyC;AAAA;;AAAA;AACvCC,8BAAOD,OAAP,CAAeA,OAAf,EAAwB,CACtB,WADsB,EAEtB,UAFsB,CAAxB;;AAKA,UAAIJ,UAAU,IAAIM,iBAAJ,CACZF,QAAQG,SADI,EACOH,QAAQI,KADf,EAEZL,MAFY,EAEJC,QAAQK,QAFJ,CAAd;;AAKA,UAAI;AACF,cAAMT,QAAQU,KAAR,EAAN;AACD,OAFD,CAEE,OAAOC,CAAP,EAAU;AACV,cAAMA,CAAN;AACD;;AAED,aAAO,IAAI,KAAJ,CAASX,OAAT,CAAP;AAjBuC;AAkBxC;;AAGD;;;;;AAKAY,YAAU;AACR,WAAO,KAAKX,QAAZ;AACD;;AAED;;;;;;;;;;;;;;AAcA,aAAWY,SAAX,GAAuB;AACrB,WAAO,wCAAqB;AAC1BC,WAAKC,mBADqB;AAE1BC,YAAMC,mBAFoB;AAG1BC,aAAOC,mBAHmB;AAI1BC,WAAKC,mBAJqB;AAK1BC,gBAAUC,oBALgB;AAM1BvB,eAASwB;AANiB,KAArB,CAAP;AAQD;AAxE2B;;kBAAT1B,Q,EA2ErB", file: "debugger.js", sourceRoot: "/Users/gnidan/src/work/truffle/packages/truffle-debugger", sourcesContent: ["import debugModule from 'debug';\nimport expect from \"truffle-expect\";\n\nimport Session from \"./session\";\n\nimport { createNestedSelector } from \"reselect-tree\";\n\nimport dataSelector from \"./data/selectors\";\nimport astSelector from \"./ast/selectors\";\nimport traceSelector from \"./trace/selectors\";\nimport evmSelector from \"./evm/selectors\";\nimport soliditySelector from \"./solidity/selectors\";\nimport sessionSelector from \"./session/selectors\";\n\nconst debug = debugModule(\"debugger\");\n\n/**\n * @example\n * let session = Debugger\n *   .forTx(<txHash>, {\n *     contracts: [<contract obj>, ...],\n *     provider: <provider instance>\n *   })\n *   .connect();\n */\nexport default class Debugger {\n  /**\n   * @param {Session} session - debugger session\n   * @private\n   */\n  constructor(session) {\n    /**\n     * @private\n     */\n    this._session = session;\n  }\n\n  /**\n   * Instantiates a Debugger for a given transaction hash.\n   *\n   * @param {String} txHash - transaction hash with leading \"0x\"\n   * @param {{contracts: Array<Contract>, files: Array<String>, provider: Web3Provider}} options -\n   * @return {Debugger} instance\n   */\n  static async forTx(txHash, options = {}) {\n    expect.options(options, [\n      \"contracts\",\n      \"provider\"\n    ]);\n\n    let session = new Session(\n      options.contracts, options.files,\n      txHash, options.provider\n    );\n\n    try {\n      await session.ready();\n    } catch (e) {\n      throw e;\n    }\n\n    return new this(session);\n  }\n\n\n  /**\n   * Connects to the instantiated Debugger.\n   *\n   * @return {Session} session instance\n   */\n  connect() {\n    return this._session;\n  }\n\n  /**\n   * Exported selectors\n   *\n   * See individual selector docs for full listing\n   *\n   * @example\n   * Debugger.selectors.ast.current.tree\n   *\n   * @example\n   * Debugger.selectors.solidity.current.instruction\n   *\n   * @example\n   * Debugger.selectors.trace.steps\n   */\n  static get selectors() {\n    return createNestedSelector({\n      ast: astSelector,\n      data: dataSelector,\n      trace: traceSelector,\n      evm: evmSelector,\n      solidity: soliditySelector,\n      session: sessionSelector,\n    });\n  }\n}\n\n/**\n * @typedef {Object} Contract\n * @property {string} contractName contract name\n * @property {string} source solidity source code\n * @property {string} sourcePath path to source file\n * @property {string} binary 0x-prefixed hex string with create bytecode\n * @property {string} sourceMap solidity source map for create bytecode\n * @property {Object} ast Abstract Syntax Tree from Solidity\n * @property {string} deployedBinary 0x-prefixed compiled binary (on chain)\n * @property {string} deployedSourceMap solidity source map for on-chain bytecode\n */\n"] }, _coverageSchema: "332fd63041d2c1bcb487cc26dd0d5f7d97098a6c" },
      coverage = global[gcv] || (global[gcv] = {});if (coverage[path] && coverage[path].hash === hash) {
    return coverage[path];
  }coverageData.hash = hash;return coverage[path] = coverageData;
}();cov_2dt8u0v6f0.s[0]++;Object.defineProperty(exports, "__esModule", { value: true });var _asyncToGenerator2 = (cov_2dt8u0v6f0.s[1]++, __webpack_require__(7));var _asyncToGenerator3 = (cov_2dt8u0v6f0.s[2]++, _interopRequireDefault(_asyncToGenerator2));var _debug = (cov_2dt8u0v6f0.s[3]++, __webpack_require__(0));var _debug2 = (cov_2dt8u0v6f0.s[4]++, _interopRequireDefault(_debug));var _truffleExpect = (cov_2dt8u0v6f0.s[5]++, __webpack_require__(27));var _truffleExpect2 = (cov_2dt8u0v6f0.s[6]++, _interopRequireDefault(_truffleExpect));var _session = (cov_2dt8u0v6f0.s[7]++, __webpack_require__(49));var _session2 = (cov_2dt8u0v6f0.s[8]++, _interopRequireDefault(_session));var _reselectTree = (cov_2dt8u0v6f0.s[9]++, __webpack_require__(9));var _selectors = (cov_2dt8u0v6f0.s[10]++, __webpack_require__(26));var _selectors2 = (cov_2dt8u0v6f0.s[11]++, _interopRequireDefault(_selectors));var _selectors3 = (cov_2dt8u0v6f0.s[12]++, __webpack_require__(14));var _selectors4 = (cov_2dt8u0v6f0.s[13]++, _interopRequireDefault(_selectors3));var _selectors5 = (cov_2dt8u0v6f0.s[14]++, __webpack_require__(19));var _selectors6 = (cov_2dt8u0v6f0.s[15]++, _interopRequireDefault(_selectors5));var _selectors7 = (cov_2dt8u0v6f0.s[16]++, __webpack_require__(5));var _selectors8 = (cov_2dt8u0v6f0.s[17]++, _interopRequireDefault(_selectors7));var _selectors9 = (cov_2dt8u0v6f0.s[18]++, __webpack_require__(6));var _selectors10 = (cov_2dt8u0v6f0.s[19]++, _interopRequireDefault(_selectors9));var _selectors11 = (cov_2dt8u0v6f0.s[20]++, __webpack_require__(36));var _selectors12 = (cov_2dt8u0v6f0.s[21]++, _interopRequireDefault(_selectors11));function _interopRequireDefault(obj) {
  cov_2dt8u0v6f0.f[0]++;cov_2dt8u0v6f0.s[22]++;return (cov_2dt8u0v6f0.b[1][0]++, obj) && (cov_2dt8u0v6f0.b[1][1]++, obj.__esModule) ? (cov_2dt8u0v6f0.b[0][0]++, obj) : (cov_2dt8u0v6f0.b[0][1]++, { default: obj });
}const debug = (cov_2dt8u0v6f0.s[23]++, (0, _debug2.default)("debugger"));class Debugger {
  constructor(session) {
    cov_2dt8u0v6f0.f[1]++;cov_2dt8u0v6f0.s[24]++;this._session = session;
  }static forTx(txHash, options = (cov_2dt8u0v6f0.b[2][0]++, {})) {
    cov_2dt8u0v6f0.f[2]++;var _this = (cov_2dt8u0v6f0.s[25]++, this);cov_2dt8u0v6f0.s[26]++;return (0, _asyncToGenerator3.default)(function* () {
      cov_2dt8u0v6f0.f[3]++;cov_2dt8u0v6f0.s[27]++;_truffleExpect2.default.options(options, ["contracts", "provider"]);let session = (cov_2dt8u0v6f0.s[28]++, new _session2.default(options.contracts, options.files, txHash, options.provider));cov_2dt8u0v6f0.s[29]++;try {
        cov_2dt8u0v6f0.s[30]++;yield session.ready();
      } catch (e) {
        cov_2dt8u0v6f0.s[31]++;throw e;
      }cov_2dt8u0v6f0.s[32]++;return new _this(session);
    })();
  }connect() {
    cov_2dt8u0v6f0.f[4]++;cov_2dt8u0v6f0.s[33]++;return this._session;
  }static get selectors() {
    cov_2dt8u0v6f0.f[5]++;cov_2dt8u0v6f0.s[34]++;return (0, _reselectTree.createNestedSelector)({ ast: _selectors4.default, data: _selectors2.default, trace: _selectors6.default, evm: _selectors8.default, solidity: _selectors10.default, session: _selectors12.default });
  }
}cov_2dt8u0v6f0.s[35]++;exports.default = Debugger;

/***/ }),
/* 19 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var cov_j8ygwqmex = function () {
  var path = "/Users/gnidan/src/work/truffle/packages/truffle-debugger/lib/trace/selectors/index.js",
      hash = "4dc959dec63dc1a2cad54a4aca9234add1bf2795",
      Function = function () {}.constructor,
      global = new Function('return this')(),
      gcv = "__coverage__",
      coverageData = { path: "/Users/gnidan/src/work/truffle/packages/truffle-debugger/lib/trace/selectors/index.js", statementMap: { "0": { start: { line: 3, column: 0 }, end: { line: 5, column: 3 } }, "1": { start: { line: 7, column: 20 }, end: { line: 7, column: 44 } }, "2": { start: { line: 9, column: 12 }, end: { line: 44, column: 2 } }, "3": { start: { line: 15, column: 18 }, end: { line: 15, column: 40 } }, "4": { start: { line: 22, column: 18 }, end: { line: 22, column: 40 } }, "5": { start: { line: 29, column: 90 }, end: { line: 29, column: 110 } }, "6": { start: { line: 36, column: 80 }, end: { line: 36, column: 92 } }, "7": { start: { line: 43, column: 80 }, end: { line: 43, column: 128 } }, "8": { start: { line: 46, column: 0 }, end: { line: 46, column: 24 } } }, fnMap: { "0": { name: "(anonymous_0)", decl: { start: { line: 15, column: 9 }, end: { line: 15, column: 10 } }, loc: { start: { line: 15, column: 18 }, end: { line: 15, column: 40 } }, line: 15 }, "1": { name: "(anonymous_1)", decl: { start: { line: 22, column: 9 }, end: { line: 22, column: 10 } }, loc: { start: { line: 22, column: 18 }, end: { line: 22, column: 40 } }, line: 22 }, "2": { name: "(anonymous_2)", decl: { start: { line: 29, column: 72 }, end: { line: 29, column: 73 } }, loc: { start: { line: 29, column: 90 }, end: { line: 29, column: 110 } }, line: 29 }, "3": { name: "(anonymous_3)", decl: { start: { line: 36, column: 62 }, end: { line: 36, column: 63 } }, loc: { start: { line: 36, column: 80 }, end: { line: 36, column: 92 } }, line: 36 }, "4": { name: "(anonymous_4)", decl: { start: { line: 43, column: 62 }, end: { line: 43, column: 63 } }, loc: { start: { line: 43, column: 80 }, end: { line: 43, column: 128 } }, line: 43 } }, branchMap: { "0": { loc: { start: { line: 43, column: 80 }, end: { line: 43, column: 128 } }, type: "cond-expr", locations: [{ start: { line: 43, column: 107 }, end: { line: 43, column: 123 } }, { start: { line: 43, column: 126 }, end: { line: 43, column: 128 } }], line: 43 } }, s: { "0": 0, "1": 0, "2": 0, "3": 0, "4": 0, "5": 0, "6": 0, "7": 0, "8": 0 }, f: { "0": 0, "1": 0, "2": 0, "3": 0, "4": 0 }, b: { "0": [0, 0] }, inputSourceMap: { version: 3, sources: ["lib/trace/selectors/index.js"], names: ["trace", "index", "state", "proc", "steps", "info", "stepsRemaining", "length", "step", "next"], mappings: ";;;;;;AAAA;;AAEA,IAAIA,QAAQ,sCAAmB;AAC7B;;;;;AAKAC,SAAQC,KAAD,IAAWA,MAAMF,KAAN,CAAYG,IAAZ,CAAiBF,KANN;;AAQ7B;;;;;AAKAG,SAAQF,KAAD,IAAWA,MAAMF,KAAN,CAAYK,IAAZ,CAAiBD,KAbN;;AAe7B;;;;;AAKAE,kBAAgB,8BACd,CAAC,SAAD,EAAY,SAAZ,CADc,EACU,CAACF,KAAD,EAAQH,KAAR,KAAkBG,MAAMG,MAAN,GAAeN,KAD3C,CApBa;;AAwB7B;;;;;AAKAO,QAAM,8BACJ,CAAC,SAAD,EAAY,SAAZ,CADI,EACoB,CAACJ,KAAD,EAAQH,KAAR,KAAkBG,MAAMH,KAAN,CADtC,CA7BuB;;AAiC7B;;;;;AAKAQ,QAAM,8BACJ,CAAC,SAAD,EAAY,SAAZ,CADI,EACoB,CAACL,KAAD,EAAQH,KAAR,KACtBA,QAAQG,MAAMG,MAAN,GAAe,CAAvB,GAA2BH,MAAMH,QAAQ,CAAd,CAA3B,GAA8C,EAF5C;AAtCuB,CAAnB,CAAZ;;kBA4CeD,K", file: "index.js", sourceRoot: "/Users/gnidan/src/work/truffle/packages/truffle-debugger", sourcesContent: ["import { createSelectorTree, createLeaf } from \"reselect-tree\";\n\nlet trace = createSelectorTree({\n  /**\n   * trace.index\n   *\n   * current step index\n   */\n  index: (state) => state.trace.proc.index,\n\n  /**\n   * trace.steps\n   *\n   * all trace steps\n   */\n  steps: (state) => state.trace.info.steps,\n\n  /**\n   * trace.stepsRemaining\n   *\n   * number of steps remaining in trace\n   */\n  stepsRemaining: createLeaf(\n    [\"./steps\", \"./index\"], (steps, index) => steps.length - index\n  ),\n\n  /**\n   * trace.step\n   *\n   * current trace step\n   */\n  step: createLeaf(\n    [\"./steps\", \"./index\"], (steps, index) => steps[index]\n  ),\n\n  /**\n   * trace.next\n   *\n   * next trace step or {}\n   */\n  next: createLeaf(\n    [\"./steps\", \"./index\"], (steps, index) =>\n      index < steps.length - 1 ? steps[index + 1] : {}\n  )\n});\n\nexport default trace;\n"] }, _coverageSchema: "332fd63041d2c1bcb487cc26dd0d5f7d97098a6c" },
      coverage = global[gcv] || (global[gcv] = {});if (coverage[path] && coverage[path].hash === hash) {
    return coverage[path];
  }coverageData.hash = hash;return coverage[path] = coverageData;
}();cov_j8ygwqmex.s[0]++;Object.defineProperty(exports, "__esModule", { value: true });var _reselectTree = (cov_j8ygwqmex.s[1]++, __webpack_require__(9));let trace = (cov_j8ygwqmex.s[2]++, (0, _reselectTree.createSelectorTree)({ index: state => {
    cov_j8ygwqmex.f[0]++;cov_j8ygwqmex.s[3]++;return state.trace.proc.index;
  }, steps: state => {
    cov_j8ygwqmex.f[1]++;cov_j8ygwqmex.s[4]++;return state.trace.info.steps;
  }, stepsRemaining: (0, _reselectTree.createLeaf)(["./steps", "./index"], (steps, index) => {
    cov_j8ygwqmex.f[2]++;cov_j8ygwqmex.s[5]++;return steps.length - index;
  }), step: (0, _reselectTree.createLeaf)(["./steps", "./index"], (steps, index) => {
    cov_j8ygwqmex.f[3]++;cov_j8ygwqmex.s[6]++;return steps[index];
  }), next: (0, _reselectTree.createLeaf)(["./steps", "./index"], (steps, index) => {
    cov_j8ygwqmex.f[4]++;cov_j8ygwqmex.s[7]++;return index < steps.length - 1 ? (cov_j8ygwqmex.b[0][0]++, steps[index + 1]) : (cov_j8ygwqmex.b[0][1]++, {});
  }) }));cov_j8ygwqmex.s[8]++;exports.default = trace;

/***/ }),
/* 20 */
/***/ (function(module, exports) {

module.exports = require("bignumber.js");

/***/ }),
/* 21 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var cov_abd8euik2 = function () {
  var path = "/Users/gnidan/src/work/truffle/packages/truffle-debugger/lib/trace/actions/index.js",
      hash = "78f939ac24db53f7ebc2de279f26ef5d42d141c3",
      Function = function () {}.constructor,
      global = new Function('return this')(),
      gcv = "__coverage__",
      coverageData = { path: "/Users/gnidan/src/work/truffle/packages/truffle-debugger/lib/trace/actions/index.js", statementMap: { "0": { start: { line: 3, column: 0 }, end: { line: 5, column: 3 } }, "1": { start: { line: 6, column: 0 }, end: { line: 6, column: 30 } }, "2": { start: { line: 7, column: 0 }, end: { line: 7, column: 44 } }, "3": { start: { line: 8, column: 0 }, end: { line: 8, column: 20 } }, "4": { start: { line: 9, column: 0 }, end: { line: 9, column: 20 } }, "5": { start: { line: 10, column: 0 }, end: { line: 10, column: 20 } }, "6": { start: { line: 11, column: 0 }, end: { line: 11, column: 28 } }, "7": { start: { line: 12, column: 19 }, end: { line: 12, column: 52 } }, "8": { start: { line: 14, column: 2 }, end: { line: 17, column: 4 } }, "9": { start: { line: 20, column: 26 }, end: { line: 20, column: 73 } }, "10": { start: { line: 22, column: 2 }, end: { line: 25, column: 4 } }, "11": { start: { line: 28, column: 13 }, end: { line: 28, column: 34 } }, "12": { start: { line: 30, column: 2 }, end: { line: 30, column: 24 } }, "13": { start: { line: 33, column: 13 }, end: { line: 33, column: 34 } }, "14": { start: { line: 35, column: 2 }, end: { line: 35, column: 24 } }, "15": { start: { line: 38, column: 13 }, end: { line: 38, column: 34 } }, "16": { start: { line: 40, column: 2 }, end: { line: 40, column: 24 } }, "17": { start: { line: 43, column: 21 }, end: { line: 43, column: 49 } }, "18": { start: { line: 45, column: 2 }, end: { line: 45, column: 32 } } }, fnMap: { "0": { name: "saveSteps", decl: { start: { line: 13, column: 9 }, end: { line: 13, column: 18 } }, loc: { start: { line: 13, column: 26 }, end: { line: 18, column: 1 } }, line: 13 }, "1": { name: "receiveAddresses", decl: { start: { line: 21, column: 9 }, end: { line: 21, column: 25 } }, loc: { start: { line: 21, column: 37 }, end: { line: 26, column: 1 } }, line: 21 }, "2": { name: "next", decl: { start: { line: 29, column: 9 }, end: { line: 29, column: 13 } }, loc: { start: { line: 29, column: 16 }, end: { line: 31, column: 1 } }, line: 29 }, "3": { name: "tick", decl: { start: { line: 34, column: 9 }, end: { line: 34, column: 13 } }, loc: { start: { line: 34, column: 16 }, end: { line: 36, column: 1 } }, line: 34 }, "4": { name: "tock", decl: { start: { line: 39, column: 9 }, end: { line: 39, column: 13 } }, loc: { start: { line: 39, column: 16 }, end: { line: 41, column: 1 } }, line: 39 }, "5": { name: "endTrace", decl: { start: { line: 44, column: 9 }, end: { line: 44, column: 17 } }, loc: { start: { line: 44, column: 20 }, end: { line: 46, column: 1 } }, line: 44 } }, branchMap: {}, s: { "0": 0, "1": 0, "2": 0, "3": 0, "4": 0, "5": 0, "6": 0, "7": 0, "8": 0, "9": 0, "10": 0, "11": 0, "12": 0, "13": 0, "14": 0, "15": 0, "16": 0, "17": 0, "18": 0 }, f: { "0": 0, "1": 0, "2": 0, "3": 0, "4": 0, "5": 0 }, b: {}, inputSourceMap: { version: 3, sources: ["lib/trace/actions/index.js"], names: ["saveSteps", "receiveAddresses", "next", "tick", "tock", "endTrace", "SAVE_STEPS", "steps", "type", "RECEIVE_ADDRESSES", "addresses", "NEXT", "TICK", "TOCK", "END_OF_TRACE"], mappings: ";;;;;QACgBA,S,GAAAA,S;QAQAC,gB,GAAAA,gB;QAQAC,I,GAAAA,I;QAKAC,I,GAAAA,I;QAKAC,I,GAAAA,I;QAKAC,Q,GAAAA,Q;AAhCT,MAAMC,kCAAa,YAAnB;AACA,SAASN,SAAT,CAAmBO,KAAnB,EAA0B;AAC/B,SAAO;AACLC,UAAMF,UADD;AAELC;AAFK,GAAP;AAID;;AAEM,MAAME,gDAAoB,mBAA1B;AACA,SAASR,gBAAT,CAA0BS,SAA1B,EAAqC;AAC1C,SAAO;AACLF,UAAMC,iBADD;AAELC;AAFK,GAAP;AAID;;AAEM,MAAMC,sBAAO,MAAb;AACA,SAAST,IAAT,GAAgB;AACrB,SAAO,EAACM,MAAMG,IAAP,EAAP;AACD;;AAEM,MAAMC,sBAAO,MAAb;AACA,SAAST,IAAT,GAAgB;AACrB,SAAO,EAACK,MAAMI,IAAP,EAAP;AACD;;AAEM,MAAMC,sBAAO,MAAb;AACA,SAAST,IAAT,GAAgB;AACrB,SAAO,EAACI,MAAMK,IAAP,EAAP;AACD;;AAEM,MAAMC,sCAAe,KAArB;AACA,SAAST,QAAT,GAAoB;AACzB,SAAO,EAACG,MAAMM,YAAP,EAAP;AACD", file: "index.js", sourceRoot: "/Users/gnidan/src/work/truffle/packages/truffle-debugger", sourcesContent: ["export const SAVE_STEPS = \"SAVE_STEPS\";\nexport function saveSteps(steps) {\n  return {\n    type: SAVE_STEPS,\n    steps\n  };\n}\n\nexport const RECEIVE_ADDRESSES = \"RECEIVE_ADDRESSES\";\nexport function receiveAddresses(addresses) {\n  return {\n    type: RECEIVE_ADDRESSES,\n    addresses\n  };\n}\n\nexport const NEXT = \"NEXT\";\nexport function next() {\n  return {type: NEXT};\n}\n\nexport const TICK = \"TICK\";\nexport function tick() {\n  return {type: TICK};\n}\n\nexport const TOCK = \"TOCK\";\nexport function tock() {\n  return {type: TOCK};\n}\n\nexport const END_OF_TRACE = \"EOT\";\nexport function endTrace() {\n  return {type: END_OF_TRACE};\n}\n"] }, _coverageSchema: "332fd63041d2c1bcb487cc26dd0d5f7d97098a6c" },
      coverage = global[gcv] || (global[gcv] = {});if (coverage[path] && coverage[path].hash === hash) {
    return coverage[path];
  }coverageData.hash = hash;return coverage[path] = coverageData;
}();cov_abd8euik2.s[0]++;Object.defineProperty(exports, "__esModule", { value: true });cov_abd8euik2.s[1]++;exports.saveSteps = saveSteps;cov_abd8euik2.s[2]++;exports.receiveAddresses = receiveAddresses;cov_abd8euik2.s[3]++;exports.next = next;cov_abd8euik2.s[4]++;exports.tick = tick;cov_abd8euik2.s[5]++;exports.tock = tock;cov_abd8euik2.s[6]++;exports.endTrace = endTrace;const SAVE_STEPS = (cov_abd8euik2.s[7]++, exports.SAVE_STEPS = "SAVE_STEPS");function saveSteps(steps) {
  cov_abd8euik2.f[0]++;cov_abd8euik2.s[8]++;return { type: SAVE_STEPS, steps };
}const RECEIVE_ADDRESSES = (cov_abd8euik2.s[9]++, exports.RECEIVE_ADDRESSES = "RECEIVE_ADDRESSES");function receiveAddresses(addresses) {
  cov_abd8euik2.f[1]++;cov_abd8euik2.s[10]++;return { type: RECEIVE_ADDRESSES, addresses };
}const NEXT = (cov_abd8euik2.s[11]++, exports.NEXT = "NEXT");function next() {
  cov_abd8euik2.f[2]++;cov_abd8euik2.s[12]++;return { type: NEXT };
}const TICK = (cov_abd8euik2.s[13]++, exports.TICK = "TICK");function tick() {
  cov_abd8euik2.f[3]++;cov_abd8euik2.s[14]++;return { type: TICK };
}const TOCK = (cov_abd8euik2.s[15]++, exports.TOCK = "TOCK");function tock() {
  cov_abd8euik2.f[4]++;cov_abd8euik2.s[16]++;return { type: TOCK };
}const END_OF_TRACE = (cov_abd8euik2.s[17]++, exports.END_OF_TRACE = "EOT");function endTrace() {
  cov_abd8euik2.f[5]++;cov_abd8euik2.s[18]++;return { type: END_OF_TRACE };
}

/***/ }),
/* 22 */
/***/ (function(module, exports) {

module.exports = require("babel-runtime/core-js/set");

/***/ }),
/* 23 */
/***/ (function(module, exports) {

module.exports = require("babel-runtime/core-js/promise");

/***/ }),
/* 24 */
/***/ (function(module, exports) {

module.exports = require("json-pointer");

/***/ }),
/* 25 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var cov_2piveyac3q = function () {
  var path = "/Users/gnidan/src/work/truffle/packages/truffle-debugger/lib/session/actions/index.js",
      hash = "b0c0bf12aa89cc7d3b1dc10f217aa7d2ce279892",
      Function = function () {}.constructor,
      global = new Function('return this')(),
      gcv = "__coverage__",
      coverageData = { path: "/Users/gnidan/src/work/truffle/packages/truffle-debugger/lib/session/actions/index.js", statementMap: { "0": { start: { line: 3, column: 0 }, end: { line: 5, column: 3 } }, "1": { start: { line: 6, column: 0 }, end: { line: 6, column: 22 } }, "2": { start: { line: 7, column: 0 }, end: { line: 7, column: 22 } }, "3": { start: { line: 8, column: 0 }, end: { line: 8, column: 22 } }, "4": { start: { line: 9, column: 0 }, end: { line: 9, column: 24 } }, "5": { start: { line: 10, column: 0 }, end: { line: 10, column: 42 } }, "6": { start: { line: 11, column: 14 }, end: { line: 11, column: 45 } }, "7": { start: { line: 13, column: 2 }, end: { line: 16, column: 4 } }, "8": { start: { line: 19, column: 14 }, end: { line: 19, column: 45 } }, "9": { start: { line: 21, column: 2 }, end: { line: 23, column: 4 } }, "10": { start: { line: 26, column: 14 }, end: { line: 26, column: 45 } }, "11": { start: { line: 28, column: 2 }, end: { line: 31, column: 4 } }, "12": { start: { line: 34, column: 15 }, end: { line: 34, column: 48 } }, "13": { start: { line: 36, column: 2 }, end: { line: 38, column: 4 } }, "14": { start: { line: 41, column: 25 }, end: { line: 41, column: 70 } }, "15": { start: { line: 43, column: 2 }, end: { line: 46, column: 4 } } }, fnMap: { "0": { name: "start", decl: { start: { line: 12, column: 9 }, end: { line: 12, column: 14 } }, loc: { start: { line: 12, column: 33 }, end: { line: 17, column: 1 } }, line: 12 }, "1": { name: "ready", decl: { start: { line: 20, column: 9 }, end: { line: 20, column: 14 } }, loc: { start: { line: 20, column: 17 }, end: { line: 24, column: 1 } }, line: 20 }, "2": { name: "error", decl: { start: { line: 27, column: 9 }, end: { line: 27, column: 14 } }, loc: { start: { line: 27, column: 22 }, end: { line: 32, column: 1 } }, line: 27 }, "3": { name: "finish", decl: { start: { line: 35, column: 9 }, end: { line: 35, column: 15 } }, loc: { start: { line: 35, column: 18 }, end: { line: 39, column: 1 } }, line: 35 }, "4": { name: "recordContracts", decl: { start: { line: 42, column: 9 }, end: { line: 42, column: 24 } }, loc: { start: { line: 42, column: 44 }, end: { line: 47, column: 1 } }, line: 42 } }, branchMap: {}, s: { "0": 0, "1": 0, "2": 0, "3": 0, "4": 0, "5": 0, "6": 0, "7": 0, "8": 0, "9": 0, "10": 0, "11": 0, "12": 0, "13": 0, "14": 0, "15": 0 }, f: { "0": 0, "1": 0, "2": 0, "3": 0, "4": 0 }, b: {}, inputSourceMap: { version: 3, sources: ["lib/session/actions/index.js"], names: ["start", "ready", "error", "finish", "recordContracts", "START", "txHash", "provider", "type", "READY", "ERROR", "FINISH", "RECORD_CONTRACTS", "contexts", "sources"], mappings: ";;;;;QACgBA,K,GAAAA,K;QAQAC,K,GAAAA,K;QAOAC,K,GAAAA,K;QAQAC,M,GAAAA,M;QAOAC,e,GAAAA,e;AA/BT,MAAMC,wBAAQ,eAAd;AACA,SAASL,KAAT,CAAeM,MAAf,EAAuBC,QAAvB,EAAiC;AACtC,SAAO;AACLC,UAAMH,KADD;AAELC,UAFK,EAEGC;AAFH,GAAP;AAID;;AAEM,MAAME,wBAAQ,eAAd;AACA,SAASR,KAAT,GAAiB;AACtB,SAAO;AACLO,UAAMC;AADD,GAAP;AAGD;;AAEM,MAAMC,wBAAQ,eAAd;AACA,SAASR,KAAT,CAAeA,KAAf,EAAsB;AAC3B,SAAO;AACLM,UAAME,KADD;AAELR;AAFK,GAAP;AAID;;AAEM,MAAMS,0BAAS,gBAAf;AACA,SAASR,MAAT,GAAkB;AACvB,SAAO;AACLK,UAAMG;AADD,GAAP;AAGD;;AAEM,MAAMC,8CAAmB,kBAAzB;AACA,SAASR,eAAT,CAAyBS,QAAzB,EAAmCC,OAAnC,EAA4C;AACjD,SAAO;AACLN,UAAMI,gBADD;AAELC,YAFK,EAEKC;AAFL,GAAP;AAID", file: "index.js", sourceRoot: "/Users/gnidan/src/work/truffle/packages/truffle-debugger", sourcesContent: ["export const START = \"SESSION_START\";\nexport function start(txHash, provider) {\n  return {\n    type: START,\n    txHash, provider\n  };\n}\n\nexport const READY = \"SESSION_READY\";\nexport function ready() {\n  return {\n    type: READY,\n  };\n}\n\nexport const ERROR = \"SESSION_ERROR\";\nexport function error(error) {\n  return {\n    type: ERROR,\n    error\n  };\n}\n\nexport const FINISH = \"SESSION_FINISH\";\nexport function finish() {\n  return {\n    type: FINISH,\n  };\n}\n\nexport const RECORD_CONTRACTS = \"RECORD_CONTRACTS\";\nexport function recordContracts(contexts, sources) {\n  return {\n    type: RECORD_CONTRACTS,\n    contexts, sources\n  }\n}\n"] }, _coverageSchema: "332fd63041d2c1bcb487cc26dd0d5f7d97098a6c" },
      coverage = global[gcv] || (global[gcv] = {});if (coverage[path] && coverage[path].hash === hash) {
    return coverage[path];
  }coverageData.hash = hash;return coverage[path] = coverageData;
}();cov_2piveyac3q.s[0]++;Object.defineProperty(exports, "__esModule", { value: true });cov_2piveyac3q.s[1]++;exports.start = start;cov_2piveyac3q.s[2]++;exports.ready = ready;cov_2piveyac3q.s[3]++;exports.error = error;cov_2piveyac3q.s[4]++;exports.finish = finish;cov_2piveyac3q.s[5]++;exports.recordContracts = recordContracts;const START = (cov_2piveyac3q.s[6]++, exports.START = "SESSION_START");function start(txHash, provider) {
  cov_2piveyac3q.f[0]++;cov_2piveyac3q.s[7]++;return { type: START, txHash, provider };
}const READY = (cov_2piveyac3q.s[8]++, exports.READY = "SESSION_READY");function ready() {
  cov_2piveyac3q.f[1]++;cov_2piveyac3q.s[9]++;return { type: READY };
}const ERROR = (cov_2piveyac3q.s[10]++, exports.ERROR = "SESSION_ERROR");function error(error) {
  cov_2piveyac3q.f[2]++;cov_2piveyac3q.s[11]++;return { type: ERROR, error };
}const FINISH = (cov_2piveyac3q.s[12]++, exports.FINISH = "SESSION_FINISH");function finish() {
  cov_2piveyac3q.f[3]++;cov_2piveyac3q.s[13]++;return { type: FINISH };
}const RECORD_CONTRACTS = (cov_2piveyac3q.s[14]++, exports.RECORD_CONTRACTS = "RECORD_CONTRACTS");function recordContracts(contexts, sources) {
  cov_2piveyac3q.f[4]++;cov_2piveyac3q.s[15]++;return { type: RECORD_CONTRACTS, contexts, sources };
}

/***/ }),
/* 26 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var cov_rg5m4u2ng = function () {
  var path = "/Users/gnidan/src/work/truffle/packages/truffle-debugger/lib/data/selectors/index.js",
      hash = "0fcda8698e8a86599d6774c105fce03119fefa36",
      Function = function () {}.constructor,
      global = new Function('return this')(),
      gcv = "__coverage__",
      coverageData = { path: "/Users/gnidan/src/work/truffle/packages/truffle-debugger/lib/data/selectors/index.js", statementMap: { "0": { start: { line: 3, column: 0 }, end: { line: 5, column: 3 } }, "1": { start: { line: 7, column: 16 }, end: { line: 7, column: 56 } }, "2": { start: { line: 9, column: 16 }, end: { line: 9, column: 49 } }, "3": { start: { line: 11, column: 15 }, end: { line: 11, column: 62 } }, "4": { start: { line: 13, column: 16 }, end: { line: 13, column: 48 } }, "5": { start: { line: 15, column: 14 }, end: { line: 15, column: 60 } }, "6": { start: { line: 17, column: 15 }, end: { line: 17, column: 46 } }, "7": { start: { line: 19, column: 13 }, end: { line: 19, column: 29 } }, "8": { start: { line: 21, column: 14 }, end: { line: 21, column: 44 } }, "9": { start: { line: 23, column: 20 }, end: { line: 23, column: 44 } }, "10": { start: { line: 25, column: 19 }, end: { line: 25, column: 42 } }, "11": { start: { line: 27, column: 20 }, end: { line: 27, column: 56 } }, "12": { start: { line: 29, column: 17 }, end: { line: 29, column: 45 } }, "13": { start: { line: 31, column: 18 }, end: { line: 31, column: 52 } }, "14": { start: { line: 33, column: 18 }, end: { line: 33, column: 46 } }, "15": { start: { line: 35, column: 18 }, end: { line: 35, column: 53 } }, "16": { start: { line: 37, column: 18 }, end: { line: 37, column: 51 } }, "17": { start: { line: 39, column: 18 }, end: { line: 39, column: 53 } }, "18": { start: { line: 41, column: 14 }, end: { line: 41, column: 34 } }, "19": { start: { line: 43, column: 15 }, end: { line: 43, column: 46 } }, "20": { start: { line: 45, column: 13 }, end: { line: 45, column: 39 } }, "21": { start: { line: 47, column: 18 }, end: { line: 47, column: 49 } }, "22": { start: { line: 49, column: 17 }, end: { line: 49, column: 40 } }, "23": { start: { line: 51, column: 40 }, end: { line: 51, column: 267 } }, "24": { start: { line: 51, column: 69 }, end: { line: 51, column: 80 } }, "25": { start: { line: 51, column: 103 }, end: { line: 51, column: 105 } }, "26": { start: { line: 51, column: 107 }, end: { line: 51, column: 228 } }, "27": { start: { line: 51, column: 126 }, end: { line: 51, column: 226 } }, "28": { start: { line: 51, column: 149 }, end: { line: 51, column: 224 } }, "29": { start: { line: 51, column: 201 }, end: { line: 51, column: 224 } }, "30": { start: { line: 51, column: 229 }, end: { line: 51, column: 250 } }, "31": { start: { line: 51, column: 251 }, end: { line: 51, column: 265 } }, "32": { start: { line: 53, column: 39 }, end: { line: 53, column: 93 } }, "33": { start: { line: 55, column: 14 }, end: { line: 55, column: 61 } }, "34": { start: { line: 58, column: 2 }, end: { line: 75, column: 4 } }, "35": { start: { line: 62, column: 59 }, end: { line: 62, column: 159 } }, "36": { start: { line: 62, column: 85 }, end: { line: 62, column: 158 } }, "37": { start: { line: 67, column: 61 }, end: { line: 67, column: 148 } }, "38": { start: { line: 67, column: 128 }, end: { line: 67, column: 146 } }, "39": { start: { line: 72, column: 65 }, end: { line: 74, column: 8 } }, "40": { start: { line: 72, column: 152 }, end: { line: 74, column: 5 } }, "41": { start: { line: 73, column: 81 }, end: { line: 73, column: 99 } }, "42": { start: { line: 78, column: 13 }, end: { line: 233, column: 2 } }, "43": { start: { line: 79, column: 18 }, end: { line: 79, column: 28 } }, "44": { start: { line: 85, column: 78 }, end: { line: 85, column: 82 } }, "45": { start: { line: 87, column: 126 }, end: { line: 87, column: 131 } }, "46": { start: { line: 97, column: 118 }, end: { line: 102, column: 10 } }, "47": { start: { line: 97, column: 200 }, end: { line: 102, column: 7 } }, "48": { start: { line: 110, column: 138 }, end: { line: 112, column: 6 } }, "49": { start: { line: 110, column: 159 }, end: { line: 112, column: 6 } }, "50": { start: { line: 123, column: 63 }, end: { line: 123, column: 85 } }, "51": { start: { line: 134, column: 68 }, end: { line: 134, column: 95 } }, "52": { start: { line: 141, column: 68 }, end: { line: 141, column: 95 } }, "53": { start: { line: 157, column: 84 }, end: { line: 157, column: 91 } }, "54": { start: { line: 176, column: 18 }, end: { line: 176, column: 26 } }, "55": { start: { line: 177, column: 24 }, end: { line: 177, column: 26 } }, "56": { start: { line: 179, column: 8 }, end: { line: 183, column: 30 } }, "57": { start: { line: 180, column: 10 }, end: { line: 180, column: 164 } }, "58": { start: { line: 180, column: 100 }, end: { line: 180, column: 130 } }, "59": { start: { line: 180, column: 142 }, end: { line: 180, column: 160 } }, "60": { start: { line: 182, column: 10 }, end: { line: 182, column: 37 } }, "61": { start: { line: 185, column: 8 }, end: { line: 185, column: 25 } }, "62": { start: { line: 193, column: 108 }, end: { line: 197, column: 9 } }, "63": { start: { line: 194, column: 29 }, end: { line: 194, column: 39 } }, "64": { start: { line: 196, column: 8 }, end: { line: 196, column: 44 } }, "65": { start: { line: 204, column: 102 }, end: { line: 213, column: 9 } }, "66": { start: { line: 205, column: 22 }, end: { line: 205, column: 43 } }, "67": { start: { line: 206, column: 8 }, end: { line: 208, column: 9 } }, "68": { start: { line: 207, column: 10 }, end: { line: 207, column: 27 } }, "69": { start: { line: 210, column: 8 }, end: { line: 212, column: 10 } }, "70": { start: { line: 215, column: 123 }, end: { line: 217, column: 10 } }, "71": { start: { line: 215, column: 209 }, end: { line: 217, column: 7 } }, "72": { start: { line: 235, column: 0 }, end: { line: 235, column: 23 } } }, fnMap: { "0": { name: "_interopRequireWildcard", decl: { start: { line: 51, column: 9 }, end: { line: 51, column: 32 } }, loc: { start: { line: 51, column: 38 }, end: { line: 51, column: 269 } }, line: 51 }, "1": { name: "_interopRequireDefault", decl: { start: { line: 53, column: 9 }, end: { line: 53, column: 31 } }, loc: { start: { line: 53, column: 37 }, end: { line: 53, column: 95 } }, line: 53 }, "2": { name: "createStateSelectors", decl: { start: { line: 57, column: 9 }, end: { line: 57, column: 29 } }, loc: { start: { line: 57, column: 58 }, end: { line: 76, column: 1 } }, line: 57 }, "3": { name: "(anonymous_3)", decl: { start: { line: 62, column: 50 }, end: { line: 62, column: 51 } }, loc: { start: { line: 62, column: 59 }, end: { line: 62, column: 159 } }, line: 62 }, "4": { name: "(anonymous_4)", decl: { start: { line: 62, column: 77 }, end: { line: 62, column: 78 } }, loc: { start: { line: 62, column: 85 }, end: { line: 62, column: 158 } }, line: 62 }, "5": { name: "(anonymous_5)", decl: { start: { line: 67, column: 52 }, end: { line: 67, column: 53 } }, loc: { start: { line: 67, column: 61 }, end: { line: 67, column: 148 } }, line: 67 }, "6": { name: "(anonymous_6)", decl: { start: { line: 67, column: 120 }, end: { line: 67, column: 121 } }, loc: { start: { line: 67, column: 128 }, end: { line: 67, column: 146 } }, line: 67 }, "7": { name: "(anonymous_7)", decl: { start: { line: 72, column: 54 }, end: { line: 72, column: 55 } }, loc: { start: { line: 72, column: 65 }, end: { line: 74, column: 8 } }, line: 72 }, "8": { name: "(anonymous_8)", decl: { start: { line: 72, column: 130 }, end: { line: 72, column: 131 } }, loc: { start: { line: 72, column: 152 }, end: { line: 74, column: 5 } }, line: 72 }, "9": { name: "(anonymous_9)", decl: { start: { line: 73, column: 73 }, end: { line: 73, column: 74 } }, loc: { start: { line: 73, column: 81 }, end: { line: 73, column: 99 } }, line: 73 }, "10": { name: "(anonymous_10)", decl: { start: { line: 79, column: 9 }, end: { line: 79, column: 10 } }, loc: { start: { line: 79, column: 18 }, end: { line: 79, column: 28 } }, line: 79 }, "11": { name: "(anonymous_11)", decl: { start: { line: 85, column: 70 }, end: { line: 85, column: 71 } }, loc: { start: { line: 85, column: 78 }, end: { line: 85, column: 82 } }, line: 85 }, "12": { name: "(anonymous_12)", decl: { start: { line: 87, column: 117 }, end: { line: 87, column: 118 } }, loc: { start: { line: 87, column: 126 }, end: { line: 87, column: 131 } }, line: 87 }, "13": { name: "(anonymous_13)", decl: { start: { line: 97, column: 97 }, end: { line: 97, column: 98 } }, loc: { start: { line: 97, column: 118 }, end: { line: 102, column: 10 } }, line: 97 }, "14": { name: "(anonymous_14)", decl: { start: { line: 97, column: 182 }, end: { line: 97, column: 183 } }, loc: { start: { line: 97, column: 200 }, end: { line: 102, column: 7 } }, line: 97 }, "15": { name: "(anonymous_15)", decl: { start: { line: 110, column: 106 }, end: { line: 110, column: 107 } }, loc: { start: { line: 110, column: 138 }, end: { line: 112, column: 6 } }, line: 110 }, "16": { name: "(anonymous_16)", decl: { start: { line: 110, column: 138 }, end: { line: 110, column: 139 } }, loc: { start: { line: 110, column: 159 }, end: { line: 112, column: 6 } }, line: 110 }, "17": { name: "(anonymous_17)", decl: { start: { line: 123, column: 54 }, end: { line: 123, column: 55 } }, loc: { start: { line: 123, column: 63 }, end: { line: 123, column: 85 } }, line: 123 }, "18": { name: "(anonymous_18)", decl: { start: { line: 134, column: 59 }, end: { line: 134, column: 60 } }, loc: { start: { line: 134, column: 68 }, end: { line: 134, column: 95 } }, line: 134 }, "19": { name: "(anonymous_19)", decl: { start: { line: 141, column: 59 }, end: { line: 141, column: 60 } }, loc: { start: { line: 141, column: 68 }, end: { line: 141, column: 95 } }, line: 141 }, "20": { name: "(anonymous_20)", decl: { start: { line: 157, column: 76 }, end: { line: 157, column: 77 } }, loc: { start: { line: 157, column: 84 }, end: { line: 157, column: 91 } }, line: 157 }, "21": { name: "(anonymous_21)", decl: { start: { line: 175, column: 84 }, end: { line: 175, column: 85 } }, loc: { start: { line: 175, column: 103 }, end: { line: 186, column: 7 } }, line: 175 }, "22": { name: "(anonymous_22)", decl: { start: { line: 180, column: 95 }, end: { line: 180, column: 96 } }, loc: { start: { line: 180, column: 100 }, end: { line: 180, column: 130 } }, line: 180 }, "23": { name: "(anonymous_23)", decl: { start: { line: 180, column: 136 }, end: { line: 180, column: 137 } }, loc: { start: { line: 180, column: 142 }, end: { line: 180, column: 160 } }, line: 180 }, "24": { name: "(anonymous_24)", decl: { start: { line: 193, column: 83 }, end: { line: 193, column: 84 } }, loc: { start: { line: 193, column: 108 }, end: { line: 197, column: 9 } }, line: 193 }, "25": { name: "(anonymous_25)", decl: { start: { line: 193, column: 177 }, end: { line: 193, column: 178 } }, loc: { start: { line: 193, column: 199 }, end: { line: 197, column: 7 } }, line: 193 }, "26": { name: "(anonymous_26)", decl: { start: { line: 204, column: 72 }, end: { line: 204, column: 73 } }, loc: { start: { line: 204, column: 102 }, end: { line: 213, column: 9 } }, line: 204 }, "27": { name: "(anonymous_27)", decl: { start: { line: 204, column: 171 }, end: { line: 204, column: 172 } }, loc: { start: { line: 204, column: 193 }, end: { line: 213, column: 7 } }, line: 204 }, "28": { name: "(anonymous_28)", decl: { start: { line: 215, column: 92 }, end: { line: 215, column: 93 } }, loc: { start: { line: 215, column: 123 }, end: { line: 217, column: 10 } }, line: 215 }, "29": { name: "(anonymous_29)", decl: { start: { line: 215, column: 185 }, end: { line: 215, column: 186 } }, loc: { start: { line: 215, column: 209 }, end: { line: 217, column: 7 } }, line: 215 } }, branchMap: { "0": { loc: { start: { line: 51, column: 40 }, end: { line: 51, column: 267 } }, type: "if", locations: [{ start: { line: 51, column: 40 }, end: { line: 51, column: 267 } }, { start: { line: 51, column: 40 }, end: { line: 51, column: 267 } }], line: 51 }, "1": { loc: { start: { line: 51, column: 44 }, end: { line: 51, column: 65 } }, type: "binary-expr", locations: [{ start: { line: 51, column: 44 }, end: { line: 51, column: 47 } }, { start: { line: 51, column: 51 }, end: { line: 51, column: 65 } }], line: 51 }, "2": { loc: { start: { line: 51, column: 107 }, end: { line: 51, column: 228 } }, type: "if", locations: [{ start: { line: 51, column: 107 }, end: { line: 51, column: 228 } }, { start: { line: 51, column: 107 }, end: { line: 51, column: 228 } }], line: 51 }, "3": { loc: { start: { line: 51, column: 149 }, end: { line: 51, column: 224 } }, type: "if", locations: [{ start: { line: 51, column: 149 }, end: { line: 51, column: 224 } }, { start: { line: 51, column: 149 }, end: { line: 51, column: 224 } }], line: 51 }, "4": { loc: { start: { line: 53, column: 46 }, end: { line: 53, column: 92 } }, type: "cond-expr", locations: [{ start: { line: 53, column: 70 }, end: { line: 53, column: 73 } }, { start: { line: 53, column: 76 }, end: { line: 53, column: 92 } }], line: 53 }, "5": { loc: { start: { line: 53, column: 46 }, end: { line: 53, column: 67 } }, type: "binary-expr", locations: [{ start: { line: 53, column: 46 }, end: { line: 53, column: 49 } }, { start: { line: 53, column: 53 }, end: { line: 53, column: 67 } }], line: 53 }, "6": { loc: { start: { line: 62, column: 60 }, end: { line: 62, column: 71 } }, type: "binary-expr", locations: [{ start: { line: 62, column: 60 }, end: { line: 62, column: 65 } }, { start: { line: 62, column: 69 }, end: { line: 62, column: 71 } }], line: 62 }, "7": { loc: { start: { line: 67, column: 77 }, end: { line: 67, column: 114 } }, type: "binary-expr", locations: [{ start: { line: 67, column: 77 }, end: { line: 67, column: 108 } }, { start: { line: 67, column: 112 }, end: { line: 67, column: 114 } }], line: 67 }, "8": { loc: { start: { line: 73, column: 40 }, end: { line: 73, column: 67 } }, type: "binary-expr", locations: [{ start: { line: 73, column: 40 }, end: { line: 73, column: 61 } }, { start: { line: 73, column: 65 }, end: { line: 73, column: 67 } }], line: 73 }, "9": { loc: { start: { line: 180, column: 59 }, end: { line: 180, column: 86 } }, type: "binary-expr", locations: [{ start: { line: 180, column: 59 }, end: { line: 180, column: 80 } }, { start: { line: 180, column: 84 }, end: { line: 180, column: 86 } }], line: 180 }, "10": { loc: { start: { line: 205, column: 22 }, end: { line: 205, column: 43 } }, type: "binary-expr", locations: [{ start: { line: 205, column: 22 }, end: { line: 205, column: 37 } }, { start: { line: 205, column: 41 }, end: { line: 205, column: 43 } }], line: 205 }, "11": { loc: { start: { line: 206, column: 8 }, end: { line: 208, column: 9 } }, type: "if", locations: [{ start: { line: 206, column: 8 }, end: { line: 208, column: 9 } }, { start: { line: 206, column: 8 }, end: { line: 208, column: 9 } }], line: 206 } }, s: { "0": 0, "1": 0, "2": 0, "3": 0, "4": 0, "5": 0, "6": 0, "7": 0, "8": 0, "9": 0, "10": 0, "11": 0, "12": 0, "13": 0, "14": 0, "15": 0, "16": 0, "17": 0, "18": 0, "19": 0, "20": 0, "21": 0, "22": 0, "23": 0, "24": 0, "25": 0, "26": 0, "27": 0, "28": 0, "29": 0, "30": 0, "31": 0, "32": 0, "33": 0, "34": 0, "35": 0, "36": 0, "37": 0, "38": 0, "39": 0, "40": 0, "41": 0, "42": 0, "43": 0, "44": 0, "45": 0, "46": 0, "47": 0, "48": 0, "49": 0, "50": 0, "51": 0, "52": 0, "53": 0, "54": 0, "55": 0, "56": 0, "57": 0, "58": 0, "59": 0, "60": 0, "61": 0, "62": 0, "63": 0, "64": 0, "65": 0, "66": 0, "67": 0, "68": 0, "69": 0, "70": 0, "71": 0, "72": 0 }, f: { "0": 0, "1": 0, "2": 0, "3": 0, "4": 0, "5": 0, "6": 0, "7": 0, "8": 0, "9": 0, "10": 0, "11": 0, "12": 0, "13": 0, "14": 0, "15": 0, "16": 0, "17": 0, "18": 0, "19": 0, "20": 0, "21": 0, "22": 0, "23": 0, "24": 0, "25": 0, "26": 0, "27": 0, "28": 0, "29": 0 }, b: { "0": [0, 0], "1": [0, 0], "2": [0, 0], "3": [0, 0], "4": [0, 0], "5": [0, 0], "6": [0, 0], "7": [0, 0], "8": [0, 0], "9": [0, 0], "10": [0, 0], "11": [0, 0] }, inputSourceMap: { version: 3, sources: ["lib/data/selectors/index.js"], names: ["decodeUtils", "debug", "createStateSelectors", "stack", "memory", "storage", "words", "map", "word", "toBytes", "toBigNumber", "WORD_SIZE", "Uint8Array", "join", "match", "byte", "parseInt", "mapping", "address", "data", "state", "views", "ast", "current", "tree", "atLastInstructionForSourceRange", "solidity", "isSourceRangeFinal", "final", "scopes", "inlined", "info", "sources", "id", "entry", "definition", "jsonpointer", "get", "sourceId", "pointer", "decoder", "mappingKeys", "ref", "byId", "proc", "assignments", "scope", "node", "evm", "identifiers", "_", "cur", "variables", "filter", "v", "name", "undefined", "parentId", "definitions", "identifier", "refs", "decoded", "decode", "native", "cleanBigNumbers", "next"], mappings: "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", file: "index.js", sourceRoot: "/Users/gnidan/src/work/truffle/packages/truffle-debugger", sourcesContent: ["import debugModule from \"debug\";\nconst debug = debugModule(\"debugger:data:selectors\");\n\nimport { createSelectorTree, createLeaf } from \"reselect-tree\";\nimport jsonpointer from \"json-pointer\";\n\nimport ast from \"lib/ast/selectors\";\nimport evm from \"lib/evm/selectors\";\nimport solidity from \"lib/solidity/selectors\";\n\nimport decode from \"../decode\";\nimport * as decodeUtils from \"../decode/utils\";\n\nimport { BigNumber } from \"bignumber.js\";\n\nfunction createStateSelectors({ stack, memory, storage }) {\n  return {\n    /**\n     * .stack\n     */\n    stack: createLeaf(\n      [stack],\n\n      (words) => (words || []).map(\n        (word) => decodeUtils.toBytes(decodeUtils.toBigNumber(word, decodeUtils.WORD_SIZE))\n      )\n    ),\n\n    /**\n     * .memory\n     */\n    memory: createLeaf(\n      [memory],\n\n      (words) => new Uint8Array(\n        (words.join(\"\").match(/.{1,2}/g) || [])\n          .map( (byte) => parseInt(byte, 16) )\n      )\n    ),\n\n    /**\n     * .storage\n     */\n    storage: createLeaf(\n      [storage],\n\n      (mapping) => Object.assign(\n        {}, ...Object.entries(mapping).map( ([ address, word ]) =>\n          ({\n            [`0x${address}`]: new Uint8Array(\n              (word.match(/.{1,2}/g) || [])\n                .map( (byte) => parseInt(byte, 16) )\n            )\n          })\n        )\n      )\n    )\n  };\n}\n\nconst data = createSelectorTree({\n  state: (state) => state.data,\n\n  /**\n   * data.views\n   */\n  views: {\n    ast: createLeaf(\n      [ast.current], (tree) => tree\n    ),\n\n    atLastInstructionForSourceRange: createLeaf(\n      [solidity.current.isSourceRangeFinal], (final) => final\n    ),\n\n    /**\n     * data.views.scopes\n     */\n    scopes: {\n\n      /**\n       * data.views.scopes.inlined\n       */\n      inlined: createLeaf(\n        [\"/info/scopes\", solidity.info.sources],\n\n        (scopes, sources) => Object.assign({},\n          ...Object.entries(scopes).map(\n            ([id, entry]) => ({\n              [id]: {\n                ...entry,\n\n                definition: jsonpointer.get(\n                  sources[entry.sourceId].ast, entry.pointer\n                )\n              }\n            })\n          )\n        )\n      )\n    },\n\n    /**\n     * data.views.decoder\n     *\n     * selector returns (ast node definition, data reference) => value\n     */\n    decoder: createLeaf(\n      [\"/views/scopes/inlined\", \"/next/state\", \"/proc/mappingKeys\"],\n\n      (scopes, state, mappingKeys) =>\n        (definition, ref) => decode(definition, ref, {\n          scopes, state, mappingKeys\n        })\n    )\n  },\n\n  /**\n   * data.info\n   */\n  info: {\n\n    /**\n     * data.info.scopes\n     */\n    scopes: createLeaf([\"/state\"], (state) => state.info.scopes.byId)\n  },\n\n  /**\n   * data.proc\n   */\n  proc: {\n\n    /**\n     * data.proc.assignments\n     */\n    assignments: createLeaf(\n      [\"/state\"], (state) => state.proc.assignments.byId\n    ),\n\n    /**\n     * data.proc.mappingKeys\n     *\n     * known keys for each mapping (identified by node ID)\n     */\n    mappingKeys: createLeaf(\n      [\"/state\"], (state) => state.proc.mappingKeys.byId\n    )\n  },\n\n  /**\n   * data.current\n   */\n  current: {\n    /**\n     *\n     * data.current.scope\n     */\n    scope: {\n\n      /**\n       * data.current.scope.id\n       */\n      id: createLeaf(\n        [ast.current.node], (node) => node.id\n      )\n    },\n\n    /**\n     * data.current.state\n     */\n    state: createStateSelectors(evm.current.state),\n\n    /**\n     * data.current.identifiers (namespace)\n     */\n    identifiers: {\n\n      /**\n       * data.current.identifiers (selector)\n       *\n       * returns identifers and corresponding definition node ID\n       */\n      _: createLeaf(\n        [\n          \"/views/scopes/inlined\",\n          \"/current/scope\",\n        ],\n\n        (scopes, scope) => {\n          let cur = scope.id;\n          let variables = {};\n\n          do {\n            variables = Object.assign(\n              variables,\n              ...(scopes[cur].variables || [])\n                .filter( (v) => variables[v.name] == undefined )\n                .map( (v) => ({ [v.name]: v.id }) )\n            );\n\n            cur = scopes[cur].parentId;\n          } while (cur != null);\n\n          return variables;\n        }\n      ),\n\n      /**\n       * data.current.identifiers.definitions\n       *\n       * current variable definitions\n       */\n      definitions: createLeaf(\n        [\n          \"/views/scopes/inlined\",\n          \"./_\"\n        ],\n\n        (scopes, identifiers) => Object.assign({},\n          ...Object.entries(identifiers)\n            .map( ([identifier, id]) => {\n              let { definition } = scopes[id];\n\n              return { [identifier]: definition };\n            })\n        )\n      ),\n\n      /**\n       * data.current.identifiers.refs\n       *\n       * current variables' value refs\n       */\n      refs: createLeaf(\n        [\n          \"/proc/assignments\",\n          \"./_\"\n        ],\n\n        (assignments, identifiers) => Object.assign({},\n          ...Object.entries(identifiers)\n            .map( ([identifier, id]) => {\n              let { ref } = (assignments[id] || {})\n              if (!ref) { return undefined };\n\n              return {\n                [identifier]: ref\n              };\n            })\n        )\n      ),\n\n      decoded: createLeaf(\n        [\n          \"/views/decoder\",\n          \"./definitions\",\n          \"./refs\",\n        ],\n\n        (decode, definitions, refs) => Object.assign({},\n          ...Object.entries(refs)\n            .map( ([identifier, ref]) => ({\n              [identifier]: decode(definitions[identifier], ref)\n            }) )\n        )\n      ),\n\n      native: createLeaf(['./decoded'], decodeUtils.cleanBigNumbers)\n    }\n  },\n\n  /**\n   * data.next\n   */\n  next: {\n\n    /**\n     * data.next.state\n     */\n    state: createStateSelectors(evm.next.state)\n  }\n});\n\nexport default data;\n"] }, _coverageSchema: "332fd63041d2c1bcb487cc26dd0d5f7d97098a6c" },
      coverage = global[gcv] || (global[gcv] = {});if (coverage[path] && coverage[path].hash === hash) {
    return coverage[path];
  }coverageData.hash = hash;return coverage[path] = coverageData;
}();cov_rg5m4u2ng.s[0]++;Object.defineProperty(exports, "__esModule", { value: true });var _extends2 = (cov_rg5m4u2ng.s[1]++, __webpack_require__(2));var _extends3 = (cov_rg5m4u2ng.s[2]++, _interopRequireDefault(_extends2));var _entries = (cov_rg5m4u2ng.s[3]++, __webpack_require__(1));var _entries2 = (cov_rg5m4u2ng.s[4]++, _interopRequireDefault(_entries));var _assign = (cov_rg5m4u2ng.s[5]++, __webpack_require__(3));var _assign2 = (cov_rg5m4u2ng.s[6]++, _interopRequireDefault(_assign));var _debug = (cov_rg5m4u2ng.s[7]++, __webpack_require__(0));var _debug2 = (cov_rg5m4u2ng.s[8]++, _interopRequireDefault(_debug));var _reselectTree = (cov_rg5m4u2ng.s[9]++, __webpack_require__(9));var _jsonPointer = (cov_rg5m4u2ng.s[10]++, __webpack_require__(24));var _jsonPointer2 = (cov_rg5m4u2ng.s[11]++, _interopRequireDefault(_jsonPointer));var _selectors = (cov_rg5m4u2ng.s[12]++, __webpack_require__(14));var _selectors2 = (cov_rg5m4u2ng.s[13]++, _interopRequireDefault(_selectors));var _selectors3 = (cov_rg5m4u2ng.s[14]++, __webpack_require__(5));var _selectors4 = (cov_rg5m4u2ng.s[15]++, _interopRequireDefault(_selectors3));var _selectors5 = (cov_rg5m4u2ng.s[16]++, __webpack_require__(6));var _selectors6 = (cov_rg5m4u2ng.s[17]++, _interopRequireDefault(_selectors5));var _decode = (cov_rg5m4u2ng.s[18]++, __webpack_require__(62));var _decode2 = (cov_rg5m4u2ng.s[19]++, _interopRequireDefault(_decode));var _utils = (cov_rg5m4u2ng.s[20]++, __webpack_require__(11));var decodeUtils = (cov_rg5m4u2ng.s[21]++, _interopRequireWildcard(_utils));var _bignumber = (cov_rg5m4u2ng.s[22]++, __webpack_require__(20));function _interopRequireWildcard(obj) {
  cov_rg5m4u2ng.f[0]++;cov_rg5m4u2ng.s[23]++;if ((cov_rg5m4u2ng.b[1][0]++, obj) && (cov_rg5m4u2ng.b[1][1]++, obj.__esModule)) {
    cov_rg5m4u2ng.b[0][0]++;cov_rg5m4u2ng.s[24]++;return obj;
  } else {
    cov_rg5m4u2ng.b[0][1]++;var newObj = (cov_rg5m4u2ng.s[25]++, {});cov_rg5m4u2ng.s[26]++;if (obj != null) {
      cov_rg5m4u2ng.b[2][0]++;cov_rg5m4u2ng.s[27]++;for (var key in obj) {
        cov_rg5m4u2ng.s[28]++;if (Object.prototype.hasOwnProperty.call(obj, key)) {
          cov_rg5m4u2ng.b[3][0]++;cov_rg5m4u2ng.s[29]++;newObj[key] = obj[key];
        } else {
          cov_rg5m4u2ng.b[3][1]++;
        }
      }
    } else {
      cov_rg5m4u2ng.b[2][1]++;
    }cov_rg5m4u2ng.s[30]++;newObj.default = obj;cov_rg5m4u2ng.s[31]++;return newObj;
  }
}function _interopRequireDefault(obj) {
  cov_rg5m4u2ng.f[1]++;cov_rg5m4u2ng.s[32]++;return (cov_rg5m4u2ng.b[5][0]++, obj) && (cov_rg5m4u2ng.b[5][1]++, obj.__esModule) ? (cov_rg5m4u2ng.b[4][0]++, obj) : (cov_rg5m4u2ng.b[4][1]++, { default: obj });
}const debug = (cov_rg5m4u2ng.s[33]++, (0, _debug2.default)("debugger:data:selectors"));function createStateSelectors({ stack, memory, storage }) {
  cov_rg5m4u2ng.f[2]++;cov_rg5m4u2ng.s[34]++;return { stack: (0, _reselectTree.createLeaf)([stack], words => {
      cov_rg5m4u2ng.f[3]++;cov_rg5m4u2ng.s[35]++;return ((cov_rg5m4u2ng.b[6][0]++, words) || (cov_rg5m4u2ng.b[6][1]++, [])).map(word => {
        cov_rg5m4u2ng.f[4]++;cov_rg5m4u2ng.s[36]++;return decodeUtils.toBytes(decodeUtils.toBigNumber(word, decodeUtils.WORD_SIZE));
      });
    }), memory: (0, _reselectTree.createLeaf)([memory], words => {
      cov_rg5m4u2ng.f[5]++;cov_rg5m4u2ng.s[37]++;return new Uint8Array(((cov_rg5m4u2ng.b[7][0]++, words.join("").match(/.{1,2}/g)) || (cov_rg5m4u2ng.b[7][1]++, [])).map(byte => {
        cov_rg5m4u2ng.f[6]++;cov_rg5m4u2ng.s[38]++;return parseInt(byte, 16);
      }));
    }), storage: (0, _reselectTree.createLeaf)([storage], mapping => {
      cov_rg5m4u2ng.f[7]++;cov_rg5m4u2ng.s[39]++;return (0, _assign2.default)({}, ...(0, _entries2.default)(mapping).map(([address, word]) => {
        cov_rg5m4u2ng.f[8]++;cov_rg5m4u2ng.s[40]++;return { [`0x${address}`]: new Uint8Array(((cov_rg5m4u2ng.b[8][0]++, word.match(/.{1,2}/g)) || (cov_rg5m4u2ng.b[8][1]++, [])).map(byte => {
            cov_rg5m4u2ng.f[9]++;cov_rg5m4u2ng.s[41]++;return parseInt(byte, 16);
          })) };
      }));
    }) };
}const data = (cov_rg5m4u2ng.s[42]++, (0, _reselectTree.createSelectorTree)({ state: state => {
    cov_rg5m4u2ng.f[10]++;cov_rg5m4u2ng.s[43]++;return state.data;
  }, views: { ast: (0, _reselectTree.createLeaf)([_selectors2.default.current], tree => {
      cov_rg5m4u2ng.f[11]++;cov_rg5m4u2ng.s[44]++;return tree;
    }), atLastInstructionForSourceRange: (0, _reselectTree.createLeaf)([_selectors6.default.current.isSourceRangeFinal], final => {
      cov_rg5m4u2ng.f[12]++;cov_rg5m4u2ng.s[45]++;return final;
    }), scopes: { inlined: (0, _reselectTree.createLeaf)(["/info/scopes", _selectors6.default.info.sources], (scopes, sources) => {
        cov_rg5m4u2ng.f[13]++;cov_rg5m4u2ng.s[46]++;return (0, _assign2.default)({}, ...(0, _entries2.default)(scopes).map(([id, entry]) => {
          cov_rg5m4u2ng.f[14]++;cov_rg5m4u2ng.s[47]++;return { [id]: (0, _extends3.default)({}, entry, { definition: _jsonPointer2.default.get(sources[entry.sourceId].ast, entry.pointer) }) };
        }));
      }) }, decoder: (0, _reselectTree.createLeaf)(["/views/scopes/inlined", "/next/state", "/proc/mappingKeys"], (scopes, state, mappingKeys) => {
      cov_rg5m4u2ng.f[15]++;cov_rg5m4u2ng.s[48]++;return (definition, ref) => {
        cov_rg5m4u2ng.f[16]++;cov_rg5m4u2ng.s[49]++;return (0, _decode2.default)(definition, ref, { scopes, state, mappingKeys });
      };
    }) }, info: { scopes: (0, _reselectTree.createLeaf)(["/state"], state => {
      cov_rg5m4u2ng.f[17]++;cov_rg5m4u2ng.s[50]++;return state.info.scopes.byId;
    }) }, proc: { assignments: (0, _reselectTree.createLeaf)(["/state"], state => {
      cov_rg5m4u2ng.f[18]++;cov_rg5m4u2ng.s[51]++;return state.proc.assignments.byId;
    }), mappingKeys: (0, _reselectTree.createLeaf)(["/state"], state => {
      cov_rg5m4u2ng.f[19]++;cov_rg5m4u2ng.s[52]++;return state.proc.mappingKeys.byId;
    }) }, current: { scope: { id: (0, _reselectTree.createLeaf)([_selectors2.default.current.node], node => {
        cov_rg5m4u2ng.f[20]++;cov_rg5m4u2ng.s[53]++;return node.id;
      }) }, state: createStateSelectors(_selectors4.default.current.state), identifiers: { _: (0, _reselectTree.createLeaf)(["/views/scopes/inlined", "/current/scope"], (scopes, scope) => {
        cov_rg5m4u2ng.f[21]++;let cur = (cov_rg5m4u2ng.s[54]++, scope.id);let variables = (cov_rg5m4u2ng.s[55]++, {});cov_rg5m4u2ng.s[56]++;do {
          cov_rg5m4u2ng.s[57]++;variables = (0, _assign2.default)(variables, ...((cov_rg5m4u2ng.b[9][0]++, scopes[cur].variables) || (cov_rg5m4u2ng.b[9][1]++, [])).filter(v => {
            cov_rg5m4u2ng.f[22]++;cov_rg5m4u2ng.s[58]++;return variables[v.name] == undefined;
          }).map(v => {
            cov_rg5m4u2ng.f[23]++;cov_rg5m4u2ng.s[59]++;return { [v.name]: v.id };
          }));cov_rg5m4u2ng.s[60]++;cur = scopes[cur].parentId;
        } while (cur != null);cov_rg5m4u2ng.s[61]++;return variables;
      }), definitions: (0, _reselectTree.createLeaf)(["/views/scopes/inlined", "./_"], (scopes, identifiers) => {
        cov_rg5m4u2ng.f[24]++;cov_rg5m4u2ng.s[62]++;return (0, _assign2.default)({}, ...(0, _entries2.default)(identifiers).map(([identifier, id]) => {
          cov_rg5m4u2ng.f[25]++;let { definition } = (cov_rg5m4u2ng.s[63]++, scopes[id]);cov_rg5m4u2ng.s[64]++;return { [identifier]: definition };
        }));
      }), refs: (0, _reselectTree.createLeaf)(["/proc/assignments", "./_"], (assignments, identifiers) => {
        cov_rg5m4u2ng.f[26]++;cov_rg5m4u2ng.s[65]++;return (0, _assign2.default)({}, ...(0, _entries2.default)(identifiers).map(([identifier, id]) => {
          cov_rg5m4u2ng.f[27]++;let { ref } = (cov_rg5m4u2ng.s[66]++, (cov_rg5m4u2ng.b[10][0]++, assignments[id]) || (cov_rg5m4u2ng.b[10][1]++, {}));cov_rg5m4u2ng.s[67]++;if (!ref) {
            cov_rg5m4u2ng.b[11][0]++;cov_rg5m4u2ng.s[68]++;return undefined;
          } else {
            cov_rg5m4u2ng.b[11][1]++;
          };cov_rg5m4u2ng.s[69]++;return { [identifier]: ref };
        }));
      }), decoded: (0, _reselectTree.createLeaf)(["/views/decoder", "./definitions", "./refs"], (decode, definitions, refs) => {
        cov_rg5m4u2ng.f[28]++;cov_rg5m4u2ng.s[70]++;return (0, _assign2.default)({}, ...(0, _entries2.default)(refs).map(([identifier, ref]) => {
          cov_rg5m4u2ng.f[29]++;cov_rg5m4u2ng.s[71]++;return { [identifier]: decode(definitions[identifier], ref) };
        }));
      }), native: (0, _reselectTree.createLeaf)(['./decoded'], decodeUtils.cleanBigNumbers) } }, next: { state: createStateSelectors(_selectors4.default.next.state) } }));cov_rg5m4u2ng.s[72]++;exports.default = data;

/***/ }),
/* 27 */
/***/ (function(module, exports) {

module.exports = require("truffle-expect");

/***/ }),
/* 28 */
/***/ (function(module, exports) {

module.exports = require("babel-runtime/core-js/object/values");

/***/ }),
/* 29 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var cov_1e4tw6tegl = function () {
  var path = "/Users/gnidan/src/work/truffle/packages/truffle-debugger/lib/ast/map.js",
      hash = "7166507383c0ea0c36795aea8cb5315b0881e100",
      Function = function () {}.constructor,
      global = new Function('return this')(),
      gcv = "__coverage__",
      coverageData = { path: "/Users/gnidan/src/work/truffle/packages/truffle-debugger/lib/ast/map.js", statementMap: { "0": { start: { line: 3, column: 0 }, end: { line: 5, column: 3 } }, "1": { start: { line: 7, column: 12 }, end: { line: 7, column: 56 } }, "2": { start: { line: 9, column: 13 }, end: { line: 9, column: 42 } }, "3": { start: { line: 11, column: 0 }, end: { line: 11, column: 28 } }, "4": { start: { line: 12, column: 0 }, end: { line: 12, column: 32 } }, "5": { start: { line: 13, column: 0 }, end: { line: 13, column: 30 } }, "6": { start: { line: 15, column: 13 }, end: { line: 15, column: 29 } }, "7": { start: { line: 17, column: 14 }, end: { line: 17, column: 44 } }, "8": { start: { line: 19, column: 24 }, end: { line: 19, column: 53 } }, "9": { start: { line: 21, column: 25 }, end: { line: 21, column: 66 } }, "10": { start: { line: 23, column: 39 }, end: { line: 23, column: 93 } }, "11": { start: { line: 25, column: 14 }, end: { line: 25, column: 54 } }, "12": { start: { line: 33, column: 24 }, end: { line: 33, column: 77 } }, "13": { start: { line: 33, column: 65 }, end: { line: 33, column: 76 } }, "14": { start: { line: 35, column: 2 }, end: { line: 35, column: 33 } }, "15": { start: { line: 42, column: 2 }, end: { line: 54, column: 3 } }, "16": { start: { line: 43, column: 4 }, end: { line: 43, column: 82 } }, "17": { start: { line: 43, column: 45 }, end: { line: 43, column: 79 } }, "18": { start: { line: 44, column: 9 }, end: { line: 54, column: 3 } }, "19": { start: { line: 45, column: 18 }, end: { line: 45, column: 20 } }, "20": { start: { line: 47, column: 4 }, end: { line: 49, column: 5 } }, "21": { start: { line: 48, column: 6 }, end: { line: 48, column: 55 } }, "22": { start: { line: 51, column: 4 }, end: { line: 51, column: 111 } }, "23": { start: { line: 51, column: 66 }, end: { line: 51, column: 108 } }, "24": { start: { line: 53, column: 4 }, end: { line: 53, column: 14 } }, "25": { start: { line: 61, column: 15 }, end: { line: 61, column: 31 } }, "26": { start: { line: 62, column: 13 }, end: { line: 62, column: 45 } }, "27": { start: { line: 64, column: 2 }, end: { line: 68, column: 5 } }, "28": { start: { line: 65, column: 23 }, end: { line: 65, column: 28 } }, "29": { start: { line: 67, column: 4 }, end: { line: 67, column: 48 } }, "30": { start: { line: 70, column: 18 }, end: { line: 70, column: 44 } }, "31": { start: { line: 72, column: 20 }, end: { line: 72, column: 55 } }, "32": { start: { line: 76, column: 2 }, end: { line: 76, column: 173 } }, "33": { start: { line: 76, column: 43 }, end: { line: 76, column: 91 } }, "34": { start: { line: 76, column: 114 }, end: { line: 76, column: 121 } }, "35": { start: { line: 76, column: 140 }, end: { line: 76, column: 167 } } }, fnMap: { "0": { name: "_interopRequireDefault", decl: { start: { line: 23, column: 9 }, end: { line: 23, column: 31 } }, loc: { start: { line: 23, column: 37 }, end: { line: 23, column: 95 } }, line: 23 }, "1": { name: "getRange", decl: { start: { line: 30, column: 9 }, end: { line: 30, column: 17 } }, loc: { start: { line: 30, column: 24 }, end: { line: 36, column: 1 } }, line: 30 }, "2": { name: "(anonymous_2)", decl: { start: { line: 33, column: 60 }, end: { line: 33, column: 61 } }, loc: { start: { line: 33, column: 65 }, end: { line: 33, column: 76 } }, line: 33 }, "3": { name: "rangeNodes", decl: { start: { line: 41, column: 9 }, end: { line: 41, column: 19 } }, loc: { start: { line: 41, column: 40 }, end: { line: 55, column: 1 } }, line: 41 }, "4": { name: "(anonymous_4)", decl: { start: { line: 43, column: 33 }, end: { line: 43, column: 34 } }, loc: { start: { line: 43, column: 45 }, end: { line: 43, column: 79 } }, line: 43 }, "5": { name: "(anonymous_5)", decl: { start: { line: 51, column: 59 }, end: { line: 51, column: 60 } }, loc: { start: { line: 51, column: 66 }, end: { line: 51, column: 108 } }, line: 51 }, "6": { name: "findRange", decl: { start: { line: 60, column: 9 }, end: { line: 60, column: 18 } }, loc: { start: { line: 60, column: 52 }, end: { line: 77, column: 1 } }, line: 60 }, "7": { name: "(anonymous_7)", decl: { start: { line: 64, column: 17 }, end: { line: 64, column: 18 } }, loc: { start: { line: 64, column: 41 }, end: { line: 68, column: 3 } }, line: 64 }, "8": { name: "(anonymous_8)", decl: { start: { line: 76, column: 28 }, end: { line: 76, column: 29 } }, loc: { start: { line: 76, column: 43 }, end: { line: 76, column: 91 } }, line: 76 }, "9": { name: "(anonymous_9)", decl: { start: { line: 76, column: 97 }, end: { line: 76, column: 98 } }, loc: { start: { line: 76, column: 114 }, end: { line: 76, column: 121 } }, line: 76 }, "10": { name: "(anonymous_10)", decl: { start: { line: 76, column: 130 }, end: { line: 76, column: 131 } }, loc: { start: { line: 76, column: 140 }, end: { line: 76, column: 167 } }, line: 76 } }, branchMap: { "0": { loc: { start: { line: 23, column: 46 }, end: { line: 23, column: 92 } }, type: "cond-expr", locations: [{ start: { line: 23, column: 70 }, end: { line: 23, column: 73 } }, { start: { line: 23, column: 76 }, end: { line: 23, column: 92 } }], line: 23 }, "1": { loc: { start: { line: 23, column: 46 }, end: { line: 23, column: 67 } }, type: "binary-expr", locations: [{ start: { line: 23, column: 46 }, end: { line: 23, column: 49 } }, { start: { line: 23, column: 53 }, end: { line: 23, column: 67 } }], line: 23 }, "2": { loc: { start: { line: 41, column: 26 }, end: { line: 41, column: 38 } }, type: "default-arg", locations: [{ start: { line: 41, column: 36 }, end: { line: 41, column: 38 } }], line: 41 }, "3": { loc: { start: { line: 42, column: 2 }, end: { line: 54, column: 3 } }, type: "if", locations: [{ start: { line: 42, column: 2 }, end: { line: 54, column: 3 } }, { start: { line: 42, column: 2 }, end: { line: 54, column: 3 } }], line: 42 }, "4": { loc: { start: { line: 44, column: 9 }, end: { line: 54, column: 3 } }, type: "if", locations: [{ start: { line: 44, column: 9 }, end: { line: 54, column: 3 } }, { start: { line: 44, column: 9 }, end: { line: 54, column: 3 } }], line: 44 }, "5": { loc: { start: { line: 47, column: 4 }, end: { line: 49, column: 5 } }, type: "if", locations: [{ start: { line: 47, column: 4 }, end: { line: 49, column: 5 } }, { start: { line: 47, column: 4 }, end: { line: 49, column: 5 } }], line: 47 }, "6": { loc: { start: { line: 76, column: 43 }, end: { line: 76, column: 91 } }, type: "binary-expr", locations: [{ start: { line: 76, column: 43 }, end: { line: 76, column: 66 } }, { start: { line: 76, column: 70 }, end: { line: 76, column: 91 } }], line: 76 }, "7": { loc: { start: { line: 76, column: 140 }, end: { line: 76, column: 167 } }, type: "cond-expr", locations: [{ start: { line: 76, column: 162 }, end: { line: 76, column: 163 } }, { start: { line: 76, column: 166 }, end: { line: 76, column: 167 } }], line: 76 } }, s: { "0": 0, "1": 0, "2": 0, "3": 0, "4": 0, "5": 0, "6": 0, "7": 0, "8": 0, "9": 0, "10": 0, "11": 0, "12": 0, "13": 0, "14": 0, "15": 0, "16": 0, "17": 0, "18": 0, "19": 0, "20": 0, "21": 0, "22": 0, "23": 0, "24": 0, "25": 0, "26": 0, "27": 0, "28": 0, "29": 0, "30": 0, "31": 0, "32": 0, "33": 0, "34": 0, "35": 0 }, f: { "0": 0, "1": 0, "2": 0, "3": 0, "4": 0, "5": 0, "6": 0, "7": 0, "8": 0, "9": 0, "10": 0 }, b: { "0": [0, 0], "1": [0, 0], "2": [0], "3": [0, 0], "4": [0, 0], "5": [0, 0], "6": [0, 0], "7": [0, 0] }, inputSourceMap: { version: 3, sources: ["lib/ast/map.js"], names: ["getRange", "rangeNodes", "findRange", "debug", "node", "start", "length", "src", "split", "slice", "map", "i", "parseInt", "pointer", "Array", "concat", "sub", "Object", "results", "push", "range", "key", "sourceStart", "sourceLength", "ranges", "tree", "IntervalTree", "forEach", "end", "insert", "sourceEnd", "overlapping", "search", "filter", "reduce", "a", "b"], mappings: ";;;;;;;;;;QASgBA,Q,GAAAA,Q;QAcAC,U,GAAAA,U;QAyBAC,S,GAAAA,S;;AAhDhB;;;;AAGA;;;;;;AAFA,MAAMC,QAAQ,qBAAY,kBAAZ,CAAd;;AAKA;;;AAGO,SAASH,QAAT,CAAkBI,IAAlB,EAAwB;AAC7B;AACA;AACA,MAAI,CAACC,KAAD,EAAQC,MAAR,IAAkBF,KAAKG,GAAL,CACnBC,KADmB,CACb,GADa,EAEnBC,KAFmB,CAEb,CAFa,EAEV,CAFU,EAGnBC,GAHmB,CAGbC,CAAD,IAAOC,SAASD,CAAT,CAHO,CAAtB;;AAKA,SAAO,CAACN,KAAD,EAAQA,QAAQC,MAAhB,CAAP;AACD;;AAED;;;AAGO,SAASL,UAAT,CAAoBG,IAApB,EAA0BS,UAAU,EAApC,EAAwC;AAC7C,MAAIT,gBAAgBU,KAApB,EAA2B;AACzB,WAAO,GAAGC,MAAH,CACL,GAAGX,KAAKM,GAAL,CAAU,CAACM,GAAD,EAAML,CAAN,KAAYV,WAAWe,GAAX,EAAiB,GAAEH,OAAQ,IAAGF,CAAE,EAAhC,CAAtB,CADE,CAAP;AAGD,GAJD,MAIO,IAAIP,gBAAgBa,MAApB,EAA4B;AACjC,QAAIC,UAAU,EAAd;;AAEA,QAAId,KAAKG,GAAT,EAAc;AACZW,cAAQC,IAAR,CAAa,EAACN,OAAD,EAAUO,OAAOpB,SAASI,IAAT,CAAjB,EAAb;AACD;;AAED,WAAOc,QAAQH,MAAR,CACL,GAAG,oBAAYX,IAAZ,EAAkBM,GAAlB,CACAW,GAAD,IAASpB,WAAWG,KAAKiB,GAAL,CAAX,EAAuB,GAAER,OAAQ,IAAGQ,GAAI,EAAxC,CADR,CADE,CAAP;AAKD,GAZM,MAYA;AACL,WAAO,EAAP;AACD;AACF;;AAED;;;AAGO,SAASnB,SAAT,CAAmBE,IAAnB,EAAyBkB,WAAzB,EAAsCC,YAAtC,EAAoD;AACzD,MAAIC,SAASvB,WAAWG,IAAX,CAAb;AACA,MAAIqB,OAAO,IAAIC,0BAAJ,EAAX;;AAEAF,SAAOG,OAAP,CAAgB,CAAC,EAACP,KAAD,EAAQP,OAAR,EAAD,KAAsB;AACpC,QAAI,CAACR,KAAD,EAAQuB,GAAR,IAAeR,KAAnB;;AAEAK,SAAKI,MAAL,CAAYxB,KAAZ,EAAmBuB,GAAnB,EAAwB,EAACR,KAAD,EAAQP,OAAR,EAAxB;AACD,GAJD;;AAMA,MAAIiB,YAAYR,cAAcC,YAA9B;;AAEA,MAAIQ,cAAcN,KAAKO,MAAL,CAAYV,WAAZ,EAAyBQ,SAAzB,CAAlB;;AAEA;AACA;AACA,SAAOC,YACJE,MADI,CACI,CAAC,EAACb,KAAD,EAAD,KAAaE,eAAeF,MAAM,CAAN,CAAf,IAA2BU,aAAaV,MAAM,CAAN,CADzD,EAEJV,GAFI,CAEC,CAAC,EAACG,OAAD,EAAD,KAAeA,OAFhB,EAGJqB,MAHI,CAGI,CAACC,CAAD,EAAIC,CAAJ,KAAUD,EAAE7B,MAAF,GAAW8B,EAAE9B,MAAb,GAAsB6B,CAAtB,GAA0BC,CAHxC,EAG2C,EAH3C,CAAP;AAID", file: "map.js", sourceRoot: "/Users/gnidan/src/work/truffle/packages/truffle-debugger", sourcesContent: ["import debugModule from \"debug\";\nconst debug = debugModule(\"debugger:ast:map\");\n\nimport IntervalTree from \"node-interval-tree\";\n\n\n/**\n * @private\n */\nexport function getRange(node) {\n  // src: \"<start>:<length>:<_>\"\n  // returns [start, end]\n  let [start, length] = node.src\n    .split(\":\")\n    .slice(0, 2)\n    .map( (i) => parseInt(i) );\n\n  return [start, start + length];\n}\n\n/**\n * @private\n */\nexport function rangeNodes(node, pointer = \"\") {\n  if (node instanceof Array) {\n    return [].concat(\n      ...node.map( (sub, i) => rangeNodes(sub, `${pointer}/${i}`) )\n    );\n  } else if (node instanceof Object) {\n    let results = [];\n\n    if (node.src) {\n      results.push({pointer, range: getRange(node)});\n    }\n\n    return results.concat(\n      ...Object.keys(node).map(\n        (key) => rangeNodes(node[key], `${pointer}/${key}`)\n      )\n    );\n  } else {\n    return [];\n  }\n}\n\n/**\n * @private\n */\nexport function findRange(node, sourceStart, sourceLength) {\n  let ranges = rangeNodes(node);\n  let tree = new IntervalTree();\n\n  ranges.forEach( ({range, pointer}) => {\n    let [start, end] = range;\n\n    tree.insert(start, end, {range, pointer});\n  });\n\n  let sourceEnd = sourceStart + sourceLength;\n\n  let overlapping = tree.search(sourceStart, sourceEnd);\n\n  // find nodes that fully contain requested range,\n  // return longest pointer\n  return overlapping\n    .filter( ({range}) => sourceStart >= range[0] && sourceEnd <= range[1] )\n    .map( ({pointer}) => pointer )\n    .reduce( (a, b) => a.length > b.length ? a : b, \"\" );\n}\n"] }, _coverageSchema: "332fd63041d2c1bcb487cc26dd0d5f7d97098a6c" },
      coverage = global[gcv] || (global[gcv] = {});if (coverage[path] && coverage[path].hash === hash) {
    return coverage[path];
  }coverageData.hash = hash;return coverage[path] = coverageData;
}();cov_1e4tw6tegl.s[0]++;Object.defineProperty(exports, "__esModule", { value: true });var _keys = (cov_1e4tw6tegl.s[1]++, __webpack_require__(17));var _keys2 = (cov_1e4tw6tegl.s[2]++, _interopRequireDefault(_keys));cov_1e4tw6tegl.s[3]++;exports.getRange = getRange;cov_1e4tw6tegl.s[4]++;exports.rangeNodes = rangeNodes;cov_1e4tw6tegl.s[5]++;exports.findRange = findRange;var _debug = (cov_1e4tw6tegl.s[6]++, __webpack_require__(0));var _debug2 = (cov_1e4tw6tegl.s[7]++, _interopRequireDefault(_debug));var _nodeIntervalTree = (cov_1e4tw6tegl.s[8]++, __webpack_require__(53));var _nodeIntervalTree2 = (cov_1e4tw6tegl.s[9]++, _interopRequireDefault(_nodeIntervalTree));function _interopRequireDefault(obj) {
  cov_1e4tw6tegl.f[0]++;cov_1e4tw6tegl.s[10]++;return (cov_1e4tw6tegl.b[1][0]++, obj) && (cov_1e4tw6tegl.b[1][1]++, obj.__esModule) ? (cov_1e4tw6tegl.b[0][0]++, obj) : (cov_1e4tw6tegl.b[0][1]++, { default: obj });
}const debug = (cov_1e4tw6tegl.s[11]++, (0, _debug2.default)("debugger:ast:map"));function getRange(node) {
  cov_1e4tw6tegl.f[1]++;let [start, length] = (cov_1e4tw6tegl.s[12]++, node.src.split(":").slice(0, 2).map(i => {
    cov_1e4tw6tegl.f[2]++;cov_1e4tw6tegl.s[13]++;return parseInt(i);
  }));cov_1e4tw6tegl.s[14]++;return [start, start + length];
}function rangeNodes(node, pointer = (cov_1e4tw6tegl.b[2][0]++, "")) {
  cov_1e4tw6tegl.f[3]++;cov_1e4tw6tegl.s[15]++;if (node instanceof Array) {
    cov_1e4tw6tegl.b[3][0]++;cov_1e4tw6tegl.s[16]++;return [].concat(...node.map((sub, i) => {
      cov_1e4tw6tegl.f[4]++;cov_1e4tw6tegl.s[17]++;return rangeNodes(sub, `${pointer}/${i}`);
    }));
  } else {
    cov_1e4tw6tegl.b[3][1]++;cov_1e4tw6tegl.s[18]++;if (node instanceof Object) {
      cov_1e4tw6tegl.b[4][0]++;let results = (cov_1e4tw6tegl.s[19]++, []);cov_1e4tw6tegl.s[20]++;if (node.src) {
        cov_1e4tw6tegl.b[5][0]++;cov_1e4tw6tegl.s[21]++;results.push({ pointer, range: getRange(node) });
      } else {
        cov_1e4tw6tegl.b[5][1]++;
      }cov_1e4tw6tegl.s[22]++;return results.concat(...(0, _keys2.default)(node).map(key => {
        cov_1e4tw6tegl.f[5]++;cov_1e4tw6tegl.s[23]++;return rangeNodes(node[key], `${pointer}/${key}`);
      }));
    } else {
      cov_1e4tw6tegl.b[4][1]++;cov_1e4tw6tegl.s[24]++;return [];
    }
  }
}function findRange(node, sourceStart, sourceLength) {
  cov_1e4tw6tegl.f[6]++;let ranges = (cov_1e4tw6tegl.s[25]++, rangeNodes(node));let tree = (cov_1e4tw6tegl.s[26]++, new _nodeIntervalTree2.default());cov_1e4tw6tegl.s[27]++;ranges.forEach(({ range, pointer }) => {
    cov_1e4tw6tegl.f[7]++;let [start, end] = (cov_1e4tw6tegl.s[28]++, range);cov_1e4tw6tegl.s[29]++;tree.insert(start, end, { range, pointer });
  });let sourceEnd = (cov_1e4tw6tegl.s[30]++, sourceStart + sourceLength);let overlapping = (cov_1e4tw6tegl.s[31]++, tree.search(sourceStart, sourceEnd));cov_1e4tw6tegl.s[32]++;return overlapping.filter(({ range }) => {
    cov_1e4tw6tegl.f[8]++;cov_1e4tw6tegl.s[33]++;return (cov_1e4tw6tegl.b[6][0]++, sourceStart >= range[0]) && (cov_1e4tw6tegl.b[6][1]++, sourceEnd <= range[1]);
  }).map(({ pointer }) => {
    cov_1e4tw6tegl.f[9]++;cov_1e4tw6tegl.s[34]++;return pointer;
  }).reduce((a, b) => {
    cov_1e4tw6tegl.f[10]++;cov_1e4tw6tegl.s[35]++;return a.length > b.length ? (cov_1e4tw6tegl.b[7][0]++, a) : (cov_1e4tw6tegl.b[7][1]++, b);
  }, "");
}

/***/ }),
/* 30 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var cov_2rf8afohf4 = function () {
  var path = "/Users/gnidan/src/work/truffle/packages/truffle-debugger/lib/controller/actions/index.js",
      hash = "157bb8ba43cc1d64a5e06c2d3238e839ddbb4ecc",
      Function = function () {}.constructor,
      global = new Function('return this')(),
      gcv = "__coverage__",
      coverageData = { path: "/Users/gnidan/src/work/truffle/packages/truffle-debugger/lib/controller/actions/index.js", statementMap: { "0": { start: { line: 3, column: 0 }, end: { line: 5, column: 3 } }, "1": { start: { line: 6, column: 0 }, end: { line: 6, column: 30 } }, "2": { start: { line: 7, column: 0 }, end: { line: 7, column: 26 } }, "3": { start: { line: 8, column: 0 }, end: { line: 8, column: 28 } }, "4": { start: { line: 9, column: 0 }, end: { line: 9, column: 28 } }, "5": { start: { line: 10, column: 0 }, end: { line: 10, column: 28 } }, "6": { start: { line: 11, column: 0 }, end: { line: 11, column: 26 } }, "7": { start: { line: 12, column: 0 }, end: { line: 12, column: 30 } }, "8": { start: { line: 13, column: 0 }, end: { line: 13, column: 38 } }, "9": { start: { line: 14, column: 19 }, end: { line: 14, column: 52 } }, "10": { start: { line: 16, column: 2 }, end: { line: 19, column: 4 } }, "11": { start: { line: 22, column: 16 }, end: { line: 22, column: 43 } }, "12": { start: { line: 24, column: 2 }, end: { line: 24, column: 27 } }, "13": { start: { line: 27, column: 18 }, end: { line: 27, column: 49 } }, "14": { start: { line: 29, column: 2 }, end: { line: 29, column: 29 } }, "15": { start: { line: 32, column: 18 }, end: { line: 32, column: 49 } }, "16": { start: { line: 34, column: 2 }, end: { line: 34, column: 29 } }, "17": { start: { line: 37, column: 18 }, end: { line: 37, column: 49 } }, "18": { start: { line: 39, column: 2 }, end: { line: 39, column: 29 } }, "19": { start: { line: 42, column: 17 }, end: { line: 42, column: 46 } }, "20": { start: { line: 44, column: 2 }, end: { line: 44, column: 28 } }, "21": { start: { line: 47, column: 18 }, end: { line: 47, column: 49 } }, "22": { start: { line: 49, column: 2 }, end: { line: 49, column: 29 } }, "23": { start: { line: 52, column: 23 }, end: { line: 52, column: 64 } }, "24": { start: { line: 54, column: 2 }, end: { line: 57, column: 4 } } }, fnMap: { "0": { name: "beginStep", decl: { start: { line: 15, column: 9 }, end: { line: 15, column: 18 } }, loc: { start: { line: 15, column: 25 }, end: { line: 20, column: 1 } }, line: 15 }, "1": { name: "advance", decl: { start: { line: 23, column: 9 }, end: { line: 23, column: 16 } }, loc: { start: { line: 23, column: 19 }, end: { line: 25, column: 1 } }, line: 23 }, "2": { name: "stepNext", decl: { start: { line: 28, column: 9 }, end: { line: 28, column: 17 } }, loc: { start: { line: 28, column: 20 }, end: { line: 30, column: 1 } }, line: 28 }, "3": { name: "stepOver", decl: { start: { line: 33, column: 9 }, end: { line: 33, column: 17 } }, loc: { start: { line: 33, column: 20 }, end: { line: 35, column: 1 } }, line: 33 }, "4": { name: "stepInto", decl: { start: { line: 38, column: 9 }, end: { line: 38, column: 17 } }, loc: { start: { line: 38, column: 20 }, end: { line: 40, column: 1 } }, line: 38 }, "5": { name: "stepOut", decl: { start: { line: 43, column: 9 }, end: { line: 43, column: 16 } }, loc: { start: { line: 43, column: 19 }, end: { line: 45, column: 1 } }, line: 43 }, "6": { name: "interrupt", decl: { start: { line: 48, column: 9 }, end: { line: 48, column: 18 } }, loc: { start: { line: 48, column: 21 }, end: { line: 50, column: 1 } }, line: 48 }, "7": { name: "continueUntil", decl: { start: { line: 53, column: 9 }, end: { line: 53, column: 22 } }, loc: { start: { line: 53, column: 39 }, end: { line: 58, column: 1 } }, line: 53 } }, branchMap: {}, s: { "0": 0, "1": 0, "2": 0, "3": 0, "4": 0, "5": 0, "6": 0, "7": 0, "8": 0, "9": 0, "10": 0, "11": 0, "12": 0, "13": 0, "14": 0, "15": 0, "16": 0, "17": 0, "18": 0, "19": 0, "20": 0, "21": 0, "22": 0, "23": 0, "24": 0 }, f: { "0": 0, "1": 0, "2": 0, "3": 0, "4": 0, "5": 0, "6": 0, "7": 0 }, b: {}, inputSourceMap: { version: 3, sources: ["lib/controller/actions/index.js"], names: ["beginStep", "advance", "stepNext", "stepOver", "stepInto", "stepOut", "interrupt", "continueUntil", "BEGIN_STEP", "type", "stepType", "ADVANCE", "STEP_NEXT", "STEP_OVER", "STEP_INTO", "STEP_OUT", "INTERRUPT", "CONTINUE_UNTIL", "breakpoints"], mappings: ";;;;;QACgBA,S,GAAAA,S;QAQAC,O,GAAAA,O;QAKAC,Q,GAAAA,Q;QAKAC,Q,GAAAA,Q;QAKAC,Q,GAAAA,Q;QAKAC,O,GAAAA,O;QAKAC,S,GAAAA,S;QAMAC,a,GAAAA,a;AAxCT,MAAMC,kCAAa,YAAnB;AACA,SAASR,SAAT,CAAmBS,IAAnB,EAAyB;AAC9B,SAAO;AACLA,UAAMD,UADD;AAELE,cAAUD;AAFL,GAAP;AAID;;AAEM,MAAME,4BAAU,SAAhB;AACA,SAASV,OAAT,GAAmB;AACxB,SAAO,EAACQ,MAAME,OAAP,EAAP;AACD;;AAEM,MAAMC,gCAAY,WAAlB;AACA,SAASV,QAAT,GAAoB;AACzB,SAAO,EAACO,MAAMG,SAAP,EAAP;AACD;;AAEM,MAAMC,gCAAY,WAAlB;AACA,SAASV,QAAT,GAAoB;AACzB,SAAO,EAACM,MAAMI,SAAP,EAAP;AACD;;AAEM,MAAMC,gCAAY,WAAlB;AACA,SAASV,QAAT,GAAoB;AACzB,SAAO,EAACK,MAAMK,SAAP,EAAP;AACD;;AAEM,MAAMC,8BAAW,UAAjB;AACA,SAASV,OAAT,GAAmB;AACxB,SAAO,EAACI,MAAMM,QAAP,EAAP;AACD;;AAEM,MAAMC,gCAAY,WAAlB;AACA,SAASV,SAAT,GAAsB;AAC3B,SAAO,EAACG,MAAMO,SAAP,EAAP;AACD;;AAGM,MAAMC,0CAAiB,gBAAvB;AACA,SAASV,aAAT,CAAuB,GAAGW,WAA1B,EAAuC;AAC5C,SAAO;AACLT,UAAMQ,cADD;AAELC;AAFK,GAAP;AAID", file: "index.js", sourceRoot: "/Users/gnidan/src/work/truffle/packages/truffle-debugger", sourcesContent: ["export const BEGIN_STEP = \"BEGIN_STEP\";\nexport function beginStep(type) {\n  return {\n    type: BEGIN_STEP,\n    stepType: type\n  };\n}\n\nexport const ADVANCE = \"ADVANCE\";\nexport function advance() {\n  return {type: ADVANCE};\n}\n\nexport const STEP_NEXT = \"STEP_NEXT\";\nexport function stepNext() {\n  return {type: STEP_NEXT};\n}\n\nexport const STEP_OVER = \"STEP_OVER\";\nexport function stepOver() {\n  return {type: STEP_OVER};\n}\n\nexport const STEP_INTO = \"STEP_INTO\";\nexport function stepInto() {\n  return {type: STEP_INTO};\n}\n\nexport const STEP_OUT = \"STEP_OUT\";\nexport function stepOut() {\n  return {type: STEP_OUT};\n}\n\nexport const INTERRUPT = \"INTERRUPT\";\nexport function interrupt () {\n  return {type: INTERRUPT};\n}\n\n\nexport const CONTINUE_UNTIL = \"CONTINUE_UNTIL\";\nexport function continueUntil(...breakpoints) {\n  return {\n    type: CONTINUE_UNTIL,\n    breakpoints\n  };\n}\n"] }, _coverageSchema: "332fd63041d2c1bcb487cc26dd0d5f7d97098a6c" },
      coverage = global[gcv] || (global[gcv] = {});if (coverage[path] && coverage[path].hash === hash) {
    return coverage[path];
  }coverageData.hash = hash;return coverage[path] = coverageData;
}();cov_2rf8afohf4.s[0]++;Object.defineProperty(exports, "__esModule", { value: true });cov_2rf8afohf4.s[1]++;exports.beginStep = beginStep;cov_2rf8afohf4.s[2]++;exports.advance = advance;cov_2rf8afohf4.s[3]++;exports.stepNext = stepNext;cov_2rf8afohf4.s[4]++;exports.stepOver = stepOver;cov_2rf8afohf4.s[5]++;exports.stepInto = stepInto;cov_2rf8afohf4.s[6]++;exports.stepOut = stepOut;cov_2rf8afohf4.s[7]++;exports.interrupt = interrupt;cov_2rf8afohf4.s[8]++;exports.continueUntil = continueUntil;const BEGIN_STEP = (cov_2rf8afohf4.s[9]++, exports.BEGIN_STEP = "BEGIN_STEP");function beginStep(type) {
  cov_2rf8afohf4.f[0]++;cov_2rf8afohf4.s[10]++;return { type: BEGIN_STEP, stepType: type };
}const ADVANCE = (cov_2rf8afohf4.s[11]++, exports.ADVANCE = "ADVANCE");function advance() {
  cov_2rf8afohf4.f[1]++;cov_2rf8afohf4.s[12]++;return { type: ADVANCE };
}const STEP_NEXT = (cov_2rf8afohf4.s[13]++, exports.STEP_NEXT = "STEP_NEXT");function stepNext() {
  cov_2rf8afohf4.f[2]++;cov_2rf8afohf4.s[14]++;return { type: STEP_NEXT };
}const STEP_OVER = (cov_2rf8afohf4.s[15]++, exports.STEP_OVER = "STEP_OVER");function stepOver() {
  cov_2rf8afohf4.f[3]++;cov_2rf8afohf4.s[16]++;return { type: STEP_OVER };
}const STEP_INTO = (cov_2rf8afohf4.s[17]++, exports.STEP_INTO = "STEP_INTO");function stepInto() {
  cov_2rf8afohf4.f[4]++;cov_2rf8afohf4.s[18]++;return { type: STEP_INTO };
}const STEP_OUT = (cov_2rf8afohf4.s[19]++, exports.STEP_OUT = "STEP_OUT");function stepOut() {
  cov_2rf8afohf4.f[5]++;cov_2rf8afohf4.s[20]++;return { type: STEP_OUT };
}const INTERRUPT = (cov_2rf8afohf4.s[21]++, exports.INTERRUPT = "INTERRUPT");function interrupt() {
  cov_2rf8afohf4.f[6]++;cov_2rf8afohf4.s[22]++;return { type: INTERRUPT };
}const CONTINUE_UNTIL = (cov_2rf8afohf4.s[23]++, exports.CONTINUE_UNTIL = "CONTINUE_UNTIL");function continueUntil(...breakpoints) {
  cov_2rf8afohf4.f[7]++;cov_2rf8afohf4.s[24]++;return { type: CONTINUE_UNTIL, breakpoints };
}

/***/ }),
/* 31 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var cov_lonpljgf9 = function () {
  var path = "/Users/gnidan/src/work/truffle/packages/truffle-debugger/lib/data/sagas/index.js",
      hash = "be1094ee5bc3562c375b84899d75abbfeb8b491f",
      Function = function () {}.constructor,
      global = new Function('return this')(),
      gcv = "__coverage__",
      coverageData = { path: "/Users/gnidan/src/work/truffle/packages/truffle-debugger/lib/data/sagas/index.js", statementMap: { "0": { start: { line: 3, column: 0 }, end: { line: 5, column: 3 } }, "1": { start: { line: 7, column: 16 }, end: { line: 7, column: 56 } }, "2": { start: { line: 9, column: 16 }, end: { line: 9, column: 49 } }, "3": { start: { line: 11, column: 15 }, end: { line: 11, column: 62 } }, "4": { start: { line: 13, column: 16 }, end: { line: 13, column: 48 } }, "5": { start: { line: 15, column: 14 }, end: { line: 15, column: 60 } }, "6": { start: { line: 17, column: 15 }, end: { line: 17, column: 46 } }, "7": { start: { line: 19, column: 0 }, end: { line: 19, column: 22 } }, "8": { start: { line: 20, column: 0 }, end: { line: 20, column: 26 } }, "9": { start: { line: 21, column: 0 }, end: { line: 21, column: 20 } }, "10": { start: { line: 23, column: 13 }, end: { line: 23, column: 29 } }, "11": { start: { line: 25, column: 14 }, end: { line: 25, column: 44 } }, "12": { start: { line: 27, column: 15 }, end: { line: 27, column: 44 } }, "13": { start: { line: 29, column: 19 }, end: { line: 29, column: 42 } }, "14": { start: { line: 31, column: 20 }, end: { line: 31, column: 56 } }, "15": { start: { line: 33, column: 15 }, end: { line: 33, column: 37 } }, "16": { start: { line: 35, column: 15 }, end: { line: 35, column: 43 } }, "17": { start: { line: 37, column: 16 }, end: { line: 37, column: 37 } }, "18": { start: { line: 39, column: 14 }, end: { line: 39, column: 48 } }, "19": { start: { line: 41, column: 17 }, end: { line: 41, column: 40 } }, "20": { start: { line: 43, column: 18 }, end: { line: 43, column: 52 } }, "21": { start: { line: 45, column: 13 }, end: { line: 45, column: 45 } }, "22": { start: { line: 47, column: 12 }, end: { line: 47, column: 43 } }, "23": { start: { line: 49, column: 40 }, end: { line: 49, column: 267 } }, "24": { start: { line: 49, column: 69 }, end: { line: 49, column: 80 } }, "25": { start: { line: 49, column: 103 }, end: { line: 49, column: 105 } }, "26": { start: { line: 49, column: 107 }, end: { line: 49, column: 228 } }, "27": { start: { line: 49, column: 126 }, end: { line: 49, column: 226 } }, "28": { start: { line: 49, column: 149 }, end: { line: 49, column: 224 } }, "29": { start: { line: 49, column: 201 }, end: { line: 49, column: 224 } }, "30": { start: { line: 49, column: 229 }, end: { line: 49, column: 250 } }, "31": { start: { line: 49, column: 251 }, end: { line: 49, column: 265 } }, "32": { start: { line: 51, column: 39 }, end: { line: 51, column: 93 } }, "33": { start: { line: 53, column: 14 }, end: { line: 53, column: 57 } }, "34": { start: { line: 56, column: 2 }, end: { line: 56, column: 78 } }, "35": { start: { line: 60, column: 2 }, end: { line: 60, column: 49 } }, "36": { start: { line: 69, column: 6 }, end: { line: 69, column: 63 } }, "37": { start: { line: 71, column: 15 }, end: { line: 71, column: 76 } }, "38": { start: { line: 72, column: 15 }, end: { line: 72, column: 74 } }, "39": { start: { line: 73, column: 20 }, end: { line: 73, column: 88 } }, "40": { start: { line: 74, column: 27 }, end: { line: 74, column: 91 } }, "41": { start: { line: 76, column: 14 }, end: { line: 76, column: 78 } }, "42": { start: { line: 77, column: 2 }, end: { line: 79, column: 3 } }, "43": { start: { line: 78, column: 4 }, end: { line: 78, column: 11 } }, "44": { start: { line: 81, column: 12 }, end: { line: 81, column: 28 } }, "45": { start: { line: 84, column: 2 }, end: { line: 86, column: 3 } }, "46": { start: { line: 85, column: 4 }, end: { line: 85, column: 11 } }, "47": { start: { line: 95, column: 2 }, end: { line: 97, column: 3 } }, "48": { start: { line: 96, column: 4 }, end: { line: 96, column: 11 } }, "49": { start: { line: 99, column: 2 }, end: { line: 189, column: 3 } }, "50": { start: { line: 102, column: 6 }, end: { line: 102, column: 101 } }, "51": { start: { line: 102, column: 60 }, end: { line: 102, column: 99 } }, "52": { start: { line: 104, column: 6 }, end: { line: 104, column: 119 } }, "53": { start: { line: 104, column: 72 }, end: { line: 104, column: 117 } }, "54": { start: { line: 106, column: 6 }, end: { line: 106, column: 247 } }, "55": { start: { line: 106, column: 81 }, end: { line: 106, column: 124 } }, "56": { start: { line: 106, column: 142 }, end: { line: 106, column: 172 } }, "57": { start: { line: 106, column: 203 }, end: { line: 106, column: 241 } }, "58": { start: { line: 108, column: 6 }, end: { line: 108, column: 67 } }, "59": { start: { line: 109, column: 6 }, end: { line: 109, column: 12 } }, "60": { start: { line: 112, column: 24 }, end: { line: 112, column: 55 } }, "61": { start: { line: 113, column: 17 }, end: { line: 113, column: 18 } }, "62": { start: { line: 114, column: 18 }, end: { line: 114, column: 38 } }, "63": { start: { line: 115, column: 6 }, end: { line: 115, column: 44 } }, "64": { start: { line: 117, column: 23 }, end: { line: 117, column: 75 } }, "65": { start: { line: 118, column: 6 }, end: { line: 122, column: 11 } }, "66": { start: { line: 118, column: 117 }, end: { line: 122, column: 7 } }, "67": { start: { line: 123, column: 6 }, end: { line: 123, column: 43 } }, "68": { start: { line: 125, column: 6 }, end: { line: 125, column: 67 } }, "69": { start: { line: 126, column: 6 }, end: { line: 126, column: 12 } }, "70": { start: { line: 129, column: 6 }, end: { line: 131, column: 10 } }, "71": { start: { line: 132, column: 6 }, end: { line: 132, column: 12 } }, "72": { start: { line: 144, column: 10 }, end: { line: 144, column: 14 } }, "73": { start: { line: 146, column: 27 }, end: { line: 148, column: 12 } }, "74": { start: { line: 149, column: 6 }, end: { line: 149, column: 49 } }, "75": { start: { line: 151, column: 27 }, end: { line: 151, column: 68 } }, "76": { start: { line: 153, column: 30 }, end: { line: 153, column: 69 } }, "77": { start: { line: 154, column: 6 }, end: { line: 154, column: 51 } }, "78": { start: { line: 159, column: 6 }, end: { line: 165, column: 7 } }, "79": { start: { line: 160, column: 8 }, end: { line: 160, column: 67 } }, "80": { start: { line: 161, column: 13 }, end: { line: 165, column: 7 } }, "81": { start: { line: 162, column: 8 }, end: { line: 164, column: 11 } }, "82": { start: { line: 167, column: 6 }, end: { line: 167, column: 42 } }, "83": { start: { line: 168, column: 6 }, end: { line: 170, column: 7 } }, "84": { start: { line: 169, column: 8 }, end: { line: 169, column: 79 } }, "85": { start: { line: 172, column: 6 }, end: { line: 172, column: 12 } }, "86": { start: { line: 175, column: 6 }, end: { line: 175, column: 12 } }, "87": { start: { line: 178, column: 6 }, end: { line: 180, column: 7 } }, "88": { start: { line: 179, column: 8 }, end: { line: 179, column: 14 } }, "89": { start: { line: 182, column: 6 }, end: { line: 182, column: 67 } }, "90": { start: { line: 183, column: 20 }, end: { line: 183, column: 30 } }, "91": { start: { line: 185, column: 6 }, end: { line: 187, column: 10 } }, "92": { start: { line: 188, column: 6 }, end: { line: 188, column: 12 } }, "93": { start: { line: 193, column: 2 }, end: { line: 199, column: 5 } }, "94": { start: { line: 194, column: 4 }, end: { line: 198, column: 5 } }, "95": { start: { line: 195, column: 6 }, end: { line: 195, column: 24 } }, "96": { start: { line: 197, column: 6 }, end: { line: 197, column: 15 } }, "97": { start: { line: 202, column: 0 }, end: { line: 202, column: 57 } } }, fnMap: { "0": { name: "_interopRequireWildcard", decl: { start: { line: 49, column: 9 }, end: { line: 49, column: 32 } }, loc: { start: { line: 49, column: 38 }, end: { line: 49, column: 269 } }, line: 49 }, "1": { name: "_interopRequireDefault", decl: { start: { line: 51, column: 9 }, end: { line: 51, column: 31 } }, loc: { start: { line: 51, column: 37 }, end: { line: 51, column: 95 } }, line: 51 }, "2": { name: "scope", decl: { start: { line: 55, column: 10 }, end: { line: 55, column: 15 } }, loc: { start: { line: 55, column: 53 }, end: { line: 57, column: 1 } }, line: 55 }, "3": { name: "declare", decl: { start: { line: 59, column: 10 }, end: { line: 59, column: 17 } }, loc: { start: { line: 59, column: 24 }, end: { line: 61, column: 1 } }, line: 59 }, "4": { name: "tickSaga", decl: { start: { line: 63, column: 10 }, end: { line: 63, column: 18 } }, loc: { start: { line: 63, column: 21 }, end: { line: 190, column: 1 } }, line: 63 }, "5": { name: "(anonymous_5)", decl: { start: { line: 102, column: 50 }, end: { line: 102, column: 51 } }, loc: { start: { line: 102, column: 60 }, end: { line: 102, column: 99 } }, line: 102 }, "6": { name: "(anonymous_6)", decl: { start: { line: 104, column: 62 }, end: { line: 104, column: 63 } }, loc: { start: { line: 104, column: 72 }, end: { line: 104, column: 117 } }, line: 104 }, "7": { name: "(anonymous_7)", decl: { start: { line: 106, column: 70 }, end: { line: 106, column: 71 } }, loc: { start: { line: 106, column: 81 }, end: { line: 106, column: 124 } }, line: 106 }, "8": { name: "(anonymous_8)", decl: { start: { line: 106, column: 130 }, end: { line: 106, column: 131 } }, loc: { start: { line: 106, column: 142 }, end: { line: 106, column: 172 } }, line: 106 }, "9": { name: "(anonymous_9)", decl: { start: { line: 106, column: 182 }, end: { line: 106, column: 183 } }, loc: { start: { line: 106, column: 203 }, end: { line: 106, column: 241 } }, line: 106 }, "10": { name: "(anonymous_10)", decl: { start: { line: 118, column: 97 }, end: { line: 118, column: 98 } }, loc: { start: { line: 118, column: 117 }, end: { line: 122, column: 7 } }, line: 118 }, "11": { name: "saga", decl: { start: { line: 192, column: 10 }, end: { line: 192, column: 14 } }, loc: { start: { line: 192, column: 17 }, end: { line: 200, column: 1 } }, line: 192 }, "12": { name: "(anonymous_12)", decl: { start: { line: 193, column: 47 }, end: { line: 193, column: 48 } }, loc: { start: { line: 193, column: 60 }, end: { line: 199, column: 3 } }, line: 193 } }, branchMap: { "0": { loc: { start: { line: 49, column: 40 }, end: { line: 49, column: 267 } }, type: "if", locations: [{ start: { line: 49, column: 40 }, end: { line: 49, column: 267 } }, { start: { line: 49, column: 40 }, end: { line: 49, column: 267 } }], line: 49 }, "1": { loc: { start: { line: 49, column: 44 }, end: { line: 49, column: 65 } }, type: "binary-expr", locations: [{ start: { line: 49, column: 44 }, end: { line: 49, column: 47 } }, { start: { line: 49, column: 51 }, end: { line: 49, column: 65 } }], line: 49 }, "2": { loc: { start: { line: 49, column: 107 }, end: { line: 49, column: 228 } }, type: "if", locations: [{ start: { line: 49, column: 107 }, end: { line: 49, column: 228 } }, { start: { line: 49, column: 107 }, end: { line: 49, column: 228 } }], line: 49 }, "3": { loc: { start: { line: 49, column: 149 }, end: { line: 49, column: 224 } }, type: "if", locations: [{ start: { line: 49, column: 149 }, end: { line: 49, column: 224 } }, { start: { line: 49, column: 149 }, end: { line: 49, column: 224 } }], line: 49 }, "4": { loc: { start: { line: 51, column: 46 }, end: { line: 51, column: 92 } }, type: "cond-expr", locations: [{ start: { line: 51, column: 70 }, end: { line: 51, column: 73 } }, { start: { line: 51, column: 76 }, end: { line: 51, column: 92 } }], line: 51 }, "5": { loc: { start: { line: 51, column: 46 }, end: { line: 51, column: 67 } }, type: "binary-expr", locations: [{ start: { line: 51, column: 46 }, end: { line: 51, column: 49 } }, { start: { line: 51, column: 53 }, end: { line: 51, column: 67 } }], line: 51 }, "6": { loc: { start: { line: 77, column: 2 }, end: { line: 79, column: 3 } }, type: "if", locations: [{ start: { line: 77, column: 2 }, end: { line: 79, column: 3 } }, { start: { line: 77, column: 2 }, end: { line: 79, column: 3 } }], line: 77 }, "7": { loc: { start: { line: 84, column: 2 }, end: { line: 86, column: 3 } }, type: "if", locations: [{ start: { line: 84, column: 2 }, end: { line: 86, column: 3 } }, { start: { line: 84, column: 2 }, end: { line: 86, column: 3 } }], line: 84 }, "8": { loc: { start: { line: 95, column: 2 }, end: { line: 97, column: 3 } }, type: "if", locations: [{ start: { line: 95, column: 2 }, end: { line: 97, column: 3 } }, { start: { line: 95, column: 2 }, end: { line: 97, column: 3 } }], line: 95 }, "9": { loc: { start: { line: 99, column: 2 }, end: { line: 189, column: 3 } }, type: "switch", locations: [{ start: { line: 101, column: 4 }, end: { line: 109, column: 12 } }, { start: { line: 111, column: 4 }, end: { line: 126, column: 12 } }, { start: { line: 128, column: 4 }, end: { line: 132, column: 12 } }, { start: { line: 134, column: 4 }, end: { line: 172, column: 12 } }, { start: { line: 174, column: 4 }, end: { line: 175, column: 12 } }, { start: { line: 177, column: 4 }, end: { line: 188, column: 12 } }], line: 99 }, "10": { loc: { start: { line: 112, column: 24 }, end: { line: 112, column: 55 } }, type: "binary-expr", locations: [{ start: { line: 112, column: 24 }, end: { line: 112, column: 49 } }, { start: { line: 112, column: 53 }, end: { line: 112, column: 55 } }], line: 112 }, "11": { loc: { start: { line: 119, column: 42 }, end: { line: 119, column: 79 } }, type: "binary-expr", locations: [{ start: { line: 119, column: 42 }, end: { line: 119, column: 64 } }, { start: { line: 119, column: 68 }, end: { line: 119, column: 79 } }], line: 119 }, "12": { loc: { start: { line: 146, column: 28 }, end: { line: 148, column: 7 } }, type: "binary-expr", locations: [{ start: { line: 146, column: 28 }, end: { line: 146, column: 65 } }, { start: { line: 146, column: 69 }, end: { line: 148, column: 7 } }], line: 146 }, "13": { loc: { start: { line: 153, column: 31 }, end: { line: 153, column: 64 } }, type: "binary-expr", locations: [{ start: { line: 153, column: 31 }, end: { line: 153, column: 58 } }, { start: { line: 153, column: 62 }, end: { line: 153, column: 64 } }], line: 153 }, "14": { loc: { start: { line: 159, column: 6 }, end: { line: 165, column: 7 } }, type: "if", locations: [{ start: { line: 159, column: 6 }, end: { line: 165, column: 7 } }, { start: { line: 159, column: 6 }, end: { line: 165, column: 7 } }], line: 159 }, "15": { loc: { start: { line: 161, column: 13 }, end: { line: 165, column: 7 } }, type: "if", locations: [{ start: { line: 161, column: 13 }, end: { line: 165, column: 7 } }, { start: { line: 161, column: 13 }, end: { line: 165, column: 7 } }], line: 161 }, "16": { loc: { start: { line: 168, column: 6 }, end: { line: 170, column: 7 } }, type: "if", locations: [{ start: { line: 168, column: 6 }, end: { line: 170, column: 7 } }, { start: { line: 168, column: 6 }, end: { line: 170, column: 7 } }], line: 168 }, "17": { loc: { start: { line: 178, column: 6 }, end: { line: 180, column: 7 } }, type: "if", locations: [{ start: { line: 178, column: 6 }, end: { line: 180, column: 7 } }, { start: { line: 178, column: 6 }, end: { line: 180, column: 7 } }], line: 178 } }, s: { "0": 0, "1": 0, "2": 0, "3": 0, "4": 0, "5": 0, "6": 0, "7": 0, "8": 0, "9": 0, "10": 0, "11": 0, "12": 0, "13": 0, "14": 0, "15": 0, "16": 0, "17": 0, "18": 0, "19": 0, "20": 0, "21": 0, "22": 0, "23": 0, "24": 0, "25": 0, "26": 0, "27": 0, "28": 0, "29": 0, "30": 0, "31": 0, "32": 0, "33": 0, "34": 0, "35": 0, "36": 0, "37": 0, "38": 0, "39": 0, "40": 0, "41": 0, "42": 0, "43": 0, "44": 0, "45": 0, "46": 0, "47": 0, "48": 0, "49": 0, "50": 0, "51": 0, "52": 0, "53": 0, "54": 0, "55": 0, "56": 0, "57": 0, "58": 0, "59": 0, "60": 0, "61": 0, "62": 0, "63": 0, "64": 0, "65": 0, "66": 0, "67": 0, "68": 0, "69": 0, "70": 0, "71": 0, "72": 0, "73": 0, "74": 0, "75": 0, "76": 0, "77": 0, "78": 0, "79": 0, "80": 0, "81": 0, "82": 0, "83": 0, "84": 0, "85": 0, "86": 0, "87": 0, "88": 0, "89": 0, "90": 0, "91": 0, "92": 0, "93": 0, "94": 0, "95": 0, "96": 0, "97": 0 }, f: { "0": 0, "1": 0, "2": 0, "3": 0, "4": 0, "5": 0, "6": 0, "7": 0, "8": 0, "9": 0, "10": 0, "11": 0, "12": 0 }, b: { "0": [0, 0], "1": [0, 0], "2": [0, 0], "3": [0, 0], "4": [0, 0], "5": [0, 0], "6": [0, 0], "7": [0, 0], "8": [0, 0], "9": [0, 0, 0, 0, 0, 0], "10": [0, 0], "11": [0, 0], "12": [0, 0], "13": [0, 0], "14": [0, 0], "15": [0, 0], "16": [0, 0], "17": [0, 0] }, inputSourceMap: { version: 3, sources: ["lib/data/sagas/index.js"], names: ["scope", "declare", "saga", "actions", "utils", "debug", "nodeId", "pointer", "parentId", "sourceId", "node", "tickSaga", "tree", "id", "treeId", "data", "views", "ast", "decode", "decoder", "scopes", "info", "definitions", "inlined", "currentAssignments", "proc", "assignments", "stack", "next", "state", "top", "length", "parameters", "returnParameters", "storageVars", "atLastInstructionForSourceRange", "nodeType", "map", "p", "i", "concat", "reverse", "jsonpointer", "get", "reduce", "acc", "assignment", "assign", "variables", "slot", "index", "WORD_SIZE", "allocation", "allocateDeclarations", "children", "storage", "ref", "baseExpression", "baseId", "referencedDeclaration", "baseDeclarationId", "indexExpression", "indexId", "baseAssignment", "baseDefinition", "definition", "indexAssignment", "indexValue", "typeClass", "toBytes", "hexValue", "undefined", "mapKey", "typeDescriptions", "literal", "TICK", "e"], mappings: "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", file: "index.js", sourceRoot: "/Users/gnidan/src/work/truffle/packages/truffle-debugger", sourcesContent: ["import debugModule from \"debug\";\nconst debug = debugModule(\"debugger:data:sagas\");\n\nimport { put, takeEvery, select } from \"redux-saga/effects\";\nimport jsonpointer from \"json-pointer\";\n\nimport { prefixName } from \"lib/helpers\";\n\nimport { TICK } from \"lib/trace/actions\";\nimport * as actions from \"../actions\";\n\nimport data from \"../selectors\";\n\nimport { WORD_SIZE } from \"lib/data/decode/utils\";\nimport * as utils from \"lib/data/decode/utils\";\n\nexport function *scope(nodeId, pointer, parentId, sourceId) {\n  yield put(actions.scope(nodeId, pointer, parentId, sourceId));\n}\n\nexport function *declare(node) {\n  yield put(actions.declare(node));\n}\n\nfunction *tickSaga() {\n  let {\n    tree,\n    id: treeId,\n    node,\n    pointer\n  } = yield select(data.views.ast);\n\n  let decode = yield select(data.views.decoder);\n  let scopes = yield select(data.info.scopes);\n  let definitions = yield select(data.views.scopes.inlined);\n  let currentAssignments = yield select(data.proc.assignments);\n\n  let stack = yield select(data.next.state.stack);\n  if (!stack) {\n    return;\n  }\n\n  let top = stack.length - 1;\n  var parameters, returnParameters, assignments, storageVars;\n\n  if (!node) {\n    return;\n  }\n\n  // stack is only ready for interpretation after the last step of each\n  // source range\n  //\n  // the data module always looks at the result of a particular opcode\n  // (i.e., the following trace step's stack/memory/storage), so this\n  // asserts that the _current_ operation is the final one before\n  // proceeding\n  if (!(yield select(data.views.atLastInstructionForSourceRange))) {\n    return;\n  }\n\n  switch (node.nodeType) {\n\n    case \"FunctionDefinition\":\n      parameters = node.parameters.parameters\n        .map( (p, i) => `${pointer}/parameters/parameters/${i}` );\n\n      returnParameters = node.returnParameters.parameters\n        .map( (p, i) => `${pointer}/returnParameters/parameters/${i}` );\n\n      assignments = returnParameters.concat(parameters).reverse()\n        .map( (pointer) => jsonpointer.get(tree, pointer).id )\n        .map( (id, i) => ({ [id]: {\"stack\": top - i} }) )\n        .reduce( (acc, assignment) => Object.assign(acc, assignment), {} );\n\n      yield put(actions.assign(treeId, assignments));\n      break;\n\n    case \"ContractDefinition\":\n      let storageVars = scopes[node.id].variables || [];\n      let slot = 0;\n      let index = WORD_SIZE - 1;  // cause lower-order\n      debug(\"storage vars %o\", storageVars);\n\n      let allocation = utils.allocateDeclarations(storageVars, definitions);\n      assignments = Object.assign(\n        {}, ...Object.entries(allocation.children)\n          .map( ([id, storage]) => ({\n            [id]: {\n              ...(currentAssignments[id] || { ref: {} }).ref,\n              storage\n            }\n          }) )\n      );\n      debug(\"assignments %O\", assignments);\n\n      yield put(actions.assign(treeId, assignments));\n      break;\n\n    case \"VariableDeclaration\":\n      yield put(actions.assign(treeId, {\n        [jsonpointer.get(tree, pointer).id]: {\"stack\": top}\n      }));\n      break;\n\n    case \"IndexAccess\":\n      // to track `mapping` types known indexes\n      let {\n        baseExpression: {\n          id: baseId,\n          referencedDeclaration: baseDeclarationId,\n        },\n        indexExpression: {\n          id: indexId,\n        }\n      } = node;\n\n      let baseAssignment = (currentAssignments[baseDeclarationId] || {\n        ref: {}\n      }).ref;\n      debug(\"baseAssignment %O\", baseAssignment);\n\n      let baseDefinition = definitions[baseDeclarationId].definition;\n\n      const indexAssignment = (currentAssignments[indexId] || {}).ref;\n      debug(\"indexAssignment %O\", indexAssignment);\n      // HACK because string literal AST nodes are not sourcemapped to directly\n      // value appears to be available in `node.indexExpression.hexValue`\n      // [observed with solc v0.4.24]\n      let indexValue;\n      if (indexAssignment) {\n        indexValue = decode(node.indexExpression, indexAssignment)\n      } else if (utils.typeClass(node.indexExpression) == \"stringliteral\") {\n        indexValue = decode(node.indexExpression, {\n          \"literal\": utils.toBytes(node.indexExpression.hexValue)\n        })\n      }\n\n      debug(\"index value %O\", indexValue);\n      if (indexValue != undefined) {\n        yield put(actions.mapKey(baseDeclarationId, indexValue));\n      }\n\n      break;\n\n    case \"Assignment\":\n      break;\n\n    default:\n      if (node.typeDescriptions == undefined) {\n        break;\n      }\n\n      debug(\"decoding expression value %O\", node.typeDescriptions);\n      let literal = stack[top];\n\n      yield put(actions.assign(treeId, {\n        [node.id]: { literal }\n      }));\n      break;\n  }\n}\n\nexport function* saga () {\n  yield takeEvery(TICK, function* () {\n    try {\n      yield *tickSaga();\n    } catch (e) {\n      debug(e);\n    }\n  });\n}\n\nexport default prefixName(\"data\", saga);\n"] }, _coverageSchema: "332fd63041d2c1bcb487cc26dd0d5f7d97098a6c" },
      coverage = global[gcv] || (global[gcv] = {});if (coverage[path] && coverage[path].hash === hash) {
    return coverage[path];
  }coverageData.hash = hash;return coverage[path] = coverageData;
}();cov_lonpljgf9.s[0]++;Object.defineProperty(exports, "__esModule", { value: true });var _extends2 = (cov_lonpljgf9.s[1]++, __webpack_require__(2));var _extends3 = (cov_lonpljgf9.s[2]++, _interopRequireDefault(_extends2));var _entries = (cov_lonpljgf9.s[3]++, __webpack_require__(1));var _entries2 = (cov_lonpljgf9.s[4]++, _interopRequireDefault(_entries));var _assign = (cov_lonpljgf9.s[5]++, __webpack_require__(3));var _assign2 = (cov_lonpljgf9.s[6]++, _interopRequireDefault(_assign));cov_lonpljgf9.s[7]++;exports.scope = scope;cov_lonpljgf9.s[8]++;exports.declare = declare;cov_lonpljgf9.s[9]++;exports.saga = saga;var _debug = (cov_lonpljgf9.s[10]++, __webpack_require__(0));var _debug2 = (cov_lonpljgf9.s[11]++, _interopRequireDefault(_debug));var _effects = (cov_lonpljgf9.s[12]++, __webpack_require__(10));var _jsonPointer = (cov_lonpljgf9.s[13]++, __webpack_require__(24));var _jsonPointer2 = (cov_lonpljgf9.s[14]++, _interopRequireDefault(_jsonPointer));var _helpers = (cov_lonpljgf9.s[15]++, __webpack_require__(4));var _actions = (cov_lonpljgf9.s[16]++, __webpack_require__(21));var _actions2 = (cov_lonpljgf9.s[17]++, __webpack_require__(32));var actions = (cov_lonpljgf9.s[18]++, _interopRequireWildcard(_actions2));var _selectors = (cov_lonpljgf9.s[19]++, __webpack_require__(26));var _selectors2 = (cov_lonpljgf9.s[20]++, _interopRequireDefault(_selectors));var _utils = (cov_lonpljgf9.s[21]++, __webpack_require__(11));var utils = (cov_lonpljgf9.s[22]++, _interopRequireWildcard(_utils));function _interopRequireWildcard(obj) {
  cov_lonpljgf9.f[0]++;cov_lonpljgf9.s[23]++;if ((cov_lonpljgf9.b[1][0]++, obj) && (cov_lonpljgf9.b[1][1]++, obj.__esModule)) {
    cov_lonpljgf9.b[0][0]++;cov_lonpljgf9.s[24]++;return obj;
  } else {
    cov_lonpljgf9.b[0][1]++;var newObj = (cov_lonpljgf9.s[25]++, {});cov_lonpljgf9.s[26]++;if (obj != null) {
      cov_lonpljgf9.b[2][0]++;cov_lonpljgf9.s[27]++;for (var key in obj) {
        cov_lonpljgf9.s[28]++;if (Object.prototype.hasOwnProperty.call(obj, key)) {
          cov_lonpljgf9.b[3][0]++;cov_lonpljgf9.s[29]++;newObj[key] = obj[key];
        } else {
          cov_lonpljgf9.b[3][1]++;
        }
      }
    } else {
      cov_lonpljgf9.b[2][1]++;
    }cov_lonpljgf9.s[30]++;newObj.default = obj;cov_lonpljgf9.s[31]++;return newObj;
  }
}function _interopRequireDefault(obj) {
  cov_lonpljgf9.f[1]++;cov_lonpljgf9.s[32]++;return (cov_lonpljgf9.b[5][0]++, obj) && (cov_lonpljgf9.b[5][1]++, obj.__esModule) ? (cov_lonpljgf9.b[4][0]++, obj) : (cov_lonpljgf9.b[4][1]++, { default: obj });
}const debug = (cov_lonpljgf9.s[33]++, (0, _debug2.default)("debugger:data:sagas"));function* scope(nodeId, pointer, parentId, sourceId) {
  cov_lonpljgf9.f[2]++;cov_lonpljgf9.s[34]++;yield (0, _effects.put)(actions.scope(nodeId, pointer, parentId, sourceId));
}function* declare(node) {
  cov_lonpljgf9.f[3]++;cov_lonpljgf9.s[35]++;yield (0, _effects.put)(actions.declare(node));
}function* tickSaga() {
  cov_lonpljgf9.f[4]++;let { tree, id: treeId, node, pointer } = (cov_lonpljgf9.s[36]++, yield (0, _effects.select)(_selectors2.default.views.ast));let decode = (cov_lonpljgf9.s[37]++, yield (0, _effects.select)(_selectors2.default.views.decoder));let scopes = (cov_lonpljgf9.s[38]++, yield (0, _effects.select)(_selectors2.default.info.scopes));let definitions = (cov_lonpljgf9.s[39]++, yield (0, _effects.select)(_selectors2.default.views.scopes.inlined));let currentAssignments = (cov_lonpljgf9.s[40]++, yield (0, _effects.select)(_selectors2.default.proc.assignments));let stack = (cov_lonpljgf9.s[41]++, yield (0, _effects.select)(_selectors2.default.next.state.stack));cov_lonpljgf9.s[42]++;if (!stack) {
    cov_lonpljgf9.b[6][0]++;cov_lonpljgf9.s[43]++;return;
  } else {
    cov_lonpljgf9.b[6][1]++;
  }let top = (cov_lonpljgf9.s[44]++, stack.length - 1);var parameters, returnParameters, assignments, storageVars;cov_lonpljgf9.s[45]++;if (!node) {
    cov_lonpljgf9.b[7][0]++;cov_lonpljgf9.s[46]++;return;
  } else {
    cov_lonpljgf9.b[7][1]++;
  }cov_lonpljgf9.s[47]++;if (!(yield (0, _effects.select)(_selectors2.default.views.atLastInstructionForSourceRange))) {
    cov_lonpljgf9.b[8][0]++;cov_lonpljgf9.s[48]++;return;
  } else {
    cov_lonpljgf9.b[8][1]++;
  }cov_lonpljgf9.s[49]++;switch (node.nodeType) {case "FunctionDefinition":
      cov_lonpljgf9.b[9][0]++;cov_lonpljgf9.s[50]++;parameters = node.parameters.parameters.map((p, i) => {
        cov_lonpljgf9.f[5]++;cov_lonpljgf9.s[51]++;return `${pointer}/parameters/parameters/${i}`;
      });cov_lonpljgf9.s[52]++;returnParameters = node.returnParameters.parameters.map((p, i) => {
        cov_lonpljgf9.f[6]++;cov_lonpljgf9.s[53]++;return `${pointer}/returnParameters/parameters/${i}`;
      });cov_lonpljgf9.s[54]++;assignments = returnParameters.concat(parameters).reverse().map(pointer => {
        cov_lonpljgf9.f[7]++;cov_lonpljgf9.s[55]++;return _jsonPointer2.default.get(tree, pointer).id;
      }).map((id, i) => {
        cov_lonpljgf9.f[8]++;cov_lonpljgf9.s[56]++;return { [id]: { "stack": top - i } };
      }).reduce((acc, assignment) => {
        cov_lonpljgf9.f[9]++;cov_lonpljgf9.s[57]++;return (0, _assign2.default)(acc, assignment);
      }, {});cov_lonpljgf9.s[58]++;yield (0, _effects.put)(actions.assign(treeId, assignments));cov_lonpljgf9.s[59]++;break;case "ContractDefinition":
      cov_lonpljgf9.b[9][1]++;let storageVars = (cov_lonpljgf9.s[60]++, (cov_lonpljgf9.b[10][0]++, scopes[node.id].variables) || (cov_lonpljgf9.b[10][1]++, []));let slot = (cov_lonpljgf9.s[61]++, 0);let index = (cov_lonpljgf9.s[62]++, _utils.WORD_SIZE - 1);cov_lonpljgf9.s[63]++;debug("storage vars %o", storageVars);let allocation = (cov_lonpljgf9.s[64]++, utils.allocateDeclarations(storageVars, definitions));cov_lonpljgf9.s[65]++;assignments = (0, _assign2.default)({}, ...(0, _entries2.default)(allocation.children).map(([id, storage]) => {
        cov_lonpljgf9.f[10]++;cov_lonpljgf9.s[66]++;return { [id]: (0, _extends3.default)({}, ((cov_lonpljgf9.b[11][0]++, currentAssignments[id]) || (cov_lonpljgf9.b[11][1]++, { ref: {} })).ref, { storage }) };
      }));cov_lonpljgf9.s[67]++;debug("assignments %O", assignments);cov_lonpljgf9.s[68]++;yield (0, _effects.put)(actions.assign(treeId, assignments));cov_lonpljgf9.s[69]++;break;case "VariableDeclaration":
      cov_lonpljgf9.b[9][2]++;cov_lonpljgf9.s[70]++;yield (0, _effects.put)(actions.assign(treeId, { [_jsonPointer2.default.get(tree, pointer).id]: { "stack": top } }));cov_lonpljgf9.s[71]++;break;case "IndexAccess":
      cov_lonpljgf9.b[9][3]++;let { baseExpression: { id: baseId, referencedDeclaration: baseDeclarationId }, indexExpression: { id: indexId } } = (cov_lonpljgf9.s[72]++, node);let baseAssignment = (cov_lonpljgf9.s[73]++, ((cov_lonpljgf9.b[12][0]++, currentAssignments[baseDeclarationId]) || (cov_lonpljgf9.b[12][1]++, { ref: {} })).ref);cov_lonpljgf9.s[74]++;debug("baseAssignment %O", baseAssignment);let baseDefinition = (cov_lonpljgf9.s[75]++, definitions[baseDeclarationId].definition);const indexAssignment = (cov_lonpljgf9.s[76]++, ((cov_lonpljgf9.b[13][0]++, currentAssignments[indexId]) || (cov_lonpljgf9.b[13][1]++, {})).ref);cov_lonpljgf9.s[77]++;debug("indexAssignment %O", indexAssignment);let indexValue;cov_lonpljgf9.s[78]++;if (indexAssignment) {
        cov_lonpljgf9.b[14][0]++;cov_lonpljgf9.s[79]++;indexValue = decode(node.indexExpression, indexAssignment);
      } else {
        cov_lonpljgf9.b[14][1]++;cov_lonpljgf9.s[80]++;if (utils.typeClass(node.indexExpression) == "stringliteral") {
          cov_lonpljgf9.b[15][0]++;cov_lonpljgf9.s[81]++;indexValue = decode(node.indexExpression, { "literal": utils.toBytes(node.indexExpression.hexValue) });
        } else {
          cov_lonpljgf9.b[15][1]++;
        }
      }cov_lonpljgf9.s[82]++;debug("index value %O", indexValue);cov_lonpljgf9.s[83]++;if (indexValue != undefined) {
        cov_lonpljgf9.b[16][0]++;cov_lonpljgf9.s[84]++;yield (0, _effects.put)(actions.mapKey(baseDeclarationId, indexValue));
      } else {
        cov_lonpljgf9.b[16][1]++;
      }cov_lonpljgf9.s[85]++;break;case "Assignment":
      cov_lonpljgf9.b[9][4]++;cov_lonpljgf9.s[86]++;break;default:
      cov_lonpljgf9.b[9][5]++;cov_lonpljgf9.s[87]++;if (node.typeDescriptions == undefined) {
        cov_lonpljgf9.b[17][0]++;cov_lonpljgf9.s[88]++;break;
      } else {
        cov_lonpljgf9.b[17][1]++;
      }cov_lonpljgf9.s[89]++;debug("decoding expression value %O", node.typeDescriptions);let literal = (cov_lonpljgf9.s[90]++, stack[top]);cov_lonpljgf9.s[91]++;yield (0, _effects.put)(actions.assign(treeId, { [node.id]: { literal } }));cov_lonpljgf9.s[92]++;break;}
}function* saga() {
  cov_lonpljgf9.f[11]++;cov_lonpljgf9.s[93]++;yield (0, _effects.takeEvery)(_actions.TICK, function* () {
    cov_lonpljgf9.f[12]++;cov_lonpljgf9.s[94]++;try {
      cov_lonpljgf9.s[95]++;yield* tickSaga();
    } catch (e) {
      cov_lonpljgf9.s[96]++;debug(e);
    }
  });
}cov_lonpljgf9.s[97]++;exports.default = (0, _helpers.prefixName)("data", saga);

/***/ }),
/* 32 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var cov_1fosgkqbd2 = function () {
  var path = "/Users/gnidan/src/work/truffle/packages/truffle-debugger/lib/data/actions/index.js",
      hash = "9ddfbcd244f6070185ac27cff2a5c8b6cdef3716",
      Function = function () {}.constructor,
      global = new Function('return this')(),
      gcv = "__coverage__",
      coverageData = { path: "/Users/gnidan/src/work/truffle/packages/truffle-debugger/lib/data/actions/index.js", statementMap: { "0": { start: { line: 3, column: 0 }, end: { line: 5, column: 3 } }, "1": { start: { line: 6, column: 0 }, end: { line: 6, column: 22 } }, "2": { start: { line: 7, column: 0 }, end: { line: 7, column: 26 } }, "3": { start: { line: 8, column: 0 }, end: { line: 8, column: 24 } }, "4": { start: { line: 9, column: 0 }, end: { line: 9, column: 24 } }, "5": { start: { line: 10, column: 14 }, end: { line: 10, column: 37 } }, "6": { start: { line: 12, column: 2 }, end: { line: 15, column: 4 } }, "7": { start: { line: 18, column: 16 }, end: { line: 18, column: 52 } }, "8": { start: { line: 20, column: 2 }, end: { line: 23, column: 4 } }, "9": { start: { line: 26, column: 15 }, end: { line: 26, column: 40 } }, "10": { start: { line: 28, column: 2 }, end: { line: 31, column: 4 } }, "11": { start: { line: 34, column: 16 }, end: { line: 34, column: 43 } }, "12": { start: { line: 36, column: 2 }, end: { line: 39, column: 4 } } }, fnMap: { "0": { name: "scope", decl: { start: { line: 11, column: 9 }, end: { line: 11, column: 14 } }, loc: { start: { line: 11, column: 48 }, end: { line: 16, column: 1 } }, line: 11 }, "1": { name: "declare", decl: { start: { line: 19, column: 9 }, end: { line: 19, column: 16 } }, loc: { start: { line: 19, column: 23 }, end: { line: 24, column: 1 } }, line: 19 }, "2": { name: "assign", decl: { start: { line: 27, column: 9 }, end: { line: 27, column: 15 } }, loc: { start: { line: 27, column: 38 }, end: { line: 32, column: 1 } }, line: 27 }, "3": { name: "mapKey", decl: { start: { line: 35, column: 9 }, end: { line: 35, column: 15 } }, loc: { start: { line: 35, column: 25 }, end: { line: 40, column: 1 } }, line: 35 } }, branchMap: {}, s: { "0": 0, "1": 0, "2": 0, "3": 0, "4": 0, "5": 0, "6": 0, "7": 0, "8": 0, "9": 0, "10": 0, "11": 0, "12": 0 }, f: { "0": 0, "1": 0, "2": 0, "3": 0 }, b: {}, inputSourceMap: { version: 3, sources: ["lib/data/actions/index.js"], names: ["scope", "declare", "assign", "mapKey", "SCOPE", "id", "pointer", "parentId", "sourceId", "type", "DECLARE", "node", "ASSIGN", "context", "assignments", "MAP_KEY", "key"], mappings: ";;;;;QACgBA,K,GAAAA,K;QAQAC,O,GAAAA,O;QAQAC,M,GAAAA,M;QAQAC,M,GAAAA,M;AAzBT,MAAMC,wBAAQ,OAAd;AACA,SAASJ,KAAT,CAAeK,EAAf,EAAmBC,OAAnB,EAA4BC,QAA5B,EAAsCC,QAAtC,EAAgD;AACrD,SAAO;AACLC,UAAML,KADD;AAELC,MAFK,EAEDC,OAFC,EAEQC,QAFR,EAEkBC;AAFlB,GAAP;AAID;;AAEM,MAAME,4BAAU,kBAAhB;AACA,SAAST,OAAT,CAAiBU,IAAjB,EAAuB;AAC5B,SAAO;AACLF,UAAMC,OADD;AAELC;AAFK,GAAP;AAID;;AAEM,MAAMC,0BAAS,QAAf;AACA,SAASV,MAAT,CAAgBW,OAAhB,EAAyBC,WAAzB,EAAsC;AAC3C,SAAO;AACLL,UAAMG,MADD;AAELC,WAFK,EAEIC;AAFJ,GAAP;AAID;;AAEM,MAAMC,4BAAU,SAAhB;AACA,SAASZ,MAAT,CAAgBE,EAAhB,EAAoBW,GAApB,EAAyB;AAC9B,SAAO;AACLP,UAAMM,OADD;AAELV,MAFK,EAEDW;AAFC,GAAP;AAID", file: "index.js", sourceRoot: "/Users/gnidan/src/work/truffle/packages/truffle-debugger", sourcesContent: ["export const SCOPE = \"SCOPE\";\nexport function scope(id, pointer, parentId, sourceId) {\n  return {\n    type: SCOPE,\n    id, pointer, parentId, sourceId\n  }\n}\n\nexport const DECLARE = \"DECLARE_VARIABLE\";\nexport function declare(node) {\n  return {\n    type: DECLARE,\n    node\n  }\n}\n\nexport const ASSIGN = \"ASSIGN\";\nexport function assign(context, assignments) {\n  return {\n    type: ASSIGN,\n    context, assignments\n  };\n}\n\nexport const MAP_KEY = \"MAP_KEY\";\nexport function mapKey(id, key) {\n  return {\n    type: MAP_KEY,\n    id, key\n  };\n}\n"] }, _coverageSchema: "332fd63041d2c1bcb487cc26dd0d5f7d97098a6c" },
      coverage = global[gcv] || (global[gcv] = {});if (coverage[path] && coverage[path].hash === hash) {
    return coverage[path];
  }coverageData.hash = hash;return coverage[path] = coverageData;
}();cov_1fosgkqbd2.s[0]++;Object.defineProperty(exports, "__esModule", { value: true });cov_1fosgkqbd2.s[1]++;exports.scope = scope;cov_1fosgkqbd2.s[2]++;exports.declare = declare;cov_1fosgkqbd2.s[3]++;exports.assign = assign;cov_1fosgkqbd2.s[4]++;exports.mapKey = mapKey;const SCOPE = (cov_1fosgkqbd2.s[5]++, exports.SCOPE = "SCOPE");function scope(id, pointer, parentId, sourceId) {
  cov_1fosgkqbd2.f[0]++;cov_1fosgkqbd2.s[6]++;return { type: SCOPE, id, pointer, parentId, sourceId };
}const DECLARE = (cov_1fosgkqbd2.s[7]++, exports.DECLARE = "DECLARE_VARIABLE");function declare(node) {
  cov_1fosgkqbd2.f[1]++;cov_1fosgkqbd2.s[8]++;return { type: DECLARE, node };
}const ASSIGN = (cov_1fosgkqbd2.s[9]++, exports.ASSIGN = "ASSIGN");function assign(context, assignments) {
  cov_1fosgkqbd2.f[2]++;cov_1fosgkqbd2.s[10]++;return { type: ASSIGN, context, assignments };
}const MAP_KEY = (cov_1fosgkqbd2.s[11]++, exports.MAP_KEY = "MAP_KEY");function mapKey(id, key) {
  cov_1fosgkqbd2.f[3]++;cov_1fosgkqbd2.s[12]++;return { type: MAP_KEY, id, key };
}

/***/ }),
/* 33 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var cov_1yv2hwn7tg = function () {
  var path = "/Users/gnidan/src/work/truffle/packages/truffle-debugger/lib/trace/sagas/index.js",
      hash = "7d01b266f31a03e7ce05da9ed53f2cd9f5ba30e7",
      Function = function () {}.constructor,
      global = new Function('return this')(),
      gcv = "__coverage__",
      coverageData = { path: "/Users/gnidan/src/work/truffle/packages/truffle-debugger/lib/trace/sagas/index.js", statementMap: { "0": { start: { line: 3, column: 0 }, end: { line: 5, column: 3 } }, "1": { start: { line: 7, column: 11 }, end: { line: 7, column: 47 } }, "2": { start: { line: 9, column: 12 }, end: { line: 9, column: 40 } }, "3": { start: { line: 11, column: 0 }, end: { line: 11, column: 26 } }, "4": { start: { line: 12, column: 0 }, end: { line: 12, column: 20 } }, "5": { start: { line: 13, column: 0 }, end: { line: 13, column: 36 } }, "6": { start: { line: 14, column: 0 }, end: { line: 14, column: 20 } }, "7": { start: { line: 16, column: 13 }, end: { line: 16, column: 29 } }, "8": { start: { line: 18, column: 14 }, end: { line: 18, column: 44 } }, "9": { start: { line: 20, column: 15 }, end: { line: 20, column: 44 } }, "10": { start: { line: 22, column: 15 }, end: { line: 22, column: 37 } }, "11": { start: { line: 24, column: 15 }, end: { line: 24, column: 36 } }, "12": { start: { line: 26, column: 14 }, end: { line: 26, column: 47 } }, "13": { start: { line: 28, column: 17 }, end: { line: 28, column: 40 } }, "14": { start: { line: 30, column: 18 }, end: { line: 30, column: 52 } }, "15": { start: { line: 32, column: 40 }, end: { line: 32, column: 267 } }, "16": { start: { line: 32, column: 69 }, end: { line: 32, column: 80 } }, "17": { start: { line: 32, column: 103 }, end: { line: 32, column: 105 } }, "18": { start: { line: 32, column: 107 }, end: { line: 32, column: 228 } }, "19": { start: { line: 32, column: 126 }, end: { line: 32, column: 226 } }, "20": { start: { line: 32, column: 149 }, end: { line: 32, column: 224 } }, "21": { start: { line: 32, column: 201 }, end: { line: 32, column: 224 } }, "22": { start: { line: 32, column: 229 }, end: { line: 32, column: 250 } }, "23": { start: { line: 32, column: 251 }, end: { line: 32, column: 265 } }, "24": { start: { line: 34, column: 39 }, end: { line: 34, column: 93 } }, "25": { start: { line: 36, column: 14 }, end: { line: 36, column: 58 } }, "26": { start: { line: 39, column: 18 }, end: { line: 39, column: 62 } }, "27": { start: { line: 41, column: 18 }, end: { line: 41, column: 169 } }, "28": { start: { line: 41, column: 65 }, end: { line: 41, column: 101 } }, "29": { start: { line: 41, column: 122 }, end: { line: 41, column: 166 } }, "30": { start: { line: 43, column: 2 }, end: { line: 43, column: 63 } }, "31": { start: { line: 47, column: 2 }, end: { line: 47, column: 42 } }, "32": { start: { line: 49, column: 2 }, end: { line: 49, column: 41 } }, "33": { start: { line: 53, column: 18 }, end: { line: 53, column: 80 } }, "34": { start: { line: 54, column: 2 }, end: { line: 54, column: 36 } }, "35": { start: { line: 55, column: 14 }, end: { line: 55, column: 67 } }, "36": { start: { line: 56, column: 2 }, end: { line: 56, column: 41 } }, "37": { start: { line: 58, column: 2 }, end: { line: 65, column: 3 } }, "38": { start: { line: 59, column: 4 }, end: { line: 59, column: 26 } }, "39": { start: { line: 61, column: 4 }, end: { line: 61, column: 44 } }, "40": { start: { line: 62, column: 4 }, end: { line: 62, column: 22 } }, "41": { start: { line: 64, column: 4 }, end: { line: 64, column: 16 } }, "42": { start: { line: 67, column: 2 }, end: { line: 75, column: 3 } }, "43": { start: { line: 68, column: 4 }, end: { line: 68, column: 26 } }, "44": { start: { line: 70, column: 4 }, end: { line: 70, column: 44 } }, "45": { start: { line: 71, column: 4 }, end: { line: 71, column: 22 } }, "46": { start: { line: 74, column: 4 }, end: { line: 74, column: 48 } }, "47": { start: { line: 79, column: 2 }, end: { line: 79, column: 49 } }, "48": { start: { line: 83, column: 2 }, end: { line: 83, column: 52 } }, "49": { start: { line: 85, column: 22 }, end: { line: 85, column: 73 } }, "50": { start: { line: 86, column: 2 }, end: { line: 86, column: 30 } }, "51": { start: { line: 88, column: 2 }, end: { line: 88, column: 19 } }, "52": { start: { line: 93, column: 2 }, end: { line: 93, column: 24 } }, "53": { start: { line: 95, column: 2 }, end: { line: 95, column: 52 } }, "54": { start: { line: 98, column: 0 }, end: { line: 98, column: 58 } } }, fnMap: { "0": { name: "_interopRequireWildcard", decl: { start: { line: 32, column: 9 }, end: { line: 32, column: 32 } }, loc: { start: { line: 32, column: 38 }, end: { line: 32, column: 269 } }, line: 32 }, "1": { name: "_interopRequireDefault", decl: { start: { line: 34, column: 9 }, end: { line: 34, column: 31 } }, loc: { start: { line: 34, column: 37 }, end: { line: 34, column: 95 } }, line: 34 }, "2": { name: "waitForTrace", decl: { start: { line: 38, column: 10 }, end: { line: 38, column: 22 } }, loc: { start: { line: 38, column: 25 }, end: { line: 44, column: 1 } }, line: 38 }, "3": { name: "(anonymous_3)", decl: { start: { line: 41, column: 53 }, end: { line: 41, column: 54 } }, loc: { start: { line: 41, column: 65 }, end: { line: 41, column: 101 } }, line: 41 }, "4": { name: "(anonymous_4)", decl: { start: { line: 41, column: 107 }, end: { line: 41, column: 108 } }, loc: { start: { line: 41, column: 122 }, end: { line: 41, column: 166 } }, line: 41 }, "5": { name: "advance", decl: { start: { line: 46, column: 10 }, end: { line: 46, column: 17 } }, loc: { start: { line: 46, column: 20 }, end: { line: 50, column: 1 } }, line: 46 }, "6": { name: "next", decl: { start: { line: 52, column: 10 }, end: { line: 52, column: 14 } }, loc: { start: { line: 52, column: 17 }, end: { line: 76, column: 1 } }, line: 52 }, "7": { name: "wait", decl: { start: { line: 78, column: 10 }, end: { line: 78, column: 14 } }, loc: { start: { line: 78, column: 17 }, end: { line: 80, column: 1 } }, line: 78 }, "8": { name: "processTrace", decl: { start: { line: 82, column: 10 }, end: { line: 82, column: 22 } }, loc: { start: { line: 82, column: 30 }, end: { line: 89, column: 1 } }, line: 82 }, "9": { name: "saga", decl: { start: { line: 91, column: 10 }, end: { line: 91, column: 14 } }, loc: { start: { line: 91, column: 17 }, end: { line: 96, column: 1 } }, line: 91 } }, branchMap: { "0": { loc: { start: { line: 32, column: 40 }, end: { line: 32, column: 267 } }, type: "if", locations: [{ start: { line: 32, column: 40 }, end: { line: 32, column: 267 } }, { start: { line: 32, column: 40 }, end: { line: 32, column: 267 } }], line: 32 }, "1": { loc: { start: { line: 32, column: 44 }, end: { line: 32, column: 65 } }, type: "binary-expr", locations: [{ start: { line: 32, column: 44 }, end: { line: 32, column: 47 } }, { start: { line: 32, column: 51 }, end: { line: 32, column: 65 } }], line: 32 }, "2": { loc: { start: { line: 32, column: 107 }, end: { line: 32, column: 228 } }, type: "if", locations: [{ start: { line: 32, column: 107 }, end: { line: 32, column: 228 } }, { start: { line: 32, column: 107 }, end: { line: 32, column: 228 } }], line: 32 }, "3": { loc: { start: { line: 32, column: 149 }, end: { line: 32, column: 224 } }, type: "if", locations: [{ start: { line: 32, column: 149 }, end: { line: 32, column: 224 } }, { start: { line: 32, column: 149 }, end: { line: 32, column: 224 } }], line: 32 }, "4": { loc: { start: { line: 34, column: 46 }, end: { line: 34, column: 92 } }, type: "cond-expr", locations: [{ start: { line: 34, column: 70 }, end: { line: 34, column: 73 } }, { start: { line: 34, column: 76 }, end: { line: 34, column: 92 } }], line: 34 }, "5": { loc: { start: { line: 34, column: 46 }, end: { line: 34, column: 67 } }, type: "binary-expr", locations: [{ start: { line: 34, column: 46 }, end: { line: 34, column: 49 } }, { start: { line: 34, column: 53 }, end: { line: 34, column: 67 } }], line: 34 }, "6": { loc: { start: { line: 41, column: 65 }, end: { line: 41, column: 101 } }, type: "binary-expr", locations: [{ start: { line: 41, column: 65 }, end: { line: 41, column: 77 } }, { start: { line: 41, column: 81 }, end: { line: 41, column: 101 } }], line: 41 }, "7": { loc: { start: { line: 58, column: 2 }, end: { line: 65, column: 3 } }, type: "if", locations: [{ start: { line: 58, column: 2 }, end: { line: 65, column: 3 } }, { start: { line: 58, column: 2 }, end: { line: 65, column: 3 } }], line: 58 }, "8": { loc: { start: { line: 67, column: 2 }, end: { line: 75, column: 3 } }, type: "if", locations: [{ start: { line: 67, column: 2 }, end: { line: 75, column: 3 } }, { start: { line: 67, column: 2 }, end: { line: 75, column: 3 } }], line: 67 } }, s: { "0": 0, "1": 0, "2": 0, "3": 0, "4": 0, "5": 0, "6": 0, "7": 0, "8": 0, "9": 0, "10": 0, "11": 0, "12": 0, "13": 0, "14": 0, "15": 0, "16": 0, "17": 0, "18": 0, "19": 0, "20": 0, "21": 0, "22": 0, "23": 0, "24": 0, "25": 0, "26": 0, "27": 0, "28": 0, "29": 0, "30": 0, "31": 0, "32": 0, "33": 0, "34": 0, "35": 0, "36": 0, "37": 0, "38": 0, "39": 0, "40": 0, "41": 0, "42": 0, "43": 0, "44": 0, "45": 0, "46": 0, "47": 0, "48": 0, "49": 0, "50": 0, "51": 0, "52": 0, "53": 0, "54": 0 }, f: { "0": 0, "1": 0, "2": 0, "3": 0, "4": 0, "5": 0, "6": 0, "7": 0, "8": 0, "9": 0 }, b: { "0": [0, 0], "1": [0, 0], "2": [0, 0], "3": [0, 0], "4": [0, 0], "5": [0, 0], "6": [0, 0], "7": [0, 0], "8": [0, 0] }, inputSourceMap: { version: 3, sources: ["lib/trace/sagas/index.js"], names: ["advance", "wait", "processTrace", "saga", "actions", "debug", "waitForTrace", "steps", "SAVE_STEPS", "addresses", "filter", "op", "map", "stack", "length", "substring", "receiveAddresses", "next", "TOCK", "remaining", "trace", "stepsRemaining", "tick", "tock", "endTrace", "END_OF_TRACE", "saveSteps", "RECEIVE_ADDRESSES", "NEXT"], mappings: ";;;;;;;;;;QAwBiBA,O,GAAAA,O;QAiCAC,I,GAAAA,I;QAIAC,Y,GAAAA,Y;QASAC,I,GAAAA,I;;AAtEjB;;;;AAGA;;AACA;;AAEA;;IAAYC,O;;AAEZ;;;;;;;;AAPA,MAAMC,QAAQ,qBAAY,sBAAZ,CAAd;;AASA,UAAUC,YAAV,GAAyB;AACvB,MAAI,EAACC,KAAD,KAAU,MAAM,mBAAKH,QAAQI,UAAb,CAApB;;AAEA,MAAIC,YAAY,CACd,GAAG,kBACDF,MACGG,MADH,CACW,CAAC,EAACC,EAAD,EAAD,KAAUA,MAAM,MAAN,IAAgBA,MAAM,cAD3C,EAEGC,GAFH,CAEQ,CAAC,EAACC,KAAD,EAAD,KAAa,OAAOA,MAAMA,MAAMC,MAAN,GAAe,CAArB,EAAwBC,SAAxB,CAAkC,EAAlC,CAF5B,CADC,CADW,CAAhB;;AAQA,QAAM,kBAAIX,QAAQY,gBAAR,CAAyBP,SAAzB,CAAJ,CAAN;AACD;;AAEM,UAAUT,OAAV,GAAoB;AACzB,QAAM,kBAAII,QAAQa,IAAR,EAAJ,CAAN;;AAEA,QAAM,mBAAKb,QAAQc,IAAb,CAAN;AACD;;AAED,UAAUD,IAAV,GAAiB;AACf,MAAIE,YAAY,MAAM,qBAAOC,oBAAMC,cAAb,CAAtB;AACAhB,QAAM,eAAN,EAAuBc,SAAvB;AACA,MAAIZ,QAAQ,MAAM,qBAAOa,oBAAMb,KAAb,CAAlB;AACAF,QAAM,iBAAN,EAAyBE,MAAMO,MAA/B;;AAEA,MAAIK,YAAY,CAAhB,EAAmB;AACjBd,UAAM,cAAN;AACA;AACA,UAAM,kBAAID,QAAQkB,IAAR,EAAJ,CAAN;AACAjB,UAAM,UAAN;;AAEAc,gBANiB,CAMJ;AACd;;AAED,MAAIA,SAAJ,EAAe;AACbd,UAAM,cAAN;AACA;AACA,UAAM,kBAAID,QAAQmB,IAAR,EAAJ,CAAN;AACAlB,UAAM,UAAN;AAED,GAND,MAMO;;AAEL,UAAM,kBAAID,QAAQoB,QAAR,EAAJ,CAAN;AACD;AACF;;AAEM,UAAUvB,IAAV,GAAiB;AACtB,QAAM,mBAAKG,QAAQqB,YAAb,CAAN;AACD;;AAEM,UAAUvB,YAAV,CAAuBkB,KAAvB,EAA8B;AACnC,QAAM,kBAAIhB,QAAQsB,SAAR,CAAkBN,KAAlB,CAAJ,CAAN;;AAEA,MAAI,EAACX,SAAD,KAAc,MAAM,mBAAKL,QAAQuB,iBAAb,CAAxB;AACAtB,QAAM,oBAAN;;AAEA,SAAOI,SAAP;AACD;;AAEM,UAAUN,IAAV,GAAiB;AACtB;AACA,SAAOG,cAAP;;AAEA,QAAM,wBAAUF,QAAQwB,IAAlB,EAAwBX,IAAxB,CAAN;AACD;;kBAEc,yBAAW,OAAX,EAAoBd,IAApB,C", file: "index.js", sourceRoot: "/Users/gnidan/src/work/truffle/packages/truffle-debugger", sourcesContent: ["import debugModule from \"debug\";\nconst debug = debugModule(\"debugger:trace:sagas\");\n\nimport { take, takeEvery, put, select } from \"redux-saga/effects\";\nimport { prefixName } from \"lib/helpers\";\n\nimport * as actions from \"../actions\";\n\nimport trace from \"../selectors\";\n\nfunction *waitForTrace() {\n  let {steps} = yield take(actions.SAVE_STEPS);\n\n  let addresses = [\n    ...new Set(\n      steps\n        .filter( ({op}) => op == \"CALL\" || op == \"DELEGATECALL\" )\n        .map( ({stack}) => \"0x\" + stack[stack.length - 2].substring(24) )\n    )\n  ];\n\n  yield put(actions.receiveAddresses(addresses));\n}\n\nexport function *advance() {\n  yield put(actions.next());\n\n  yield take(actions.TOCK);\n}\n\nfunction* next() {\n  let remaining = yield select(trace.stepsRemaining);\n  debug(\"remaining: %o\", remaining);\n  let steps = yield select(trace.steps);\n  debug(\"total steps: %o\", steps.length);\n\n  if (remaining > 0) {\n    debug(\"putting TICK\");\n    // updates state for current step\n    yield put(actions.tick());\n    debug(\"put TICK\");\n\n    remaining--; // local update, just for convenience\n  }\n\n  if (remaining) {\n    debug(\"putting TOCK\");\n    // updates step to next step in trace\n    yield put(actions.tock());\n    debug(\"put TOCK\");\n\n  } else {\n\n    yield put(actions.endTrace());\n  }\n}\n\nexport function* wait() {\n  yield take(actions.END_OF_TRACE);\n}\n\nexport function *processTrace(trace) {\n  yield put(actions.saveSteps(trace));\n\n  let {addresses} = yield take(actions.RECEIVE_ADDRESSES);\n  debug(\"received addresses\");\n\n  return addresses;\n}\n\nexport function* saga() {\n  // wait for trace to be defined\n  yield *waitForTrace();\n\n  yield takeEvery(actions.NEXT, next);\n}\n\nexport default prefixName(\"trace\", saga);\n"] }, _coverageSchema: "332fd63041d2c1bcb487cc26dd0d5f7d97098a6c" },
      coverage = global[gcv] || (global[gcv] = {});if (coverage[path] && coverage[path].hash === hash) {
    return coverage[path];
  }coverageData.hash = hash;return coverage[path] = coverageData;
}();cov_1yv2hwn7tg.s[0]++;Object.defineProperty(exports, "__esModule", { value: true });var _set = (cov_1yv2hwn7tg.s[1]++, __webpack_require__(22));var _set2 = (cov_1yv2hwn7tg.s[2]++, _interopRequireDefault(_set));cov_1yv2hwn7tg.s[3]++;exports.advance = advance;cov_1yv2hwn7tg.s[4]++;exports.wait = wait;cov_1yv2hwn7tg.s[5]++;exports.processTrace = processTrace;cov_1yv2hwn7tg.s[6]++;exports.saga = saga;var _debug = (cov_1yv2hwn7tg.s[7]++, __webpack_require__(0));var _debug2 = (cov_1yv2hwn7tg.s[8]++, _interopRequireDefault(_debug));var _effects = (cov_1yv2hwn7tg.s[9]++, __webpack_require__(10));var _helpers = (cov_1yv2hwn7tg.s[10]++, __webpack_require__(4));var _actions = (cov_1yv2hwn7tg.s[11]++, __webpack_require__(21));var actions = (cov_1yv2hwn7tg.s[12]++, _interopRequireWildcard(_actions));var _selectors = (cov_1yv2hwn7tg.s[13]++, __webpack_require__(19));var _selectors2 = (cov_1yv2hwn7tg.s[14]++, _interopRequireDefault(_selectors));function _interopRequireWildcard(obj) {
  cov_1yv2hwn7tg.f[0]++;cov_1yv2hwn7tg.s[15]++;if ((cov_1yv2hwn7tg.b[1][0]++, obj) && (cov_1yv2hwn7tg.b[1][1]++, obj.__esModule)) {
    cov_1yv2hwn7tg.b[0][0]++;cov_1yv2hwn7tg.s[16]++;return obj;
  } else {
    cov_1yv2hwn7tg.b[0][1]++;var newObj = (cov_1yv2hwn7tg.s[17]++, {});cov_1yv2hwn7tg.s[18]++;if (obj != null) {
      cov_1yv2hwn7tg.b[2][0]++;cov_1yv2hwn7tg.s[19]++;for (var key in obj) {
        cov_1yv2hwn7tg.s[20]++;if (Object.prototype.hasOwnProperty.call(obj, key)) {
          cov_1yv2hwn7tg.b[3][0]++;cov_1yv2hwn7tg.s[21]++;newObj[key] = obj[key];
        } else {
          cov_1yv2hwn7tg.b[3][1]++;
        }
      }
    } else {
      cov_1yv2hwn7tg.b[2][1]++;
    }cov_1yv2hwn7tg.s[22]++;newObj.default = obj;cov_1yv2hwn7tg.s[23]++;return newObj;
  }
}function _interopRequireDefault(obj) {
  cov_1yv2hwn7tg.f[1]++;cov_1yv2hwn7tg.s[24]++;return (cov_1yv2hwn7tg.b[5][0]++, obj) && (cov_1yv2hwn7tg.b[5][1]++, obj.__esModule) ? (cov_1yv2hwn7tg.b[4][0]++, obj) : (cov_1yv2hwn7tg.b[4][1]++, { default: obj });
}const debug = (cov_1yv2hwn7tg.s[25]++, (0, _debug2.default)("debugger:trace:sagas"));function* waitForTrace() {
  cov_1yv2hwn7tg.f[2]++;let { steps } = (cov_1yv2hwn7tg.s[26]++, yield (0, _effects.take)(actions.SAVE_STEPS));let addresses = (cov_1yv2hwn7tg.s[27]++, [...new _set2.default(steps.filter(({ op }) => {
    cov_1yv2hwn7tg.f[3]++;cov_1yv2hwn7tg.s[28]++;return (cov_1yv2hwn7tg.b[6][0]++, op == "CALL") || (cov_1yv2hwn7tg.b[6][1]++, op == "DELEGATECALL");
  }).map(({ stack }) => {
    cov_1yv2hwn7tg.f[4]++;cov_1yv2hwn7tg.s[29]++;return "0x" + stack[stack.length - 2].substring(24);
  }))]);cov_1yv2hwn7tg.s[30]++;yield (0, _effects.put)(actions.receiveAddresses(addresses));
}function* advance() {
  cov_1yv2hwn7tg.f[5]++;cov_1yv2hwn7tg.s[31]++;yield (0, _effects.put)(actions.next());cov_1yv2hwn7tg.s[32]++;yield (0, _effects.take)(actions.TOCK);
}function* next() {
  cov_1yv2hwn7tg.f[6]++;let remaining = (cov_1yv2hwn7tg.s[33]++, yield (0, _effects.select)(_selectors2.default.stepsRemaining));cov_1yv2hwn7tg.s[34]++;debug("remaining: %o", remaining);let steps = (cov_1yv2hwn7tg.s[35]++, yield (0, _effects.select)(_selectors2.default.steps));cov_1yv2hwn7tg.s[36]++;debug("total steps: %o", steps.length);cov_1yv2hwn7tg.s[37]++;if (remaining > 0) {
    cov_1yv2hwn7tg.b[7][0]++;cov_1yv2hwn7tg.s[38]++;debug("putting TICK");cov_1yv2hwn7tg.s[39]++;yield (0, _effects.put)(actions.tick());cov_1yv2hwn7tg.s[40]++;debug("put TICK");cov_1yv2hwn7tg.s[41]++;remaining--;
  } else {
    cov_1yv2hwn7tg.b[7][1]++;
  }cov_1yv2hwn7tg.s[42]++;if (remaining) {
    cov_1yv2hwn7tg.b[8][0]++;cov_1yv2hwn7tg.s[43]++;debug("putting TOCK");cov_1yv2hwn7tg.s[44]++;yield (0, _effects.put)(actions.tock());cov_1yv2hwn7tg.s[45]++;debug("put TOCK");
  } else {
    cov_1yv2hwn7tg.b[8][1]++;cov_1yv2hwn7tg.s[46]++;yield (0, _effects.put)(actions.endTrace());
  }
}function* wait() {
  cov_1yv2hwn7tg.f[7]++;cov_1yv2hwn7tg.s[47]++;yield (0, _effects.take)(actions.END_OF_TRACE);
}function* processTrace(trace) {
  cov_1yv2hwn7tg.f[8]++;cov_1yv2hwn7tg.s[48]++;yield (0, _effects.put)(actions.saveSteps(trace));let { addresses } = (cov_1yv2hwn7tg.s[49]++, yield (0, _effects.take)(actions.RECEIVE_ADDRESSES));cov_1yv2hwn7tg.s[50]++;debug("received addresses");cov_1yv2hwn7tg.s[51]++;return addresses;
}function* saga() {
  cov_1yv2hwn7tg.f[9]++;cov_1yv2hwn7tg.s[52]++;yield* waitForTrace();cov_1yv2hwn7tg.s[53]++;yield (0, _effects.takeEvery)(actions.NEXT, next);
}cov_1yv2hwn7tg.s[54]++;exports.default = (0, _helpers.prefixName)("trace", saga);

/***/ }),
/* 34 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var cov_1dtgz8qh4v = function () {
  var path = "/Users/gnidan/src/work/truffle/packages/truffle-debugger/lib/solidity/actions/index.js",
      hash = "3654c31d2b490e313817286884233ea261ca1344",
      Function = function () {}.constructor,
      global = new Function('return this')(),
      gcv = "__coverage__",
      coverageData = { path: "/Users/gnidan/src/work/truffle/packages/truffle-debugger/lib/solidity/actions/index.js", statementMap: { "0": { start: { line: 3, column: 0 }, end: { line: 5, column: 3 } }, "1": { start: { line: 6, column: 0 }, end: { line: 6, column: 30 } }, "2": { start: { line: 7, column: 0 }, end: { line: 7, column: 36 } }, "3": { start: { line: 8, column: 0 }, end: { line: 8, column: 20 } }, "4": { start: { line: 9, column: 19 }, end: { line: 9, column: 61 } }, "5": { start: { line: 11, column: 2 }, end: { line: 14, column: 4 } }, "6": { start: { line: 17, column: 22 }, end: { line: 17, column: 70 } }, "7": { start: { line: 19, column: 2 }, end: { line: 22, column: 4 } }, "8": { start: { line: 25, column: 13 }, end: { line: 25, column: 34 } }, "9": { start: { line: 27, column: 2 }, end: { line: 30, column: 4 } } }, fnMap: { "0": { name: "addSource", decl: { start: { line: 10, column: 9 }, end: { line: 10, column: 18 } }, loc: { start: { line: 10, column: 44 }, end: { line: 15, column: 1 } }, line: 10 }, "1": { name: "addSourceMap", decl: { start: { line: 18, column: 9 }, end: { line: 18, column: 21 } }, loc: { start: { line: 18, column: 41 }, end: { line: 23, column: 1 } }, line: 18 }, "2": { name: "jump", decl: { start: { line: 26, column: 9 }, end: { line: 26, column: 13 } }, loc: { start: { line: 26, column: 29 }, end: { line: 31, column: 1 } }, line: 26 } }, branchMap: {}, s: { "0": 0, "1": 0, "2": 0, "3": 0, "4": 0, "5": 0, "6": 0, "7": 0, "8": 0, "9": 0 }, f: { "0": 0, "1": 0, "2": 0 }, b: {}, inputSourceMap: { version: 3, sources: ["lib/solidity/actions/index.js"], names: ["addSource", "addSourceMap", "jump", "ADD_SOURCE", "source", "sourcePath", "ast", "type", "ADD_SOURCEMAP", "binary", "sourceMap", "JUMP", "jumpDirection"], mappings: ";;;;;QACgBA,S,GAAAA,S;QAQAC,Y,GAAAA,Y;QASAC,I,GAAAA,I;AAlBT,MAAMC,kCAAa,qBAAnB;AACA,SAASH,SAAT,CAAmBI,MAAnB,EAA2BC,UAA3B,EAAuCC,GAAvC,EAA4C;AACjD,SAAO;AACLC,UAAMJ,UADD;AAELC,UAFK,EAEGC,UAFH,EAEeC;AAFf,GAAP;AAID;;AAEM,MAAME,wCAAgB,wBAAtB;AACA,SAASP,YAAT,CAAsBQ,MAAtB,EAA8BC,SAA9B,EAAyC;AAC9C,SAAO;AACLH,UAAMC,aADD;AAELC,UAFK,EAEGC;AAFH,GAAP;AAID;;AAGM,MAAMC,sBAAO,MAAb;AACA,SAAST,IAAT,CAAcU,aAAd,EAA6B;AAClC,SAAO;AACLL,UAAMI,IADD;AAELC;AAFK,GAAP;AAID", file: "index.js", sourceRoot: "/Users/gnidan/src/work/truffle/packages/truffle-debugger", sourcesContent: ["export const ADD_SOURCE = \"SOLIDITY_ADD_SOURCE\";\nexport function addSource(source, sourcePath, ast) {\n  return {\n    type: ADD_SOURCE,\n    source, sourcePath, ast\n  };\n}\n\nexport const ADD_SOURCEMAP = \"SOLIDITY_ADD_SOURCEMAP\";\nexport function addSourceMap(binary, sourceMap) {\n  return {\n    type: ADD_SOURCEMAP,\n    binary, sourceMap\n  };\n}\n\n\nexport const JUMP = \"JUMP\";\nexport function jump(jumpDirection) {\n  return {\n    type: JUMP,\n    jumpDirection\n  };\n}\n"] }, _coverageSchema: "332fd63041d2c1bcb487cc26dd0d5f7d97098a6c" },
      coverage = global[gcv] || (global[gcv] = {});if (coverage[path] && coverage[path].hash === hash) {
    return coverage[path];
  }coverageData.hash = hash;return coverage[path] = coverageData;
}();cov_1dtgz8qh4v.s[0]++;Object.defineProperty(exports, "__esModule", { value: true });cov_1dtgz8qh4v.s[1]++;exports.addSource = addSource;cov_1dtgz8qh4v.s[2]++;exports.addSourceMap = addSourceMap;cov_1dtgz8qh4v.s[3]++;exports.jump = jump;const ADD_SOURCE = (cov_1dtgz8qh4v.s[4]++, exports.ADD_SOURCE = "SOLIDITY_ADD_SOURCE");function addSource(source, sourcePath, ast) {
  cov_1dtgz8qh4v.f[0]++;cov_1dtgz8qh4v.s[5]++;return { type: ADD_SOURCE, source, sourcePath, ast };
}const ADD_SOURCEMAP = (cov_1dtgz8qh4v.s[6]++, exports.ADD_SOURCEMAP = "SOLIDITY_ADD_SOURCEMAP");function addSourceMap(binary, sourceMap) {
  cov_1dtgz8qh4v.f[1]++;cov_1dtgz8qh4v.s[7]++;return { type: ADD_SOURCEMAP, binary, sourceMap };
}const JUMP = (cov_1dtgz8qh4v.s[8]++, exports.JUMP = "JUMP");function jump(jumpDirection) {
  cov_1dtgz8qh4v.f[2]++;cov_1dtgz8qh4v.s[9]++;return { type: JUMP, jumpDirection };
}

/***/ }),
/* 35 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var cov_2sixj2yze = function () {
  var path = "/Users/gnidan/src/work/truffle/packages/truffle-debugger/lib/evm/actions/index.js",
      hash = "b70721a10b1eeb1303330fc1e9777e0d6c6e6811",
      Function = function () {}.constructor,
      global = new Function('return this')(),
      gcv = "__coverage__",
      coverageData = { path: "/Users/gnidan/src/work/truffle/packages/truffle-debugger/lib/evm/actions/index.js", statementMap: { "0": { start: { line: 3, column: 0 }, end: { line: 5, column: 3 } }, "1": { start: { line: 6, column: 0 }, end: { line: 6, column: 32 } }, "2": { start: { line: 7, column: 0 }, end: { line: 7, column: 34 } }, "3": { start: { line: 8, column: 0 }, end: { line: 8, column: 20 } }, "4": { start: { line: 9, column: 0 }, end: { line: 9, column: 24 } }, "5": { start: { line: 10, column: 0 }, end: { line: 10, column: 32 } }, "6": { start: { line: 11, column: 20 }, end: { line: 11, column: 59 } }, "7": { start: { line: 13, column: 2 }, end: { line: 16, column: 4 } }, "8": { start: { line: 19, column: 21 }, end: { line: 19, column: 62 } }, "9": { start: { line: 21, column: 2 }, end: { line: 24, column: 4 } }, "10": { start: { line: 27, column: 13 }, end: { line: 27, column: 34 } }, "11": { start: { line: 29, column: 2 }, end: { line: 32, column: 4 } }, "12": { start: { line: 35, column: 15 }, end: { line: 35, column: 40 } }, "13": { start: { line: 37, column: 2 }, end: { line: 40, column: 4 } }, "14": { start: { line: 43, column: 15 }, end: { line: 43, column: 40 } }, "15": { start: { line: 45, column: 2 }, end: { line: 47, column: 4 } } }, fnMap: { "0": { name: "addContext", decl: { start: { line: 12, column: 9 }, end: { line: 12, column: 19 } }, loc: { start: { line: 12, column: 42 }, end: { line: 17, column: 1 } }, line: 12 }, "1": { name: "addInstance", decl: { start: { line: 20, column: 9 }, end: { line: 20, column: 20 } }, loc: { start: { line: 20, column: 47 }, end: { line: 25, column: 1 } }, line: 20 }, "2": { name: "call", decl: { start: { line: 28, column: 9 }, end: { line: 28, column: 13 } }, loc: { start: { line: 28, column: 23 }, end: { line: 33, column: 1 } }, line: 28 }, "3": { name: "create", decl: { start: { line: 36, column: 9 }, end: { line: 36, column: 15 } }, loc: { start: { line: 36, column: 24 }, end: { line: 41, column: 1 } }, line: 36 }, "4": { name: "returnCall", decl: { start: { line: 44, column: 9 }, end: { line: 44, column: 19 } }, loc: { start: { line: 44, column: 22 }, end: { line: 48, column: 1 } }, line: 44 } }, branchMap: {}, s: { "0": 0, "1": 0, "2": 0, "3": 0, "4": 0, "5": 0, "6": 0, "7": 0, "8": 0, "9": 0, "10": 0, "11": 0, "12": 0, "13": 0, "14": 0, "15": 0 }, f: { "0": 0, "1": 0, "2": 0, "3": 0, "4": 0 }, b: {}, inputSourceMap: { version: 3, sources: ["lib/evm/actions/index.js"], names: ["addContext", "addInstance", "call", "create", "returnCall", "ADD_CONTEXT", "contractName", "binary", "type", "ADD_INSTANCE", "address", "context", "CALL", "CREATE", "RETURN"], mappings: ";;;;;QACgBA,U,GAAAA,U;QAQAC,W,GAAAA,W;QAQAC,I,GAAAA,I;QAQAC,M,GAAAA,M;QAQAC,U,GAAAA,U;AAjCT,MAAMC,oCAAc,iBAApB;AACA,SAASL,UAAT,CAAoBM,YAApB,EAAkCC,MAAlC,EAA0C;AAC/C,SAAO;AACLC,UAAMH,WADD;AAELC,gBAFK,EAESC;AAFT,GAAP;AAID;;AAEM,MAAME,sCAAe,kBAArB;AACA,SAASR,WAAT,CAAqBS,OAArB,EAA8BC,OAA9B,EAAuCJ,MAAvC,EAA+C;AACpD,SAAO;AACLC,UAAMC,YADD;AAELC,WAFK,EAEIC,OAFJ,EAEaJ;AAFb,GAAP;AAID;;AAEM,MAAMK,sBAAO,MAAb;AACA,SAASV,IAAT,CAAcQ,OAAd,EAAuB;AAC5B,SAAO;AACLF,UAAMI,IADD;AAELF;AAFK,GAAP;AAID;;AAEM,MAAMG,0BAAS,QAAf;AACA,SAASV,MAAT,CAAgBI,MAAhB,EAAwB;AAC7B,SAAO;AACLC,UAAMK,MADD;AAELN;AAFK,GAAP;AAID;;AAEM,MAAMO,0BAAS,QAAf;AACA,SAASV,UAAT,GAAsB;AAC3B,SAAO;AACLI,UAAMM;AADD,GAAP;AAGD", file: "index.js", sourceRoot: "/Users/gnidan/src/work/truffle/packages/truffle-debugger", sourcesContent: ["export const ADD_CONTEXT = \"EVM_ADD_CONTEXT\";\nexport function addContext(contractName, binary) {\n  return {\n    type: ADD_CONTEXT,\n    contractName, binary\n  }\n}\n\nexport const ADD_INSTANCE = \"EVM_ADD_INSTANCE\";\nexport function addInstance(address, context, binary) {\n  return {\n    type: ADD_INSTANCE,\n    address, context, binary\n  }\n}\n\nexport const CALL = \"CALL\";\nexport function call(address) {\n  return {\n    type: CALL,\n    address\n  };\n}\n\nexport const CREATE = \"CREATE\";\nexport function create(binary) {\n  return {\n    type: CREATE,\n    binary\n  };\n}\n\nexport const RETURN = \"RETURN\";\nexport function returnCall() {\n  return {\n    type: RETURN\n  }\n}\n"] }, _coverageSchema: "332fd63041d2c1bcb487cc26dd0d5f7d97098a6c" },
      coverage = global[gcv] || (global[gcv] = {});if (coverage[path] && coverage[path].hash === hash) {
    return coverage[path];
  }coverageData.hash = hash;return coverage[path] = coverageData;
}();cov_2sixj2yze.s[0]++;Object.defineProperty(exports, "__esModule", { value: true });cov_2sixj2yze.s[1]++;exports.addContext = addContext;cov_2sixj2yze.s[2]++;exports.addInstance = addInstance;cov_2sixj2yze.s[3]++;exports.call = call;cov_2sixj2yze.s[4]++;exports.create = create;cov_2sixj2yze.s[5]++;exports.returnCall = returnCall;const ADD_CONTEXT = (cov_2sixj2yze.s[6]++, exports.ADD_CONTEXT = "EVM_ADD_CONTEXT");function addContext(contractName, binary) {
  cov_2sixj2yze.f[0]++;cov_2sixj2yze.s[7]++;return { type: ADD_CONTEXT, contractName, binary };
}const ADD_INSTANCE = (cov_2sixj2yze.s[8]++, exports.ADD_INSTANCE = "EVM_ADD_INSTANCE");function addInstance(address, context, binary) {
  cov_2sixj2yze.f[1]++;cov_2sixj2yze.s[9]++;return { type: ADD_INSTANCE, address, context, binary };
}const CALL = (cov_2sixj2yze.s[10]++, exports.CALL = "CALL");function call(address) {
  cov_2sixj2yze.f[2]++;cov_2sixj2yze.s[11]++;return { type: CALL, address };
}const CREATE = (cov_2sixj2yze.s[12]++, exports.CREATE = "CREATE");function create(binary) {
  cov_2sixj2yze.f[3]++;cov_2sixj2yze.s[13]++;return { type: CREATE, binary };
}const RETURN = (cov_2sixj2yze.s[14]++, exports.RETURN = "RETURN");function returnCall() {
  cov_2sixj2yze.f[4]++;cov_2sixj2yze.s[15]++;return { type: RETURN };
}

/***/ }),
/* 36 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var cov_1h116yd0jo = function () {
  var path = "/Users/gnidan/src/work/truffle/packages/truffle-debugger/lib/session/selectors/index.js",
      hash = "93e1661fe5604948e579e53c0781a1bde46417ae",
      Function = function () {}.constructor,
      global = new Function('return this')(),
      gcv = "__coverage__",
      coverageData = { path: "/Users/gnidan/src/work/truffle/packages/truffle-debugger/lib/session/selectors/index.js", statementMap: { "0": { start: { line: 3, column: 0 }, end: { line: 5, column: 3 } }, "1": { start: { line: 7, column: 15 }, end: { line: 7, column: 62 } }, "2": { start: { line: 9, column: 16 }, end: { line: 9, column: 48 } }, "3": { start: { line: 11, column: 14 }, end: { line: 11, column: 60 } }, "4": { start: { line: 13, column: 15 }, end: { line: 13, column: 46 } }, "5": { start: { line: 15, column: 13 }, end: { line: 15, column: 29 } }, "6": { start: { line: 17, column: 14 }, end: { line: 17, column: 44 } }, "7": { start: { line: 19, column: 20 }, end: { line: 19, column: 44 } }, "8": { start: { line: 21, column: 17 }, end: { line: 21, column: 45 } }, "9": { start: { line: 23, column: 18 }, end: { line: 23, column: 52 } }, "10": { start: { line: 25, column: 18 }, end: { line: 25, column: 51 } }, "11": { start: { line: 27, column: 18 }, end: { line: 27, column: 53 } }, "12": { start: { line: 29, column: 39 }, end: { line: 29, column: 93 } }, "13": { start: { line: 31, column: 14 }, end: { line: 31, column: 64 } }, "14": { start: { line: 33, column: 16 }, end: { line: 57, column: 2 } }, "15": { start: { line: 42, column: 243 }, end: { line: 55, column: 7 } }, "16": { start: { line: 43, column: 37 }, end: { line: 43, column: 54 } }, "17": { start: { line: 44, column: 26 }, end: { line: 44, column: 45 } }, "18": { start: { line: 46, column: 23 }, end: { line: 48, column: 63 } }, "19": { start: { line: 50, column: 6 }, end: { line: 54, column: 8 } }, "20": { start: { line: 59, column: 0 }, end: { line: 59, column: 26 } } }, fnMap: { "0": { name: "_interopRequireDefault", decl: { start: { line: 29, column: 9 }, end: { line: 29, column: 31 } }, loc: { start: { line: 29, column: 37 }, end: { line: 29, column: 95 } }, line: 29 }, "1": { name: "(anonymous_1)", decl: { start: { line: 42, column: 197 }, end: { line: 42, column: 198 } }, loc: { start: { line: 42, column: 243 }, end: { line: 55, column: 7 } }, line: 42 }, "2": { name: "(anonymous_2)", decl: { start: { line: 42, column: 310 }, end: { line: 42, column: 311 } }, loc: { start: { line: 42, column: 338 }, end: { line: 55, column: 5 } }, line: 42 } }, branchMap: { "0": { loc: { start: { line: 29, column: 46 }, end: { line: 29, column: 92 } }, type: "cond-expr", locations: [{ start: { line: 29, column: 70 }, end: { line: 29, column: 73 } }, { start: { line: 29, column: 76 }, end: { line: 29, column: 92 } }], line: 29 }, "1": { loc: { start: { line: 29, column: 46 }, end: { line: 29, column: 67 } }, type: "binary-expr", locations: [{ start: { line: 29, column: 46 }, end: { line: 29, column: 49 } }, { start: { line: 29, column: 53 }, end: { line: 29, column: 67 } }], line: 29 }, "2": { loc: { start: { line: 46, column: 23 }, end: { line: 48, column: 63 } }, type: "cond-expr", locations: [{ start: { line: 48, column: 6 }, end: { line: 48, column: 58 } }, { start: { line: 48, column: 61 }, end: { line: 48, column: 63 } }], line: 46 } }, s: { "0": 0, "1": 0, "2": 0, "3": 0, "4": 0, "5": 0, "6": 0, "7": 0, "8": 0, "9": 0, "10": 0, "11": 0, "12": 0, "13": 0, "14": 0, "15": 0, "16": 0, "17": 0, "18": 0, "19": 0, "20": 0 }, f: { "0": 0, "1": 0, "2": 0 }, b: { "0": [0, 0], "1": [0, 0], "2": [0, 0] }, inputSourceMap: { version: 3, sources: ["lib/session/selectors/index.js"], names: ["debug", "session", "info", "affectedInstances", "evm", "instances", "contexts", "solidity", "sources", "sourceMaps", "map", "address", "context", "contractName", "binary", "sourceMap", "source", "match"], mappings: ";;;;;;;;;;;;;;AAAA;;;;AAGA;;AAEA;;;;AACA;;;;;;AALA,MAAMA,QAAQ,qBAAY,4BAAZ,CAAd;;AAOA,MAAMC,UAAU,sCAAmB;AACjC;;;AAGAC,QAAM;;AAEJ;;;AAGAC,uBAAmB,8BACjB,CAACC,oBAAIF,IAAJ,CAASG,SAAV,EAAqBD,oBAAIF,IAAJ,CAASI,QAA9B,EAAwCC,oBAASL,IAAT,CAAcM,OAAtD,EAA+DD,oBAASL,IAAT,CAAcO,UAA7E,CADiB,EAGjB,CAACJ,SAAD,EAAYC,QAAZ,EAAsBE,OAAtB,EAA+BC,UAA/B,KAA8C,sBAAc,EAAd,EAC5C,GAAG,uBAAeJ,SAAf,EAA0BK,GAA1B,CACD,CAAC,CAACC,OAAD,EAAU,EAACC,OAAD,EAAV,CAAD,KAA0B;AACxB,UAAI,EAAEC,YAAF,EAAgBC,MAAhB,KAA2BR,SAASM,OAAT,CAA/B;AACA,UAAI,EAAEG,SAAF,KAAgBN,WAAWG,OAAX,CAApB;;AAEA,UAAI,EAAEI,MAAF,KAAaD;AACf;AACAP,cAAQO,UAAUE,KAAV,CAAgB,uBAAhB,EAAyC,CAAzC,CAAR,CAFe,GAGf,EAHF;;AAKA,aAAO;AACL,SAACN,OAAD,GAAW;AACTE,sBADS,EACKG,MADL,EACaF;AADb;AADN,OAAP;AAKD,KAfA,CADyC,CAH7B;AALf;AAJ2B,CAAnB,CAAhB;;kBAmCeb,O", file: "index.js", sourceRoot: "/Users/gnidan/src/work/truffle/packages/truffle-debugger", sourcesContent: ["import debugModule from \"debug\";\nconst debug = debugModule(\"debugger:session:selectors\");\n\nimport { createSelectorTree, createLeaf } from \"reselect-tree\";\n\nimport evm from \"lib/evm/selectors\";\nimport solidity from \"lib/solidity/selectors\";\n\nconst session = createSelectorTree({\n  /**\n   * session.info\n   */\n  info: {\n\n    /**\n     * session.info.affectedInstances\n     */\n    affectedInstances: createLeaf(\n      [evm.info.instances, evm.info.contexts, solidity.info.sources, solidity.info.sourceMaps],\n\n      (instances, contexts, sources, sourceMaps) => Object.assign({},\n        ...Object.entries(instances).map(\n          ([address, {context}]) => {\n            let { contractName, binary } = contexts[context];\n            let { sourceMap } = sourceMaps[context];\n\n            let { source } = sourceMap ?\n              // look for source ID between second and third colons (HACK)\n              sources[sourceMap.match(/^[^:]+:[^:]+:([^:]+):/)[1]] :\n              {};\n\n            return {\n              [address]: {\n                contractName, source, binary\n              }\n            };\n          }\n        )\n      )\n    )\n  }\n});\n\nexport default session;\n"] }, _coverageSchema: "332fd63041d2c1bcb487cc26dd0d5f7d97098a6c" },
      coverage = global[gcv] || (global[gcv] = {});if (coverage[path] && coverage[path].hash === hash) {
    return coverage[path];
  }coverageData.hash = hash;return coverage[path] = coverageData;
}();cov_1h116yd0jo.s[0]++;Object.defineProperty(exports, "__esModule", { value: true });var _entries = (cov_1h116yd0jo.s[1]++, __webpack_require__(1));var _entries2 = (cov_1h116yd0jo.s[2]++, _interopRequireDefault(_entries));var _assign = (cov_1h116yd0jo.s[3]++, __webpack_require__(3));var _assign2 = (cov_1h116yd0jo.s[4]++, _interopRequireDefault(_assign));var _debug = (cov_1h116yd0jo.s[5]++, __webpack_require__(0));var _debug2 = (cov_1h116yd0jo.s[6]++, _interopRequireDefault(_debug));var _reselectTree = (cov_1h116yd0jo.s[7]++, __webpack_require__(9));var _selectors = (cov_1h116yd0jo.s[8]++, __webpack_require__(5));var _selectors2 = (cov_1h116yd0jo.s[9]++, _interopRequireDefault(_selectors));var _selectors3 = (cov_1h116yd0jo.s[10]++, __webpack_require__(6));var _selectors4 = (cov_1h116yd0jo.s[11]++, _interopRequireDefault(_selectors3));function _interopRequireDefault(obj) {
  cov_1h116yd0jo.f[0]++;cov_1h116yd0jo.s[12]++;return (cov_1h116yd0jo.b[1][0]++, obj) && (cov_1h116yd0jo.b[1][1]++, obj.__esModule) ? (cov_1h116yd0jo.b[0][0]++, obj) : (cov_1h116yd0jo.b[0][1]++, { default: obj });
}const debug = (cov_1h116yd0jo.s[13]++, (0, _debug2.default)("debugger:session:selectors"));const session = (cov_1h116yd0jo.s[14]++, (0, _reselectTree.createSelectorTree)({ info: { affectedInstances: (0, _reselectTree.createLeaf)([_selectors2.default.info.instances, _selectors2.default.info.contexts, _selectors4.default.info.sources, _selectors4.default.info.sourceMaps], (instances, contexts, sources, sourceMaps) => {
      cov_1h116yd0jo.f[1]++;cov_1h116yd0jo.s[15]++;return (0, _assign2.default)({}, ...(0, _entries2.default)(instances).map(([address, { context }]) => {
        cov_1h116yd0jo.f[2]++;let { contractName, binary } = (cov_1h116yd0jo.s[16]++, contexts[context]);let { sourceMap } = (cov_1h116yd0jo.s[17]++, sourceMaps[context]);let { source } = (cov_1h116yd0jo.s[18]++, sourceMap ? (cov_1h116yd0jo.b[2][0]++, sources[sourceMap.match(/^[^:]+:[^:]+:([^:]+):/)[1]]) : (cov_1h116yd0jo.b[2][1]++, {}));cov_1h116yd0jo.s[19]++;return { [address]: { contractName, source, binary } };
      }));
    }) } }));cov_1h116yd0jo.s[20]++;exports.default = session;

/***/ }),
/* 37 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var cov_9nskhqnbe=function(){var path="/Users/gnidan/src/work/truffle/packages/truffle-debugger/test/data/decode/helpers.js",hash="07c420c57810407aa568965137e1935f18fb67de",Function=function(){}.constructor,global=new Function('return this')(),gcv="__coverage__",coverageData={path:"/Users/gnidan/src/work/truffle/packages/truffle-debugger/test/data/decode/helpers.js",statementMap:{"0":{start:{line:3,column:0},end:{line:5,column:3}},"1":{start:{line:7,column:14},end:{line:7,column:60}},"2":{start:{line:9,column:15},end:{line:9,column:46}},"3":{start:{line:11,column:25},end:{line:11,column:74}},"4":{start:{line:13,column:25},end:{line:13,column:67}},"5":{start:{line:15,column:22},end:{line:43,column:4}},"6":{start:{line:16,column:14},end:{line:38,column:4}},"7":{start:{line:17,column:21},end:{line:17,column:91}},"8":{start:{line:18,column:17},end:{line:18,column:44}},"9":{start:{line:20,column:56},end:{line:20,column:111}},"10":{start:{line:22,column:19},end:{line:22,column:72}},"11":{start:{line:23,column:18},end:{line:23,column:38}},"12":{start:{line:24,column:17},end:{line:24,column:27}},"13":{start:{line:26,column:17},end:{line:26,column:87}},"14":{start:{line:28,column:18},end:{line:28,column:34}},"15":{start:{line:30,column:21},end:{line:33,column:5}},"16":{start:{line:35,column:4},end:{line:35,column:38}},"17":{start:{line:37,column:4},end:{line:37,column:19}},"18":{start:{line:40,column:2},end:{line:42,column:4}},"19":{start:{line:41,column:4},end:{line:41,column:40}},"20":{start:{line:45,column:16},end:{line:59,column:4}},"21":{start:{line:46,column:14},end:{line:54,column:4}},"22":{start:{line:47,column:24},end:{line:47,column:89}},"23":{start:{line:48,column:17},end:{line:48,column:75}},"24":{start:{line:50,column:19},end:{line:50,column:66}},"25":{start:{line:51,column:4},end:{line:53,column:6}},"26":{start:{line:52,column:6},end:{line:52,column:80}},"27":{start:{line:56,column:2},end:{line:58,column:4}},"28":{start:{line:57,column:4},end:{line:57,column:40}},"29":{start:{line:61,column:0},end:{line:61,column:38}},"30":{start:{line:62,column:0},end:{line:62,column:44}},"31":{start:{line:64,column:13},end:{line:64,column:29}},"32":{start:{line:66,column:14},end:{line:66,column:44}},"33":{start:{line:68,column:18},end:{line:68,column:40}},"34":{start:{line:70,column:19},end:{line:70,column:54}},"35":{start:{line:72,column:11},end:{line:72,column:26}},"36":{start:{line:74,column:12},end:{line:74,column:40}},"37":{start:{line:76,column:12},end:{line:76,column:27}},"38":{start:{line:78,column:18},end:{line:78,column:40}},"39":{start:{line:80,column:19},end:{line:80,column:54}},"40":{start:{line:82,column:15},end:{line:82,column:38}},"41":{start:{line:84,column:16},end:{line:84,column:39}},"42":{start:{line:86,column:17},end:{line:86,column:50}},"43":{start:{line:88,column:13},end:{line:88,column:45}},"44":{start:{line:90,column:17},end:{line:90,column:46}},"45":{start:{line:92,column:18},end:{line:92,column:52}},"46":{start:{line:94,column:39},end:{line:94,column:93}},"47":{start:{line:96,column:14},end:{line:96,column:54}},"48":{start:{line:99,column:10},end:{line:99,column:11}},"49":{start:{line:100,column:2},end:{line:103,column:3}},"50":{start:{line:101,column:4},end:{line:101,column:12}},"51":{start:{line:102,column:4},end:{line:102,column:8}},"52":{start:{line:107,column:2},end:{line:107,column:36}},"53":{start:{line:111,column:2},end:{line:111,column:41}},"54":{start:{line:115,column:2},end:{line:121,column:3}},"55":{start:{line:116,column:36},end:{line:116,column:40}},"56":{start:{line:118,column:4},end:{line:120,column:7}},"57":{start:{line:119,column:6},end:{line:119,column:58}},"58":{start:{line:125,column:16},end:{line:125,column:34}},"59":{start:{line:126,column:2},end:{line:131,column:3}},"60":{start:{line:127,column:15},end:{line:127,column:23}},"61":{start:{line:128,column:4},end:{line:130,column:5}},"62":{start:{line:129,column:6},end:{line:129,column:15}},"63":{start:{line:135,column:18},end:{line:137,column:3}},"64":{start:{line:139,column:2},end:{line:158,column:5}},"65":{start:{line:140,column:16},end:{line:140,column:20}},"66":{start:{line:142,column:22},end:{line:142,column:106}},"67":{start:{line:144,column:4},end:{line:144,column:62}},"68":{start:{line:146,column:4},end:{line:146,column:24}},"69":{start:{line:148,column:4},end:{line:155,column:8}},"70":{start:{line:149,column:22},end:{line:149,column:62}},"71":{start:{line:150,column:6},end:{line:150,column:46}},"72":{start:{line:152,column:6},end:{line:154,column:7}},"73":{start:{line:153,column:8},end:{line:153,column:53}},"74":{start:{line:157,column:4},end:{line:157,column:39}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:15,column:23},end:{line:15,column:24}},loc:{start:{line:15,column:29},end:{line:43,column:1}},line:15},"1":{name:"(anonymous_1)",decl:{start:{line:16,column:46},end:{line:16,column:47}},loc:{start:{line:16,column:76},end:{line:38,column:3}},line:16},"2":{name:"prepareDebugger",decl:{start:{line:40,column:18},end:{line:40,column:33}},loc:{start:{line:40,column:43},end:{line:42,column:3}},line:40},"3":{name:"(anonymous_3)",decl:{start:{line:45,column:17},end:{line:45,column:18}},loc:{start:{line:45,column:23},end:{line:59,column:1}},line:45},"4":{name:"(anonymous_4)",decl:{start:{line:46,column:46},end:{line:46,column:47}},loc:{start:{line:46,column:66},end:{line:54,column:3}},line:46},"5":{name:"(anonymous_5)",decl:{start:{line:51,column:11},end:{line:51,column:12}},loc:{start:{line:51,column:27},end:{line:53,column:5}},line:51},"6":{name:"getDecode",decl:{start:{line:56,column:18},end:{line:56,column:27}},loc:{start:{line:56,column:33},end:{line:58,column:3}},line:56},"7":{name:"_interopRequireDefault",decl:{start:{line:94,column:9},end:{line:94,column:31}},loc:{start:{line:94,column:37},end:{line:94,column:95}},line:94},"8":{name:"generateUints",decl:{start:{line:98,column:10},end:{line:98,column:23}},loc:{start:{line:98,column:26},end:{line:104,column:1}},line:98},"9":{name:"contractName",decl:{start:{line:106,column:9},end:{line:106,column:21}},loc:{start:{line:106,column:32},end:{line:108,column:1}},line:106},"10":{name:"fileName",decl:{start:{line:110,column:9},end:{line:110,column:17}},loc:{start:{line:110,column:28},end:{line:112,column:1}},line:110},"11":{name:"generateTests",decl:{start:{line:114,column:9},end:{line:114,column:22}},loc:{start:{line:114,column:33},end:{line:122,column:1}},line:114},"12":{name:"(anonymous_12)",decl:{start:{line:118,column:36},end:{line:118,column:37}},loc:{start:{line:118,column:42},end:{line:120,column:5}},line:118},"13":{name:"lastStatementLine",decl:{start:{line:124,column:9},end:{line:124,column:26}},loc:{start:{line:124,column:35},end:{line:132,column:1}},line:124},"14":{name:"describeDecoding",decl:{start:{line:134,column:9},end:{line:134,column:25}},loc:{start:{line:134,column:72},end:{line:159,column:1}},line:134},"15":{name:"(anonymous_15)",decl:{start:{line:139,column:21},end:{line:139,column:22}},loc:{start:{line:139,column:33},end:{line:158,column:3}},line:139},"16":{name:"(anonymous_16)",decl:{start:{line:148,column:73},end:{line:148,column:74}},loc:{start:{line:148,column:86},end:{line:155,column:5}},line:148}},branchMap:{"0":{loc:{start:{line:94,column:46},end:{line:94,column:92}},type:"cond-expr",locations:[{start:{line:94,column:70},end:{line:94,column:73}},{start:{line:94,column:76},end:{line:94,column:92}}],line:94},"1":{loc:{start:{line:94,column:46},end:{line:94,column:67}},type:"binary-expr",locations:[{start:{line:94,column:46},end:{line:94,column:49}},{start:{line:94,column:53},end:{line:94,column:67}}],line:94},"2":{loc:{start:{line:128,column:4},end:{line:130,column:5}},type:"if",locations:[{start:{line:128,column:4},end:{line:130,column:5}},{start:{line:128,column:4},end:{line:130,column:5}}],line:128},"3":{loc:{start:{line:152,column:6},end:{line:154,column:7}},type:"if",locations:[{start:{line:152,column:6},end:{line:154,column:7}},{start:{line:152,column:6},end:{line:154,column:7}}],line:152}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0},f:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0},b:{"0":[0,0],"1":[0,0],"2":[0,0],"3":[0,0]},inputSourceMap:{version:3,sources:["test/data/decode/helpers.js"],names:["testName","sources","provider","Ganache","seed","gasLimit","web3","Web3","abstractions","artifacts","contracts","files","instance","contractName","deployed","receipt","run","txHash","tx","bugger","Debugger","forTx","session","connect","breakpoint","address","line","lastStatementLine","fileName","continueUntil","prepareDebugger","definitions","view","data","current","identifiers","refs","decode","views","decoder","name","getDecode","generateUints","describeDecoding","debug","x","replace","generateTests","fixtures","value","expected","it","assert","deepEqual","source","lines","split","i","length","indexOf","selector","generateSource","describe","testDebug","changeCase","paramCase","timeout","before","bind"],mappings:"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",file:"helpers.js",sourceRoot:"/Users/gnidan/src/work/truffle/packages/truffle-debugger",sourcesContent:["import debugModule from \"debug\";\nconst debug = debugModule(\"test:data:decode\");\n\nimport Ganache from \"ganache-cli\";\nimport Web3 from \"web3\";\nimport { assert } from \"chai\";\nimport changeCase from \"change-case\";\n\nimport { prepareContracts } from \"test/helpers\";\n\nimport Debugger from \"lib/debugger\";\n\nimport { cleanBigNumbers } from \"lib/data/decode/utils\";\n\nimport data from \"lib/data/selectors\";\n\nexport function *generateUints() {\n  let x = 0;\n  while (true) {\n    yield x;\n    x++;\n  }\n}\n\nfunction contractName(testName) {\n  return testName.replace(/ /g, \"\");\n}\n\nfunction fileName(testName) {\n  return `${contractName(testName)}.sol`;\n}\n\n\nfunction generateTests(fixtures) {\n  for (let { name, value: expected } of fixtures) {\n    it(`correctly decodes ${name}`,\n      () => { assert.deepEqual(this.decode(name), expected); }\n    );\n  }\n}\n\nfunction lastStatementLine(source) {\n  const lines = source.split(\"\\n\");\n  for (let i = lines.length - 1; i >= 0; i--) {\n    let line = lines[i];\n    if (line.indexOf(\";\") != -1) {\n      return i;\n    }\n  }\n}\n\n\nasync function prepareDebugger(testName, sources) {\n  const provider = Ganache.provider({seed: \"debugger\", gasLimit: 7000000});\n  const web3 = new Web3(provider);\n\n  let { abstractions, artifacts: contracts, files } =\n    await prepareContracts(provider, sources);\n\n  let instance = await abstractions[contractName(testName)].deployed();\n  let receipt = await instance.run();\n  let txHash = receipt.tx;\n\n  let bugger = await Debugger.forTx(txHash, { provider, files, contracts });\n\n  let session = bugger.connect();\n\n  let breakpoint = {\n    address: instance.address,\n    line: lastStatementLine(sources[fileName(testName)])\n  };\n\n  session.continueUntil(breakpoint);\n\n  return session;\n}\n\nasync function getDecode(session) {\n  const definitions = session.view(data.current.identifiers.definitions);\n  const refs = session.view(data.current.identifiers.refs);\n\n  const decode = session.view(data.views.decoder);\n  return (name) => cleanBigNumbers(\n    decode(definitions[name], refs[name])\n  );\n}\n\nexport function describeDecoding(testName, fixtures, selector, generateSource) {\n  const sources = {\n    [fileName(testName)]: generateSource(contractName(testName), fixtures)\n  };\n\n  describe(testName, function() {\n    const testDebug = debugModule(\n      `test:data:decode:${changeCase.paramCase(testName)}`\n    );\n\n    testDebug(\"source %s\", Object.values(sources)[0]);\n\n    this.timeout(30000);\n\n    before(\"runs and observes debugger\", async () => {\n      const session = await prepareDebugger(testName, sources);\n      this.decode = await getDecode(session);\n\n      if (selector) {\n        debug(\"selector %O\", session.view(selector));\n      }\n    });\n\n    generateTests.bind(this)(fixtures);\n  });\n}\n"]},_coverageSchema:"332fd63041d2c1bcb487cc26dd0d5f7d97098a6c"},coverage=global[gcv]||(global[gcv]={});if(coverage[path]&&coverage[path].hash===hash){return coverage[path];}coverageData.hash=hash;return coverage[path]=coverageData;}();cov_9nskhqnbe.s[0]++;Object.defineProperty(exports,"__esModule",{value:true});var _values=(cov_9nskhqnbe.s[1]++,__webpack_require__(28));var _values2=(cov_9nskhqnbe.s[2]++,_interopRequireDefault(_values));var _asyncToGenerator2=(cov_9nskhqnbe.s[3]++,__webpack_require__(7));var _asyncToGenerator3=(cov_9nskhqnbe.s[4]++,_interopRequireDefault(_asyncToGenerator2));let prepareDebugger=(cov_9nskhqnbe.s[5]++,(()=>{cov_9nskhqnbe.f[0]++;var _ref2=(cov_9nskhqnbe.s[6]++,(0,_asyncToGenerator3.default)(function*(testName,sources){cov_9nskhqnbe.f[1]++;const provider=(cov_9nskhqnbe.s[7]++,_ganacheCli2.default.provider({seed:"debugger",gasLimit:7000000}));const web3=(cov_9nskhqnbe.s[8]++,new _web2.default(provider));let{abstractions,artifacts:contracts,files}=(cov_9nskhqnbe.s[9]++,yield(0,_helpers.prepareContracts)(provider,sources));let instance=(cov_9nskhqnbe.s[10]++,yield abstractions[contractName(testName)].deployed());let receipt=(cov_9nskhqnbe.s[11]++,yield instance.run());let txHash=(cov_9nskhqnbe.s[12]++,receipt.tx);let bugger=(cov_9nskhqnbe.s[13]++,yield _debugger2.default.forTx(txHash,{provider,files,contracts}));let session=(cov_9nskhqnbe.s[14]++,bugger.connect());let breakpoint=(cov_9nskhqnbe.s[15]++,{address:instance.address,line:lastStatementLine(sources[fileName(testName)])});cov_9nskhqnbe.s[16]++;session.continueUntil(breakpoint);cov_9nskhqnbe.s[17]++;return session;}));cov_9nskhqnbe.s[18]++;return function prepareDebugger(_x,_x2){cov_9nskhqnbe.f[2]++;cov_9nskhqnbe.s[19]++;return _ref2.apply(this,arguments);};})());let getDecode=(cov_9nskhqnbe.s[20]++,(()=>{cov_9nskhqnbe.f[3]++;var _ref3=(cov_9nskhqnbe.s[21]++,(0,_asyncToGenerator3.default)(function*(session){cov_9nskhqnbe.f[4]++;const definitions=(cov_9nskhqnbe.s[22]++,session.view(_selectors2.default.current.identifiers.definitions));const refs=(cov_9nskhqnbe.s[23]++,session.view(_selectors2.default.current.identifiers.refs));const decode=(cov_9nskhqnbe.s[24]++,session.view(_selectors2.default.views.decoder));cov_9nskhqnbe.s[25]++;return function(name){cov_9nskhqnbe.f[5]++;cov_9nskhqnbe.s[26]++;return(0,_utils.cleanBigNumbers)(decode(definitions[name],refs[name]));};}));cov_9nskhqnbe.s[27]++;return function getDecode(_x3){cov_9nskhqnbe.f[6]++;cov_9nskhqnbe.s[28]++;return _ref3.apply(this,arguments);};})());cov_9nskhqnbe.s[29]++;exports.generateUints=generateUints;cov_9nskhqnbe.s[30]++;exports.describeDecoding=describeDecoding;var _debug=(cov_9nskhqnbe.s[31]++,__webpack_require__(0));var _debug2=(cov_9nskhqnbe.s[32]++,_interopRequireDefault(_debug));var _ganacheCli=(cov_9nskhqnbe.s[33]++,__webpack_require__(16));var _ganacheCli2=(cov_9nskhqnbe.s[34]++,_interopRequireDefault(_ganacheCli));var _web=(cov_9nskhqnbe.s[35]++,__webpack_require__(8));var _web2=(cov_9nskhqnbe.s[36]++,_interopRequireDefault(_web));var _chai=(cov_9nskhqnbe.s[37]++,__webpack_require__(12));var _changeCase=(cov_9nskhqnbe.s[38]++,__webpack_require__(83));var _changeCase2=(cov_9nskhqnbe.s[39]++,_interopRequireDefault(_changeCase));var _helpers=(cov_9nskhqnbe.s[40]++,__webpack_require__(13));var _debugger=(cov_9nskhqnbe.s[41]++,__webpack_require__(18));var _debugger2=(cov_9nskhqnbe.s[42]++,_interopRequireDefault(_debugger));var _utils=(cov_9nskhqnbe.s[43]++,__webpack_require__(11));var _selectors=(cov_9nskhqnbe.s[44]++,__webpack_require__(26));var _selectors2=(cov_9nskhqnbe.s[45]++,_interopRequireDefault(_selectors));function _interopRequireDefault(obj){cov_9nskhqnbe.f[7]++;cov_9nskhqnbe.s[46]++;return(cov_9nskhqnbe.b[1][0]++,obj)&&(cov_9nskhqnbe.b[1][1]++,obj.__esModule)?(cov_9nskhqnbe.b[0][0]++,obj):(cov_9nskhqnbe.b[0][1]++,{default:obj});}const debug=(cov_9nskhqnbe.s[47]++,(0,_debug2.default)("test:data:decode"));function*generateUints(){cov_9nskhqnbe.f[8]++;let x=(cov_9nskhqnbe.s[48]++,0);cov_9nskhqnbe.s[49]++;while(true){cov_9nskhqnbe.s[50]++;yield x;cov_9nskhqnbe.s[51]++;x++;}}function contractName(testName){cov_9nskhqnbe.f[9]++;cov_9nskhqnbe.s[52]++;return testName.replace(/ /g,"");}function fileName(testName){cov_9nskhqnbe.f[10]++;cov_9nskhqnbe.s[53]++;return`${contractName(testName)}.sol`;}function generateTests(fixtures){cov_9nskhqnbe.f[11]++;cov_9nskhqnbe.s[54]++;for(let _ref of fixtures){let{name,value:expected}=(cov_9nskhqnbe.s[55]++,_ref);cov_9nskhqnbe.s[56]++;it(`correctly decodes ${name}`,()=>{cov_9nskhqnbe.f[12]++;cov_9nskhqnbe.s[57]++;_chai.assert.deepEqual(this.decode(name),expected);});}}function lastStatementLine(source){cov_9nskhqnbe.f[13]++;const lines=(cov_9nskhqnbe.s[58]++,source.split("\n"));cov_9nskhqnbe.s[59]++;for(let i=lines.length-1;i>=0;i--){let line=(cov_9nskhqnbe.s[60]++,lines[i]);cov_9nskhqnbe.s[61]++;if(line.indexOf(";")!=-1){cov_9nskhqnbe.b[2][0]++;cov_9nskhqnbe.s[62]++;return i;}else{cov_9nskhqnbe.b[2][1]++;}}}function describeDecoding(testName,fixtures,selector,generateSource){cov_9nskhqnbe.f[14]++;const sources=(cov_9nskhqnbe.s[63]++,{[fileName(testName)]:generateSource(contractName(testName),fixtures)});cov_9nskhqnbe.s[64]++;describe(testName,function(){cov_9nskhqnbe.f[15]++;var _this=(cov_9nskhqnbe.s[65]++,this);const testDebug=(cov_9nskhqnbe.s[66]++,(0,_debug2.default)(`test:data:decode:${_changeCase2.default.paramCase(testName)}`));cov_9nskhqnbe.s[67]++;testDebug("source %s",(0,_values2.default)(sources)[0]);cov_9nskhqnbe.s[68]++;this.timeout(30000);cov_9nskhqnbe.s[69]++;before("runs and observes debugger",(0,_asyncToGenerator3.default)(function*(){cov_9nskhqnbe.f[16]++;const session=(cov_9nskhqnbe.s[70]++,yield prepareDebugger(testName,sources));cov_9nskhqnbe.s[71]++;_this.decode=yield getDecode(session);cov_9nskhqnbe.s[72]++;if(selector){cov_9nskhqnbe.b[3][0]++;cov_9nskhqnbe.s[73]++;debug("selector %O",session.view(selector));}else{cov_9nskhqnbe.b[3][1]++;}}));cov_9nskhqnbe.s[74]++;generateTests.bind(this)(fixtures);});}

/***/ }),
/* 38 */
/***/ (function(module, exports, __webpack_require__) {

// runtime helper
function inManifest(id) { return global.__webpackManifest__.indexOf(id) >= 0;}
function run(id) { __webpack_require__(id);}

// modules to execute goes here
var ids = [
/*require.resolve*/(39),/*require.resolve*/(79),/*require.resolve*/(80),/*require.resolve*/(37),/*require.resolve*/(84),/*require.resolve*/(85),/*require.resolve*/(13),/*require.resolve*/(86)
];

ids.filter(inManifest).forEach(run)

/***/ }),
/* 39 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var cov_2ckorxox9k=function(){var path="/Users/gnidan/src/work/truffle/packages/truffle-debugger/test/ast.js",hash="fe4f005d17ecca28f221cb901292f42508b697f2",Function=function(){}.constructor,global=new Function('return this')(),gcv="__coverage__",coverageData={path:"/Users/gnidan/src/work/truffle/packages/truffle-debugger/test/ast.js",statementMap:{"0":{start:{line:3,column:25},end:{line:3,column:74}},"1":{start:{line:5,column:25},end:{line:5,column:67}},"2":{start:{line:7,column:13},end:{line:7,column:29}},"3":{start:{line:9,column:14},end:{line:9,column:44}},"4":{start:{line:11,column:12},end:{line:11,column:27}},"5":{start:{line:13,column:18},end:{line:13,column:40}},"6":{start:{line:15,column:19},end:{line:15,column:54}},"7":{start:{line:17,column:11},end:{line:17,column:26}},"8":{start:{line:19,column:12},end:{line:19,column:40}},"9":{start:{line:21,column:15},end:{line:21,column:35}},"10":{start:{line:23,column:16},end:{line:23,column:39}},"11":{start:{line:25,column:17},end:{line:25,column:50}},"12":{start:{line:27,column:17},end:{line:27,column:45}},"13":{start:{line:29,column:18},end:{line:29,column:52}},"14":{start:{line:31,column:18},end:{line:31,column:51}},"15":{start:{line:33,column:18},end:{line:33,column:53}},"16":{start:{line:35,column:11},end:{line:35,column:33}},"17":{start:{line:37,column:39},end:{line:37,column:93}},"18":{start:{line:39,column:14},end:{line:39,column:46}},"19":{start:{line:41,column:20},end:{line:68,column:1}},"20":{start:{line:70,column:14},end:{line:72,column:1}},"21":{start:{line:74,column:0},end:{line:130,column:3}},"22":{start:{line:82,column:2},end:{line:85,column:6}},"23":{start:{line:83,column:4},end:{line:83,column:86}},"24":{start:{line:84,column:4},end:{line:84,column:39}},"25":{start:{line:87,column:2},end:{line:94,column:6}},"26":{start:{line:88,column:4},end:{line:88,column:24}},"27":{start:{line:90,column:19},end:{line:90,column:74}},"28":{start:{line:91,column:4},end:{line:91,column:41}},"29":{start:{line:92,column:4},end:{line:92,column:35}},"30":{start:{line:93,column:4},end:{line:93,column:27}},"31":{start:{line:96,column:2},end:{line:129,column:5}},"32":{start:{line:97,column:4},end:{line:128,column:8}},"33":{start:{line:98,column:6},end:{line:98,column:22}},"34":{start:{line:99,column:21},end:{line:99,column:60}},"35":{start:{line:100,column:20},end:{line:100,column:43}},"36":{start:{line:101,column:19},end:{line:101,column:29}},"37":{start:{line:103,column:19},end:{line:107,column:8}},"38":{start:{line:109,column:20},end:{line:109,column:36}},"39":{start:{line:110,column:6},end:{line:110,column:71}},"40":{start:{line:112,column:6},end:{line:127,column:34}},"41":{start:{line:113,column:32},end:{line:113,column:85}},"42":{start:{line:114,column:18},end:{line:114,column:32}},"43":{start:{line:116,column:19},end:{line:116,column:65}},"44":{start:{line:118,column:38},end:{line:118,column:62}},"45":{start:{line:119,column:22},end:{line:119,column:44}},"46":{start:{line:121,column:22},end:{line:121,column:71}},"47":{start:{line:123,column:8},end:{line:123,column:118}},"48":{start:{line:124,column:8},end:{line:124,column:92}},"49":{start:{line:126,column:8},end:{line:126,column:27}}},fnMap:{"0":{name:"_interopRequireDefault",decl:{start:{line:37,column:9},end:{line:37,column:31}},loc:{start:{line:37,column:37},end:{line:37,column:95}},line:37},"1":{name:"(anonymous_1)",decl:{start:{line:74,column:16},end:{line:74,column:17}},loc:{start:{line:74,column:28},end:{line:130,column:1}},line:74},"2":{name:"(anonymous_2)",decl:{start:{line:82,column:60},end:{line:82,column:61}},loc:{start:{line:82,column:73},end:{line:85,column:3}},line:82},"3":{name:"(anonymous_3)",decl:{start:{line:87,column:76},end:{line:87,column:77}},loc:{start:{line:87,column:89},end:{line:94,column:3}},line:87},"4":{name:"(anonymous_4)",decl:{start:{line:96,column:27},end:{line:96,column:28}},loc:{start:{line:96,column:39},end:{line:129,column:3}},line:96},"5":{name:"(anonymous_5)",decl:{start:{line:97,column:52},end:{line:97,column:53}},loc:{start:{line:97,column:65},end:{line:128,column:5}},line:97}},branchMap:{"0":{loc:{start:{line:37,column:46},end:{line:37,column:92}},type:"cond-expr",locations:[{start:{line:37,column:70},end:{line:37,column:73}},{start:{line:37,column:76},end:{line:37,column:92}}],line:37},"1":{loc:{start:{line:37,column:46},end:{line:37,column:67}},type:"binary-expr",locations:[{start:{line:37,column:46},end:{line:37,column:49}},{start:{line:37,column:53},end:{line:37,column:67}}],line:37}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0},f:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0},b:{"0":[0,0],"1":[0,0]},inputSourceMap:{version:3,sources:["test/ast.js"],names:["debug","__VARIABLES","sources","describe","provider","web3","abstractions","artifacts","files","before","Ganache","seed","gasLimit","Web3","timeout","prepared","it","instance","Variables","deployed","receipt","stack","txHash","tx","bugger","Debugger","forTx","contracts","session","connect","view","ast","current","tree","start","length","solidity","sourceRange","end","node","nodeStart","nodeLength","nodeEnd","pointer","assert","isAtMost","isAtLeast","stepNext","finished"],mappings:";;;;;;AAAA;;;;AAGA;;AAEA;;;;AACA;;;;AAEA;;AACA;;;;AAEA;;;;AACA;;;;AAEA;;;;AAbA,MAAMA,QAAQ,qBAAY,UAAZ,CAAd;;AAeA,MAAMC,cAAe;;;;;;;;;;;;;;;;;;;;;;;;;;;CAArB;;AA8BA,IAAIC,UAAU;AACZ,mBAAiBD;AADL,CAAd;;AAIAE,SAAS,KAAT,EAAgB,YAAW;AACzB,MAAIC,QAAJ;AACA,MAAIC,IAAJ;;AAEA,MAAIC,YAAJ;AACA,MAAIC,SAAJ;AACA,MAAIC,KAAJ;;AAEAC,SAAO,iBAAP,kCAA0B,aAAiB;AACzCL,eAAWM,qBAAQN,QAAR,CAAiB,EAACO,MAAM,UAAP,EAAmBC,UAAU,OAA7B,EAAjB,CAAX;AACAP,WAAO,IAAIQ,aAAJ,CAAST,QAAT,CAAP;AACD,GAHD;;AAKAK,SAAO,iCAAP,kCAA0C,aAAiB;AACzD,SAAKK,OAAL,CAAa,KAAb;;AAEA,QAAIC,WAAW,MAAM,+BAAiBX,QAAjB,EAA2BF,OAA3B,CAArB;AACAI,mBAAeS,SAAST,YAAxB;AACAC,gBAAYQ,SAASR,SAArB;AACAC,YAAQO,SAASP,KAAjB;AACD,GAPD;;AASAL,WAAS,cAAT,EAAyB,YAAW;AAClCa,OAAG,WAAH,kCAAgB,aAAiB;AAC/B,WAAKF,OAAL,CAAa,CAAb;AACA,UAAIG,WAAW,MAAMX,aAAaY,SAAb,CAAuBC,QAAvB,EAArB;AACA,UAAIC,UAAU,MAAMH,SAASI,KAAT,CAAe,CAAf,CAApB;AACA,UAAIC,SAASF,QAAQG,EAArB;;AAEA,UAAIC,SAAS,MAAMC,mBAASC,KAAT,CAAeJ,MAAf,EAAuB;AACxClB,gBADwC;AAExCI,aAFwC;AAGxCmB,mBAAWpB;AAH6B,OAAvB,CAAnB;;AAMA,UAAIqB,UAAUJ,OAAOK,OAAP,EAAd;AACA7B,YAAM,SAAN,EAAiB4B,QAAQE,IAAR,CAAaC,oBAAIC,OAAJ,CAAYC,IAAzB,CAAjB;;AAEA,SAAG;AACD,YAAI,EAAEC,KAAF,EAASC,MAAT,KAAoBP,QAAQE,IAAR,CAAaM,oBAASJ,OAAT,CAAiBK,WAA9B,CAAxB;AACA,YAAIC,MAAMJ,QAAQC,MAAlB;;AAEA,YAAII,OAAOX,QAAQE,IAAR,CAAaC,oBAAIC,OAAJ,CAAYO,IAAzB,CAAX;;AAEA,YAAI,CAAEC,SAAF,EAAaC,UAAb,IAA4B,mBAASF,IAAT,CAAhC;AACA,YAAIG,UAAUF,YAAYC,UAA1B;;AAEA,YAAIE,UAAUf,QAAQE,IAAR,CAAaC,oBAAIC,OAAJ,CAAYW,OAAzB,CAAd;;AAEAC,qBAAOC,QAAP,CACEL,SADF,EACaN,KADb,EAEG,QAAOS,OAAQ,qDAFlB;AAIAC,qBAAOE,SAAP,CACEJ,OADF,EACWJ,GADX,EAEG,QAAOK,OAAQ,8BAFlB;;AAKAf,gBAAQmB,QAAR;AACD,OArBD,QAqBQ,CAACnB,QAAQoB,QArBjB;AAuBD,KAtCD;AAuCD,GAxCD;AAyCD,CA/DD",file:"ast.js",sourceRoot:"/Users/gnidan/src/work/truffle/packages/truffle-debugger",sourcesContent:["import debugModule from \"debug\";\nconst debug = debugModule(\"test:ast\");\n\nimport { assert } from \"chai\";\n\nimport Ganache from \"ganache-cli\";\nimport Web3 from \"web3\";\n\nimport { prepareContracts } from \"./helpers\";\nimport Debugger from \"lib/debugger\";\n\nimport ast from \"lib/ast/selectors\";\nimport solidity from \"lib/solidity/selectors\";\n\nimport { getRange, findRange, rangeNodes } from \"lib/ast/map\";\n\nconst __VARIABLES = `\npragma solidity ^0.4.18;\n\ncontract Variables {\n  event Result(uint256 result);\n\n  uint256 qux;\n  string quux;\n\n  function stack(uint256 foo) public returns (uint256) {\n    uint256 bar = foo + 1;\n    uint256 baz = innerStack(bar);\n\n    baz += 4;\n\n    qux = baz;\n\n    emit Result(baz);\n\n    return baz;\n  }\n\n  function innerStack(uint256 baz) public returns (uint256) {\n    uint256 bar = baz + 2;\n    return bar;\n  }\n}\n`;\n\n\nlet sources = {\n  \"Variables.sol\": __VARIABLES\n}\n\ndescribe(\"AST\", function() {\n  var provider;\n  var web3;\n\n  var abstractions;\n  var artifacts;\n  var files;\n\n  before(\"Create Provider\", async function() {\n    provider = Ganache.provider({seed: \"debugger\", gasLimit: 7000000});\n    web3 = new Web3(provider);\n  });\n\n  before(\"Prepare contracts and artifacts\", async function() {\n    this.timeout(30000);\n\n    let prepared = await prepareContracts(provider, sources)\n    abstractions = prepared.abstractions;\n    artifacts = prepared.artifacts;\n    files = prepared.files;\n  });\n\n  describe(\"Node pointer\", function() {\n    it(\"traverses\", async function() {\n      this.timeout(0);\n      let instance = await abstractions.Variables.deployed();\n      let receipt = await instance.stack(4);\n      let txHash = receipt.tx;\n\n      let bugger = await Debugger.forTx(txHash, {\n        provider,\n        files,\n        contracts: artifacts\n      });\n\n      let session = bugger.connect();\n      debug(\"ast: %O\", session.view(ast.current.tree));\n\n      do {\n        let { start, length } = session.view(solidity.current.sourceRange);\n        let end = start + length;\n\n        let node = session.view(ast.current.node);\n\n        let [ nodeStart, nodeLength ] = getRange(node);\n        let nodeEnd = nodeStart + nodeLength;\n\n        let pointer = session.view(ast.current.pointer);\n\n        assert.isAtMost(\n          nodeStart, start,\n          `Node ${pointer} at should not begin after instruction source range`\n        );\n        assert.isAtLeast(\n          nodeEnd, end,\n          `Node ${pointer} should not end after source`\n        );\n\n        session.stepNext();\n      } while(!session.finished);\n\n    });\n  });\n});\n"]},_coverageSchema:"332fd63041d2c1bcb487cc26dd0d5f7d97098a6c"},coverage=global[gcv]||(global[gcv]={});if(coverage[path]&&coverage[path].hash===hash){return coverage[path];}coverageData.hash=hash;return coverage[path]=coverageData;}();var _asyncToGenerator2=(cov_2ckorxox9k.s[0]++,__webpack_require__(7));var _asyncToGenerator3=(cov_2ckorxox9k.s[1]++,_interopRequireDefault(_asyncToGenerator2));var _debug=(cov_2ckorxox9k.s[2]++,__webpack_require__(0));var _debug2=(cov_2ckorxox9k.s[3]++,_interopRequireDefault(_debug));var _chai=(cov_2ckorxox9k.s[4]++,__webpack_require__(12));var _ganacheCli=(cov_2ckorxox9k.s[5]++,__webpack_require__(16));var _ganacheCli2=(cov_2ckorxox9k.s[6]++,_interopRequireDefault(_ganacheCli));var _web=(cov_2ckorxox9k.s[7]++,__webpack_require__(8));var _web2=(cov_2ckorxox9k.s[8]++,_interopRequireDefault(_web));var _helpers=(cov_2ckorxox9k.s[9]++,__webpack_require__(13));var _debugger=(cov_2ckorxox9k.s[10]++,__webpack_require__(18));var _debugger2=(cov_2ckorxox9k.s[11]++,_interopRequireDefault(_debugger));var _selectors=(cov_2ckorxox9k.s[12]++,__webpack_require__(14));var _selectors2=(cov_2ckorxox9k.s[13]++,_interopRequireDefault(_selectors));var _selectors3=(cov_2ckorxox9k.s[14]++,__webpack_require__(6));var _selectors4=(cov_2ckorxox9k.s[15]++,_interopRequireDefault(_selectors3));var _map=(cov_2ckorxox9k.s[16]++,__webpack_require__(29));function _interopRequireDefault(obj){cov_2ckorxox9k.f[0]++;cov_2ckorxox9k.s[17]++;return(cov_2ckorxox9k.b[1][0]++,obj)&&(cov_2ckorxox9k.b[1][1]++,obj.__esModule)?(cov_2ckorxox9k.b[0][0]++,obj):(cov_2ckorxox9k.b[0][1]++,{default:obj});}const debug=(cov_2ckorxox9k.s[18]++,(0,_debug2.default)("test:ast"));const __VARIABLES=(cov_2ckorxox9k.s[19]++,`
pragma solidity ^0.4.18;

contract Variables {
  event Result(uint256 result);

  uint256 qux;
  string quux;

  function stack(uint256 foo) public returns (uint256) {
    uint256 bar = foo + 1;
    uint256 baz = innerStack(bar);

    baz += 4;

    qux = baz;

    emit Result(baz);

    return baz;
  }

  function innerStack(uint256 baz) public returns (uint256) {
    uint256 bar = baz + 2;
    return bar;
  }
}
`);let sources=(cov_2ckorxox9k.s[20]++,{"Variables.sol":__VARIABLES});cov_2ckorxox9k.s[21]++;describe("AST",function(){cov_2ckorxox9k.f[1]++;var provider;var web3;var abstractions;var artifacts;var files;cov_2ckorxox9k.s[22]++;before("Create Provider",(0,_asyncToGenerator3.default)(function*(){cov_2ckorxox9k.f[2]++;cov_2ckorxox9k.s[23]++;provider=_ganacheCli2.default.provider({seed:"debugger",gasLimit:7000000});cov_2ckorxox9k.s[24]++;web3=new _web2.default(provider);}));cov_2ckorxox9k.s[25]++;before("Prepare contracts and artifacts",(0,_asyncToGenerator3.default)(function*(){cov_2ckorxox9k.f[3]++;cov_2ckorxox9k.s[26]++;this.timeout(30000);let prepared=(cov_2ckorxox9k.s[27]++,yield(0,_helpers.prepareContracts)(provider,sources));cov_2ckorxox9k.s[28]++;abstractions=prepared.abstractions;cov_2ckorxox9k.s[29]++;artifacts=prepared.artifacts;cov_2ckorxox9k.s[30]++;files=prepared.files;}));cov_2ckorxox9k.s[31]++;describe("Node pointer",function(){cov_2ckorxox9k.f[4]++;cov_2ckorxox9k.s[32]++;it("traverses",(0,_asyncToGenerator3.default)(function*(){cov_2ckorxox9k.f[5]++;cov_2ckorxox9k.s[33]++;this.timeout(0);let instance=(cov_2ckorxox9k.s[34]++,yield abstractions.Variables.deployed());let receipt=(cov_2ckorxox9k.s[35]++,yield instance.stack(4));let txHash=(cov_2ckorxox9k.s[36]++,receipt.tx);let bugger=(cov_2ckorxox9k.s[37]++,yield _debugger2.default.forTx(txHash,{provider,files,contracts:artifacts}));let session=(cov_2ckorxox9k.s[38]++,bugger.connect());cov_2ckorxox9k.s[39]++;debug("ast: %O",session.view(_selectors2.default.current.tree));cov_2ckorxox9k.s[40]++;do{let{start,length}=(cov_2ckorxox9k.s[41]++,session.view(_selectors4.default.current.sourceRange));let end=(cov_2ckorxox9k.s[42]++,start+length);let node=(cov_2ckorxox9k.s[43]++,session.view(_selectors2.default.current.node));let[nodeStart,nodeLength]=(cov_2ckorxox9k.s[44]++,(0,_map.getRange)(node));let nodeEnd=(cov_2ckorxox9k.s[45]++,nodeStart+nodeLength);let pointer=(cov_2ckorxox9k.s[46]++,session.view(_selectors2.default.current.pointer));cov_2ckorxox9k.s[47]++;_chai.assert.isAtMost(nodeStart,start,`Node ${pointer} at should not begin after instruction source range`);cov_2ckorxox9k.s[48]++;_chai.assert.isAtLeast(nodeEnd,end,`Node ${pointer} should not end after source`);cov_2ckorxox9k.s[49]++;session.stepNext();}while(!session.finished);}));});});

/***/ }),
/* 40 */
/***/ (function(module, exports) {

module.exports = require("path");

/***/ }),
/* 41 */
/***/ (function(module, exports) {

module.exports = require("fs-extra");

/***/ }),
/* 42 */
/***/ (function(module, exports) {

module.exports = require("async");

/***/ }),
/* 43 */
/***/ (function(module, exports) {

module.exports = require("truffle-workflow-compile");

/***/ }),
/* 44 */
/***/ (function(module, exports) {

module.exports = require("truffle-debug-utils");

/***/ }),
/* 45 */
/***/ (function(module, exports) {

module.exports = require("truffle-artifactor");

/***/ }),
/* 46 */
/***/ (function(module, exports) {

module.exports = require("truffle-migrate");

/***/ }),
/* 47 */
/***/ (function(module, exports) {

module.exports = require("truffle-box");

/***/ }),
/* 48 */
/***/ (function(module, exports) {

module.exports = require("truffle-resolver");

/***/ }),
/* 49 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var cov_18s41jxx88 = function () {
  var path = "/Users/gnidan/src/work/truffle/packages/truffle-debugger/lib/session/index.js",
      hash = "2eb49d0b422a9dcfedb3de4405032f8ec3e5d561",
      Function = function () {}.constructor,
      global = new Function('return this')(),
      gcv = "__coverage__",
      coverageData = { path: "/Users/gnidan/src/work/truffle/packages/truffle-debugger/lib/session/index.js", statementMap: { "0": { start: { line: 3, column: 0 }, end: { line: 5, column: 3 } }, "1": { start: { line: 7, column: 14 }, end: { line: 7, column: 60 } }, "2": { start: { line: 9, column: 15 }, end: { line: 9, column: 46 } }, "3": { start: { line: 11, column: 15 }, end: { line: 11, column: 55 } }, "4": { start: { line: 13, column: 16 }, end: { line: 13, column: 48 } }, "5": { start: { line: 15, column: 13 }, end: { line: 15, column: 29 } }, "6": { start: { line: 17, column: 14 }, end: { line: 17, column: 44 } }, "7": { start: { line: 19, column: 17 }, end: { line: 19, column: 47 } }, "8": { start: { line: 21, column: 18 }, end: { line: 21, column: 52 } }, "9": { start: { line: 23, column: 18 }, end: { line: 23, column: 46 } }, "10": { start: { line: 25, column: 18 }, end: { line: 25, column: 53 } }, "11": { start: { line: 27, column: 18 }, end: { line: 27, column: 46 } }, "12": { start: { line: 29, column: 18 }, end: { line: 29, column: 53 } }, "13": { start: { line: 31, column: 18 }, end: { line: 31, column: 51 } }, "14": { start: { line: 33, column: 18 }, end: { line: 33, column: 53 } }, "15": { start: { line: 35, column: 13 }, end: { line: 35, column: 33 } }, "16": { start: { line: 37, column: 14 }, end: { line: 37, column: 44 } }, "17": { start: { line: 39, column: 15 }, end: { line: 39, column: 48 } }, "18": { start: { line: 41, column: 17 }, end: { line: 41, column: 50 } }, "19": { start: { line: 43, column: 16 }, end: { line: 43, column: 36 } }, "20": { start: { line: 45, column: 14 }, end: { line: 45, column: 48 } }, "21": { start: { line: 47, column: 13 }, end: { line: 47, column: 31 } }, "22": { start: { line: 49, column: 14 }, end: { line: 49, column: 44 } }, "23": { start: { line: 51, column: 16 }, end: { line: 51, column: 37 } }, "24": { start: { line: 53, column: 17 }, end: { line: 53, column: 50 } }, "25": { start: { line: 55, column: 40 }, end: { line: 55, column: 267 } }, "26": { start: { line: 55, column: 69 }, end: { line: 55, column: 80 } }, "27": { start: { line: 55, column: 103 }, end: { line: 55, column: 105 } }, "28": { start: { line: 55, column: 107 }, end: { line: 55, column: 228 } }, "29": { start: { line: 55, column: 126 }, end: { line: 55, column: 226 } }, "30": { start: { line: 55, column: 149 }, end: { line: 55, column: 224 } }, "31": { start: { line: 55, column: 201 }, end: { line: 55, column: 224 } }, "32": { start: { line: 55, column: 229 }, end: { line: 55, column: 250 } }, "33": { start: { line: 55, column: 251 }, end: { line: 55, column: 265 } }, "34": { start: { line: 57, column: 39 }, end: { line: 57, column: 93 } }, "35": { start: { line: 59, column: 14 }, end: { line: 59, column: 54 } }, "36": { start: { line: 76, column: 4 }, end: { line: 76, column: 76 } }, "37": { start: { line: 78, column: 32 }, end: { line: 78, column: 67 } }, "38": { start: { line: 81, column: 4 }, end: { line: 81, column: 69 } }, "39": { start: { line: 83, column: 4 }, end: { line: 83, column: 58 } }, "40": { start: { line: 87, column: 4 }, end: { line: 95, column: 7 } }, "41": { start: { line: 88, column: 6 }, end: { line: 94, column: 9 } }, "42": { start: { line: 89, column: 8 }, end: { line: 93, column: 9 } }, "43": { start: { line: 90, column: 10 }, end: { line: 90, column: 19 } }, "44": { start: { line: 91, column: 15 }, end: { line: 93, column: 9 } }, "45": { start: { line: 92, column: 10 }, end: { line: 92, column: 43 } }, "46": { start: { line: 111, column: 24 }, end: { line: 111, column: 26 } }, "47": { start: { line: 112, column: 19 }, end: { line: 112, column: 21 } }, "48": { start: { line: 115, column: 4 }, end: { line: 144, column: 5 } }, "49": { start: { line: 125, column: 10 }, end: { line: 125, column: 18 } }, "50": { start: { line: 127, column: 6 }, end: { line: 127, column: 62 } }, "51": { start: { line: 129, column: 6 }, end: { line: 135, column: 7 } }, "52": { start: { line: 130, column: 8 }, end: { line: 134, column: 11 } }, "53": { start: { line: 137, column: 6 }, end: { line: 143, column: 7 } }, "54": { start: { line: 138, column: 8 }, end: { line: 142, column: 11 } }, "55": { start: { line: 146, column: 4 }, end: { line: 150, column: 5 } }, "56": { start: { line: 147, column: 6 }, end: { line: 147, column: 53 } }, "57": { start: { line: 149, column: 6 }, end: { line: 149, column: 55 } }, "58": { start: { line: 149, column: 34 }, end: { line: 149, column: 53 } }, "59": { start: { line: 152, column: 4 }, end: { line: 152, column: 33 } }, "60": { start: { line: 156, column: 4 }, end: { line: 156, column: 34 } }, "61": { start: { line: 160, column: 4 }, end: { line: 160, column: 32 } }, "62": { start: { line: 164, column: 4 }, end: { line: 164, column: 44 } }, "63": { start: { line: 168, column: 4 }, end: { line: 168, column: 84 } }, "64": { start: { line: 172, column: 4 }, end: { line: 176, column: 5 } }, "65": { start: { line: 173, column: 6 }, end: { line: 173, column: 56 } }, "66": { start: { line: 175, column: 6 }, end: { line: 175, column: 19 } }, "67": { start: { line: 178, column: 4 }, end: { line: 178, column: 33 } }, "68": { start: { line: 180, column: 4 }, end: { line: 180, column: 16 } }, "69": { start: { line: 184, column: 4 }, end: { line: 184, column: 49 } }, "70": { start: { line: 188, column: 4 }, end: { line: 188, column: 47 } }, "71": { start: { line: 192, column: 4 }, end: { line: 192, column: 48 } }, "72": { start: { line: 196, column: 4 }, end: { line: 196, column: 48 } }, "73": { start: { line: 200, column: 4 }, end: { line: 200, column: 48 } }, "74": { start: { line: 204, column: 4 }, end: { line: 204, column: 47 } }, "75": { start: { line: 208, column: 4 }, end: { line: 208, column: 67 } }, "76": { start: { line: 211, column: 0 }, end: { line: 211, column: 26 } } }, fnMap: { "0": { name: "_interopRequireWildcard", decl: { start: { line: 55, column: 9 }, end: { line: 55, column: 32 } }, loc: { start: { line: 55, column: 38 }, end: { line: 55, column: 269 } }, line: 55 }, "1": { name: "_interopRequireDefault", decl: { start: { line: 57, column: 9 }, end: { line: 57, column: 31 } }, loc: { start: { line: 57, column: 37 }, end: { line: 57, column: 95 } }, line: 57 }, "2": { name: "(anonymous_2)", decl: { start: { line: 72, column: 2 }, end: { line: 72, column: 3 } }, loc: { start: { line: 72, column: 50 }, end: { line: 84, column: 3 } }, line: 72 }, "3": { name: "(anonymous_3)", decl: { start: { line: 86, column: 2 }, end: { line: 86, column: 3 } }, loc: { start: { line: 86, column: 10 }, end: { line: 96, column: 3 } }, line: 86 }, "4": { name: "(anonymous_4)", decl: { start: { line: 87, column: 33 }, end: { line: 87, column: 34 } }, loc: { start: { line: 87, column: 53 }, end: { line: 95, column: 5 } }, line: 87 }, "5": { name: "(anonymous_5)", decl: { start: { line: 88, column: 28 }, end: { line: 88, column: 29 } }, loc: { start: { line: 88, column: 34 }, end: { line: 94, column: 7 } }, line: 88 }, "6": { name: "(anonymous_6)", decl: { start: { line: 110, column: 2 }, end: { line: 110, column: 3 } }, loc: { start: { line: 110, column: 44 }, end: { line: 153, column: 3 } }, line: 110 }, "7": { name: "(anonymous_7)", decl: { start: { line: 149, column: 26 }, end: { line: 149, column: 27 } }, loc: { start: { line: 149, column: 34 }, end: { line: 149, column: 53 } }, line: 149 }, "8": { name: "(anonymous_8)", decl: { start: { line: 155, column: 2 }, end: { line: 155, column: 3 } }, loc: { start: { line: 155, column: 14 }, end: { line: 157, column: 3 } }, line: 155 }, "9": { name: "(anonymous_9)", decl: { start: { line: 159, column: 2 }, end: { line: 159, column: 3 } }, loc: { start: { line: 159, column: 17 }, end: { line: 161, column: 3 } }, line: 159 }, "10": { name: "(anonymous_10)", decl: { start: { line: 163, column: 2 }, end: { line: 163, column: 3 } }, loc: { start: { line: 163, column: 17 }, end: { line: 165, column: 3 } }, line: 163 }, "11": { name: "(anonymous_11)", decl: { start: { line: 167, column: 2 }, end: { line: 167, column: 3 } }, loc: { start: { line: 167, column: 15 }, end: { line: 169, column: 3 } }, line: 167 }, "12": { name: "(anonymous_12)", decl: { start: { line: 171, column: 2 }, end: { line: 171, column: 3 } }, loc: { start: { line: 171, column: 19 }, end: { line: 181, column: 3 } }, line: 171 }, "13": { name: "(anonymous_13)", decl: { start: { line: 183, column: 2 }, end: { line: 183, column: 3 } }, loc: { start: { line: 183, column: 14 }, end: { line: 185, column: 3 } }, line: 183 }, "14": { name: "(anonymous_14)", decl: { start: { line: 187, column: 2 }, end: { line: 187, column: 3 } }, loc: { start: { line: 187, column: 12 }, end: { line: 189, column: 3 } }, line: 187 }, "15": { name: "(anonymous_15)", decl: { start: { line: 191, column: 2 }, end: { line: 191, column: 3 } }, loc: { start: { line: 191, column: 13 }, end: { line: 193, column: 3 } }, line: 191 }, "16": { name: "(anonymous_16)", decl: { start: { line: 195, column: 2 }, end: { line: 195, column: 3 } }, loc: { start: { line: 195, column: 13 }, end: { line: 197, column: 3 } }, line: 195 }, "17": { name: "(anonymous_17)", decl: { start: { line: 199, column: 2 }, end: { line: 199, column: 3 } }, loc: { start: { line: 199, column: 13 }, end: { line: 201, column: 3 } }, line: 199 }, "18": { name: "(anonymous_18)", decl: { start: { line: 203, column: 2 }, end: { line: 203, column: 3 } }, loc: { start: { line: 203, column: 12 }, end: { line: 205, column: 3 } }, line: 203 }, "19": { name: "(anonymous_19)", decl: { start: { line: 207, column: 2 }, end: { line: 207, column: 3 } }, loc: { start: { line: 207, column: 32 }, end: { line: 209, column: 3 } }, line: 207 } }, branchMap: { "0": { loc: { start: { line: 55, column: 40 }, end: { line: 55, column: 267 } }, type: "if", locations: [{ start: { line: 55, column: 40 }, end: { line: 55, column: 267 } }, { start: { line: 55, column: 40 }, end: { line: 55, column: 267 } }], line: 55 }, "1": { loc: { start: { line: 55, column: 44 }, end: { line: 55, column: 65 } }, type: "binary-expr", locations: [{ start: { line: 55, column: 44 }, end: { line: 55, column: 47 } }, { start: { line: 55, column: 51 }, end: { line: 55, column: 65 } }], line: 55 }, "2": { loc: { start: { line: 55, column: 107 }, end: { line: 55, column: 228 } }, type: "if", locations: [{ start: { line: 55, column: 107 }, end: { line: 55, column: 228 } }, { start: { line: 55, column: 107 }, end: { line: 55, column: 228 } }], line: 55 }, "3": { loc: { start: { line: 55, column: 149 }, end: { line: 55, column: 224 } }, type: "if", locations: [{ start: { line: 55, column: 149 }, end: { line: 55, column: 224 } }, { start: { line: 55, column: 149 }, end: { line: 55, column: 224 } }], line: 55 }, "4": { loc: { start: { line: 57, column: 46 }, end: { line: 57, column: 92 } }, type: "cond-expr", locations: [{ start: { line: 57, column: 70 }, end: { line: 57, column: 73 } }, { start: { line: 57, column: 76 }, end: { line: 57, column: 92 } }], line: 57 }, "5": { loc: { start: { line: 57, column: 46 }, end: { line: 57, column: 67 } }, type: "binary-expr", locations: [{ start: { line: 57, column: 46 }, end: { line: 57, column: 49 } }, { start: { line: 57, column: 53 }, end: { line: 57, column: 67 } }], line: 57 }, "6": { loc: { start: { line: 89, column: 8 }, end: { line: 93, column: 9 } }, type: "if", locations: [{ start: { line: 89, column: 8 }, end: { line: 93, column: 9 } }, { start: { line: 89, column: 8 }, end: { line: 93, column: 9 } }], line: 89 }, "7": { loc: { start: { line: 91, column: 15 }, end: { line: 93, column: 9 } }, type: "if", locations: [{ start: { line: 91, column: 15 }, end: { line: 93, column: 9 } }, { start: { line: 91, column: 15 }, end: { line: 93, column: 9 } }], line: 91 }, "8": { loc: { start: { line: 110, column: 30 }, end: { line: 110, column: 42 } }, type: "default-arg", locations: [{ start: { line: 110, column: 38 }, end: { line: 110, column: 42 } }], line: 110 }, "9": { loc: { start: { line: 129, column: 6 }, end: { line: 135, column: 7 } }, type: "if", locations: [{ start: { line: 129, column: 6 }, end: { line: 135, column: 7 } }, { start: { line: 129, column: 6 }, end: { line: 135, column: 7 } }], line: 129 }, "10": { loc: { start: { line: 129, column: 10 }, end: { line: 129, column: 34 } }, type: "binary-expr", locations: [{ start: { line: 129, column: 10 }, end: { line: 129, column: 16 } }, { start: { line: 129, column: 20 }, end: { line: 129, column: 34 } }], line: 129 }, "11": { loc: { start: { line: 137, column: 6 }, end: { line: 143, column: 7 } }, type: "if", locations: [{ start: { line: 137, column: 6 }, end: { line: 143, column: 7 } }, { start: { line: 137, column: 6 }, end: { line: 143, column: 7 } }], line: 137 }, "12": { loc: { start: { line: 137, column: 10 }, end: { line: 137, column: 50 } }, type: "binary-expr", locations: [{ start: { line: 137, column: 10 }, end: { line: 137, column: 24 } }, { start: { line: 137, column: 28 }, end: { line: 137, column: 50 } }], line: 137 }, "13": { loc: { start: { line: 146, column: 4 }, end: { line: 150, column: 5 } }, type: "if", locations: [{ start: { line: 146, column: 4 }, end: { line: 150, column: 5 } }, { start: { line: 146, column: 4 }, end: { line: 150, column: 5 } }], line: 146 }, "14": { loc: { start: { line: 168, column: 11 }, end: { line: 168, column: 83 } }, type: "binary-expr", locations: [{ start: { line: 168, column: 11 }, end: { line: 168, column: 24 } }, { start: { line: 168, column: 28 }, end: { line: 168, column: 83 } }], line: 168 }, "15": { loc: { start: { line: 172, column: 4 }, end: { line: 176, column: 5 } }, type: "if", locations: [{ start: { line: 172, column: 4 }, end: { line: 176, column: 5 } }, { start: { line: 172, column: 4 }, end: { line: 176, column: 5 } }], line: 172 } }, s: { "0": 0, "1": 0, "2": 0, "3": 0, "4": 0, "5": 0, "6": 0, "7": 0, "8": 0, "9": 0, "10": 0, "11": 0, "12": 0, "13": 0, "14": 0, "15": 0, "16": 0, "17": 0, "18": 0, "19": 0, "20": 0, "21": 0, "22": 0, "23": 0, "24": 0, "25": 0, "26": 0, "27": 0, "28": 0, "29": 0, "30": 0, "31": 0, "32": 0, "33": 0, "34": 0, "35": 0, "36": 0, "37": 0, "38": 0, "39": 0, "40": 0, "41": 0, "42": 0, "43": 0, "44": 0, "45": 0, "46": 0, "47": 0, "48": 0, "49": 0, "50": 0, "51": 0, "52": 0, "53": 0, "54": 0, "55": 0, "56": 0, "57": 0, "58": 0, "59": 0, "60": 0, "61": 0, "62": 0, "63": 0, "64": 0, "65": 0, "66": 0, "67": 0, "68": 0, "69": 0, "70": 0, "71": 0, "72": 0, "73": 0, "74": 0, "75": 0, "76": 0 }, f: { "0": 0, "1": 0, "2": 0, "3": 0, "4": 0, "5": 0, "6": 0, "7": 0, "8": 0, "9": 0, "10": 0, "11": 0, "12": 0, "13": 0, "14": 0, "15": 0, "16": 0, "17": 0, "18": 0, "19": 0 }, b: { "0": [0, 0], "1": [0, 0], "2": [0, 0], "3": [0, 0], "4": [0, 0], "5": [0, 0], "6": [0, 0], "7": [0, 0], "8": [0], "9": [0, 0], "10": [0, 0], "11": [0, 0], "12": [0, 0], "13": [0, 0], "14": [0, 0], "15": [0, 0] }, inputSourceMap: { version: 3, sources: ["lib/session/index.js"], names: ["controller", "actions", "debug", "Session", "constructor", "contracts", "files", "txHash", "provider", "_store", "reducer", "rootSaga", "contexts", "sources", "normalize", "dispatch", "recordContracts", "start", "ready", "accept", "reject", "subscribe", "state", "session", "error", "sourcesByPath", "contract", "contractName", "binary", "sourceMap", "deployedBinary", "deployedSourceMap", "sourcePath", "source", "ast", "push", "map", "file", "getState", "view", "selector", "finished", "failed", "evm", "current", "callstack", "length", "action", "interrupt", "advance", "stepNext", "stepOver", "stepInto", "stepOut", "continueUntil", "breakpoints"], mappings: "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", file: "index.js", sourceRoot: "/Users/gnidan/src/work/truffle/packages/truffle-debugger", sourcesContent: ["import debugModule from \"debug\";\nconst debug = debugModule(\"debugger:session\");\n\nimport trace from \"lib/trace/selectors\";\nimport evm from \"lib/evm/selectors\";\nimport ast from \"lib/ast/selectors\";\nimport solidity from \"lib/solidity/selectors\";\n\nimport configureStore from \"lib/store\";\n\nimport * as controller from \"lib/controller/actions\";\nimport * as actions from \"./actions\";\n\nimport rootSaga from \"./sagas\";\nimport reducer from \"./reducers\";\n\n/**\n * Debugger Session\n */\nexport default class Session {\n  /**\n   * @param {Array<Contract>} contracts - contract definitions\n   * @param {Array<String>} files - array of filenames for sourceMap indexes\n   * @param {string} txHash - transaction hash\n   * @param {Web3Provider} provider - web3 provider\n   * @private\n   */\n  constructor(contracts, files, txHash, provider) {\n    /**\n     * @private\n     */\n    this._store = configureStore(reducer, rootSaga);\n\n    let { contexts, sources } = Session.normalize(contracts, files);\n\n    // record contracts\n    this._store.dispatch(actions.recordContracts(contexts, sources));\n\n    this._store.dispatch(actions.start(txHash, provider));\n  }\n\n  ready() {\n    return new Promise( (accept, reject) => {\n      this._store.subscribe( () => {\n        if (this.state.session == \"ACTIVE\") {\n          accept()\n        } else if (typeof this.state.session == \"object\") {\n          reject(this.state.session.error);\n        }\n      });\n    });\n  }\n\n  /**\n   * Split up artifacts into \"contexts\" and \"sources\", dividing artifact\n   * data into appropriate buckets.\n   *\n   * Multiple contracts can be defined in the same source file, but have\n   * different bytecodes.\n   *\n   * This iterates over the contracts and collects binaries separately\n   * from sources, using the optional `files` argument to force\n   * source ordering.\n   * @private\n   */\n  static normalize(contracts, files = null) {\n    let sourcesByPath = {};\n    let contexts = [];\n    let sources;\n\n    for (let contract of contracts) {\n      let {\n        contractName,\n        binary,\n        sourceMap,\n        deployedBinary,\n        deployedSourceMap,\n        sourcePath,\n        source,\n        ast\n      } = contract;\n\n      sourcesByPath[sourcePath] = { sourcePath, source, ast };\n\n      if (binary && binary != \"0x\") {\n        contexts.push({\n          contractName,\n          binary,\n          sourceMap\n        });\n      }\n\n      if (deployedBinary && deployedBinary != \"0x\") {\n        contexts.push({\n          contractName,\n          binary: deployedBinary,\n          sourceMap: deployedSourceMap\n        });\n      }\n    }\n\n    if (!files) {\n      sources = Object.values(sourcesByPath);\n    } else {\n      sources = files.map(file => sourcesByPath[file]);\n    }\n\n    return { contexts, sources };\n  }\n\n  get state() {\n    return this._store.getState();\n  }\n\n  view(selector) {\n    return selector(this.state);\n  }\n\n  get finished() {\n    return this.state.session == \"FINISHED\";\n  }\n\n  get failed() {\n    return this.finished && this.view(evm.current.callstack).length\n  }\n\n  dispatch(action) {\n    if (this.finished) {\n      debug(\"finished: intercepting action %o\", action);\n\n      return false;\n    }\n\n    this._store.dispatch(action);\n\n    return true;\n  }\n\n  interrupt() {\n    return this.dispatch(controller.interrupt());\n  }\n\n  advance() {\n    return this.dispatch(controller.advance());\n  }\n\n  stepNext() {\n    return this.dispatch(controller.stepNext());\n  }\n\n  stepOver() {\n    return this.dispatch(controller.stepOver());\n  }\n\n  stepInto() {\n    return this.dispatch(controller.stepInto());\n  }\n\n  stepOut() {\n    return this.dispatch(controller.stepOut());\n  }\n\n  continueUntil(...breakpoints) {\n    return this.dispatch(controller.continueUntil(...breakpoints));\n  }\n}\n"] }, _coverageSchema: "332fd63041d2c1bcb487cc26dd0d5f7d97098a6c" },
      coverage = global[gcv] || (global[gcv] = {});if (coverage[path] && coverage[path].hash === hash) {
    return coverage[path];
  }coverageData.hash = hash;return coverage[path] = coverageData;
}();cov_18s41jxx88.s[0]++;Object.defineProperty(exports, "__esModule", { value: true });var _values = (cov_18s41jxx88.s[1]++, __webpack_require__(28));var _values2 = (cov_18s41jxx88.s[2]++, _interopRequireDefault(_values));var _promise = (cov_18s41jxx88.s[3]++, __webpack_require__(23));var _promise2 = (cov_18s41jxx88.s[4]++, _interopRequireDefault(_promise));var _debug = (cov_18s41jxx88.s[5]++, __webpack_require__(0));var _debug2 = (cov_18s41jxx88.s[6]++, _interopRequireDefault(_debug));var _selectors = (cov_18s41jxx88.s[7]++, __webpack_require__(19));var _selectors2 = (cov_18s41jxx88.s[8]++, _interopRequireDefault(_selectors));var _selectors3 = (cov_18s41jxx88.s[9]++, __webpack_require__(5));var _selectors4 = (cov_18s41jxx88.s[10]++, _interopRequireDefault(_selectors3));var _selectors5 = (cov_18s41jxx88.s[11]++, __webpack_require__(14));var _selectors6 = (cov_18s41jxx88.s[12]++, _interopRequireDefault(_selectors5));var _selectors7 = (cov_18s41jxx88.s[13]++, __webpack_require__(6));var _selectors8 = (cov_18s41jxx88.s[14]++, _interopRequireDefault(_selectors7));var _store = (cov_18s41jxx88.s[15]++, __webpack_require__(55));var _store2 = (cov_18s41jxx88.s[16]++, _interopRequireDefault(_store));var _actions = (cov_18s41jxx88.s[17]++, __webpack_require__(30));var controller = (cov_18s41jxx88.s[18]++, _interopRequireWildcard(_actions));var _actions2 = (cov_18s41jxx88.s[19]++, __webpack_require__(25));var actions = (cov_18s41jxx88.s[20]++, _interopRequireWildcard(_actions2));var _sagas = (cov_18s41jxx88.s[21]++, __webpack_require__(60));var _sagas2 = (cov_18s41jxx88.s[22]++, _interopRequireDefault(_sagas));var _reducers = (cov_18s41jxx88.s[23]++, __webpack_require__(73));var _reducers2 = (cov_18s41jxx88.s[24]++, _interopRequireDefault(_reducers));function _interopRequireWildcard(obj) {
  cov_18s41jxx88.f[0]++;cov_18s41jxx88.s[25]++;if ((cov_18s41jxx88.b[1][0]++, obj) && (cov_18s41jxx88.b[1][1]++, obj.__esModule)) {
    cov_18s41jxx88.b[0][0]++;cov_18s41jxx88.s[26]++;return obj;
  } else {
    cov_18s41jxx88.b[0][1]++;var newObj = (cov_18s41jxx88.s[27]++, {});cov_18s41jxx88.s[28]++;if (obj != null) {
      cov_18s41jxx88.b[2][0]++;cov_18s41jxx88.s[29]++;for (var key in obj) {
        cov_18s41jxx88.s[30]++;if (Object.prototype.hasOwnProperty.call(obj, key)) {
          cov_18s41jxx88.b[3][0]++;cov_18s41jxx88.s[31]++;newObj[key] = obj[key];
        } else {
          cov_18s41jxx88.b[3][1]++;
        }
      }
    } else {
      cov_18s41jxx88.b[2][1]++;
    }cov_18s41jxx88.s[32]++;newObj.default = obj;cov_18s41jxx88.s[33]++;return newObj;
  }
}function _interopRequireDefault(obj) {
  cov_18s41jxx88.f[1]++;cov_18s41jxx88.s[34]++;return (cov_18s41jxx88.b[5][0]++, obj) && (cov_18s41jxx88.b[5][1]++, obj.__esModule) ? (cov_18s41jxx88.b[4][0]++, obj) : (cov_18s41jxx88.b[4][1]++, { default: obj });
}const debug = (cov_18s41jxx88.s[35]++, (0, _debug2.default)("debugger:session"));class Session {
  constructor(contracts, files, txHash, provider) {
    cov_18s41jxx88.f[2]++;cov_18s41jxx88.s[36]++;this._store = (0, _store2.default)(_reducers2.default, _sagas2.default);let { contexts, sources } = (cov_18s41jxx88.s[37]++, Session.normalize(contracts, files));cov_18s41jxx88.s[38]++;this._store.dispatch(actions.recordContracts(contexts, sources));cov_18s41jxx88.s[39]++;this._store.dispatch(actions.start(txHash, provider));
  }ready() {
    cov_18s41jxx88.f[3]++;cov_18s41jxx88.s[40]++;return new _promise2.default((accept, reject) => {
      cov_18s41jxx88.f[4]++;cov_18s41jxx88.s[41]++;this._store.subscribe(() => {
        cov_18s41jxx88.f[5]++;cov_18s41jxx88.s[42]++;if (this.state.session == "ACTIVE") {
          cov_18s41jxx88.b[6][0]++;cov_18s41jxx88.s[43]++;accept();
        } else {
          cov_18s41jxx88.b[6][1]++;cov_18s41jxx88.s[44]++;if (typeof this.state.session == "object") {
            cov_18s41jxx88.b[7][0]++;cov_18s41jxx88.s[45]++;reject(this.state.session.error);
          } else {
            cov_18s41jxx88.b[7][1]++;
          }
        }
      });
    });
  }static normalize(contracts, files = (cov_18s41jxx88.b[8][0]++, null)) {
    cov_18s41jxx88.f[6]++;let sourcesByPath = (cov_18s41jxx88.s[46]++, {});let contexts = (cov_18s41jxx88.s[47]++, []);let sources;cov_18s41jxx88.s[48]++;for (let contract of contracts) {
      let { contractName, binary, sourceMap, deployedBinary, deployedSourceMap, sourcePath, source, ast } = (cov_18s41jxx88.s[49]++, contract);cov_18s41jxx88.s[50]++;sourcesByPath[sourcePath] = { sourcePath, source, ast };cov_18s41jxx88.s[51]++;if ((cov_18s41jxx88.b[10][0]++, binary) && (cov_18s41jxx88.b[10][1]++, binary != "0x")) {
        cov_18s41jxx88.b[9][0]++;cov_18s41jxx88.s[52]++;contexts.push({ contractName, binary, sourceMap });
      } else {
        cov_18s41jxx88.b[9][1]++;
      }cov_18s41jxx88.s[53]++;if ((cov_18s41jxx88.b[12][0]++, deployedBinary) && (cov_18s41jxx88.b[12][1]++, deployedBinary != "0x")) {
        cov_18s41jxx88.b[11][0]++;cov_18s41jxx88.s[54]++;contexts.push({ contractName, binary: deployedBinary, sourceMap: deployedSourceMap });
      } else {
        cov_18s41jxx88.b[11][1]++;
      }
    }cov_18s41jxx88.s[55]++;if (!files) {
      cov_18s41jxx88.b[13][0]++;cov_18s41jxx88.s[56]++;sources = (0, _values2.default)(sourcesByPath);
    } else {
      cov_18s41jxx88.b[13][1]++;cov_18s41jxx88.s[57]++;sources = files.map(file => {
        cov_18s41jxx88.f[7]++;cov_18s41jxx88.s[58]++;return sourcesByPath[file];
      });
    }cov_18s41jxx88.s[59]++;return { contexts, sources };
  }get state() {
    cov_18s41jxx88.f[8]++;cov_18s41jxx88.s[60]++;return this._store.getState();
  }view(selector) {
    cov_18s41jxx88.f[9]++;cov_18s41jxx88.s[61]++;return selector(this.state);
  }get finished() {
    cov_18s41jxx88.f[10]++;cov_18s41jxx88.s[62]++;return this.state.session == "FINISHED";
  }get failed() {
    cov_18s41jxx88.f[11]++;cov_18s41jxx88.s[63]++;return (cov_18s41jxx88.b[14][0]++, this.finished) && (cov_18s41jxx88.b[14][1]++, this.view(_selectors4.default.current.callstack).length);
  }dispatch(action) {
    cov_18s41jxx88.f[12]++;cov_18s41jxx88.s[64]++;if (this.finished) {
      cov_18s41jxx88.b[15][0]++;cov_18s41jxx88.s[65]++;debug("finished: intercepting action %o", action);cov_18s41jxx88.s[66]++;return false;
    } else {
      cov_18s41jxx88.b[15][1]++;
    }cov_18s41jxx88.s[67]++;this._store.dispatch(action);cov_18s41jxx88.s[68]++;return true;
  }interrupt() {
    cov_18s41jxx88.f[13]++;cov_18s41jxx88.s[69]++;return this.dispatch(controller.interrupt());
  }advance() {
    cov_18s41jxx88.f[14]++;cov_18s41jxx88.s[70]++;return this.dispatch(controller.advance());
  }stepNext() {
    cov_18s41jxx88.f[15]++;cov_18s41jxx88.s[71]++;return this.dispatch(controller.stepNext());
  }stepOver() {
    cov_18s41jxx88.f[16]++;cov_18s41jxx88.s[72]++;return this.dispatch(controller.stepOver());
  }stepInto() {
    cov_18s41jxx88.f[17]++;cov_18s41jxx88.s[73]++;return this.dispatch(controller.stepInto());
  }stepOut() {
    cov_18s41jxx88.f[18]++;cov_18s41jxx88.s[74]++;return this.dispatch(controller.stepOut());
  }continueUntil(...breakpoints) {
    cov_18s41jxx88.f[19]++;cov_18s41jxx88.s[75]++;return this.dispatch(controller.continueUntil(...breakpoints));
  }
}cov_18s41jxx88.s[76]++;exports.default = Session;

/***/ }),
/* 50 */
/***/ (function(module, exports) {

module.exports = require("fast-levenshtein");

/***/ }),
/* 51 */
/***/ (function(module, exports) {

module.exports = require("truffle-solidity-utils");

/***/ }),
/* 52 */
/***/ (function(module, exports) {

module.exports = require("truffle-code-utils");

/***/ }),
/* 53 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var cov_1sj59p6kms=function(){var path="/Users/gnidan/src/work/truffle/node_modules/node-interval-tree/lib/index.js",hash="715d3f66f4921a364bb417cc9b9d8e713cc1c146",Function=function(){}.constructor,global=new Function('return this')(),gcv="__coverage__",coverageData={path:"/Users/gnidan/src/work/truffle/node_modules/node-interval-tree/lib/index.js",statementMap:{"0":{start:{line:7,column:0},end:{line:7,column:62}},"1":{start:{line:8,column:13},end:{line:8,column:36}},"2":{start:{line:10,column:4},end:{line:15,column:5}},"3":{start:{line:11,column:8},end:{line:11,column:18}},"4":{start:{line:14,column:8},end:{line:14,column:27}},"5":{start:{line:17,column:26},end:{line:424,column:3}},"6":{start:{line:19,column:8},end:{line:19,column:41}},"7":{start:{line:20,column:8},end:{line:20,column:26}},"8":{start:{line:21,column:8},end:{line:21,column:24}},"9":{start:{line:22,column:8},end:{line:22,column:30}},"10":{start:{line:23,column:8},end:{line:23,column:31}},"11":{start:{line:25,column:8},end:{line:25,column:34}},"12":{start:{line:28,column:4},end:{line:36,column:6}},"13":{start:{line:29,column:19},end:{line:29,column:39}},"14":{start:{line:30,column:8},end:{line:34,column:9}},"15":{start:{line:31,column:12},end:{line:33,column:13}},"16":{start:{line:32,column:16},end:{line:32,column:44}},"17":{start:{line:35,column:8},end:{line:35,column:20}},"18":{start:{line:38,column:4},end:{line:40,column:6}},"19":{start:{line:39,column:8},end:{line:39,column:74}},"20":{start:{line:44,column:4},end:{line:64,column:6}},"21":{start:{line:45,column:8},end:{line:47,column:9}},"22":{start:{line:46,column:12},end:{line:46,column:19}},"23":{start:{line:48,column:23},end:{line:48,column:41}},"24":{start:{line:49,column:8},end:{line:60,column:9}},"25":{start:{line:50,column:12},end:{line:50,column:83}},"26":{start:{line:52,column:13},end:{line:60,column:9}},"27":{start:{line:53,column:12},end:{line:53,column:57}},"28":{start:{line:55,column:13},end:{line:60,column:9}},"29":{start:{line:56,column:12},end:{line:56,column:58}},"30":{start:{line:59,column:12},end:{line:59,column:32}},"31":{start:{line:61,column:8},end:{line:63,column:9}},"32":{start:{line:62,column:12},end:{line:62,column:45}},"33":{start:{line:87,column:4},end:{line:120,column:6}},"34":{start:{line:88,column:21},end:{line:88,column:32}},"35":{start:{line:89,column:19},end:{line:89,column:30}},"36":{start:{line:91,column:33},end:{line:91,column:51}},"37":{start:{line:92,column:8},end:{line:103,column:9}},"38":{start:{line:93,column:12},end:{line:93,column:68}},"39":{start:{line:95,column:13},end:{line:103,column:9}},"40":{start:{line:96,column:12},end:{line:96,column:67}},"41":{start:{line:98,column:13},end:{line:103,column:9}},"42":{start:{line:99,column:12},end:{line:99,column:42}},"43":{start:{line:102,column:12},end:{line:102,column:93}},"44":{start:{line:105,column:23},end:{line:105,column:41}},"45":{start:{line:106,column:8},end:{line:117,column:9}},"46":{start:{line:107,column:12},end:{line:107,column:58}},"47":{start:{line:109,column:13},end:{line:117,column:9}},"48":{start:{line:110,column:12},end:{line:110,column:57}},"49":{start:{line:112,column:13},end:{line:117,column:9}},"50":{start:{line:113,column:12},end:{line:113,column:32}},"51":{start:{line:116,column:12},end:{line:116,column:83}},"52":{start:{line:119,column:8},end:{line:119,column:97}},"53":{start:{line:143,column:4},end:{line:176,column:6}},"54":{start:{line:144,column:21},end:{line:144,column:32}},"55":{start:{line:145,column:20},end:{line:145,column:32}},"56":{start:{line:147,column:34},end:{line:147,column:53}},"57":{start:{line:148,column:8},end:{line:159,column:9}},"58":{start:{line:149,column:12},end:{line:149,column:71}},"59":{start:{line:151,column:13},end:{line:159,column:9}},"60":{start:{line:152,column:12},end:{line:152,column:70}},"61":{start:{line:154,column:13},end:{line:159,column:9}},"62":{start:{line:155,column:12},end:{line:155,column:44}},"63":{start:{line:158,column:12},end:{line:158,column:97}},"64":{start:{line:161,column:23},end:{line:161,column:41}},"65":{start:{line:162,column:8},end:{line:173,column:9}},"66":{start:{line:163,column:12},end:{line:163,column:58}},"67":{start:{line:165,column:13},end:{line:173,column:9}},"68":{start:{line:166,column:12},end:{line:166,column:57}},"69":{start:{line:168,column:13},end:{line:173,column:9}},"70":{start:{line:169,column:12},end:{line:169,column:32}},"71":{start:{line:172,column:12},end:{line:172,column:83}},"72":{start:{line:175,column:8},end:{line:175,column:90}},"73":{start:{line:177,column:4},end:{line:199,column:6}},"74":{start:{line:178,column:25},end:{line:178,column:35}},"75":{start:{line:179,column:8},end:{line:179,column:40}},"76":{start:{line:180,column:8},end:{line:190,column:9}},"77":{start:{line:181,column:12},end:{line:181,column:48}},"78":{start:{line:184,column:12},end:{line:189,column:13}},"79":{start:{line:185,column:16},end:{line:185,column:52}},"80":{start:{line:187,column:17},end:{line:189,column:13}},"81":{start:{line:188,column:16},end:{line:188,column:53}},"82":{start:{line:191,column:8},end:{line:191,column:37}},"83":{start:{line:192,column:8},end:{line:194,column:9}},"84":{start:{line:193,column:12},end:{line:193,column:37}},"85":{start:{line:195,column:8},end:{line:195,column:31}},"86":{start:{line:196,column:8},end:{line:196,column:33}},"87":{start:{line:197,column:8},end:{line:197,column:28}},"88":{start:{line:198,column:8},end:{line:198,column:34}},"89":{start:{line:200,column:4},end:{line:222,column:6}},"90":{start:{line:201,column:24},end:{line:201,column:33}},"91":{start:{line:202,column:8},end:{line:202,column:39}},"92":{start:{line:203,column:8},end:{line:213,column:9}},"93":{start:{line:204,column:12},end:{line:204,column:47}},"94":{start:{line:207,column:12},end:{line:212,column:13}},"95":{start:{line:208,column:16},end:{line:208,column:50}},"96":{start:{line:210,column:17},end:{line:212,column:13}},"97":{start:{line:211,column:16},end:{line:211,column:51}},"98":{start:{line:214,column:8},end:{line:214,column:36}},"99":{start:{line:215,column:8},end:{line:217,column:9}},"100":{start:{line:216,column:12},end:{line:216,column:36}},"101":{start:{line:218,column:8},end:{line:218,column:31}},"102":{start:{line:219,column:8},end:{line:219,column:32}},"103":{start:{line:220,column:8},end:{line:220,column:28}},"104":{start:{line:221,column:8},end:{line:221,column:33}},"105":{start:{line:225,column:4},end:{line:254,column:6}},"106":{start:{line:226,column:8},end:{line:253,column:9}},"107":{start:{line:227,column:23},end:{line:227,column:32}},"108":{start:{line:228,column:12},end:{line:238,column:13}},"109":{start:{line:230,column:16},end:{line:230,column:36}},"110":{start:{line:231,column:16},end:{line:231,column:50}},"111":{start:{line:235,column:16},end:{line:235,column:35}},"112":{start:{line:236,column:16},end:{line:236,column:36}},"113":{start:{line:237,column:16},end:{line:237,column:50}},"114":{start:{line:240,column:13},end:{line:253,column:9}},"115":{start:{line:241,column:24},end:{line:241,column:34}},"116":{start:{line:242,column:12},end:{line:252,column:13}},"117":{start:{line:244,column:16},end:{line:244,column:35}},"118":{start:{line:245,column:16},end:{line:245,column:49}},"119":{start:{line:249,column:16},end:{line:249,column:37}},"120":{start:{line:250,column:16},end:{line:250,column:35}},"121":{start:{line:251,column:16},end:{line:251,column:49}},"122":{start:{line:255,column:4},end:{line:285,column:6}},"123":{start:{line:256,column:8},end:{line:275,column:9}},"124":{start:{line:258,column:12},end:{line:264,column:13}},"125":{start:{line:259,column:16},end:{line:259,column:64}},"126":{start:{line:260,column:16},end:{line:260,column:40}},"127":{start:{line:263,column:16},end:{line:263,column:41}},"128":{start:{line:268,column:12},end:{line:274,column:13}},"129":{start:{line:269,column:16},end:{line:269,column:65}},"130":{start:{line:270,column:16},end:{line:270,column:41}},"131":{start:{line:273,column:16},end:{line:273,column:42}},"132":{start:{line:277,column:8},end:{line:279,column:9}},"133":{start:{line:278,column:12},end:{line:278,column:35}},"134":{start:{line:281,column:8},end:{line:281,column:28}},"135":{start:{line:284,column:8},end:{line:284,column:26}},"136":{start:{line:286,column:4},end:{line:298,column:6}},"137":{start:{line:287,column:8},end:{line:296,column:9}},"138":{start:{line:289,column:30},end:{line:289,column:32}},"139":{start:{line:290,column:12},end:{line:294,column:13}},"140":{start:{line:291,column:16},end:{line:293,column:17}},"141":{start:{line:292,column:20},end:{line:292,column:61}},"142":{start:{line:295,column:12},end:{line:295,column:31}},"143":{start:{line:297,column:8},end:{line:297,column:18}},"144":{start:{line:299,column:4},end:{line:329,column:6}},"145":{start:{line:301,column:8},end:{line:303,column:9}},"146":{start:{line:302,column:12},end:{line:302,column:22}},"147":{start:{line:304,column:25},end:{line:304,column:27}},"148":{start:{line:305,column:24},end:{line:305,column:26}},"149":{start:{line:306,column:26},end:{line:306,column:28}},"150":{start:{line:309,column:8},end:{line:311,column:9}},"151":{start:{line:310,column:12},end:{line:310,column:22}},"152":{start:{line:313,column:8},end:{line:315,column:9}},"153":{start:{line:314,column:12},end:{line:314,column:53}},"154":{start:{line:317,column:8},end:{line:317,column:65}},"155":{start:{line:320,column:8},end:{line:322,column:9}},"156":{start:{line:321,column:12},end:{line:321,column:48}},"157":{start:{line:324,column:8},end:{line:326,column:9}},"158":{start:{line:325,column:12},end:{line:325,column:55}},"159":{start:{line:328,column:8},end:{line:328,column:57}},"160":{start:{line:331,column:4},end:{line:349,column:6}},"161":{start:{line:332,column:8},end:{line:334,column:9}},"162":{start:{line:333,column:12},end:{line:333,column:29}},"163":{start:{line:335,column:8},end:{line:347,column:9}},"164":{start:{line:336,column:12},end:{line:336,column:24}},"165":{start:{line:338,column:13},end:{line:347,column:9}},"166":{start:{line:339,column:12},end:{line:341,column:13}},"167":{start:{line:340,column:16},end:{line:340,column:53}},"168":{start:{line:344,column:12},end:{line:346,column:13}},"169":{start:{line:345,column:16},end:{line:345,column:54}},"170":{start:{line:348,column:8},end:{line:348,column:25}},"171":{start:{line:351,column:4},end:{line:358,column:6}},"172":{start:{line:352,column:8},end:{line:357,column:9}},"173":{start:{line:353,column:12},end:{line:353,column:24}},"174":{start:{line:356,column:12},end:{line:356,column:41}},"175":{start:{line:359,column:4},end:{line:422,column:6}},"176":{start:{line:360,column:21},end:{line:360,column:32}},"177":{start:{line:361,column:8},end:{line:421,column:9}},"178":{start:{line:363,column:12},end:{line:368,column:13}},"179":{start:{line:364,column:16},end:{line:364,column:46}},"180":{start:{line:367,column:16},end:{line:367,column:33}},"181":{start:{line:370,column:13},end:{line:421,column:9}},"182":{start:{line:372,column:12},end:{line:377,column:13}},"183":{start:{line:373,column:16},end:{line:373,column:47}},"184":{start:{line:376,column:16},end:{line:376,column:33}},"185":{start:{line:380,column:12},end:{line:420,column:13}},"186":{start:{line:382,column:31},end:{line:382,column:53}},"187":{start:{line:383,column:16},end:{line:383,column:40}},"188":{start:{line:384,column:16},end:{line:384,column:48}},"189":{start:{line:385,column:16},end:{line:385,column:47}},"190":{start:{line:387,column:17},end:{line:420,column:13}},"191":{start:{line:389,column:16},end:{line:398,column:17}},"192":{start:{line:390,column:20},end:{line:390,column:45}},"193":{start:{line:391,column:20},end:{line:391,column:47}},"194":{start:{line:394,column:20},end:{line:394,column:44}},"195":{start:{line:395,column:20},end:{line:397,column:21}},"196":{start:{line:396,column:24},end:{line:396,column:50}},"197":{start:{line:399,column:16},end:{line:399,column:44}},"198":{start:{line:400,column:16},end:{line:400,column:38}},"199":{start:{line:401,column:16},end:{line:401,column:36}},"200":{start:{line:402,column:16},end:{line:402,column:28}},"201":{start:{line:404,column:17},end:{line:420,column:13}},"202":{start:{line:406,column:16},end:{line:415,column:17}},"203":{start:{line:407,column:20},end:{line:407,column:46}},"204":{start:{line:408,column:20},end:{line:408,column:47}},"205":{start:{line:411,column:20},end:{line:411,column:45}},"206":{start:{line:412,column:20},end:{line:414,column:21}},"207":{start:{line:413,column:24},end:{line:413,column:50}},"208":{start:{line:416,column:16},end:{line:416,column:44}},"209":{start:{line:417,column:16},end:{line:417,column:38}},"210":{start:{line:418,column:16},end:{line:418,column:36}},"211":{start:{line:419,column:16},end:{line:419,column:28}},"212":{start:{line:423,column:4},end:{line:423,column:16}},"213":{start:{line:425,column:0},end:{line:425,column:20}},"214":{start:{line:426,column:34},end:{line:584,column:3}},"215":{start:{line:428,column:8},end:{line:428,column:23}},"216":{start:{line:430,column:4},end:{line:471,column:6}},"217":{start:{line:431,column:8},end:{line:433,column:9}},"218":{start:{line:432,column:12},end:{line:432,column:82}},"219":{start:{line:434,column:8},end:{line:470,column:9}},"220":{start:{line:436,column:12},end:{line:436,column:47}},"221":{start:{line:437,column:12},end:{line:437,column:25}},"222":{start:{line:438,column:12},end:{line:438,column:24}},"223":{start:{line:442,column:23},end:{line:442,column:59}},"224":{start:{line:443,column:12},end:{line:469,column:13}},"225":{start:{line:445,column:16},end:{line:451,column:17}},"226":{start:{line:446,column:20},end:{line:450,column:21}},"227":{start:{line:449,column:24},end:{line:449,column:37}},"228":{start:{line:453,column:16},end:{line:453,column:42}},"229":{start:{line:455,column:16},end:{line:460,column:17}},"230":{start:{line:456,column:20},end:{line:456,column:43}},"231":{start:{line:457,column:20},end:{line:459,column:21}},"232":{start:{line:458,column:24},end:{line:458,column:57}},"233":{start:{line:461,column:16},end:{line:461,column:29}},"234":{start:{line:462,column:16},end:{line:462,column:28}},"235":{start:{line:466,column:16},end:{line:466,column:41}},"236":{start:{line:467,column:16},end:{line:467,column:29}},"237":{start:{line:468,column:16},end:{line:468,column:28}},"238":{start:{line:472,column:4},end:{line:480,column:6}},"239":{start:{line:473,column:8},end:{line:479,column:9}},"240":{start:{line:475,column:12},end:{line:475,column:22}},"241":{start:{line:478,column:12},end:{line:478,column:47}},"242":{start:{line:481,column:4},end:{line:576,column:6}},"243":{start:{line:482,column:8},end:{line:575,column:9}},"244":{start:{line:484,column:12},end:{line:484,column:25}},"245":{start:{line:487,column:23},end:{line:487,column:59}},"246":{start:{line:488,column:12},end:{line:574,column:13}},"247":{start:{line:489,column:16},end:{line:489,column:29}},"248":{start:{line:491,column:17},end:{line:574,column:13}},"249":{start:{line:492,column:36},end:{line:492,column:42}},"250":{start:{line:494,column:16},end:{line:500,column:17}},"251":{start:{line:495,column:20},end:{line:499,column:21}},"252":{start:{line:496,column:24},end:{line:496,column:56}},"253":{start:{line:497,column:24},end:{line:497,column:50}},"254":{start:{line:498,column:24},end:{line:498,column:30}},"255":{start:{line:501,column:16},end:{line:527,column:17}},"256":{start:{line:502,column:20},end:{line:502,column:46}},"257":{start:{line:504,column:20},end:{line:521,column:21}},"258":{start:{line:505,column:39},end:{line:505,column:57}},"259":{start:{line:506,column:24},end:{line:517,column:25}},"260":{start:{line:507,column:28},end:{line:507,column:99}},"261":{start:{line:509,column:29},end:{line:517,column:25}},"262":{start:{line:510,column:28},end:{line:510,column:73}},"263":{start:{line:512,column:29},end:{line:517,column:25}},"264":{start:{line:513,column:28},end:{line:513,column:74}},"265":{start:{line:516,column:28},end:{line:516,column:48}},"266":{start:{line:518,column:24},end:{line:520,column:25}},"267":{start:{line:519,column:28},end:{line:519,column:61}},"268":{start:{line:522,column:20},end:{line:522,column:33}},"269":{start:{line:523,column:20},end:{line:523,column:32}},"270":{start:{line:526,column:20},end:{line:526,column:33}},"271":{start:{line:529,column:17},end:{line:574,column:13}},"272":{start:{line:532,column:16},end:{line:569,column:17}},"273":{start:{line:534,column:20},end:{line:564,column:21}},"274":{start:{line:537,column:41},end:{line:537,column:94}},"275":{start:{line:538,column:24},end:{line:538,column:52}},"276":{start:{line:539,column:24},end:{line:539,column:54}},"277":{start:{line:540,column:42},end:{line:540,column:64}},"278":{start:{line:541,column:24},end:{line:541,column:52}},"279":{start:{line:542,column:24},end:{line:544,column:25}},"280":{start:{line:543,column:28},end:{line:543,column:57}},"281":{start:{line:545,column:24},end:{line:552,column:25}},"282":{start:{line:546,column:28},end:{line:546,column:52}},"283":{start:{line:547,column:28},end:{line:547,column:41}},"284":{start:{line:548,column:28},end:{line:548,column:40}},"285":{start:{line:551,column:28},end:{line:551,column:41}},"286":{start:{line:555,column:42},end:{line:555,column:64}},"287":{start:{line:556,column:24},end:{line:563,column:25}},"288":{start:{line:557,column:28},end:{line:557,column:52}},"289":{start:{line:558,column:28},end:{line:558,column:41}},"290":{start:{line:559,column:28},end:{line:559,column:40}},"291":{start:{line:562,column:28},end:{line:562,column:41}},"292":{start:{line:568,column:20},end:{line:568,column:33}},"293":{start:{line:573,column:16},end:{line:573,column:29}},"294":{start:{line:577,column:4},end:{line:579,column:6}},"295":{start:{line:578,column:8},end:{line:578,column:38}},"296":{start:{line:580,column:4},end:{line:582,column:6}},"297":{start:{line:581,column:8},end:{line:581,column:39}},"298":{start:{line:583,column:4},end:{line:583,column:24}},"299":{start:{line:585,column:0},end:{line:585,column:36}},"300":{start:{line:586,column:38},end:{line:613,column:3}},"301":{start:{line:588,column:8},end:{line:588,column:39}},"302":{start:{line:590,column:4},end:{line:592,column:6}},"303":{start:{line:591,column:8},end:{line:591,column:70}},"304":{start:{line:593,column:4},end:{line:595,column:6}},"305":{start:{line:594,column:8},end:{line:594,column:70}},"306":{start:{line:596,column:4},end:{line:598,column:6}},"307":{start:{line:597,column:8},end:{line:597,column:80}},"308":{start:{line:597,column:62},end:{line:597,column:76}},"309":{start:{line:599,column:4},end:{line:601,column:6}},"310":{start:{line:600,column:8},end:{line:600,column:35}},"311":{start:{line:602,column:4},end:{line:604,column:6}},"312":{start:{line:603,column:8},end:{line:603,column:36}},"313":{start:{line:605,column:4},end:{line:611,column:7}},"314":{start:{line:607,column:12},end:{line:607,column:35}},"315":{start:{line:612,column:4},end:{line:612,column:28}},"316":{start:{line:614,column:0},end:{line:614,column:35}},"317":{start:{line:615,column:29},end:{line:659,column:3}},"318":{start:{line:617,column:8},end:{line:617,column:24}},"319":{start:{line:618,column:8},end:{line:620,column:9}},"320":{start:{line:619,column:12},end:{line:619,column:33}},"321":{start:{line:622,column:4},end:{line:645,column:6}},"322":{start:{line:624,column:8},end:{line:629,column:9}},"323":{start:{line:625,column:12},end:{line:628,column:14}},"324":{start:{line:631,column:8},end:{line:636,column:9}},"325":{start:{line:632,column:12},end:{line:635,column:14}},"326":{start:{line:637,column:8},end:{line:643,column:9}},"327":{start:{line:638,column:12},end:{line:638,column:46}},"328":{start:{line:642,column:12},end:{line:642,column:23}},"329":{start:{line:644,column:8},end:{line:644,column:27}},"330":{start:{line:646,column:4},end:{line:653,column:6}},"331":{start:{line:647,column:8},end:{line:647,column:32}},"332":{start:{line:648,column:8},end:{line:648,column:19}},"333":{start:{line:649,column:8},end:{line:652,column:9}},"334":{start:{line:650,column:12},end:{line:650,column:46}},"335":{start:{line:651,column:12},end:{line:651,column:53}},"336":{start:{line:654,column:4},end:{line:657,column:6}},"337":{start:{line:655,column:8},end:{line:655,column:44}},"338":{start:{line:656,column:8},end:{line:656,column:19}},"339":{start:{line:658,column:4},end:{line:658,column:19}},"340":{start:{line:660,column:0},end:{line:660,column:26}},"341":{start:{line:661,column:0},end:{line:663,column:1}},"342":{start:{line:662,column:4},end:{line:662,column:70}},"343":{start:{line:662,column:55},end:{line:662,column:67}},"344":{start:{line:664,column:30},end:{line:703,column:3}},"345":{start:{line:666,column:8},end:{line:666,column:24}},"346":{start:{line:667,column:8},end:{line:667,column:19}},"347":{start:{line:668,column:8},end:{line:668,column:37}},"348":{start:{line:670,column:4},end:{line:694,column:6}},"349":{start:{line:673,column:8},end:{line:678,column:9}},"350":{start:{line:674,column:12},end:{line:677,column:14}},"351":{start:{line:680,column:8},end:{line:685,column:9}},"352":{start:{line:681,column:12},end:{line:684,column:14}},"353":{start:{line:686,column:8},end:{line:688,column:9}},"354":{start:{line:687,column:12},end:{line:687,column:46}},"355":{start:{line:689,column:8},end:{line:691,column:9}},"356":{start:{line:690,column:12},end:{line:690,column:45}},"357":{start:{line:692,column:8},end:{line:692,column:19}},"358":{start:{line:693,column:8},end:{line:693,column:27}},"359":{start:{line:695,column:4},end:{line:697,column:6}},"360":{start:{line:696,column:8},end:{line:696,column:30}},"361":{start:{line:698,column:4},end:{line:701,column:6}},"362":{start:{line:699,column:8},end:{line:699,column:44}},"363":{start:{line:700,column:8},end:{line:700,column:19}},"364":{start:{line:702,column:4},end:{line:702,column:20}},"365":{start:{line:704,column:0},end:{line:704,column:28}},"366":{start:{line:705,column:0},end:{line:707,column:1}},"367":{start:{line:706,column:4},end:{line:706,column:71}},"368":{start:{line:706,column:56},end:{line:706,column:68}}},fnMap:{"0":{name:"height",decl:{start:{line:9,column:9},end:{line:9,column:15}},loc:{start:{line:9,column:22},end:{line:16,column:1}},line:9},"1":{name:"(anonymous_1)",decl:{start:{line:17,column:26},end:{line:17,column:27}},loc:{start:{line:17,column:38},end:{line:424,column:1}},line:17},"2":{name:"Node",decl:{start:{line:18,column:13},end:{line:18,column:17}},loc:{start:{line:18,column:40},end:{line:26,column:5}},line:18},"3":{name:"(anonymous_3)",decl:{start:{line:28,column:33},end:{line:28,column:34}},loc:{start:{line:28,column:45},end:{line:36,column:5}},line:28},"4":{name:"(anonymous_4)",decl:{start:{line:38,column:34},end:{line:38,column:35}},loc:{start:{line:38,column:46},end:{line:40,column:5}},line:38},"5":{name:"(anonymous_5)",decl:{start:{line:44,column:40},end:{line:44,column:41}},loc:{start:{line:44,column:52},end:{line:64,column:5}},line:44},"6":{name:"(anonymous_6)",decl:{start:{line:87,column:48},end:{line:87,column:49}},loc:{start:{line:87,column:60},end:{line:120,column:5}},line:87},"7":{name:"(anonymous_7)",decl:{start:{line:143,column:47},end:{line:143,column:48}},loc:{start:{line:143,column:59},end:{line:176,column:5}},line:143},"8":{name:"(anonymous_8)",decl:{start:{line:177,column:33},end:{line:177,column:34}},loc:{start:{line:177,column:45},end:{line:199,column:5}},line:177},"9":{name:"(anonymous_9)",decl:{start:{line:200,column:34},end:{line:200,column:35}},loc:{start:{line:200,column:46},end:{line:222,column:5}},line:200},"10":{name:"(anonymous_10)",decl:{start:{line:225,column:32},end:{line:225,column:33}},loc:{start:{line:225,column:44},end:{line:254,column:5}},line:225},"11":{name:"(anonymous_11)",decl:{start:{line:255,column:28},end:{line:255,column:29}},loc:{start:{line:255,column:46},end:{line:285,column:5}},line:255},"12":{name:"(anonymous_12)",decl:{start:{line:286,column:44},end:{line:286,column:45}},loc:{start:{line:286,column:78},end:{line:298,column:5}},line:286},"13":{name:"(anonymous_13)",decl:{start:{line:299,column:28},end:{line:299,column:29}},loc:{start:{line:299,column:49},end:{line:329,column:5}},line:299},"14":{name:"(anonymous_14)",decl:{start:{line:331,column:36},end:{line:331,column:37}},loc:{start:{line:331,column:51},end:{line:349,column:5}},line:331},"15":{name:"(anonymous_15)",decl:{start:{line:351,column:31},end:{line:351,column:32}},loc:{start:{line:351,column:43},end:{line:358,column:5}},line:351},"16":{name:"(anonymous_16)",decl:{start:{line:359,column:28},end:{line:359,column:29}},loc:{start:{line:359,column:44},end:{line:422,column:5}},line:359},"17":{name:"(anonymous_17)",decl:{start:{line:426,column:34},end:{line:426,column:35}},loc:{start:{line:426,column:46},end:{line:584,column:1}},line:426},"18":{name:"IntervalTree",decl:{start:{line:427,column:13},end:{line:427,column:25}},loc:{start:{line:427,column:28},end:{line:429,column:5}},line:427},"19":{name:"(anonymous_19)",decl:{start:{line:430,column:36},end:{line:430,column:37}},loc:{start:{line:430,column:54},end:{line:471,column:5}},line:430},"20":{name:"(anonymous_20)",decl:{start:{line:472,column:36},end:{line:472,column:37}},loc:{start:{line:472,column:57},end:{line:480,column:5}},line:472},"21":{name:"(anonymous_21)",decl:{start:{line:481,column:36},end:{line:481,column:37}},loc:{start:{line:481,column:54},end:{line:576,column:5}},line:481},"22":{name:"(anonymous_22)",decl:{start:{line:577,column:37},end:{line:577,column:38}},loc:{start:{line:577,column:49},end:{line:579,column:5}},line:577},"23":{name:"(anonymous_23)",decl:{start:{line:580,column:38},end:{line:580,column:39}},loc:{start:{line:580,column:50},end:{line:582,column:5}},line:580},"24":{name:"(anonymous_24)",decl:{start:{line:586,column:38},end:{line:586,column:39}},loc:{start:{line:586,column:50},end:{line:613,column:1}},line:586},"25":{name:"DataIntervalTree",decl:{start:{line:587,column:13},end:{line:587,column:29}},loc:{start:{line:587,column:32},end:{line:589,column:5}},line:587},"26":{name:"(anonymous_26)",decl:{start:{line:590,column:40},end:{line:590,column:41}},loc:{start:{line:590,column:67},end:{line:592,column:5}},line:590},"27":{name:"(anonymous_27)",decl:{start:{line:593,column:40},end:{line:593,column:41}},loc:{start:{line:593,column:67},end:{line:595,column:5}},line:593},"28":{name:"(anonymous_28)",decl:{start:{line:596,column:40},end:{line:596,column:41}},loc:{start:{line:596,column:61},end:{line:598,column:5}},line:596},"29":{name:"(anonymous_29)",decl:{start:{line:597,column:47},end:{line:597,column:48}},loc:{start:{line:597,column:60},end:{line:597,column:78}},line:597},"30":{name:"(anonymous_30)",decl:{start:{line:599,column:41},end:{line:599,column:42}},loc:{start:{line:599,column:53},end:{line:601,column:5}},line:599},"31":{name:"(anonymous_31)",decl:{start:{line:602,column:42},end:{line:602,column:43}},loc:{start:{line:602,column:54},end:{line:604,column:5}},line:602},"32":{name:"(anonymous_32)",decl:{start:{line:606,column:13},end:{line:606,column:14}},loc:{start:{line:606,column:25},end:{line:608,column:9}},line:606},"33":{name:"(anonymous_33)",decl:{start:{line:615,column:29},end:{line:615,column:30}},loc:{start:{line:615,column:41},end:{line:659,column:1}},line:615},"34":{name:"InOrder",decl:{start:{line:616,column:13},end:{line:616,column:20}},loc:{start:{line:616,column:32},end:{line:621,column:5}},line:616},"35":{name:"(anonymous_35)",decl:{start:{line:622,column:29},end:{line:622,column:30}},loc:{start:{line:622,column:41},end:{line:645,column:5}},line:622},"36":{name:"(anonymous_36)",decl:{start:{line:646,column:29},end:{line:646,column:30}},loc:{start:{line:646,column:45},end:{line:653,column:5}},line:646},"37":{name:"(anonymous_37)",decl:{start:{line:654,column:28},end:{line:654,column:29}},loc:{start:{line:654,column:40},end:{line:657,column:5}},line:654},"38":{name:"(anonymous_38)",decl:{start:{line:662,column:41},end:{line:662,column:42}},loc:{start:{line:662,column:53},end:{line:662,column:69}},line:662},"39":{name:"(anonymous_39)",decl:{start:{line:664,column:30},end:{line:664,column:31}},loc:{start:{line:664,column:42},end:{line:703,column:1}},line:664},"40":{name:"PreOrder",decl:{start:{line:665,column:13},end:{line:665,column:21}},loc:{start:{line:665,column:33},end:{line:669,column:5}},line:665},"41":{name:"(anonymous_41)",decl:{start:{line:670,column:30},end:{line:670,column:31}},loc:{start:{line:670,column:42},end:{line:694,column:5}},line:670},"42":{name:"(anonymous_42)",decl:{start:{line:695,column:30},end:{line:695,column:31}},loc:{start:{line:695,column:46},end:{line:697,column:5}},line:695},"43":{name:"(anonymous_43)",decl:{start:{line:698,column:29},end:{line:698,column:30}},loc:{start:{line:698,column:41},end:{line:701,column:5}},line:698},"44":{name:"(anonymous_44)",decl:{start:{line:706,column:42},end:{line:706,column:43}},loc:{start:{line:706,column:54},end:{line:706,column:70}},line:706}},branchMap:{"0":{loc:{start:{line:10,column:4},end:{line:15,column:5}},type:"if",locations:[{start:{line:10,column:4},end:{line:15,column:5}},{start:{line:10,column:4},end:{line:15,column:5}}],line:10},"1":{loc:{start:{line:31,column:12},end:{line:33,column:13}},type:"if",locations:[{start:{line:31,column:12},end:{line:33,column:13}},{start:{line:31,column:12},end:{line:33,column:13}}],line:31},"2":{loc:{start:{line:45,column:8},end:{line:47,column:9}},type:"if",locations:[{start:{line:45,column:8},end:{line:47,column:9}},{start:{line:45,column:8},end:{line:47,column:9}}],line:45},"3":{loc:{start:{line:49,column:8},end:{line:60,column:9}},type:"if",locations:[{start:{line:49,column:8},end:{line:60,column:9}},{start:{line:49,column:8},end:{line:60,column:9}}],line:49},"4":{loc:{start:{line:49,column:12},end:{line:49,column:63}},type:"binary-expr",locations:[{start:{line:49,column:12},end:{line:49,column:35}},{start:{line:49,column:39},end:{line:49,column:63}}],line:49},"5":{loc:{start:{line:52,column:13},end:{line:60,column:9}},type:"if",locations:[{start:{line:52,column:13},end:{line:60,column:9}},{start:{line:52,column:13},end:{line:60,column:9}}],line:52},"6":{loc:{start:{line:52,column:17},end:{line:52,column:68}},type:"binary-expr",locations:[{start:{line:52,column:17},end:{line:52,column:40}},{start:{line:52,column:44},end:{line:52,column:68}}],line:52},"7":{loc:{start:{line:55,column:13},end:{line:60,column:9}},type:"if",locations:[{start:{line:55,column:13},end:{line:60,column:9}},{start:{line:55,column:13},end:{line:60,column:9}}],line:55},"8":{loc:{start:{line:55,column:17},end:{line:55,column:68}},type:"binary-expr",locations:[{start:{line:55,column:17},end:{line:55,column:40}},{start:{line:55,column:44},end:{line:55,column:68}}],line:55},"9":{loc:{start:{line:61,column:8},end:{line:63,column:9}},type:"if",locations:[{start:{line:61,column:8},end:{line:63,column:9}},{start:{line:61,column:8},end:{line:63,column:9}}],line:61},"10":{loc:{start:{line:92,column:8},end:{line:103,column:9}},type:"if",locations:[{start:{line:92,column:8},end:{line:103,column:9}},{start:{line:92,column:8},end:{line:103,column:9}}],line:92},"11":{loc:{start:{line:92,column:12},end:{line:92,column:63}},type:"binary-expr",locations:[{start:{line:92,column:12},end:{line:92,column:35}},{start:{line:92,column:39},end:{line:92,column:63}}],line:92},"12":{loc:{start:{line:95,column:13},end:{line:103,column:9}},type:"if",locations:[{start:{line:95,column:13},end:{line:103,column:9}},{start:{line:95,column:13},end:{line:103,column:9}}],line:95},"13":{loc:{start:{line:95,column:17},end:{line:95,column:68}},type:"binary-expr",locations:[{start:{line:95,column:17},end:{line:95,column:40}},{start:{line:95,column:44},end:{line:95,column:68}}],line:95},"14":{loc:{start:{line:98,column:13},end:{line:103,column:9}},type:"if",locations:[{start:{line:98,column:13},end:{line:103,column:9}},{start:{line:98,column:13},end:{line:103,column:9}}],line:98},"15":{loc:{start:{line:98,column:17},end:{line:98,column:68}},type:"binary-expr",locations:[{start:{line:98,column:17},end:{line:98,column:40}},{start:{line:98,column:44},end:{line:98,column:68}}],line:98},"16":{loc:{start:{line:106,column:8},end:{line:117,column:9}},type:"if",locations:[{start:{line:106,column:8},end:{line:117,column:9}},{start:{line:106,column:8},end:{line:117,column:9}}],line:106},"17":{loc:{start:{line:106,column:12},end:{line:106,column:63}},type:"binary-expr",locations:[{start:{line:106,column:12},end:{line:106,column:35}},{start:{line:106,column:39},end:{line:106,column:63}}],line:106},"18":{loc:{start:{line:109,column:13},end:{line:117,column:9}},type:"if",locations:[{start:{line:109,column:13},end:{line:117,column:9}},{start:{line:109,column:13},end:{line:117,column:9}}],line:109},"19":{loc:{start:{line:109,column:17},end:{line:109,column:68}},type:"binary-expr",locations:[{start:{line:109,column:17},end:{line:109,column:40}},{start:{line:109,column:44},end:{line:109,column:68}}],line:109},"20":{loc:{start:{line:112,column:13},end:{line:117,column:9}},type:"if",locations:[{start:{line:112,column:13},end:{line:117,column:9}},{start:{line:112,column:13},end:{line:117,column:9}}],line:112},"21":{loc:{start:{line:112,column:17},end:{line:112,column:68}},type:"binary-expr",locations:[{start:{line:112,column:17},end:{line:112,column:40}},{start:{line:112,column:44},end:{line:112,column:68}}],line:112},"22":{loc:{start:{line:148,column:8},end:{line:159,column:9}},type:"if",locations:[{start:{line:148,column:8},end:{line:159,column:9}},{start:{line:148,column:8},end:{line:159,column:9}}],line:148},"23":{loc:{start:{line:148,column:12},end:{line:148,column:65}},type:"binary-expr",locations:[{start:{line:148,column:12},end:{line:148,column:36}},{start:{line:148,column:40},end:{line:148,column:65}}],line:148},"24":{loc:{start:{line:151,column:13},end:{line:159,column:9}},type:"if",locations:[{start:{line:151,column:13},end:{line:159,column:9}},{start:{line:151,column:13},end:{line:159,column:9}}],line:151},"25":{loc:{start:{line:151,column:17},end:{line:151,column:70}},type:"binary-expr",locations:[{start:{line:151,column:17},end:{line:151,column:41}},{start:{line:151,column:45},end:{line:151,column:70}}],line:151},"26":{loc:{start:{line:154,column:13},end:{line:159,column:9}},type:"if",locations:[{start:{line:154,column:13},end:{line:159,column:9}},{start:{line:154,column:13},end:{line:159,column:9}}],line:154},"27":{loc:{start:{line:154,column:17},end:{line:154,column:70}},type:"binary-expr",locations:[{start:{line:154,column:17},end:{line:154,column:41}},{start:{line:154,column:45},end:{line:154,column:70}}],line:154},"28":{loc:{start:{line:162,column:8},end:{line:173,column:9}},type:"if",locations:[{start:{line:162,column:8},end:{line:173,column:9}},{start:{line:162,column:8},end:{line:173,column:9}}],line:162},"29":{loc:{start:{line:162,column:12},end:{line:162,column:63}},type:"binary-expr",locations:[{start:{line:162,column:12},end:{line:162,column:35}},{start:{line:162,column:39},end:{line:162,column:63}}],line:162},"30":{loc:{start:{line:165,column:13},end:{line:173,column:9}},type:"if",locations:[{start:{line:165,column:13},end:{line:173,column:9}},{start:{line:165,column:13},end:{line:173,column:9}}],line:165},"31":{loc:{start:{line:165,column:17},end:{line:165,column:68}},type:"binary-expr",locations:[{start:{line:165,column:17},end:{line:165,column:40}},{start:{line:165,column:44},end:{line:165,column:68}}],line:165},"32":{loc:{start:{line:168,column:13},end:{line:173,column:9}},type:"if",locations:[{start:{line:168,column:13},end:{line:173,column:9}},{start:{line:168,column:13},end:{line:173,column:9}}],line:168},"33":{loc:{start:{line:168,column:17},end:{line:168,column:68}},type:"binary-expr",locations:[{start:{line:168,column:17},end:{line:168,column:40}},{start:{line:168,column:44},end:{line:168,column:68}}],line:168},"34":{loc:{start:{line:180,column:8},end:{line:190,column:9}},type:"if",locations:[{start:{line:180,column:8},end:{line:190,column:9}},{start:{line:180,column:8},end:{line:190,column:9}}],line:180},"35":{loc:{start:{line:184,column:12},end:{line:189,column:13}},type:"if",locations:[{start:{line:184,column:12},end:{line:189,column:13}},{start:{line:184,column:12},end:{line:189,column:13}}],line:184},"36":{loc:{start:{line:187,column:17},end:{line:189,column:13}},type:"if",locations:[{start:{line:187,column:17},end:{line:189,column:13}},{start:{line:187,column:17},end:{line:189,column:13}}],line:187},"37":{loc:{start:{line:192,column:8},end:{line:194,column:9}},type:"if",locations:[{start:{line:192,column:8},end:{line:194,column:9}},{start:{line:192,column:8},end:{line:194,column:9}}],line:192},"38":{loc:{start:{line:203,column:8},end:{line:213,column:9}},type:"if",locations:[{start:{line:203,column:8},end:{line:213,column:9}},{start:{line:203,column:8},end:{line:213,column:9}}],line:203},"39":{loc:{start:{line:207,column:12},end:{line:212,column:13}},type:"if",locations:[{start:{line:207,column:12},end:{line:212,column:13}},{start:{line:207,column:12},end:{line:212,column:13}}],line:207},"40":{loc:{start:{line:210,column:17},end:{line:212,column:13}},type:"if",locations:[{start:{line:210,column:17},end:{line:212,column:13}},{start:{line:210,column:17},end:{line:212,column:13}}],line:210},"41":{loc:{start:{line:215,column:8},end:{line:217,column:9}},type:"if",locations:[{start:{line:215,column:8},end:{line:217,column:9}},{start:{line:215,column:8},end:{line:217,column:9}}],line:215},"42":{loc:{start:{line:226,column:8},end:{line:253,column:9}},type:"if",locations:[{start:{line:226,column:8},end:{line:253,column:9}},{start:{line:226,column:8},end:{line:253,column:9}}],line:226},"43":{loc:{start:{line:228,column:12},end:{line:238,column:13}},type:"if",locations:[{start:{line:228,column:12},end:{line:238,column:13}},{start:{line:228,column:12},end:{line:238,column:13}}],line:228},"44":{loc:{start:{line:240,column:13},end:{line:253,column:9}},type:"if",locations:[{start:{line:240,column:13},end:{line:253,column:9}},{start:{line:240,column:13},end:{line:253,column:9}}],line:240},"45":{loc:{start:{line:242,column:12},end:{line:252,column:13}},type:"if",locations:[{start:{line:242,column:12},end:{line:252,column:13}},{start:{line:242,column:12},end:{line:252,column:13}}],line:242},"46":{loc:{start:{line:256,column:8},end:{line:275,column:9}},type:"if",locations:[{start:{line:256,column:8},end:{line:275,column:9}},{start:{line:256,column:8},end:{line:275,column:9}}],line:256},"47":{loc:{start:{line:258,column:12},end:{line:264,column:13}},type:"if",locations:[{start:{line:258,column:12},end:{line:264,column:13}},{start:{line:258,column:12},end:{line:264,column:13}}],line:258},"48":{loc:{start:{line:268,column:12},end:{line:274,column:13}},type:"if",locations:[{start:{line:268,column:12},end:{line:274,column:13}},{start:{line:268,column:12},end:{line:274,column:13}}],line:268},"49":{loc:{start:{line:277,column:8},end:{line:279,column:9}},type:"if",locations:[{start:{line:277,column:8},end:{line:279,column:9}},{start:{line:277,column:8},end:{line:279,column:9}}],line:277},"50":{loc:{start:{line:287,column:8},end:{line:296,column:9}},type:"if",locations:[{start:{line:287,column:8},end:{line:296,column:9}},{start:{line:287,column:8},end:{line:296,column:9}}],line:287},"51":{loc:{start:{line:287,column:12},end:{line:287,column:71}},type:"binary-expr",locations:[{start:{line:287,column:12},end:{line:287,column:35}},{start:{line:287,column:39},end:{line:287,column:71}}],line:287},"52":{loc:{start:{line:291,column:16},end:{line:293,column:17}},type:"if",locations:[{start:{line:291,column:16},end:{line:293,column:17}},{start:{line:291,column:16},end:{line:293,column:17}}],line:291},"53":{loc:{start:{line:301,column:8},end:{line:303,column:9}},type:"if",locations:[{start:{line:301,column:8},end:{line:303,column:9}},{start:{line:301,column:8},end:{line:303,column:9}}],line:301},"54":{loc:{start:{line:309,column:8},end:{line:311,column:9}},type:"if",locations:[{start:{line:309,column:8},end:{line:311,column:9}},{start:{line:309,column:8},end:{line:311,column:9}}],line:309},"55":{loc:{start:{line:313,column:8},end:{line:315,column:9}},type:"if",locations:[{start:{line:313,column:8},end:{line:315,column:9}},{start:{line:313,column:8},end:{line:315,column:9}}],line:313},"56":{loc:{start:{line:313,column:12},end:{line:313,column:59}},type:"binary-expr",locations:[{start:{line:313,column:12},end:{line:313,column:35}},{start:{line:313,column:39},end:{line:313,column:59}}],line:313},"57":{loc:{start:{line:320,column:8},end:{line:322,column:9}},type:"if",locations:[{start:{line:320,column:8},end:{line:322,column:9}},{start:{line:320,column:8},end:{line:322,column:9}}],line:320},"58":{loc:{start:{line:324,column:8},end:{line:326,column:9}},type:"if",locations:[{start:{line:324,column:8},end:{line:326,column:9}},{start:{line:324,column:8},end:{line:326,column:9}}],line:324},"59":{loc:{start:{line:332,column:8},end:{line:334,column:9}},type:"if",locations:[{start:{line:332,column:8},end:{line:334,column:9}},{start:{line:332,column:8},end:{line:334,column:9}}],line:332},"60":{loc:{start:{line:335,column:8},end:{line:347,column:9}},type:"if",locations:[{start:{line:335,column:8},end:{line:347,column:9}},{start:{line:335,column:8},end:{line:347,column:9}}],line:335},"61":{loc:{start:{line:338,column:13},end:{line:347,column:9}},type:"if",locations:[{start:{line:338,column:13},end:{line:347,column:9}},{start:{line:338,column:13},end:{line:347,column:9}}],line:338},"62":{loc:{start:{line:339,column:12},end:{line:341,column:13}},type:"if",locations:[{start:{line:339,column:12},end:{line:341,column:13}},{start:{line:339,column:12},end:{line:341,column:13}}],line:339},"63":{loc:{start:{line:344,column:12},end:{line:346,column:13}},type:"if",locations:[{start:{line:344,column:12},end:{line:346,column:13}},{start:{line:344,column:12},end:{line:346,column:13}}],line:344},"64":{loc:{start:{line:352,column:8},end:{line:357,column:9}},type:"if",locations:[{start:{line:352,column:8},end:{line:357,column:9}},{start:{line:352,column:8},end:{line:357,column:9}}],line:352},"65":{loc:{start:{line:361,column:8},end:{line:421,column:9}},type:"if",locations:[{start:{line:361,column:8},end:{line:421,column:9}},{start:{line:361,column:8},end:{line:421,column:9}}],line:361},"66":{loc:{start:{line:363,column:12},end:{line:368,column:13}},type:"if",locations:[{start:{line:363,column:12},end:{line:368,column:13}},{start:{line:363,column:12},end:{line:368,column:13}}],line:363},"67":{loc:{start:{line:370,column:13},end:{line:421,column:9}},type:"if",locations:[{start:{line:370,column:13},end:{line:421,column:9}},{start:{line:370,column:13},end:{line:421,column:9}}],line:370},"68":{loc:{start:{line:372,column:12},end:{line:377,column:13}},type:"if",locations:[{start:{line:372,column:12},end:{line:377,column:13}},{start:{line:372,column:12},end:{line:377,column:13}}],line:372},"69":{loc:{start:{line:380,column:12},end:{line:420,column:13}},type:"if",locations:[{start:{line:380,column:12},end:{line:420,column:13}},{start:{line:380,column:12},end:{line:420,column:13}}],line:380},"70":{loc:{start:{line:380,column:16},end:{line:380,column:67}},type:"binary-expr",locations:[{start:{line:380,column:16},end:{line:380,column:39}},{start:{line:380,column:43},end:{line:380,column:67}}],line:380},"71":{loc:{start:{line:387,column:17},end:{line:420,column:13}},type:"if",locations:[{start:{line:387,column:17},end:{line:420,column:13}},{start:{line:387,column:17},end:{line:420,column:13}}],line:387},"72":{loc:{start:{line:389,column:16},end:{line:398,column:17}},type:"if",locations:[{start:{line:389,column:16},end:{line:398,column:17}},{start:{line:389,column:16},end:{line:398,column:17}}],line:389},"73":{loc:{start:{line:395,column:20},end:{line:397,column:21}},type:"if",locations:[{start:{line:395,column:20},end:{line:397,column:21}},{start:{line:395,column:20},end:{line:397,column:21}}],line:395},"74":{loc:{start:{line:404,column:17},end:{line:420,column:13}},type:"if",locations:[{start:{line:404,column:17},end:{line:420,column:13}},{start:{line:404,column:17},end:{line:420,column:13}}],line:404},"75":{loc:{start:{line:406,column:16},end:{line:415,column:17}},type:"if",locations:[{start:{line:406,column:16},end:{line:415,column:17}},{start:{line:406,column:16},end:{line:415,column:17}}],line:406},"76":{loc:{start:{line:412,column:20},end:{line:414,column:21}},type:"if",locations:[{start:{line:412,column:20},end:{line:414,column:21}},{start:{line:412,column:20},end:{line:414,column:21}}],line:412},"77":{loc:{start:{line:431,column:8},end:{line:433,column:9}},type:"if",locations:[{start:{line:431,column:8},end:{line:433,column:9}},{start:{line:431,column:8},end:{line:433,column:9}}],line:431},"78":{loc:{start:{line:434,column:8},end:{line:470,column:9}},type:"if",locations:[{start:{line:434,column:8},end:{line:470,column:9}},{start:{line:434,column:8},end:{line:470,column:9}}],line:434},"79":{loc:{start:{line:443,column:12},end:{line:469,column:13}},type:"if",locations:[{start:{line:443,column:12},end:{line:469,column:13}},{start:{line:443,column:12},end:{line:469,column:13}}],line:443},"80":{loc:{start:{line:446,column:20},end:{line:450,column:21}},type:"if",locations:[{start:{line:446,column:20},end:{line:450,column:21}},{start:{line:446,column:20},end:{line:450,column:21}}],line:446},"81":{loc:{start:{line:455,column:16},end:{line:460,column:17}},type:"if",locations:[{start:{line:455,column:16},end:{line:460,column:17}},{start:{line:455,column:16},end:{line:460,column:17}}],line:455},"82":{loc:{start:{line:457,column:20},end:{line:459,column:21}},type:"if",locations:[{start:{line:457,column:20},end:{line:459,column:21}},{start:{line:457,column:20},end:{line:459,column:21}}],line:457},"83":{loc:{start:{line:473,column:8},end:{line:479,column:9}},type:"if",locations:[{start:{line:473,column:8},end:{line:479,column:9}},{start:{line:473,column:8},end:{line:479,column:9}}],line:473},"84":{loc:{start:{line:482,column:8},end:{line:575,column:9}},type:"if",locations:[{start:{line:482,column:8},end:{line:575,column:9}},{start:{line:482,column:8},end:{line:575,column:9}}],line:482},"85":{loc:{start:{line:488,column:12},end:{line:574,column:13}},type:"if",locations:[{start:{line:488,column:12},end:{line:574,column:13}},{start:{line:488,column:12},end:{line:574,column:13}}],line:488},"86":{loc:{start:{line:491,column:17},end:{line:574,column:13}},type:"if",locations:[{start:{line:491,column:17},end:{line:574,column:13}},{start:{line:491,column:17},end:{line:574,column:13}}],line:491},"87":{loc:{start:{line:495,column:20},end:{line:499,column:21}},type:"if",locations:[{start:{line:495,column:20},end:{line:499,column:21}},{start:{line:495,column:20},end:{line:499,column:21}}],line:495},"88":{loc:{start:{line:501,column:16},end:{line:527,column:17}},type:"if",locations:[{start:{line:501,column:16},end:{line:527,column:17}},{start:{line:501,column:16},end:{line:527,column:17}}],line:501},"89":{loc:{start:{line:504,column:20},end:{line:521,column:21}},type:"if",locations:[{start:{line:504,column:20},end:{line:521,column:21}},{start:{line:504,column:20},end:{line:521,column:21}}],line:504},"90":{loc:{start:{line:506,column:24},end:{line:517,column:25}},type:"if",locations:[{start:{line:506,column:24},end:{line:517,column:25}},{start:{line:506,column:24},end:{line:517,column:25}}],line:506},"91":{loc:{start:{line:506,column:28},end:{line:506,column:79}},type:"binary-expr",locations:[{start:{line:506,column:28},end:{line:506,column:51}},{start:{line:506,column:55},end:{line:506,column:79}}],line:506},"92":{loc:{start:{line:509,column:29},end:{line:517,column:25}},type:"if",locations:[{start:{line:509,column:29},end:{line:517,column:25}},{start:{line:509,column:29},end:{line:517,column:25}}],line:509},"93":{loc:{start:{line:509,column:33},end:{line:509,column:84}},type:"binary-expr",locations:[{start:{line:509,column:33},end:{line:509,column:56}},{start:{line:509,column:60},end:{line:509,column:84}}],line:509},"94":{loc:{start:{line:512,column:29},end:{line:517,column:25}},type:"if",locations:[{start:{line:512,column:29},end:{line:517,column:25}},{start:{line:512,column:29},end:{line:517,column:25}}],line:512},"95":{loc:{start:{line:512,column:33},end:{line:512,column:84}},type:"binary-expr",locations:[{start:{line:512,column:33},end:{line:512,column:56}},{start:{line:512,column:60},end:{line:512,column:84}}],line:512},"96":{loc:{start:{line:518,column:24},end:{line:520,column:25}},type:"if",locations:[{start:{line:518,column:24},end:{line:520,column:25}},{start:{line:518,column:24},end:{line:520,column:25}}],line:518},"97":{loc:{start:{line:529,column:17},end:{line:574,column:13}},type:"if",locations:[{start:{line:529,column:17},end:{line:574,column:13}},{start:{line:529,column:17},end:{line:574,column:13}}],line:529},"98":{loc:{start:{line:532,column:16},end:{line:569,column:17}},type:"if",locations:[{start:{line:532,column:16},end:{line:569,column:17}},{start:{line:532,column:16},end:{line:569,column:17}}],line:532},"99":{loc:{start:{line:534,column:20},end:{line:564,column:21}},type:"if",locations:[{start:{line:534,column:20},end:{line:564,column:21}},{start:{line:534,column:20},end:{line:564,column:21}}],line:534},"100":{loc:{start:{line:542,column:24},end:{line:544,column:25}},type:"if",locations:[{start:{line:542,column:24},end:{line:544,column:25}},{start:{line:542,column:24},end:{line:544,column:25}}],line:542},"101":{loc:{start:{line:545,column:24},end:{line:552,column:25}},type:"if",locations:[{start:{line:545,column:24},end:{line:552,column:25}},{start:{line:545,column:24},end:{line:552,column:25}}],line:545},"102":{loc:{start:{line:556,column:24},end:{line:563,column:25}},type:"if",locations:[{start:{line:556,column:24},end:{line:563,column:25}},{start:{line:556,column:24},end:{line:563,column:25}}],line:556},"103":{loc:{start:{line:618,column:8},end:{line:620,column:9}},type:"if",locations:[{start:{line:618,column:8},end:{line:620,column:9}},{start:{line:618,column:8},end:{line:620,column:9}}],line:618},"104":{loc:{start:{line:624,column:8},end:{line:629,column:9}},type:"if",locations:[{start:{line:624,column:8},end:{line:629,column:9}},{start:{line:624,column:8},end:{line:629,column:9}}],line:624},"105":{loc:{start:{line:631,column:8},end:{line:636,column:9}},type:"if",locations:[{start:{line:631,column:8},end:{line:636,column:9}},{start:{line:631,column:8},end:{line:636,column:9}}],line:631},"106":{loc:{start:{line:637,column:8},end:{line:643,column:9}},type:"if",locations:[{start:{line:637,column:8},end:{line:643,column:9}},{start:{line:637,column:8},end:{line:643,column:9}}],line:637},"107":{loc:{start:{line:661,column:0},end:{line:663,column:1}},type:"if",locations:[{start:{line:661,column:0},end:{line:663,column:1}},{start:{line:661,column:0},end:{line:663,column:1}}],line:661},"108":{loc:{start:{line:673,column:8},end:{line:678,column:9}},type:"if",locations:[{start:{line:673,column:8},end:{line:678,column:9}},{start:{line:673,column:8},end:{line:678,column:9}}],line:673},"109":{loc:{start:{line:680,column:8},end:{line:685,column:9}},type:"if",locations:[{start:{line:680,column:8},end:{line:685,column:9}},{start:{line:680,column:8},end:{line:685,column:9}}],line:680},"110":{loc:{start:{line:686,column:8},end:{line:688,column:9}},type:"if",locations:[{start:{line:686,column:8},end:{line:688,column:9}},{start:{line:686,column:8},end:{line:688,column:9}}],line:686},"111":{loc:{start:{line:689,column:8},end:{line:691,column:9}},type:"if",locations:[{start:{line:689,column:8},end:{line:691,column:9}},{start:{line:689,column:8},end:{line:691,column:9}}],line:689},"112":{loc:{start:{line:705,column:0},end:{line:707,column:1}},type:"if",locations:[{start:{line:705,column:0},end:{line:707,column:1}},{start:{line:705,column:0},end:{line:707,column:1}}],line:705}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0,"80":0,"81":0,"82":0,"83":0,"84":0,"85":0,"86":0,"87":0,"88":0,"89":0,"90":0,"91":0,"92":0,"93":0,"94":0,"95":0,"96":0,"97":0,"98":0,"99":0,"100":0,"101":0,"102":0,"103":0,"104":0,"105":0,"106":0,"107":0,"108":0,"109":0,"110":0,"111":0,"112":0,"113":0,"114":0,"115":0,"116":0,"117":0,"118":0,"119":0,"120":0,"121":0,"122":0,"123":0,"124":0,"125":0,"126":0,"127":0,"128":0,"129":0,"130":0,"131":0,"132":0,"133":0,"134":0,"135":0,"136":0,"137":0,"138":0,"139":0,"140":0,"141":0,"142":0,"143":0,"144":0,"145":0,"146":0,"147":0,"148":0,"149":0,"150":0,"151":0,"152":0,"153":0,"154":0,"155":0,"156":0,"157":0,"158":0,"159":0,"160":0,"161":0,"162":0,"163":0,"164":0,"165":0,"166":0,"167":0,"168":0,"169":0,"170":0,"171":0,"172":0,"173":0,"174":0,"175":0,"176":0,"177":0,"178":0,"179":0,"180":0,"181":0,"182":0,"183":0,"184":0,"185":0,"186":0,"187":0,"188":0,"189":0,"190":0,"191":0,"192":0,"193":0,"194":0,"195":0,"196":0,"197":0,"198":0,"199":0,"200":0,"201":0,"202":0,"203":0,"204":0,"205":0,"206":0,"207":0,"208":0,"209":0,"210":0,"211":0,"212":0,"213":0,"214":0,"215":0,"216":0,"217":0,"218":0,"219":0,"220":0,"221":0,"222":0,"223":0,"224":0,"225":0,"226":0,"227":0,"228":0,"229":0,"230":0,"231":0,"232":0,"233":0,"234":0,"235":0,"236":0,"237":0,"238":0,"239":0,"240":0,"241":0,"242":0,"243":0,"244":0,"245":0,"246":0,"247":0,"248":0,"249":0,"250":0,"251":0,"252":0,"253":0,"254":0,"255":0,"256":0,"257":0,"258":0,"259":0,"260":0,"261":0,"262":0,"263":0,"264":0,"265":0,"266":0,"267":0,"268":0,"269":0,"270":0,"271":0,"272":0,"273":0,"274":0,"275":0,"276":0,"277":0,"278":0,"279":0,"280":0,"281":0,"282":0,"283":0,"284":0,"285":0,"286":0,"287":0,"288":0,"289":0,"290":0,"291":0,"292":0,"293":0,"294":0,"295":0,"296":0,"297":0,"298":0,"299":0,"300":0,"301":0,"302":0,"303":0,"304":0,"305":0,"306":0,"307":0,"308":0,"309":0,"310":0,"311":0,"312":0,"313":0,"314":0,"315":0,"316":0,"317":0,"318":0,"319":0,"320":0,"321":0,"322":0,"323":0,"324":0,"325":0,"326":0,"327":0,"328":0,"329":0,"330":0,"331":0,"332":0,"333":0,"334":0,"335":0,"336":0,"337":0,"338":0,"339":0,"340":0,"341":0,"342":0,"343":0,"344":0,"345":0,"346":0,"347":0,"348":0,"349":0,"350":0,"351":0,"352":0,"353":0,"354":0,"355":0,"356":0,"357":0,"358":0,"359":0,"360":0,"361":0,"362":0,"363":0,"364":0,"365":0,"366":0,"367":0,"368":0},f:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0},b:{"0":[0,0],"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0],"17":[0,0],"18":[0,0],"19":[0,0],"20":[0,0],"21":[0,0],"22":[0,0],"23":[0,0],"24":[0,0],"25":[0,0],"26":[0,0],"27":[0,0],"28":[0,0],"29":[0,0],"30":[0,0],"31":[0,0],"32":[0,0],"33":[0,0],"34":[0,0],"35":[0,0],"36":[0,0],"37":[0,0],"38":[0,0],"39":[0,0],"40":[0,0],"41":[0,0],"42":[0,0],"43":[0,0],"44":[0,0],"45":[0,0],"46":[0,0],"47":[0,0],"48":[0,0],"49":[0,0],"50":[0,0],"51":[0,0],"52":[0,0],"53":[0,0],"54":[0,0],"55":[0,0],"56":[0,0],"57":[0,0],"58":[0,0],"59":[0,0],"60":[0,0],"61":[0,0],"62":[0,0],"63":[0,0],"64":[0,0],"65":[0,0],"66":[0,0],"67":[0,0],"68":[0,0],"69":[0,0],"70":[0,0],"71":[0,0],"72":[0,0],"73":[0,0],"74":[0,0],"75":[0,0],"76":[0,0],"77":[0,0],"78":[0,0],"79":[0,0],"80":[0,0],"81":[0,0],"82":[0,0],"83":[0,0],"84":[0,0],"85":[0,0],"86":[0,0],"87":[0,0],"88":[0,0],"89":[0,0],"90":[0,0],"91":[0,0],"92":[0,0],"93":[0,0],"94":[0,0],"95":[0,0],"96":[0,0],"97":[0,0],"98":[0,0],"99":[0,0],"100":[0,0],"101":[0,0],"102":[0,0],"103":[0,0],"104":[0,0],"105":[0,0],"106":[0,0],"107":[0,0],"108":[0,0],"109":[0,0],"110":[0,0],"111":[0,0],"112":[0,0]},_coverageSchema:"332fd63041d2c1bcb487cc26dd0d5f7d97098a6c"},coverage=global[gcv]||(global[gcv]={});if(coverage[path]&&coverage[path].hash===hash){return coverage[path];}coverageData.hash=hash;return coverage[path]=coverageData;}();cov_1sj59p6kms.s[0]++;Object.defineProperty(exports,"__esModule",{value:true});var isSame=(cov_1sj59p6kms.s[1]++,__webpack_require__(54));function height(node){cov_1sj59p6kms.f[0]++;cov_1sj59p6kms.s[2]++;if(node===undefined){cov_1sj59p6kms.b[0][0]++;cov_1sj59p6kms.s[3]++;return-1;}else{cov_1sj59p6kms.b[0][1]++;cov_1sj59p6kms.s[4]++;return node.height;}}var Node=(cov_1sj59p6kms.s[5]++,function(){cov_1sj59p6kms.f[1]++;function Node(intervalTree,record){cov_1sj59p6kms.f[2]++;cov_1sj59p6kms.s[6]++;this.intervalTree=intervalTree;cov_1sj59p6kms.s[7]++;this.records=[];cov_1sj59p6kms.s[8]++;this.height=0;cov_1sj59p6kms.s[9]++;this.key=record.low;cov_1sj59p6kms.s[10]++;this.max=record.high;cov_1sj59p6kms.s[11]++;this.records.push(record);}cov_1sj59p6kms.s[12]++;Node.prototype.getNodeHigh=function(){cov_1sj59p6kms.f[3]++;var high=(cov_1sj59p6kms.s[13]++,this.records[0].high);cov_1sj59p6kms.s[14]++;for(var i=1;i<this.records.length;i++){cov_1sj59p6kms.s[15]++;if(this.records[i].high>high){cov_1sj59p6kms.b[1][0]++;cov_1sj59p6kms.s[16]++;high=this.records[i].high;}else{cov_1sj59p6kms.b[1][1]++;}}cov_1sj59p6kms.s[17]++;return high;};cov_1sj59p6kms.s[18]++;Node.prototype.updateHeight=function(){cov_1sj59p6kms.f[4]++;cov_1sj59p6kms.s[19]++;this.height=Math.max(height(this.left),height(this.right))+1;};cov_1sj59p6kms.s[20]++;Node.prototype.updateMaxOfParents=function(){cov_1sj59p6kms.f[5]++;cov_1sj59p6kms.s[21]++;if(this===undefined){cov_1sj59p6kms.b[2][0]++;cov_1sj59p6kms.s[22]++;return;}else{cov_1sj59p6kms.b[2][1]++;}var thisHigh=(cov_1sj59p6kms.s[23]++,this.getNodeHigh());cov_1sj59p6kms.s[24]++;if((cov_1sj59p6kms.b[4][0]++,this.left!==undefined)&&(cov_1sj59p6kms.b[4][1]++,this.right!==undefined)){cov_1sj59p6kms.b[3][0]++;cov_1sj59p6kms.s[25]++;this.max=Math.max(Math.max(this.left.max,this.right.max),thisHigh);}else{cov_1sj59p6kms.b[3][1]++;cov_1sj59p6kms.s[26]++;if((cov_1sj59p6kms.b[6][0]++,this.left!==undefined)&&(cov_1sj59p6kms.b[6][1]++,this.right===undefined)){cov_1sj59p6kms.b[5][0]++;cov_1sj59p6kms.s[27]++;this.max=Math.max(this.left.max,thisHigh);}else{cov_1sj59p6kms.b[5][1]++;cov_1sj59p6kms.s[28]++;if((cov_1sj59p6kms.b[8][0]++,this.left===undefined)&&(cov_1sj59p6kms.b[8][1]++,this.right!==undefined)){cov_1sj59p6kms.b[7][0]++;cov_1sj59p6kms.s[29]++;this.max=Math.max(this.right.max,thisHigh);}else{cov_1sj59p6kms.b[7][1]++;cov_1sj59p6kms.s[30]++;this.max=thisHigh;}}}cov_1sj59p6kms.s[31]++;if(this.parent){cov_1sj59p6kms.b[9][0]++;cov_1sj59p6kms.s[32]++;this.parent.updateMaxOfParents();}else{cov_1sj59p6kms.b[9][1]++;}};cov_1sj59p6kms.s[33]++;Node.prototype._updateMaxAfterRightRotate=function(){cov_1sj59p6kms.f[6]++;var parent=(cov_1sj59p6kms.s[34]++,this.parent);var left=(cov_1sj59p6kms.s[35]++,parent.left);var thisParentLeftHigh=(cov_1sj59p6kms.s[36]++,left.getNodeHigh());cov_1sj59p6kms.s[37]++;if((cov_1sj59p6kms.b[11][0]++,left.left===undefined)&&(cov_1sj59p6kms.b[11][1]++,left.right!==undefined)){cov_1sj59p6kms.b[10][0]++;cov_1sj59p6kms.s[38]++;left.max=Math.max(thisParentLeftHigh,left.right.max);}else{cov_1sj59p6kms.b[10][1]++;cov_1sj59p6kms.s[39]++;if((cov_1sj59p6kms.b[13][0]++,left.left!==undefined)&&(cov_1sj59p6kms.b[13][1]++,left.right===undefined)){cov_1sj59p6kms.b[12][0]++;cov_1sj59p6kms.s[40]++;left.max=Math.max(thisParentLeftHigh,left.left.max);}else{cov_1sj59p6kms.b[12][1]++;cov_1sj59p6kms.s[41]++;if((cov_1sj59p6kms.b[15][0]++,left.left===undefined)&&(cov_1sj59p6kms.b[15][1]++,left.right===undefined)){cov_1sj59p6kms.b[14][0]++;cov_1sj59p6kms.s[42]++;left.max=thisParentLeftHigh;}else{cov_1sj59p6kms.b[14][1]++;cov_1sj59p6kms.s[43]++;left.max=Math.max(Math.max(left.left.max,left.right.max),thisParentLeftHigh);}}}var thisHigh=(cov_1sj59p6kms.s[44]++,this.getNodeHigh());cov_1sj59p6kms.s[45]++;if((cov_1sj59p6kms.b[17][0]++,this.left===undefined)&&(cov_1sj59p6kms.b[17][1]++,this.right!==undefined)){cov_1sj59p6kms.b[16][0]++;cov_1sj59p6kms.s[46]++;this.max=Math.max(thisHigh,this.right.max);}else{cov_1sj59p6kms.b[16][1]++;cov_1sj59p6kms.s[47]++;if((cov_1sj59p6kms.b[19][0]++,this.left!==undefined)&&(cov_1sj59p6kms.b[19][1]++,this.right===undefined)){cov_1sj59p6kms.b[18][0]++;cov_1sj59p6kms.s[48]++;this.max=Math.max(thisHigh,this.left.max);}else{cov_1sj59p6kms.b[18][1]++;cov_1sj59p6kms.s[49]++;if((cov_1sj59p6kms.b[21][0]++,this.left===undefined)&&(cov_1sj59p6kms.b[21][1]++,this.right===undefined)){cov_1sj59p6kms.b[20][0]++;cov_1sj59p6kms.s[50]++;this.max=thisHigh;}else{cov_1sj59p6kms.b[20][1]++;cov_1sj59p6kms.s[51]++;this.max=Math.max(Math.max(this.left.max,this.right.max),thisHigh);}}}cov_1sj59p6kms.s[52]++;parent.max=Math.max(Math.max(parent.left.max,parent.right.max),parent.getNodeHigh());};cov_1sj59p6kms.s[53]++;Node.prototype._updateMaxAfterLeftRotate=function(){cov_1sj59p6kms.f[7]++;var parent=(cov_1sj59p6kms.s[54]++,this.parent);var right=(cov_1sj59p6kms.s[55]++,parent.right);var thisParentRightHigh=(cov_1sj59p6kms.s[56]++,right.getNodeHigh());cov_1sj59p6kms.s[57]++;if((cov_1sj59p6kms.b[23][0]++,right.left===undefined)&&(cov_1sj59p6kms.b[23][1]++,right.right!==undefined)){cov_1sj59p6kms.b[22][0]++;cov_1sj59p6kms.s[58]++;right.max=Math.max(thisParentRightHigh,right.right.max);}else{cov_1sj59p6kms.b[22][1]++;cov_1sj59p6kms.s[59]++;if((cov_1sj59p6kms.b[25][0]++,right.left!==undefined)&&(cov_1sj59p6kms.b[25][1]++,right.right===undefined)){cov_1sj59p6kms.b[24][0]++;cov_1sj59p6kms.s[60]++;right.max=Math.max(thisParentRightHigh,right.left.max);}else{cov_1sj59p6kms.b[24][1]++;cov_1sj59p6kms.s[61]++;if((cov_1sj59p6kms.b[27][0]++,right.left===undefined)&&(cov_1sj59p6kms.b[27][1]++,right.right===undefined)){cov_1sj59p6kms.b[26][0]++;cov_1sj59p6kms.s[62]++;right.max=thisParentRightHigh;}else{cov_1sj59p6kms.b[26][1]++;cov_1sj59p6kms.s[63]++;right.max=Math.max(Math.max(right.left.max,right.right.max),thisParentRightHigh);}}}var thisHigh=(cov_1sj59p6kms.s[64]++,this.getNodeHigh());cov_1sj59p6kms.s[65]++;if((cov_1sj59p6kms.b[29][0]++,this.left===undefined)&&(cov_1sj59p6kms.b[29][1]++,this.right!==undefined)){cov_1sj59p6kms.b[28][0]++;cov_1sj59p6kms.s[66]++;this.max=Math.max(thisHigh,this.right.max);}else{cov_1sj59p6kms.b[28][1]++;cov_1sj59p6kms.s[67]++;if((cov_1sj59p6kms.b[31][0]++,this.left!==undefined)&&(cov_1sj59p6kms.b[31][1]++,this.right===undefined)){cov_1sj59p6kms.b[30][0]++;cov_1sj59p6kms.s[68]++;this.max=Math.max(thisHigh,this.left.max);}else{cov_1sj59p6kms.b[30][1]++;cov_1sj59p6kms.s[69]++;if((cov_1sj59p6kms.b[33][0]++,this.left===undefined)&&(cov_1sj59p6kms.b[33][1]++,this.right===undefined)){cov_1sj59p6kms.b[32][0]++;cov_1sj59p6kms.s[70]++;this.max=thisHigh;}else{cov_1sj59p6kms.b[32][1]++;cov_1sj59p6kms.s[71]++;this.max=Math.max(Math.max(this.left.max,this.right.max),thisHigh);}}}cov_1sj59p6kms.s[72]++;parent.max=Math.max(Math.max(parent.left.max,right.max),parent.getNodeHigh());};cov_1sj59p6kms.s[73]++;Node.prototype._leftRotate=function(){cov_1sj59p6kms.f[8]++;var rightChild=(cov_1sj59p6kms.s[74]++,this.right);cov_1sj59p6kms.s[75]++;rightChild.parent=this.parent;cov_1sj59p6kms.s[76]++;if(rightChild.parent===undefined){cov_1sj59p6kms.b[34][0]++;cov_1sj59p6kms.s[77]++;this.intervalTree.root=rightChild;}else{cov_1sj59p6kms.b[34][1]++;cov_1sj59p6kms.s[78]++;if(rightChild.parent.left===this){cov_1sj59p6kms.b[35][0]++;cov_1sj59p6kms.s[79]++;rightChild.parent.left=rightChild;}else{cov_1sj59p6kms.b[35][1]++;cov_1sj59p6kms.s[80]++;if(rightChild.parent.right===this){cov_1sj59p6kms.b[36][0]++;cov_1sj59p6kms.s[81]++;rightChild.parent.right=rightChild;}else{cov_1sj59p6kms.b[36][1]++;}}}cov_1sj59p6kms.s[82]++;this.right=rightChild.left;cov_1sj59p6kms.s[83]++;if(this.right!==undefined){cov_1sj59p6kms.b[37][0]++;cov_1sj59p6kms.s[84]++;this.right.parent=this;}else{cov_1sj59p6kms.b[37][1]++;}cov_1sj59p6kms.s[85]++;rightChild.left=this;cov_1sj59p6kms.s[86]++;this.parent=rightChild;cov_1sj59p6kms.s[87]++;this.updateHeight();cov_1sj59p6kms.s[88]++;rightChild.updateHeight();};cov_1sj59p6kms.s[89]++;Node.prototype._rightRotate=function(){cov_1sj59p6kms.f[9]++;var leftChild=(cov_1sj59p6kms.s[90]++,this.left);cov_1sj59p6kms.s[91]++;leftChild.parent=this.parent;cov_1sj59p6kms.s[92]++;if(leftChild.parent===undefined){cov_1sj59p6kms.b[38][0]++;cov_1sj59p6kms.s[93]++;this.intervalTree.root=leftChild;}else{cov_1sj59p6kms.b[38][1]++;cov_1sj59p6kms.s[94]++;if(leftChild.parent.left===this){cov_1sj59p6kms.b[39][0]++;cov_1sj59p6kms.s[95]++;leftChild.parent.left=leftChild;}else{cov_1sj59p6kms.b[39][1]++;cov_1sj59p6kms.s[96]++;if(leftChild.parent.right===this){cov_1sj59p6kms.b[40][0]++;cov_1sj59p6kms.s[97]++;leftChild.parent.right=leftChild;}else{cov_1sj59p6kms.b[40][1]++;}}}cov_1sj59p6kms.s[98]++;this.left=leftChild.right;cov_1sj59p6kms.s[99]++;if(this.left!==undefined){cov_1sj59p6kms.b[41][0]++;cov_1sj59p6kms.s[100]++;this.left.parent=this;}else{cov_1sj59p6kms.b[41][1]++;}cov_1sj59p6kms.s[101]++;leftChild.right=this;cov_1sj59p6kms.s[102]++;this.parent=leftChild;cov_1sj59p6kms.s[103]++;this.updateHeight();cov_1sj59p6kms.s[104]++;leftChild.updateHeight();};cov_1sj59p6kms.s[105]++;Node.prototype._rebalance=function(){cov_1sj59p6kms.f[10]++;cov_1sj59p6kms.s[106]++;if(height(this.left)>=2+height(this.right)){cov_1sj59p6kms.b[42][0]++;var left=(cov_1sj59p6kms.s[107]++,this.left);cov_1sj59p6kms.s[108]++;if(height(left.left)>=height(left.right)){cov_1sj59p6kms.b[43][0]++;cov_1sj59p6kms.s[109]++;this._rightRotate();cov_1sj59p6kms.s[110]++;this._updateMaxAfterRightRotate();}else{cov_1sj59p6kms.b[43][1]++;cov_1sj59p6kms.s[111]++;left._leftRotate();cov_1sj59p6kms.s[112]++;this._rightRotate();cov_1sj59p6kms.s[113]++;this._updateMaxAfterRightRotate();}}else{cov_1sj59p6kms.b[42][1]++;cov_1sj59p6kms.s[114]++;if(height(this.right)>=2+height(this.left)){cov_1sj59p6kms.b[44][0]++;var right=(cov_1sj59p6kms.s[115]++,this.right);cov_1sj59p6kms.s[116]++;if(height(right.right)>=height(right.left)){cov_1sj59p6kms.b[45][0]++;cov_1sj59p6kms.s[117]++;this._leftRotate();cov_1sj59p6kms.s[118]++;this._updateMaxAfterLeftRotate();}else{cov_1sj59p6kms.b[45][1]++;cov_1sj59p6kms.s[119]++;right._rightRotate();cov_1sj59p6kms.s[120]++;this._leftRotate();cov_1sj59p6kms.s[121]++;this._updateMaxAfterLeftRotate();}}else{cov_1sj59p6kms.b[44][1]++;}}};cov_1sj59p6kms.s[122]++;Node.prototype.insert=function(record){cov_1sj59p6kms.f[11]++;cov_1sj59p6kms.s[123]++;if(record.low<this.key){cov_1sj59p6kms.b[46][0]++;cov_1sj59p6kms.s[124]++;if(this.left===undefined){cov_1sj59p6kms.b[47][0]++;cov_1sj59p6kms.s[125]++;this.left=new Node(this.intervalTree,record);cov_1sj59p6kms.s[126]++;this.left.parent=this;}else{cov_1sj59p6kms.b[47][1]++;cov_1sj59p6kms.s[127]++;this.left.insert(record);}}else{cov_1sj59p6kms.b[46][1]++;cov_1sj59p6kms.s[128]++;if(this.right===undefined){cov_1sj59p6kms.b[48][0]++;cov_1sj59p6kms.s[129]++;this.right=new Node(this.intervalTree,record);cov_1sj59p6kms.s[130]++;this.right.parent=this;}else{cov_1sj59p6kms.b[48][1]++;cov_1sj59p6kms.s[131]++;this.right.insert(record);}}cov_1sj59p6kms.s[132]++;if(this.max<record.high){cov_1sj59p6kms.b[49][0]++;cov_1sj59p6kms.s[133]++;this.max=record.high;}else{cov_1sj59p6kms.b[49][1]++;}cov_1sj59p6kms.s[134]++;this.updateHeight();cov_1sj59p6kms.s[135]++;this._rebalance();};cov_1sj59p6kms.s[136]++;Node.prototype._getOverlappingRecords=function(currentNode,low,high){cov_1sj59p6kms.f[12]++;cov_1sj59p6kms.s[137]++;if((cov_1sj59p6kms.b[51][0]++,currentNode.key<=high)&&(cov_1sj59p6kms.b[51][1]++,low<=currentNode.getNodeHigh())){cov_1sj59p6kms.b[50][0]++;var tempResults=(cov_1sj59p6kms.s[138]++,[]);cov_1sj59p6kms.s[139]++;for(var i=0;i<currentNode.records.length;i++){cov_1sj59p6kms.s[140]++;if(currentNode.records[i].high>=low){cov_1sj59p6kms.b[52][0]++;cov_1sj59p6kms.s[141]++;tempResults.push(currentNode.records[i]);}else{cov_1sj59p6kms.b[52][1]++;}}cov_1sj59p6kms.s[142]++;return tempResults;}else{cov_1sj59p6kms.b[50][1]++;}cov_1sj59p6kms.s[143]++;return[];};cov_1sj59p6kms.s[144]++;Node.prototype.search=function(low,high){cov_1sj59p6kms.f[13]++;cov_1sj59p6kms.s[145]++;if(this===undefined){cov_1sj59p6kms.b[53][0]++;cov_1sj59p6kms.s[146]++;return[];}else{cov_1sj59p6kms.b[53][1]++;}var leftSearch=(cov_1sj59p6kms.s[147]++,[]);var ownSearch=(cov_1sj59p6kms.s[148]++,[]);var rightSearch=(cov_1sj59p6kms.s[149]++,[]);cov_1sj59p6kms.s[150]++;if(low>this.max){cov_1sj59p6kms.b[54][0]++;cov_1sj59p6kms.s[151]++;return[];}else{cov_1sj59p6kms.b[54][1]++;}cov_1sj59p6kms.s[152]++;if((cov_1sj59p6kms.b[56][0]++,this.left!==undefined)&&(cov_1sj59p6kms.b[56][1]++,this.left.max>=low)){cov_1sj59p6kms.b[55][0]++;cov_1sj59p6kms.s[153]++;leftSearch=this.left.search(low,high);}else{cov_1sj59p6kms.b[55][1]++;}cov_1sj59p6kms.s[154]++;ownSearch=this._getOverlappingRecords(this,low,high);cov_1sj59p6kms.s[155]++;if(high<this.key){cov_1sj59p6kms.b[57][0]++;cov_1sj59p6kms.s[156]++;return leftSearch.concat(ownSearch);}else{cov_1sj59p6kms.b[57][1]++;}cov_1sj59p6kms.s[157]++;if(this.right!==undefined){cov_1sj59p6kms.b[58][0]++;cov_1sj59p6kms.s[158]++;rightSearch=this.right.search(low,high);}else{cov_1sj59p6kms.b[58][1]++;}cov_1sj59p6kms.s[159]++;return leftSearch.concat(ownSearch,rightSearch);};cov_1sj59p6kms.s[160]++;Node.prototype.searchExisting=function(low){cov_1sj59p6kms.f[14]++;cov_1sj59p6kms.s[161]++;if(this===undefined){cov_1sj59p6kms.b[59][0]++;cov_1sj59p6kms.s[162]++;return undefined;}else{cov_1sj59p6kms.b[59][1]++;}cov_1sj59p6kms.s[163]++;if(this.key===low){cov_1sj59p6kms.b[60][0]++;cov_1sj59p6kms.s[164]++;return this;}else{cov_1sj59p6kms.b[60][1]++;cov_1sj59p6kms.s[165]++;if(low<this.key){cov_1sj59p6kms.b[61][0]++;cov_1sj59p6kms.s[166]++;if(this.left!==undefined){cov_1sj59p6kms.b[62][0]++;cov_1sj59p6kms.s[167]++;return this.left.searchExisting(low);}else{cov_1sj59p6kms.b[62][1]++;}}else{cov_1sj59p6kms.b[61][1]++;cov_1sj59p6kms.s[168]++;if(this.right!==undefined){cov_1sj59p6kms.b[63][0]++;cov_1sj59p6kms.s[169]++;return this.right.searchExisting(low);}else{cov_1sj59p6kms.b[63][1]++;}}}cov_1sj59p6kms.s[170]++;return undefined;};cov_1sj59p6kms.s[171]++;Node.prototype._minValue=function(){cov_1sj59p6kms.f[15]++;cov_1sj59p6kms.s[172]++;if(this.left===undefined){cov_1sj59p6kms.b[64][0]++;cov_1sj59p6kms.s[173]++;return this;}else{cov_1sj59p6kms.b[64][1]++;cov_1sj59p6kms.s[174]++;return this.left._minValue();}};cov_1sj59p6kms.s[175]++;Node.prototype.remove=function(node){cov_1sj59p6kms.f[16]++;var parent=(cov_1sj59p6kms.s[176]++,this.parent);cov_1sj59p6kms.s[177]++;if(node.key<this.key){cov_1sj59p6kms.b[65][0]++;cov_1sj59p6kms.s[178]++;if(this.left!==undefined){cov_1sj59p6kms.b[66][0]++;cov_1sj59p6kms.s[179]++;return this.left.remove(node);}else{cov_1sj59p6kms.b[66][1]++;cov_1sj59p6kms.s[180]++;return undefined;}}else{cov_1sj59p6kms.b[65][1]++;cov_1sj59p6kms.s[181]++;if(node.key>this.key){cov_1sj59p6kms.b[67][0]++;cov_1sj59p6kms.s[182]++;if(this.right!==undefined){cov_1sj59p6kms.b[68][0]++;cov_1sj59p6kms.s[183]++;return this.right.remove(node);}else{cov_1sj59p6kms.b[68][1]++;cov_1sj59p6kms.s[184]++;return undefined;}}else{cov_1sj59p6kms.b[67][1]++;cov_1sj59p6kms.s[185]++;if((cov_1sj59p6kms.b[70][0]++,this.left!==undefined)&&(cov_1sj59p6kms.b[70][1]++,this.right!==undefined)){cov_1sj59p6kms.b[69][0]++;var minValue=(cov_1sj59p6kms.s[186]++,this.right._minValue());cov_1sj59p6kms.s[187]++;this.key=minValue.key;cov_1sj59p6kms.s[188]++;this.records=minValue.records;cov_1sj59p6kms.s[189]++;return this.right.remove(this);}else{cov_1sj59p6kms.b[69][1]++;cov_1sj59p6kms.s[190]++;if(parent.left===this){cov_1sj59p6kms.b[71][0]++;cov_1sj59p6kms.s[191]++;if(this.right!==undefined){cov_1sj59p6kms.b[72][0]++;cov_1sj59p6kms.s[192]++;parent.left=this.right;cov_1sj59p6kms.s[193]++;this.right.parent=parent;}else{cov_1sj59p6kms.b[72][1]++;cov_1sj59p6kms.s[194]++;parent.left=this.left;cov_1sj59p6kms.s[195]++;if(this.left!==undefined){cov_1sj59p6kms.b[73][0]++;cov_1sj59p6kms.s[196]++;this.left.parent=parent;}else{cov_1sj59p6kms.b[73][1]++;}}cov_1sj59p6kms.s[197]++;parent.updateMaxOfParents();cov_1sj59p6kms.s[198]++;parent.updateHeight();cov_1sj59p6kms.s[199]++;parent._rebalance();cov_1sj59p6kms.s[200]++;return this;}else{cov_1sj59p6kms.b[71][1]++;cov_1sj59p6kms.s[201]++;if(parent.right===this){cov_1sj59p6kms.b[74][0]++;cov_1sj59p6kms.s[202]++;if(this.right!==undefined){cov_1sj59p6kms.b[75][0]++;cov_1sj59p6kms.s[203]++;parent.right=this.right;cov_1sj59p6kms.s[204]++;this.right.parent=parent;}else{cov_1sj59p6kms.b[75][1]++;cov_1sj59p6kms.s[205]++;parent.right=this.left;cov_1sj59p6kms.s[206]++;if(this.left!==undefined){cov_1sj59p6kms.b[76][0]++;cov_1sj59p6kms.s[207]++;this.left.parent=parent;}else{cov_1sj59p6kms.b[76][1]++;}}cov_1sj59p6kms.s[208]++;parent.updateMaxOfParents();cov_1sj59p6kms.s[209]++;parent.updateHeight();cov_1sj59p6kms.s[210]++;parent._rebalance();cov_1sj59p6kms.s[211]++;return this;}else{cov_1sj59p6kms.b[74][1]++;}}}}}};cov_1sj59p6kms.s[212]++;return Node;}());cov_1sj59p6kms.s[213]++;exports.Node=Node;var IntervalTree=(cov_1sj59p6kms.s[214]++,function(){cov_1sj59p6kms.f[17]++;function IntervalTree(){cov_1sj59p6kms.f[18]++;cov_1sj59p6kms.s[215]++;this.count=0;}cov_1sj59p6kms.s[216]++;IntervalTree.prototype.insert=function(record){cov_1sj59p6kms.f[19]++;cov_1sj59p6kms.s[217]++;if(record.low>record.high){cov_1sj59p6kms.b[77][0]++;cov_1sj59p6kms.s[218]++;throw new Error('`low` value must be lower or equal to `high` value');}else{cov_1sj59p6kms.b[77][1]++;}cov_1sj59p6kms.s[219]++;if(this.root===undefined){cov_1sj59p6kms.b[78][0]++;cov_1sj59p6kms.s[220]++;this.root=new Node(this,record);cov_1sj59p6kms.s[221]++;this.count++;cov_1sj59p6kms.s[222]++;return true;}else{cov_1sj59p6kms.b[78][1]++;var node=(cov_1sj59p6kms.s[223]++,this.root.searchExisting(record.low));cov_1sj59p6kms.s[224]++;if(node!==undefined){cov_1sj59p6kms.b[79][0]++;cov_1sj59p6kms.s[225]++;for(var i=0;i<node.records.length;i++){cov_1sj59p6kms.s[226]++;if(isSame(node.records[i],record)){cov_1sj59p6kms.b[80][0]++;cov_1sj59p6kms.s[227]++;return false;}else{cov_1sj59p6kms.b[80][1]++;}}cov_1sj59p6kms.s[228]++;node.records.push(record);cov_1sj59p6kms.s[229]++;if(record.high>node.max){cov_1sj59p6kms.b[81][0]++;cov_1sj59p6kms.s[230]++;node.max=record.high;cov_1sj59p6kms.s[231]++;if(node.parent){cov_1sj59p6kms.b[82][0]++;cov_1sj59p6kms.s[232]++;node.parent.updateMaxOfParents();}else{cov_1sj59p6kms.b[82][1]++;}}else{cov_1sj59p6kms.b[81][1]++;}cov_1sj59p6kms.s[233]++;this.count++;cov_1sj59p6kms.s[234]++;return true;}else{cov_1sj59p6kms.b[79][1]++;cov_1sj59p6kms.s[235]++;this.root.insert(record);cov_1sj59p6kms.s[236]++;this.count++;cov_1sj59p6kms.s[237]++;return true;}}};cov_1sj59p6kms.s[238]++;IntervalTree.prototype.search=function(low,high){cov_1sj59p6kms.f[20]++;cov_1sj59p6kms.s[239]++;if(this.root===undefined){cov_1sj59p6kms.b[83][0]++;cov_1sj59p6kms.s[240]++;return[];}else{cov_1sj59p6kms.b[83][1]++;cov_1sj59p6kms.s[241]++;return this.root.search(low,high);}};cov_1sj59p6kms.s[242]++;IntervalTree.prototype.remove=function(record){cov_1sj59p6kms.f[21]++;cov_1sj59p6kms.s[243]++;if(this.root===undefined){cov_1sj59p6kms.b[84][0]++;cov_1sj59p6kms.s[244]++;return false;}else{cov_1sj59p6kms.b[84][1]++;var node=(cov_1sj59p6kms.s[245]++,this.root.searchExisting(record.low));cov_1sj59p6kms.s[246]++;if(node===undefined){cov_1sj59p6kms.b[85][0]++;cov_1sj59p6kms.s[247]++;return false;}else{cov_1sj59p6kms.b[85][1]++;cov_1sj59p6kms.s[248]++;if(node.records.length>1){cov_1sj59p6kms.b[86][0]++;var removedRecord=(cov_1sj59p6kms.s[249]++,void 0);cov_1sj59p6kms.s[250]++;for(var i=0;i<node.records.length;i++){cov_1sj59p6kms.s[251]++;if(isSame(node.records[i],record)){cov_1sj59p6kms.b[87][0]++;cov_1sj59p6kms.s[252]++;removedRecord=node.records[i];cov_1sj59p6kms.s[253]++;node.records.splice(i,1);cov_1sj59p6kms.s[254]++;break;}else{cov_1sj59p6kms.b[87][1]++;}}cov_1sj59p6kms.s[255]++;if(removedRecord){cov_1sj59p6kms.b[88][0]++;cov_1sj59p6kms.s[256]++;removedRecord=undefined;cov_1sj59p6kms.s[257]++;if(record.high===node.max){cov_1sj59p6kms.b[89][0]++;var nodeHigh=(cov_1sj59p6kms.s[258]++,node.getNodeHigh());cov_1sj59p6kms.s[259]++;if((cov_1sj59p6kms.b[91][0]++,node.left!==undefined)&&(cov_1sj59p6kms.b[91][1]++,node.right!==undefined)){cov_1sj59p6kms.b[90][0]++;cov_1sj59p6kms.s[260]++;node.max=Math.max(Math.max(node.left.max,node.right.max),nodeHigh);}else{cov_1sj59p6kms.b[90][1]++;cov_1sj59p6kms.s[261]++;if((cov_1sj59p6kms.b[93][0]++,node.left!==undefined)&&(cov_1sj59p6kms.b[93][1]++,node.right===undefined)){cov_1sj59p6kms.b[92][0]++;cov_1sj59p6kms.s[262]++;node.max=Math.max(node.left.max,nodeHigh);}else{cov_1sj59p6kms.b[92][1]++;cov_1sj59p6kms.s[263]++;if((cov_1sj59p6kms.b[95][0]++,node.left===undefined)&&(cov_1sj59p6kms.b[95][1]++,node.right!==undefined)){cov_1sj59p6kms.b[94][0]++;cov_1sj59p6kms.s[264]++;node.max=Math.max(node.right.max,nodeHigh);}else{cov_1sj59p6kms.b[94][1]++;cov_1sj59p6kms.s[265]++;node.max=nodeHigh;}}}cov_1sj59p6kms.s[266]++;if(node.parent){cov_1sj59p6kms.b[96][0]++;cov_1sj59p6kms.s[267]++;node.parent.updateMaxOfParents();}else{cov_1sj59p6kms.b[96][1]++;}}else{cov_1sj59p6kms.b[89][1]++;}cov_1sj59p6kms.s[268]++;this.count--;cov_1sj59p6kms.s[269]++;return true;}else{cov_1sj59p6kms.b[88][1]++;cov_1sj59p6kms.s[270]++;return false;}}else{cov_1sj59p6kms.b[86][1]++;cov_1sj59p6kms.s[271]++;if(node.records.length===1){cov_1sj59p6kms.b[97][0]++;cov_1sj59p6kms.s[272]++;if(isSame(node.records[0],record)){cov_1sj59p6kms.b[98][0]++;cov_1sj59p6kms.s[273]++;if(this.root.key===node.key){cov_1sj59p6kms.b[99][0]++;var rootParent=(cov_1sj59p6kms.s[274]++,new Node(this,{low:record.low,high:record.low}));cov_1sj59p6kms.s[275]++;rootParent.left=this.root;cov_1sj59p6kms.s[276]++;this.root.parent=rootParent;var removedNode=(cov_1sj59p6kms.s[277]++,this.root.remove(node));cov_1sj59p6kms.s[278]++;this.root=rootParent.left;cov_1sj59p6kms.s[279]++;if(this.root!==undefined){cov_1sj59p6kms.b[100][0]++;cov_1sj59p6kms.s[280]++;this.root.parent=undefined;}else{cov_1sj59p6kms.b[100][1]++;}cov_1sj59p6kms.s[281]++;if(removedNode){cov_1sj59p6kms.b[101][0]++;cov_1sj59p6kms.s[282]++;removedNode=undefined;cov_1sj59p6kms.s[283]++;this.count--;cov_1sj59p6kms.s[284]++;return true;}else{cov_1sj59p6kms.b[101][1]++;cov_1sj59p6kms.s[285]++;return false;}}else{cov_1sj59p6kms.b[99][1]++;var removedNode=(cov_1sj59p6kms.s[286]++,this.root.remove(node));cov_1sj59p6kms.s[287]++;if(removedNode){cov_1sj59p6kms.b[102][0]++;cov_1sj59p6kms.s[288]++;removedNode=undefined;cov_1sj59p6kms.s[289]++;this.count--;cov_1sj59p6kms.s[290]++;return true;}else{cov_1sj59p6kms.b[102][1]++;cov_1sj59p6kms.s[291]++;return false;}}}else{cov_1sj59p6kms.b[98][1]++;cov_1sj59p6kms.s[292]++;return false;}}else{cov_1sj59p6kms.b[97][1]++;cov_1sj59p6kms.s[293]++;return false;}}}}};cov_1sj59p6kms.s[294]++;IntervalTree.prototype.inOrder=function(){cov_1sj59p6kms.f[22]++;cov_1sj59p6kms.s[295]++;return new InOrder(this.root);};cov_1sj59p6kms.s[296]++;IntervalTree.prototype.preOrder=function(){cov_1sj59p6kms.f[23]++;cov_1sj59p6kms.s[297]++;return new PreOrder(this.root);};cov_1sj59p6kms.s[298]++;return IntervalTree;}());cov_1sj59p6kms.s[299]++;exports.IntervalTree=IntervalTree;var DataIntervalTree=(cov_1sj59p6kms.s[300]++,function(){cov_1sj59p6kms.f[24]++;function DataIntervalTree(){cov_1sj59p6kms.f[25]++;cov_1sj59p6kms.s[301]++;this.tree=new IntervalTree();}cov_1sj59p6kms.s[302]++;DataIntervalTree.prototype.insert=function(low,high,data){cov_1sj59p6kms.f[26]++;cov_1sj59p6kms.s[303]++;return this.tree.insert({low:low,high:high,data:data});};cov_1sj59p6kms.s[304]++;DataIntervalTree.prototype.remove=function(low,high,data){cov_1sj59p6kms.f[27]++;cov_1sj59p6kms.s[305]++;return this.tree.remove({low:low,high:high,data:data});};cov_1sj59p6kms.s[306]++;DataIntervalTree.prototype.search=function(low,high){cov_1sj59p6kms.f[28]++;cov_1sj59p6kms.s[307]++;return this.tree.search(low,high).map(function(v){cov_1sj59p6kms.f[29]++;cov_1sj59p6kms.s[308]++;return v.data;});};cov_1sj59p6kms.s[309]++;DataIntervalTree.prototype.inOrder=function(){cov_1sj59p6kms.f[30]++;cov_1sj59p6kms.s[310]++;return this.tree.inOrder();};cov_1sj59p6kms.s[311]++;DataIntervalTree.prototype.preOrder=function(){cov_1sj59p6kms.f[31]++;cov_1sj59p6kms.s[312]++;return this.tree.preOrder();};cov_1sj59p6kms.s[313]++;Object.defineProperty(DataIntervalTree.prototype,"count",{get:function(){cov_1sj59p6kms.f[32]++;cov_1sj59p6kms.s[314]++;return this.tree.count;},enumerable:true,configurable:true});cov_1sj59p6kms.s[315]++;return DataIntervalTree;}());cov_1sj59p6kms.s[316]++;exports.default=DataIntervalTree;var InOrder=(cov_1sj59p6kms.s[317]++,function(){cov_1sj59p6kms.f[33]++;function InOrder(startNode){cov_1sj59p6kms.f[34]++;cov_1sj59p6kms.s[318]++;this.stack=[];cov_1sj59p6kms.s[319]++;if(startNode!==undefined){cov_1sj59p6kms.b[103][0]++;cov_1sj59p6kms.s[320]++;this.push(startNode);}else{cov_1sj59p6kms.b[103][1]++;}}cov_1sj59p6kms.s[321]++;InOrder.prototype.next=function(){cov_1sj59p6kms.f[35]++;cov_1sj59p6kms.s[322]++;if(this.currentNode===undefined){cov_1sj59p6kms.b[104][0]++;cov_1sj59p6kms.s[323]++;return{done:true,value:undefined};}else{cov_1sj59p6kms.b[104][1]++;}cov_1sj59p6kms.s[324]++;if(this.i<this.currentNode.records.length){cov_1sj59p6kms.b[105][0]++;cov_1sj59p6kms.s[325]++;return{done:false,value:this.currentNode.records[this.i++]};}else{cov_1sj59p6kms.b[105][1]++;}cov_1sj59p6kms.s[326]++;if(this.currentNode.right!==undefined){cov_1sj59p6kms.b[106][0]++;cov_1sj59p6kms.s[327]++;this.push(this.currentNode.right);}else{cov_1sj59p6kms.b[106][1]++;cov_1sj59p6kms.s[328]++;this.pop();}cov_1sj59p6kms.s[329]++;return this.next();};cov_1sj59p6kms.s[330]++;InOrder.prototype.push=function(node){cov_1sj59p6kms.f[36]++;cov_1sj59p6kms.s[331]++;this.currentNode=node;cov_1sj59p6kms.s[332]++;this.i=0;cov_1sj59p6kms.s[333]++;while(this.currentNode.left!==undefined){cov_1sj59p6kms.s[334]++;this.stack.push(this.currentNode);cov_1sj59p6kms.s[335]++;this.currentNode=this.currentNode.left;}};cov_1sj59p6kms.s[336]++;InOrder.prototype.pop=function(){cov_1sj59p6kms.f[37]++;cov_1sj59p6kms.s[337]++;this.currentNode=this.stack.pop();cov_1sj59p6kms.s[338]++;this.i=0;};cov_1sj59p6kms.s[339]++;return InOrder;}());cov_1sj59p6kms.s[340]++;exports.InOrder=InOrder;cov_1sj59p6kms.s[341]++;if(typeof Symbol==='function'){cov_1sj59p6kms.b[107][0]++;cov_1sj59p6kms.s[342]++;InOrder.prototype[Symbol.iterator]=function(){cov_1sj59p6kms.f[38]++;cov_1sj59p6kms.s[343]++;return this;};}else{cov_1sj59p6kms.b[107][1]++;}var PreOrder=(cov_1sj59p6kms.s[344]++,function(){cov_1sj59p6kms.f[39]++;function PreOrder(startNode){cov_1sj59p6kms.f[40]++;cov_1sj59p6kms.s[345]++;this.stack=[];cov_1sj59p6kms.s[346]++;this.i=0;cov_1sj59p6kms.s[347]++;this.currentNode=startNode;}cov_1sj59p6kms.s[348]++;PreOrder.prototype.next=function(){cov_1sj59p6kms.f[41]++;cov_1sj59p6kms.s[349]++;if(this.currentNode===undefined){cov_1sj59p6kms.b[108][0]++;cov_1sj59p6kms.s[350]++;return{done:true,value:undefined};}else{cov_1sj59p6kms.b[108][1]++;}cov_1sj59p6kms.s[351]++;if(this.i<this.currentNode.records.length){cov_1sj59p6kms.b[109][0]++;cov_1sj59p6kms.s[352]++;return{done:false,value:this.currentNode.records[this.i++]};}else{cov_1sj59p6kms.b[109][1]++;}cov_1sj59p6kms.s[353]++;if(this.currentNode.right!==undefined){cov_1sj59p6kms.b[110][0]++;cov_1sj59p6kms.s[354]++;this.push(this.currentNode.right);}else{cov_1sj59p6kms.b[110][1]++;}cov_1sj59p6kms.s[355]++;if(this.currentNode.left!==undefined){cov_1sj59p6kms.b[111][0]++;cov_1sj59p6kms.s[356]++;this.push(this.currentNode.left);}else{cov_1sj59p6kms.b[111][1]++;}cov_1sj59p6kms.s[357]++;this.pop();cov_1sj59p6kms.s[358]++;return this.next();};cov_1sj59p6kms.s[359]++;PreOrder.prototype.push=function(node){cov_1sj59p6kms.f[42]++;cov_1sj59p6kms.s[360]++;this.stack.push(node);};cov_1sj59p6kms.s[361]++;PreOrder.prototype.pop=function(){cov_1sj59p6kms.f[43]++;cov_1sj59p6kms.s[362]++;this.currentNode=this.stack.pop();cov_1sj59p6kms.s[363]++;this.i=0;};cov_1sj59p6kms.s[364]++;return PreOrder;}());cov_1sj59p6kms.s[365]++;exports.PreOrder=PreOrder;cov_1sj59p6kms.s[366]++;if(typeof Symbol==='function'){cov_1sj59p6kms.b[112][0]++;cov_1sj59p6kms.s[367]++;PreOrder.prototype[Symbol.iterator]=function(){cov_1sj59p6kms.f[44]++;cov_1sj59p6kms.s[368]++;return this;};}else{cov_1sj59p6kms.b[112][1]++;}

/***/ }),
/* 54 */
/***/ (function(module, exports) {

var cov_1rooxjf6ch=function(){var path="/Users/gnidan/src/work/truffle/node_modules/shallowequal/index.js",hash="6d24fe22e4d99f0afbb71c88f61189d2e7989120",Function=function(){}.constructor,global=new Function('return this')(),gcv="__coverage__",coverageData={path:"/Users/gnidan/src/work/truffle/node_modules/shallowequal/index.js",statementMap:{"0":{start:{line:3,column:0},end:{line:46,column:2}},"1":{start:{line:4,column:12},end:{line:4,column:71}},"2":{start:{line:6,column:2},end:{line:8,column:3}},"3":{start:{line:7,column:4},end:{line:7,column:17}},"4":{start:{line:10,column:2},end:{line:12,column:3}},"5":{start:{line:11,column:4},end:{line:11,column:16}},"6":{start:{line:14,column:2},end:{line:16,column:3}},"7":{start:{line:15,column:4},end:{line:15,column:17}},"8":{start:{line:18,column:14},end:{line:18,column:31}},"9":{start:{line:19,column:14},end:{line:19,column:31}},"10":{start:{line:21,column:2},end:{line:23,column:3}},"11":{start:{line:22,column:4},end:{line:22,column:17}},"12":{start:{line:25,column:24},end:{line:25,column:66}},"13":{start:{line:28,column:2},end:{line:43,column:3}},"14":{start:{line:29,column:14},end:{line:29,column:24}},"15":{start:{line:31,column:4},end:{line:33,column:5}},"16":{start:{line:32,column:6},end:{line:32,column:19}},"17":{start:{line:35,column:17},end:{line:35,column:26}},"18":{start:{line:36,column:17},end:{line:36,column:26}},"19":{start:{line:38,column:4},end:{line:38,column:79}},"20":{start:{line:40,column:4},end:{line:42,column:5}},"21":{start:{line:41,column:6},end:{line:41,column:19}},"22":{start:{line:45,column:2},end:{line:45,column:14}}},fnMap:{"0":{name:"shallowEqual",decl:{start:{line:3,column:26},end:{line:3,column:38}},loc:{start:{line:3,column:76},end:{line:46,column:1}},line:3}},branchMap:{"0":{loc:{start:{line:4,column:12},end:{line:4,column:71}},type:"cond-expr",locations:[{start:{line:4,column:22},end:{line:4,column:62}},{start:{line:4,column:65},end:{line:4,column:71}}],line:4},"1":{loc:{start:{line:6,column:2},end:{line:8,column:3}},type:"if",locations:[{start:{line:6,column:2},end:{line:8,column:3}},{start:{line:6,column:2},end:{line:8,column:3}}],line:6},"2":{loc:{start:{line:10,column:2},end:{line:12,column:3}},type:"if",locations:[{start:{line:10,column:2},end:{line:12,column:3}},{start:{line:10,column:2},end:{line:12,column:3}}],line:10},"3":{loc:{start:{line:14,column:2},end:{line:16,column:3}},type:"if",locations:[{start:{line:14,column:2},end:{line:16,column:3}},{start:{line:14,column:2},end:{line:16,column:3}}],line:14},"4":{loc:{start:{line:14,column:6},end:{line:14,column:76}},type:"binary-expr",locations:[{start:{line:14,column:6},end:{line:14,column:30}},{start:{line:14,column:34},end:{line:14,column:39}},{start:{line:14,column:43},end:{line:14,column:67}},{start:{line:14,column:71},end:{line:14,column:76}}],line:14},"5":{loc:{start:{line:21,column:2},end:{line:23,column:3}},type:"if",locations:[{start:{line:21,column:2},end:{line:23,column:3}},{start:{line:21,column:2},end:{line:23,column:3}}],line:21},"6":{loc:{start:{line:31,column:4},end:{line:33,column:5}},type:"if",locations:[{start:{line:31,column:4},end:{line:33,column:5}},{start:{line:31,column:4},end:{line:33,column:5}}],line:31},"7":{loc:{start:{line:38,column:10},end:{line:38,column:78}},type:"cond-expr",locations:[{start:{line:38,column:20},end:{line:38,column:69}},{start:{line:38,column:72},end:{line:38,column:78}}],line:38},"8":{loc:{start:{line:40,column:4},end:{line:42,column:5}},type:"if",locations:[{start:{line:40,column:4},end:{line:42,column:5}},{start:{line:40,column:4},end:{line:42,column:5}}],line:40},"9":{loc:{start:{line:40,column:8},end:{line:40,column:62}},type:"binary-expr",locations:[{start:{line:40,column:8},end:{line:40,column:21}},{start:{line:40,column:26},end:{line:40,column:40}},{start:{line:40,column:44},end:{line:40,column:61}}],line:40}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0},f:{"0":0},b:{"0":[0,0],"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0,0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0,0]},_coverageSchema:"332fd63041d2c1bcb487cc26dd0d5f7d97098a6c"},coverage=global[gcv]||(global[gcv]={});if(coverage[path]&&coverage[path].hash===hash){return coverage[path];}coverageData.hash=hash;return coverage[path]=coverageData;}();cov_1rooxjf6ch.s[0]++;module.exports=function shallowEqual(objA,objB,compare,compareContext){cov_1rooxjf6ch.f[0]++;var ret=(cov_1rooxjf6ch.s[1]++,compare?(cov_1rooxjf6ch.b[0][0]++,compare.call(compareContext,objA,objB)):(cov_1rooxjf6ch.b[0][1]++,void 0));cov_1rooxjf6ch.s[2]++;if(ret!==void 0){cov_1rooxjf6ch.b[1][0]++;cov_1rooxjf6ch.s[3]++;return!!ret;}else{cov_1rooxjf6ch.b[1][1]++;}cov_1rooxjf6ch.s[4]++;if(objA===objB){cov_1rooxjf6ch.b[2][0]++;cov_1rooxjf6ch.s[5]++;return true;}else{cov_1rooxjf6ch.b[2][1]++;}cov_1rooxjf6ch.s[6]++;if((cov_1rooxjf6ch.b[4][0]++,typeof objA!=="object")||(cov_1rooxjf6ch.b[4][1]++,!objA)||(cov_1rooxjf6ch.b[4][2]++,typeof objB!=="object")||(cov_1rooxjf6ch.b[4][3]++,!objB)){cov_1rooxjf6ch.b[3][0]++;cov_1rooxjf6ch.s[7]++;return false;}else{cov_1rooxjf6ch.b[3][1]++;}var keysA=(cov_1rooxjf6ch.s[8]++,Object.keys(objA));var keysB=(cov_1rooxjf6ch.s[9]++,Object.keys(objB));cov_1rooxjf6ch.s[10]++;if(keysA.length!==keysB.length){cov_1rooxjf6ch.b[5][0]++;cov_1rooxjf6ch.s[11]++;return false;}else{cov_1rooxjf6ch.b[5][1]++;}var bHasOwnProperty=(cov_1rooxjf6ch.s[12]++,Object.prototype.hasOwnProperty.bind(objB));cov_1rooxjf6ch.s[13]++;for(var idx=0;idx<keysA.length;idx++){var key=(cov_1rooxjf6ch.s[14]++,keysA[idx]);cov_1rooxjf6ch.s[15]++;if(!bHasOwnProperty(key)){cov_1rooxjf6ch.b[6][0]++;cov_1rooxjf6ch.s[16]++;return false;}else{cov_1rooxjf6ch.b[6][1]++;}var valueA=(cov_1rooxjf6ch.s[17]++,objA[key]);var valueB=(cov_1rooxjf6ch.s[18]++,objB[key]);cov_1rooxjf6ch.s[19]++;ret=compare?(cov_1rooxjf6ch.b[7][0]++,compare.call(compareContext,valueA,valueB,key)):(cov_1rooxjf6ch.b[7][1]++,void 0);cov_1rooxjf6ch.s[20]++;if((cov_1rooxjf6ch.b[9][0]++,ret===false)||(cov_1rooxjf6ch.b[9][1]++,ret===void 0)&&(cov_1rooxjf6ch.b[9][2]++,valueA!==valueB)){cov_1rooxjf6ch.b[8][0]++;cov_1rooxjf6ch.s[21]++;return false;}else{cov_1rooxjf6ch.b[8][1]++;}}cov_1rooxjf6ch.s[22]++;return true;};

/***/ }),
/* 55 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var cov_12n7kfeprd = function () {
  var path = "/Users/gnidan/src/work/truffle/packages/truffle-debugger/lib/store/index.js",
      hash = "813d932d6c7a3ac94045c9ff910925d7011fe337",
      Function = function () {}.constructor,
      global = new Function('return this')(),
      gcv = "__coverage__",
      coverageData = { path: "/Users/gnidan/src/work/truffle/packages/truffle-debugger/lib/store/index.js", statementMap: { "0": { start: { line: 3, column: 0 }, end: { line: 9, column: 1 } }, "1": { start: { line: 4, column: 2 }, end: { line: 4, column: 43 } }, "2": { start: { line: 5, column: 7 }, end: { line: 9, column: 1 } }, "3": { start: { line: 6, column: 2 }, end: { line: 6, column: 37 } }, "4": { start: { line: 8, column: 2 }, end: { line: 8, column: 44 } } }, fnMap: {}, branchMap: { "0": { loc: { start: { line: 3, column: 0 }, end: { line: 9, column: 1 } }, type: "if", locations: [{ start: { line: 3, column: 0 }, end: { line: 9, column: 1 } }, { start: { line: 3, column: 0 }, end: { line: 9, column: 1 } }], line: 3 }, "1": { loc: { start: { line: 5, column: 7 }, end: { line: 9, column: 1 } }, type: "if", locations: [{ start: { line: 5, column: 7 }, end: { line: 9, column: 1 } }, { start: { line: 5, column: 7 }, end: { line: 9, column: 1 } }], line: 5 } }, s: { "0": 0, "1": 0, "2": 0, "3": 0, "4": 0 }, f: {}, b: { "0": [0, 0], "1": [0, 0] }, inputSourceMap: { version: 3, sources: ["lib/store/index.js"], names: ["process", "env", "NODE_ENV", "module", "exports", "require"], mappings: ";;AAAA,IAAIA,QAAQC,GAAR,CAAYC,QAAZ,IAAwB,YAA5B,EAA0C;AACxCC,SAAOC,OAAP,GAAiBC,QAAQ,cAAR,CAAjB;AACD,CAFD,MAEO,IAAIL,QAAQC,GAAR,CAAYC,QAAZ,IAAwB,MAA5B,EAAoC;AACzCC,SAAOC,OAAP,GAAiBC,QAAQ,QAAR,CAAjB;AACD,CAFM,MAEA;AACLF,SAAOC,OAAP,GAAiBC,QAAQ,eAAR,CAAjB;AACD", file: "index.js", sourceRoot: "/Users/gnidan/src/work/truffle/packages/truffle-debugger", sourcesContent: ["if (process.env.NODE_ENV == \"production\") {\n  module.exports = require(\"./production\");\n} else if (process.env.NODE_ENV == \"test\") {\n  module.exports = require(\"./test\");\n} else {\n  module.exports = require(\"./development\");\n}\n"] }, _coverageSchema: "332fd63041d2c1bcb487cc26dd0d5f7d97098a6c" },
      coverage = global[gcv] || (global[gcv] = {});if (coverage[path] && coverage[path].hash === hash) {
    return coverage[path];
  }coverageData.hash = hash;return coverage[path] = coverageData;
}();cov_12n7kfeprd.s[0]++;if (false) {
  cov_12n7kfeprd.b[0][0]++;cov_12n7kfeprd.s[1]++;module.exports = require("./production");
} else {
  cov_12n7kfeprd.b[0][1]++;cov_12n7kfeprd.s[2]++;if (true) {
    cov_12n7kfeprd.b[1][0]++;cov_12n7kfeprd.s[3]++;module.exports = __webpack_require__(56);
  } else {
    cov_12n7kfeprd.b[1][1]++;cov_12n7kfeprd.s[4]++;module.exports = require("./development");
  }
}

/***/ }),
/* 56 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var cov_2qhe9lqdcs = function () {
  var path = "/Users/gnidan/src/work/truffle/packages/truffle-debugger/lib/store/test.js",
      hash = "7add4b33a7ce2334dfc46ea41dba63e75bcdfed4",
      Function = function () {}.constructor,
      global = new Function('return this')(),
      gcv = "__coverage__",
      coverageData = { path: "/Users/gnidan/src/work/truffle/packages/truffle-debugger/lib/store/test.js", statementMap: { "0": { start: { line: 3, column: 0 }, end: { line: 5, column: 3 } }, "1": { start: { line: 7, column: 14 }, end: { line: 7, column: 33 } }, "2": { start: { line: 9, column: 15 }, end: { line: 9, column: 46 } }, "3": { start: { line: 11, column: 39 }, end: { line: 11, column: 93 } }, "4": { start: { line: 13, column: 0 }, end: { line: 13, column: 35 } } }, fnMap: { "0": { name: "_interopRequireDefault", decl: { start: { line: 11, column: 9 }, end: { line: 11, column: 31 } }, loc: { start: { line: 11, column: 37 }, end: { line: 11, column: 95 } }, line: 11 } }, branchMap: { "0": { loc: { start: { line: 11, column: 46 }, end: { line: 11, column: 92 } }, type: "cond-expr", locations: [{ start: { line: 11, column: 70 }, end: { line: 11, column: 73 } }, { start: { line: 11, column: 76 }, end: { line: 11, column: 92 } }], line: 11 }, "1": { loc: { start: { line: 11, column: 46 }, end: { line: 11, column: 67 } }, type: "binary-expr", locations: [{ start: { line: 11, column: 46 }, end: { line: 11, column: 49 } }, { start: { line: 11, column: 53 }, end: { line: 11, column: 67 } }], line: 11 } }, s: { "0": 0, "1": 0, "2": 0, "3": 0, "4": 0 }, f: { "0": 0 }, b: { "0": [0, 0], "1": [0, 0] }, inputSourceMap: { version: 3, sources: ["lib/store/test.js"], names: ["configureStore"], mappings: ";;;;;;AAAA;;;;;;kBACeA,gB", file: "test.js", sourceRoot: "/Users/gnidan/src/work/truffle/packages/truffle-debugger", sourcesContent: ["import configureStore from \"./common\";\nexport default configureStore;\n"] }, _coverageSchema: "332fd63041d2c1bcb487cc26dd0d5f7d97098a6c" },
      coverage = global[gcv] || (global[gcv] = {});if (coverage[path] && coverage[path].hash === hash) {
    return coverage[path];
  }coverageData.hash = hash;return coverage[path] = coverageData;
}();cov_2qhe9lqdcs.s[0]++;Object.defineProperty(exports, "__esModule", { value: true });var _common = (cov_2qhe9lqdcs.s[1]++, __webpack_require__(57));var _common2 = (cov_2qhe9lqdcs.s[2]++, _interopRequireDefault(_common));function _interopRequireDefault(obj) {
  cov_2qhe9lqdcs.f[0]++;cov_2qhe9lqdcs.s[3]++;return (cov_2qhe9lqdcs.b[1][0]++, obj) && (cov_2qhe9lqdcs.b[1][1]++, obj.__esModule) ? (cov_2qhe9lqdcs.b[0][0]++, obj) : (cov_2qhe9lqdcs.b[0][1]++, { default: obj });
}cov_2qhe9lqdcs.s[4]++;exports.default = _common2.default;

/***/ }),
/* 57 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var cov_2hrt5b78ac = function () {
  var path = "/Users/gnidan/src/work/truffle/packages/truffle-debugger/lib/store/common.js",
      hash = "6c179ea26f8b371bf31388d795cfe32dfe4a52d7",
      Function = function () {}.constructor,
      global = new Function('return this')(),
      gcv = "__coverage__",
      coverageData = { path: "/Users/gnidan/src/work/truffle/packages/truffle-debugger/lib/store/common.js", statementMap: { "0": { start: { line: 3, column: 0 }, end: { line: 5, column: 3 } }, "1": { start: { line: 7, column: 15 }, end: { line: 7, column: 62 } }, "2": { start: { line: 9, column: 16 }, end: { line: 9, column: 48 } }, "3": { start: { line: 11, column: 14 }, end: { line: 11, column: 60 } }, "4": { start: { line: 13, column: 15 }, end: { line: 13, column: 46 } }, "5": { start: { line: 15, column: 0 }, end: { line: 15, column: 44 } }, "6": { start: { line: 16, column: 0 }, end: { line: 16, column: 33 } }, "7": { start: { line: 18, column: 13 }, end: { line: 18, column: 29 } }, "8": { start: { line: 20, column: 14 }, end: { line: 20, column: 44 } }, "9": { start: { line: 22, column: 13 }, end: { line: 22, column: 29 } }, "10": { start: { line: 24, column: 17 }, end: { line: 24, column: 38 } }, "11": { start: { line: 26, column: 18 }, end: { line: 26, column: 52 } }, "12": { start: { line: 28, column: 22 }, end: { line: 28, column: 49 } }, "13": { start: { line: 30, column: 23 }, end: { line: 30, column: 62 } }, "14": { start: { line: 32, column: 39 }, end: { line: 32, column: 93 } }, "15": { start: { line: 34, column: 14 }, end: { line: 34, column: 59 } }, "16": { start: { line: 35, column: 19 }, end: { line: 35, column: 57 } }, "17": { start: { line: 38, column: 2 }, end: { line: 38, column: 50 } }, "18": { start: { line: 39, column: 2 }, end: { line: 39, column: 47 } }, "19": { start: { line: 40, column: 2 }, end: { line: 40, column: 51 } }, "20": { start: { line: 42, column: 2 }, end: { line: 44, column: 3 } }, "21": { start: { line: 43, column: 4 }, end: { line: 43, column: 17 } }, "22": { start: { line: 46, column: 18 }, end: { line: 46, column: 70 } }, "23": { start: { line: 46, column: 27 }, end: { line: 46, column: 70 } }, "24": { start: { line: 48, column: 2 }, end: { line: 64, column: 3 } }, "25": { start: { line: 49, column: 4 }, end: { line: 51, column: 5 } }, "26": { start: { line: 50, column: 6 }, end: { line: 50, column: 124 } }, "27": { start: { line: 53, column: 4 }, end: { line: 53, column: 30 } }, "28": { start: { line: 54, column: 9 }, end: { line: 64, column: 3 } }, "29": { start: { line: 55, column: 4 }, end: { line: 55, column: 119 } }, "30": { start: { line: 55, column: 87 }, end: { line: 55, column: 115 } }, "31": { start: { line: 56, column: 9 }, end: { line: 64, column: 3 } }, "32": { start: { line: 57, column: 16 }, end: { line: 57, column: 21 } }, "33": { start: { line: 58, column: 24 }, end: { line: 58, column: 64 } }, "34": { start: { line: 59, column: 18 }, end: { line: 59, column: 58 } }, "35": { start: { line: 60, column: 19 }, end: { line: 60, column: 72 } }, "36": { start: { line: 61, column: 4 }, end: { line: 61, column: 43 } }, "37": { start: { line: 63, column: 4 }, end: { line: 63, column: 17 } }, "38": { start: { line: 68, column: 25 }, end: { line: 68, column: 51 } }, "39": { start: { line: 70, column: 2 }, end: { line: 72, column: 3 } }, "40": { start: { line: 71, column: 4 }, end: { line: 71, column: 38 } }, "41": { start: { line: 74, column: 27 }, end: { line: 81, column: 4 } }, "42": { start: { line: 76, column: 31 }, end: { line: 79, column: 6 } }, "43": { start: { line: 83, column: 14 }, end: { line: 83, column: 141 } }, "44": { start: { line: 85, column: 2 }, end: { line: 85, column: 27 } }, "45": { start: { line: 87, column: 2 }, end: { line: 87, column: 15 } } }, fnMap: { "0": { name: "_interopRequireDefault", decl: { start: { line: 32, column: 9 }, end: { line: 32, column: 31 } }, loc: { start: { line: 32, column: 37 }, end: { line: 32, column: 95 } }, line: 32 }, "1": { name: "abbreviateValues", decl: { start: { line: 37, column: 9 }, end: { line: 37, column: 25 } }, loc: { start: { line: 37, column: 58 }, end: { line: 65, column: 1 } }, line: 37 }, "2": { name: "(anonymous_2)", decl: { start: { line: 46, column: 18 }, end: { line: 46, column: 19 } }, loc: { start: { line: 46, column: 27 }, end: { line: 46, column: 70 } }, line: 46 }, "3": { name: "(anonymous_3)", decl: { start: { line: 55, column: 74 }, end: { line: 55, column: 75 } }, loc: { start: { line: 55, column: 87 }, end: { line: 55, column: 115 } }, line: 55 }, "4": { name: "configureStore", decl: { start: { line: 67, column: 9 }, end: { line: 67, column: 23 } }, loc: { start: { line: 67, column: 71 }, end: { line: 88, column: 1 } }, line: 67 }, "5": { name: "(anonymous_5)", decl: { start: { line: 76, column: 22 }, end: { line: 76, column: 23 } }, loc: { start: { line: 76, column: 31 }, end: { line: 79, column: 6 } }, line: 76 } }, branchMap: { "0": { loc: { start: { line: 32, column: 46 }, end: { line: 32, column: 92 } }, type: "cond-expr", locations: [{ start: { line: 32, column: 70 }, end: { line: 32, column: 73 } }, { start: { line: 32, column: 76 }, end: { line: 32, column: 92 } }], line: 32 }, "1": { loc: { start: { line: 32, column: 46 }, end: { line: 32, column: 67 } }, type: "binary-expr", locations: [{ start: { line: 32, column: 46 }, end: { line: 32, column: 49 } }, { start: { line: 32, column: 53 }, end: { line: 32, column: 67 } }], line: 32 }, "2": { loc: { start: { line: 37, column: 33 }, end: { line: 37, column: 45 } }, type: "default-arg", locations: [{ start: { line: 37, column: 43 }, end: { line: 37, column: 45 } }], line: 37 }, "3": { loc: { start: { line: 37, column: 47 }, end: { line: 37, column: 56 } }, type: "default-arg", locations: [{ start: { line: 37, column: 55 }, end: { line: 37, column: 56 } }], line: 37 }, "4": { loc: { start: { line: 38, column: 24 }, end: { line: 38, column: 49 } }, type: "binary-expr", locations: [{ start: { line: 38, column: 24 }, end: { line: 38, column: 43 } }, { start: { line: 38, column: 47 }, end: { line: 38, column: 49 } }], line: 38 }, "5": { loc: { start: { line: 39, column: 23 }, end: { line: 39, column: 46 } }, type: "binary-expr", locations: [{ start: { line: 39, column: 23 }, end: { line: 39, column: 41 } }, { start: { line: 39, column: 45 }, end: { line: 39, column: 46 } }], line: 39 }, "6": { loc: { start: { line: 40, column: 25 }, end: { line: 40, column: 50 } }, type: "binary-expr", locations: [{ start: { line: 40, column: 25 }, end: { line: 40, column: 45 } }, { start: { line: 40, column: 49 }, end: { line: 40, column: 50 } }], line: 40 }, "7": { loc: { start: { line: 42, column: 2 }, end: { line: 44, column: 3 } }, type: "if", locations: [{ start: { line: 42, column: 2 }, end: { line: 44, column: 3 } }, { start: { line: 42, column: 2 }, end: { line: 44, column: 3 } }], line: 42 }, "8": { loc: { start: { line: 48, column: 2 }, end: { line: 64, column: 3 } }, type: "if", locations: [{ start: { line: 48, column: 2 }, end: { line: 64, column: 3 } }, { start: { line: 48, column: 2 }, end: { line: 64, column: 3 } }], line: 48 }, "9": { loc: { start: { line: 49, column: 4 }, end: { line: 51, column: 5 } }, type: "if", locations: [{ start: { line: 49, column: 4 }, end: { line: 51, column: 5 } }, { start: { line: 49, column: 4 }, end: { line: 51, column: 5 } }], line: 49 }, "10": { loc: { start: { line: 54, column: 9 }, end: { line: 64, column: 3 } }, type: "if", locations: [{ start: { line: 54, column: 9 }, end: { line: 64, column: 3 } }, { start: { line: 54, column: 9 }, end: { line: 64, column: 3 } }], line: 54 }, "11": { loc: { start: { line: 56, column: 9 }, end: { line: 64, column: 3 } }, type: "if", locations: [{ start: { line: 56, column: 9 }, end: { line: 64, column: 3 } }, { start: { line: 56, column: 9 }, end: { line: 64, column: 3 } }], line: 56 }, "12": { loc: { start: { line: 56, column: 13 }, end: { line: 56, column: 76 } }, type: "binary-expr", locations: [{ start: { line: 56, column: 13 }, end: { line: 56, column: 38 } }, { start: { line: 56, column: 42 }, end: { line: 56, column: 76 } }], line: 56 }, "13": { loc: { start: { line: 70, column: 2 }, end: { line: 72, column: 3 } }, type: "if", locations: [{ start: { line: 70, column: 2 }, end: { line: 72, column: 3 } }, { start: { line: 70, column: 2 }, end: { line: 72, column: 3 } }], line: 70 } }, s: { "0": 0, "1": 0, "2": 0, "3": 0, "4": 0, "5": 0, "6": 0, "7": 0, "8": 0, "9": 0, "10": 0, "11": 0, "12": 0, "13": 0, "14": 0, "15": 0, "16": 0, "17": 0, "18": 0, "19": 0, "20": 0, "21": 0, "22": 0, "23": 0, "24": 0, "25": 0, "26": 0, "27": 0, "28": 0, "29": 0, "30": 0, "31": 0, "32": 0, "33": 0, "34": 0, "35": 0, "36": 0, "37": 0, "38": 0, "39": 0, "40": 0, "41": 0, "42": 0, "43": 0, "44": 0, "45": 0 }, f: { "0": 0, "1": 0, "2": 0, "3": 0, "4": 0, "5": 0 }, b: { "0": [0, 0], "1": [0, 0], "2": [0], "3": [0], "4": [0, 0], "5": [0, 0], "6": [0, 0], "7": [0, 0], "8": [0, 0], "9": [0, 0], "10": [0, 0], "11": [0, 0], "12": [0, 0], "13": [0, 0] }, inputSourceMap: { version: 3, sources: ["lib/store/common.js"], names: ["abbreviateValues", "configureStore", "debug", "reduxDebug", "value", "options", "depth", "stringLimit", "arrayLimit", "recurseLimit", "recurse", "child", "Array", "length", "slice", "map", "Object", "k", "v", "inner", "extractAmount", "leading", "Math", "ceil", "trailing", "floor", "reducer", "saga", "initialState", "composeEnhancers", "sagaMiddleware", "compose", "loggerMiddleware", "log", "stateTransformer", "state", "actionTransformer", "store", "run"], mappings: ";;;;;;;;;;;;;;QAQgBA,gB,GAAAA,gB;kBAyCQC,c;;AAjDxB;;;;AAIA;;AACA;;;;AACA;;;;;;AALA,MAAMC,QAAQ,qBAAY,uBAAZ,CAAd;AACA,MAAMC,aAAa,qBAAY,gBAAZ,CAAnB;;AAMO,SAASH,gBAAT,CAA0BI,KAA1B,EAAiCC,UAAU,EAA3C,EAA+CC,QAAQ,CAAvD,EAA0D;AAC/DD,UAAQE,WAAR,GAAsBF,QAAQE,WAAR,IAAuB,EAA7C;AACAF,UAAQG,UAAR,GAAqBH,QAAQG,UAAR,IAAsB,CAA3C;AACAH,UAAQI,YAAR,GAAuBJ,QAAQI,YAAR,IAAwB,CAA/C;;AAEA,MAAIH,QAAQD,QAAQI,YAApB,EAAkC;AAChC,WAAO,KAAP;AACD;;AAED,QAAMC,UAAWC,KAAD,IAAWX,iBAAiBW,KAAjB,EAAwBN,OAAxB,EAAiCC,QAAQ,CAAzC,CAA3B;;AAEA,MAAIF,iBAAiBQ,KAArB,EAA4B;AAC1B,QAAIR,MAAMS,MAAN,GAAeR,QAAQG,UAA3B,EAAuC;AACrCJ,cAAQ,CACN,GAAGA,MAAMU,KAAN,CAAY,CAAZ,EAAeT,QAAQG,UAAR,GAAqB,CAApC,CADG,EAEN,KAFM,EAGN,GAAGJ,MAAMU,KAAN,CAAYV,MAAMS,MAAN,GAAeR,QAAQG,UAAR,GAAqB,CAApC,GAAwC,CAApD,CAHG,CAAR;AAKD;;AAED,WAAOJ,MAAMW,GAAN,CAAUL,OAAV,CAAP;AAED,GAXD,MAWO,IAAIN,iBAAiBY,MAArB,EAA6B;AAClC,WAAO,sBAAc,EAAd,EACL,GAAG,uBAAeZ,KAAf,EAAsBW,GAAtB,CACD,CAAC,CAACE,CAAD,EAAIC,CAAJ,CAAD,MAAa,EAAE,CAACR,QAAQO,CAAR,CAAD,GAAcP,QAAQQ,CAAR,CAAhB,EAAb,CADC,CADE,CAAP;AAMD,GAPM,MAOA,IAAI,OAAOd,KAAP,KAAiB,QAAjB,IAA6BA,MAAMS,MAAN,GAAeR,QAAQE,WAAxD,EAAqE;AAC1E,QAAIY,QAAQ,KAAZ;AACA,QAAIC,gBAAgB,CAACf,QAAQE,WAAR,GAAsBY,MAAMN,MAA7B,IAAuC,CAA3D;AACA,QAAIQ,UAAUjB,MAAMU,KAAN,CAAY,CAAZ,EAAeQ,KAAKC,IAAL,CAAUH,aAAV,CAAf,CAAd;AACA,QAAII,WAAWpB,MAAMU,KAAN,CAAYV,MAAMS,MAAN,GAAeS,KAAKG,KAAL,CAAWL,aAAX,CAA3B,CAAf;AACA,WAAQ,GAAEC,OAAQ,GAAEF,KAAM,GAAEK,QAAS,EAArC;AAED,GAPM,MAOA;AACL,WAAOpB,KAAP;AACD;AACF;;AAEc,SAASH,cAAT,CAAyByB,OAAzB,EAAkCC,IAAlC,EAAwCC,YAAxC,EAAsDC,gBAAtD,EAAwE;AACrF,QAAMC,iBAAiB,0BAAvB;;AAEA,MAAI,CAACD,gBAAL,EAAuB;AACrBA,uBAAmBE,cAAnB;AACD;;AAED,QAAMC,mBAAmB,8BAAa;AACpCC,SAAK9B,UAD+B;AAEpC+B,sBAAmBC,KAAD,IAAWnC,iBAAiBmC,KAAjB,EAAwB;AACnD3B,kBAAY,CADuC;AAEnDC,oBAAc;AAFqC,KAAxB,CAFO;AAMpC2B,uBAAmBpC;AANiB,GAAb,CAAzB;;AASA,MAAIqC,QAAQ,wBACVX,OADU,EACDE,YADC,EAGVC,iBACE,4BACEC,cADF,EAEEE,gBAFF,CADF,CAHU,CAAZ;;AAWAF,iBAAeQ,GAAf,CAAmBX,IAAnB;;AAEA,SAAOU,KAAP;AACD", file: "common.js", sourceRoot: "/Users/gnidan/src/work/truffle/packages/truffle-debugger", sourcesContent: ["import debugModule from \"debug\";\nconst debug = debugModule(\"debugger:store:common\");\nconst reduxDebug = debugModule(\"debugger:redux\");\n\nimport { compose, createStore, applyMiddleware } from \"redux\";\nimport createSagaMiddleware from \"redux-saga\";\nimport createLogger from \"redux-cli-logger\";\n\nexport function abbreviateValues(value, options = {}, depth = 0) {\n  options.stringLimit = options.stringLimit || 66;\n  options.arrayLimit = options.arrayLimit || 8;\n  options.recurseLimit = options.recurseLimit || 4;\n\n  if (depth > options.recurseLimit) {\n    return \"...\";\n  }\n\n  const recurse = (child) => abbreviateValues(child, options, depth + 1);\n\n  if (value instanceof Array) {\n    if (value.length > options.arrayLimit) {\n      value = [\n        ...value.slice(0, options.arrayLimit / 2),\n        \"...\",\n        ...value.slice(value.length - options.arrayLimit / 2 + 1)\n      ];\n    }\n\n    return value.map(recurse);\n\n  } else if (value instanceof Object) {\n    return Object.assign({},\n      ...Object.entries(value).map(\n        ([k, v]) => ({ [recurse(k)]: recurse(v) })\n      )\n    );\n\n  } else if (typeof value === \"string\" && value.length > options.stringLimit) {\n    let inner = \"...\";\n    let extractAmount = (options.stringLimit - inner.length) / 2;\n    let leading = value.slice(0, Math.ceil(extractAmount));\n    let trailing = value.slice(value.length - Math.floor(extractAmount));\n    return `${leading}${inner}${trailing}`;\n\n  } else {\n    return value;\n  }\n}\n\nexport default function configureStore (reducer, saga, initialState, composeEnhancers) {\n  const sagaMiddleware = createSagaMiddleware();\n\n  if (!composeEnhancers) {\n    composeEnhancers = compose;\n  }\n\n  const loggerMiddleware = createLogger({\n    log: reduxDebug,\n    stateTransformer: (state) => abbreviateValues(state, {\n      arrayLimit: 4,\n      recurseLimit: 3\n    }),\n    actionTransformer: abbreviateValues,\n  });\n\n  let store = createStore(\n    reducer, initialState,\n\n    composeEnhancers(\n      applyMiddleware(\n        sagaMiddleware,\n        loggerMiddleware\n      )\n    )\n  );\n\n  sagaMiddleware.run(saga);\n\n  return store;\n}\n"] }, _coverageSchema: "332fd63041d2c1bcb487cc26dd0d5f7d97098a6c" },
      coverage = global[gcv] || (global[gcv] = {});if (coverage[path] && coverage[path].hash === hash) {
    return coverage[path];
  }coverageData.hash = hash;return coverage[path] = coverageData;
}();cov_2hrt5b78ac.s[0]++;Object.defineProperty(exports, "__esModule", { value: true });var _entries = (cov_2hrt5b78ac.s[1]++, __webpack_require__(1));var _entries2 = (cov_2hrt5b78ac.s[2]++, _interopRequireDefault(_entries));var _assign = (cov_2hrt5b78ac.s[3]++, __webpack_require__(3));var _assign2 = (cov_2hrt5b78ac.s[4]++, _interopRequireDefault(_assign));cov_2hrt5b78ac.s[5]++;exports.abbreviateValues = abbreviateValues;cov_2hrt5b78ac.s[6]++;exports.default = configureStore;var _debug = (cov_2hrt5b78ac.s[7]++, __webpack_require__(0));var _debug2 = (cov_2hrt5b78ac.s[8]++, _interopRequireDefault(_debug));var _redux = (cov_2hrt5b78ac.s[9]++, __webpack_require__(15));var _reduxSaga = (cov_2hrt5b78ac.s[10]++, __webpack_require__(58));var _reduxSaga2 = (cov_2hrt5b78ac.s[11]++, _interopRequireDefault(_reduxSaga));var _reduxCliLogger = (cov_2hrt5b78ac.s[12]++, __webpack_require__(59));var _reduxCliLogger2 = (cov_2hrt5b78ac.s[13]++, _interopRequireDefault(_reduxCliLogger));function _interopRequireDefault(obj) {
  cov_2hrt5b78ac.f[0]++;cov_2hrt5b78ac.s[14]++;return (cov_2hrt5b78ac.b[1][0]++, obj) && (cov_2hrt5b78ac.b[1][1]++, obj.__esModule) ? (cov_2hrt5b78ac.b[0][0]++, obj) : (cov_2hrt5b78ac.b[0][1]++, { default: obj });
}const debug = (cov_2hrt5b78ac.s[15]++, (0, _debug2.default)("debugger:store:common"));const reduxDebug = (cov_2hrt5b78ac.s[16]++, (0, _debug2.default)("debugger:redux"));function abbreviateValues(value, options = (cov_2hrt5b78ac.b[2][0]++, {}), depth = (cov_2hrt5b78ac.b[3][0]++, 0)) {
  cov_2hrt5b78ac.f[1]++;cov_2hrt5b78ac.s[17]++;options.stringLimit = (cov_2hrt5b78ac.b[4][0]++, options.stringLimit) || (cov_2hrt5b78ac.b[4][1]++, 66);cov_2hrt5b78ac.s[18]++;options.arrayLimit = (cov_2hrt5b78ac.b[5][0]++, options.arrayLimit) || (cov_2hrt5b78ac.b[5][1]++, 8);cov_2hrt5b78ac.s[19]++;options.recurseLimit = (cov_2hrt5b78ac.b[6][0]++, options.recurseLimit) || (cov_2hrt5b78ac.b[6][1]++, 4);cov_2hrt5b78ac.s[20]++;if (depth > options.recurseLimit) {
    cov_2hrt5b78ac.b[7][0]++;cov_2hrt5b78ac.s[21]++;return "...";
  } else {
    cov_2hrt5b78ac.b[7][1]++;
  }cov_2hrt5b78ac.s[22]++;const recurse = child => {
    cov_2hrt5b78ac.f[2]++;cov_2hrt5b78ac.s[23]++;return abbreviateValues(child, options, depth + 1);
  };cov_2hrt5b78ac.s[24]++;if (value instanceof Array) {
    cov_2hrt5b78ac.b[8][0]++;cov_2hrt5b78ac.s[25]++;if (value.length > options.arrayLimit) {
      cov_2hrt5b78ac.b[9][0]++;cov_2hrt5b78ac.s[26]++;value = [...value.slice(0, options.arrayLimit / 2), "...", ...value.slice(value.length - options.arrayLimit / 2 + 1)];
    } else {
      cov_2hrt5b78ac.b[9][1]++;
    }cov_2hrt5b78ac.s[27]++;return value.map(recurse);
  } else {
    cov_2hrt5b78ac.b[8][1]++;cov_2hrt5b78ac.s[28]++;if (value instanceof Object) {
      cov_2hrt5b78ac.b[10][0]++;cov_2hrt5b78ac.s[29]++;return (0, _assign2.default)({}, ...(0, _entries2.default)(value).map(([k, v]) => {
        cov_2hrt5b78ac.f[3]++;cov_2hrt5b78ac.s[30]++;return { [recurse(k)]: recurse(v) };
      }));
    } else {
      cov_2hrt5b78ac.b[10][1]++;cov_2hrt5b78ac.s[31]++;if ((cov_2hrt5b78ac.b[12][0]++, typeof value === "string") && (cov_2hrt5b78ac.b[12][1]++, value.length > options.stringLimit)) {
        cov_2hrt5b78ac.b[11][0]++;let inner = (cov_2hrt5b78ac.s[32]++, "...");let extractAmount = (cov_2hrt5b78ac.s[33]++, (options.stringLimit - inner.length) / 2);let leading = (cov_2hrt5b78ac.s[34]++, value.slice(0, Math.ceil(extractAmount)));let trailing = (cov_2hrt5b78ac.s[35]++, value.slice(value.length - Math.floor(extractAmount)));cov_2hrt5b78ac.s[36]++;return `${leading}${inner}${trailing}`;
      } else {
        cov_2hrt5b78ac.b[11][1]++;cov_2hrt5b78ac.s[37]++;return value;
      }
    }
  }
}function configureStore(reducer, saga, initialState, composeEnhancers) {
  cov_2hrt5b78ac.f[4]++;const sagaMiddleware = (cov_2hrt5b78ac.s[38]++, (0, _reduxSaga2.default)());cov_2hrt5b78ac.s[39]++;if (!composeEnhancers) {
    cov_2hrt5b78ac.b[13][0]++;cov_2hrt5b78ac.s[40]++;composeEnhancers = _redux.compose;
  } else {
    cov_2hrt5b78ac.b[13][1]++;
  }const loggerMiddleware = (cov_2hrt5b78ac.s[41]++, (0, _reduxCliLogger2.default)({ log: reduxDebug, stateTransformer: state => {
      cov_2hrt5b78ac.f[5]++;cov_2hrt5b78ac.s[42]++;return abbreviateValues(state, { arrayLimit: 4, recurseLimit: 3 });
    }, actionTransformer: abbreviateValues }));let store = (cov_2hrt5b78ac.s[43]++, (0, _redux.createStore)(reducer, initialState, composeEnhancers((0, _redux.applyMiddleware)(sagaMiddleware, loggerMiddleware))));cov_2hrt5b78ac.s[44]++;sagaMiddleware.run(saga);cov_2hrt5b78ac.s[45]++;return store;
}

/***/ }),
/* 58 */
/***/ (function(module, exports) {

module.exports = require("redux-saga");

/***/ }),
/* 59 */
/***/ (function(module, exports) {

module.exports = require("redux-cli-logger");

/***/ }),
/* 60 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var cov_28pw6pvqnu = function () {
  var path = "/Users/gnidan/src/work/truffle/packages/truffle-debugger/lib/session/sagas/index.js",
      hash = "32c6e5c0db1e8199efa346bdeafb7d4901e135ce",
      Function = function () {}.constructor,
      global = new Function('return this')(),
      gcv = "__coverage__",
      coverageData = { path: "/Users/gnidan/src/work/truffle/packages/truffle-debugger/lib/session/sagas/index.js", statementMap: { "0": { start: { line: 3, column: 0 }, end: { line: 5, column: 3 } }, "1": { start: { line: 6, column: 0 }, end: { line: 6, column: 20 } }, "2": { start: { line: 8, column: 13 }, end: { line: 8, column: 29 } }, "3": { start: { line: 10, column: 14 }, end: { line: 10, column: 44 } }, "4": { start: { line: 12, column: 15 }, end: { line: 12, column: 44 } }, "5": { start: { line: 14, column: 15 }, end: { line: 14, column: 37 } }, "6": { start: { line: 16, column: 13 }, end: { line: 16, column: 37 } }, "7": { start: { line: 18, column: 10 }, end: { line: 18, column: 41 } }, "8": { start: { line: 20, column: 14 }, end: { line: 20, column: 45 } }, "9": { start: { line: 22, column: 17 }, end: { line: 22, column: 49 } }, "10": { start: { line: 24, column: 14 }, end: { line: 24, column: 43 } }, "11": { start: { line: 26, column: 15 }, end: { line: 26, column: 47 } }, "12": { start: { line: 28, column: 14 }, end: { line: 28, column: 38 } }, "13": { start: { line: 30, column: 10 }, end: { line: 30, column: 42 } }, "14": { start: { line: 32, column: 14 }, end: { line: 32, column: 40 } }, "15": { start: { line: 34, column: 12 }, end: { line: 34, column: 44 } }, "16": { start: { line: 36, column: 14 }, end: { line: 36, column: 39 } }, "17": { start: { line: 38, column: 11 }, end: { line: 38, column: 43 } }, "18": { start: { line: 40, column: 14 }, end: { line: 40, column: 39 } }, "19": { start: { line: 42, column: 11 }, end: { line: 42, column: 43 } }, "20": { start: { line: 44, column: 15 }, end: { line: 44, column: 36 } }, "21": { start: { line: 46, column: 14 }, end: { line: 46, column: 47 } }, "22": { start: { line: 48, column: 40 }, end: { line: 48, column: 267 } }, "23": { start: { line: 48, column: 69 }, end: { line: 48, column: 80 } }, "24": { start: { line: 48, column: 103 }, end: { line: 48, column: 105 } }, "25": { start: { line: 48, column: 107 }, end: { line: 48, column: 228 } }, "26": { start: { line: 48, column: 126 }, end: { line: 48, column: 226 } }, "27": { start: { line: 48, column: 149 }, end: { line: 48, column: 224 } }, "28": { start: { line: 48, column: 201 }, end: { line: 48, column: 224 } }, "29": { start: { line: 48, column: 229 }, end: { line: 48, column: 250 } }, "30": { start: { line: 48, column: 251 }, end: { line: 48, column: 265 } }, "31": { start: { line: 50, column: 39 }, end: { line: 50, column: 93 } }, "32": { start: { line: 52, column: 14 }, end: { line: 52, column: 60 } }, "33": { start: { line: 55, column: 2 }, end: { line: 55, column: 30 } }, "34": { start: { line: 56, column: 18 }, end: { line: 56, column: 40 } }, "35": { start: { line: 59, column: 2 }, end: { line: 59, column: 44 } }, "36": { start: { line: 60, column: 30 }, end: { line: 60, column: 80 } }, "37": { start: { line: 62, column: 2 }, end: { line: 62, column: 39 } }, "38": { start: { line: 63, column: 2 }, end: { line: 63, column: 37 } }, "39": { start: { line: 65, column: 2 }, end: { line: 65, column: 38 } }, "40": { start: { line: 66, column: 2 }, end: { line: 66, column: 35 } }, "41": { start: { line: 68, column: 2 }, end: { line: 68, column: 29 } }, "42": { start: { line: 70, column: 29 }, end: { line: 70, column: 68 } }, "43": { start: { line: 71, column: 2 }, end: { line: 71, column: 20 } }, "44": { start: { line: 74, column: 2 }, end: { line: 74, column: 37 } }, "45": { start: { line: 75, column: 12 }, end: { line: 75, column: 44 } }, "46": { start: { line: 76, column: 2 }, end: { line: 95, column: 3 } }, "47": { start: { line: 77, column: 4 }, end: { line: 77, column: 27 } }, "48": { start: { line: 78, column: 4 }, end: { line: 78, column: 22 } }, "49": { start: { line: 80, column: 4 }, end: { line: 80, column: 27 } }, "50": { start: { line: 82, column: 4 }, end: { line: 82, column: 26 } }, "51": { start: { line: 84, column: 4 }, end: { line: 84, column: 22 } }, "52": { start: { line: 86, column: 4 }, end: { line: 86, column: 19 } }, "53": { start: { line: 88, column: 4 }, end: { line: 88, column: 35 } }, "54": { start: { line: 90, column: 4 }, end: { line: 90, column: 24 } }, "55": { start: { line: 92, column: 4 }, end: { line: 92, column: 23 } }, "56": { start: { line: 94, column: 4 }, end: { line: 94, column: 46 } }, "57": { start: { line: 97, column: 2 }, end: { line: 97, column: 30 } }, "58": { start: { line: 98, column: 2 }, end: { line: 98, column: 77 } }, "59": { start: { line: 98, column: 48 }, end: { line: 98, column: 74 } }, "60": { start: { line: 101, column: 0 }, end: { line: 101, column: 60 } }, "61": { start: { line: 105, column: 2 }, end: { line: 105, column: 127 } }, "62": { start: { line: 105, column: 96 }, end: { line: 105, column: 124 } }, "63": { start: { line: 109, column: 15 }, end: { line: 109, column: 63 } }, "64": { start: { line: 111, column: 2 }, end: { line: 113, column: 3 } }, "65": { start: { line: 112, column: 4 }, end: { line: 112, column: 24 } }, "66": { start: { line: 115, column: 2 }, end: { line: 115, column: 27 } }, "67": { start: { line: 117, column: 18 }, end: { line: 117, column: 57 } }, "68": { start: { line: 118, column: 2 }, end: { line: 120, column: 3 } }, "69": { start: { line: 119, column: 4 }, end: { line: 119, column: 35 } }, "70": { start: { line: 122, column: 17 }, end: { line: 122, column: 54 } }, "71": { start: { line: 124, column: 2 }, end: { line: 124, column: 115 } }, "72": { start: { line: 124, column: 56 }, end: { line: 124, column: 112 } }, "73": { start: { line: 128, column: 2 }, end: { line: 136, column: 3 } }, "74": { start: { line: 129, column: 46 }, end: { line: 129, column: 50 } }, "75": { start: { line: 131, column: 4 }, end: { line: 131, column: 48 } }, "76": { start: { line: 133, column: 4 }, end: { line: 135, column: 5 } }, "77": { start: { line: 134, column: 6 }, end: { line: 134, column: 54 } }, "78": { start: { line: 140, column: 2 }, end: { line: 144, column: 3 } }, "79": { start: { line: 141, column: 38 }, end: { line: 141, column: 43 } }, "80": { start: { line: 143, column: 4 }, end: { line: 143, column: 55 } }, "81": { start: { line: 148, column: 2 }, end: { line: 148, column: 42 } }, "82": { start: { line: 152, column: 2 }, end: { line: 152, column: 43 } }, "83": { start: { line: 156, column: 2 }, end: { line: 156, column: 46 } } }, fnMap: { "0": { name: "_interopRequireWildcard", decl: { start: { line: 48, column: 9 }, end: { line: 48, column: 32 } }, loc: { start: { line: 48, column: 38 }, end: { line: 48, column: 269 } }, line: 48 }, "1": { name: "_interopRequireDefault", decl: { start: { line: 50, column: 9 }, end: { line: 50, column: 31 } }, loc: { start: { line: 50, column: 37 }, end: { line: 50, column: 95 } }, line: 50 }, "2": { name: "saga", decl: { start: { line: 54, column: 10 }, end: { line: 54, column: 14 } }, loc: { start: { line: 54, column: 17 }, end: { line: 99, column: 1 } }, line: 54 }, "3": { name: "(anonymous_3)", decl: { start: { line: 98, column: 40 }, end: { line: 98, column: 41 } }, loc: { start: { line: 98, column: 48 }, end: { line: 98, column: 74 } }, line: 98 }, "4": { name: "forkListeners", decl: { start: { line: 104, column: 10 }, end: { line: 104, column: 23 } }, loc: { start: { line: 104, column: 26 }, end: { line: 106, column: 1 } }, line: 104 }, "5": { name: "(anonymous_5)", decl: { start: { line: 105, column: 89 }, end: { line: 105, column: 90 } }, loc: { start: { line: 105, column: 96 }, end: { line: 105, column: 124 } }, line: 105 }, "6": { name: "fetchTx", decl: { start: { line: 108, column: 10 }, end: { line: 108, column: 17 } }, loc: { start: { line: 108, column: 36 }, end: { line: 125, column: 1 } }, line: 108 }, "7": { name: "(anonymous_7)", decl: { start: { line: 124, column: 40 }, end: { line: 124, column: 41 } }, loc: { start: { line: 124, column: 56 }, end: { line: 124, column: 112 } }, line: 124 }, "8": { name: "recordContexts", decl: { start: { line: 127, column: 10 }, end: { line: 127, column: 24 } }, loc: { start: { line: 127, column: 38 }, end: { line: 137, column: 1 } }, line: 127 }, "9": { name: "recordSources", decl: { start: { line: 139, column: 10 }, end: { line: 139, column: 23 } }, loc: { start: { line: 139, column: 36 }, end: { line: 145, column: 1 } }, line: 139 }, "10": { name: "recordInstance", decl: { start: { line: 147, column: 10 }, end: { line: 147, column: 24 } }, loc: { start: { line: 147, column: 42 }, end: { line: 149, column: 1 } }, line: 147 }, "11": { name: "ready", decl: { start: { line: 151, column: 10 }, end: { line: 151, column: 15 } }, loc: { start: { line: 151, column: 18 }, end: { line: 153, column: 1 } }, line: 151 }, "12": { name: "error", decl: { start: { line: 155, column: 10 }, end: { line: 155, column: 15 } }, loc: { start: { line: 155, column: 21 }, end: { line: 157, column: 1 } }, line: 155 } }, branchMap: { "0": { loc: { start: { line: 48, column: 40 }, end: { line: 48, column: 267 } }, type: "if", locations: [{ start: { line: 48, column: 40 }, end: { line: 48, column: 267 } }, { start: { line: 48, column: 40 }, end: { line: 48, column: 267 } }], line: 48 }, "1": { loc: { start: { line: 48, column: 44 }, end: { line: 48, column: 65 } }, type: "binary-expr", locations: [{ start: { line: 48, column: 44 }, end: { line: 48, column: 47 } }, { start: { line: 48, column: 51 }, end: { line: 48, column: 65 } }], line: 48 }, "2": { loc: { start: { line: 48, column: 107 }, end: { line: 48, column: 228 } }, type: "if", locations: [{ start: { line: 48, column: 107 }, end: { line: 48, column: 228 } }, { start: { line: 48, column: 107 }, end: { line: 48, column: 228 } }], line: 48 }, "3": { loc: { start: { line: 48, column: 149 }, end: { line: 48, column: 224 } }, type: "if", locations: [{ start: { line: 48, column: 149 }, end: { line: 48, column: 224 } }, { start: { line: 48, column: 149 }, end: { line: 48, column: 224 } }], line: 48 }, "4": { loc: { start: { line: 50, column: 46 }, end: { line: 50, column: 92 } }, type: "cond-expr", locations: [{ start: { line: 50, column: 70 }, end: { line: 50, column: 73 } }, { start: { line: 50, column: 76 }, end: { line: 50, column: 92 } }], line: 50 }, "5": { loc: { start: { line: 50, column: 46 }, end: { line: 50, column: 67 } }, type: "binary-expr", locations: [{ start: { line: 50, column: 46 }, end: { line: 50, column: 49 } }, { start: { line: 50, column: 53 }, end: { line: 50, column: 67 } }], line: 50 }, "6": { loc: { start: { line: 76, column: 2 }, end: { line: 95, column: 3 } }, type: "if", locations: [{ start: { line: 76, column: 2 }, end: { line: 95, column: 3 } }, { start: { line: 76, column: 2 }, end: { line: 95, column: 3 } }], line: 76 }, "7": { loc: { start: { line: 111, column: 2 }, end: { line: 113, column: 3 } }, type: "if", locations: [{ start: { line: 111, column: 2 }, end: { line: 113, column: 3 } }, { start: { line: 111, column: 2 }, end: { line: 113, column: 3 } }], line: 111 }, "8": { loc: { start: { line: 118, column: 2 }, end: { line: 120, column: 3 } }, type: "if", locations: [{ start: { line: 118, column: 2 }, end: { line: 120, column: 3 } }, { start: { line: 118, column: 2 }, end: { line: 120, column: 3 } }], line: 118 }, "9": { loc: { start: { line: 118, column: 6 }, end: { line: 118, column: 63 } }, type: "binary-expr", locations: [{ start: { line: 118, column: 6 }, end: { line: 118, column: 20 } }, { start: { line: 118, column: 24 }, end: { line: 118, column: 63 } }], line: 118 }, "10": { loc: { start: { line: 133, column: 4 }, end: { line: 135, column: 5 } }, type: "if", locations: [{ start: { line: 133, column: 4 }, end: { line: 135, column: 5 } }, { start: { line: 133, column: 4 }, end: { line: 135, column: 5 } }], line: 133 } }, s: { "0": 0, "1": 0, "2": 0, "3": 0, "4": 0, "5": 0, "6": 0, "7": 0, "8": 0, "9": 0, "10": 0, "11": 0, "12": 0, "13": 0, "14": 0, "15": 0, "16": 0, "17": 0, "18": 0, "19": 0, "20": 0, "21": 0, "22": 0, "23": 0, "24": 0, "25": 0, "26": 0, "27": 0, "28": 0, "29": 0, "30": 0, "31": 0, "32": 0, "33": 0, "34": 0, "35": 0, "36": 0, "37": 0, "38": 0, "39": 0, "40": 0, "41": 0, "42": 0, "43": 0, "44": 0, "45": 0, "46": 0, "47": 0, "48": 0, "49": 0, "50": 0, "51": 0, "52": 0, "53": 0, "54": 0, "55": 0, "56": 0, "57": 0, "58": 0, "59": 0, "60": 0, "61": 0, "62": 0, "63": 0, "64": 0, "65": 0, "66": 0, "67": 0, "68": 0, "69": 0, "70": 0, "71": 0, "72": 0, "73": 0, "74": 0, "75": 0, "76": 0, "77": 0, "78": 0, "79": 0, "80": 0, "81": 0, "82": 0, "83": 0 }, f: { "0": 0, "1": 0, "2": 0, "3": 0, "4": 0, "5": 0, "6": 0, "7": 0, "8": 0, "9": 0, "10": 0, "11": 0, "12": 0 }, b: { "0": [0, 0], "1": [0, 0], "2": [0, 0], "3": [0, 0], "4": [0, 0], "5": [0, 0], "6": [0, 0], "7": [0, 0], "8": [0, 0], "9": [0, 0], "10": [0, 0] }, inputSourceMap: { version: 3, sources: ["lib/session/sagas/index.js"], names: ["saga", "ast", "controller", "solidity", "evm", "trace", "data", "web3", "actions", "debug", "listeners", "forkListeners", "contexts", "sources", "RECORD_CONTRACTS", "recordContexts", "recordSources", "txHash", "provider", "START", "err", "fetchTx", "error", "visitAll", "ready", "wait", "finish", "map", "task", "app", "result", "inspectTransaction", "begin", "addresses", "processTrace", "address", "indexOf", "push", "binaries", "obtainBinaries", "i", "recordInstance", "contractName", "binary", "sourceMap", "addContext", "addSourceMap", "sourcePath", "source", "addSource", "addInstance"], mappings: "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", file: "index.js", sourceRoot: "/Users/gnidan/src/work/truffle/packages/truffle-debugger", sourcesContent: ["import debugModule from \"debug\";\nconst debug = debugModule(\"debugger:session:sagas\");\n\nimport { cancel, call, all, fork, take, put } from 'redux-saga/effects';\n\nimport { prefixName } from \"lib/helpers\";\n\nimport * as ast from \"lib/ast/sagas\";\nimport * as controller from \"lib/controller/sagas\";\nimport * as solidity from \"lib/solidity/sagas\";\nimport * as evm from \"lib/evm/sagas\";\nimport * as trace from \"lib/trace/sagas\";\nimport * as data from \"lib/data/sagas\";\nimport * as web3 from \"lib/web3/sagas\";\n\nimport * as actions from \"../actions\";\n\nexport function *saga () {\n  debug(\"starting listeners\");\n  let listeners = yield *forkListeners();\n\n  // receiving & saving contracts into state\n  debug(\"waiting for contract information\");\n  let { contexts, sources } = yield take(actions.RECORD_CONTRACTS);\n\n  debug(\"recording contract binaries\");\n  yield *recordContexts(...contexts);\n\n  debug(\"recording contract sources\");\n  yield *recordSources(...sources);\n\n  debug(\"waiting for start\");\n  // wait for start signal\n  let {txHash, provider} = yield take(actions.START);\n  debug(\"starting\");\n\n  // process transaction\n  debug(\"fetching transaction info\");\n  let err = yield *fetchTx(txHash, provider);\n  if (err) {\n    debug(\"error %o\", err);\n    yield *error(err);\n\n  } else {\n    debug(\"visiting ASTs\");\n    // visit asts\n    yield *ast.visitAll();\n\n    debug(\"readying\");\n    // signal that stepping can begin\n    yield *ready();\n\n    debug(\"waiting for trace EOT\");\n    // wait until trace hits EOT\n    yield *trace.wait();\n\n    debug(\"finishing\");\n    // finish\n    yield put(actions.finish());\n  }\n\n  debug(\"stopping listeners\");\n  yield all(\n    listeners.map(task => cancel(task))\n  );\n}\n\nexport default prefixName(\"session\", saga);\n\n\nfunction *forkListeners() {\n  return yield all(\n    [ast, controller, data, evm, solidity, trace, web3]\n      .map( app => fork(app.saga) )\n  );\n}\n\nfunction* fetchTx(txHash, provider) {\n  let result = yield *web3.inspectTransaction(txHash, provider);\n\n  if (result.error) {\n    return result.error;\n  }\n\n  yield *evm.begin(result);\n\n  let addresses = yield *trace.processTrace(result.trace);\n  if (result.address && addresses.indexOf(result.address) == -1) {\n    addresses.push(result.address);\n  }\n\n  let binaries = yield *web3.obtainBinaries(addresses);\n\n  yield all(\n    addresses.map( (address, i) => call(recordInstance, address, binaries[i]) )\n  );\n}\n\nfunction* recordContexts(...contexts) {\n  for (let { contractName, binary, sourceMap } of contexts) {\n    yield *evm.addContext(contractName, binary);\n\n    if (sourceMap) {\n      yield *solidity.addSourceMap(binary, sourceMap);\n    }\n  }\n}\n\nfunction* recordSources(...sources) {\n  for (let { sourcePath, source, ast } of sources) {\n    yield *solidity.addSource(source, sourcePath, ast);\n  }\n}\n\nfunction *recordInstance(address, binary) {\n  yield *evm.addInstance(address, binary);\n}\n\nfunction *ready() {\n  yield put(actions.ready());\n}\n\nfunction *error(err) {\n  yield put(actions.error(err));\n}\n"] }, _coverageSchema: "332fd63041d2c1bcb487cc26dd0d5f7d97098a6c" },
      coverage = global[gcv] || (global[gcv] = {});if (coverage[path] && coverage[path].hash === hash) {
    return coverage[path];
  }coverageData.hash = hash;return coverage[path] = coverageData;
}();cov_28pw6pvqnu.s[0]++;Object.defineProperty(exports, "__esModule", { value: true });cov_28pw6pvqnu.s[1]++;exports.saga = saga;var _debug = (cov_28pw6pvqnu.s[2]++, __webpack_require__(0));var _debug2 = (cov_28pw6pvqnu.s[3]++, _interopRequireDefault(_debug));var _effects = (cov_28pw6pvqnu.s[4]++, __webpack_require__(10));var _helpers = (cov_28pw6pvqnu.s[5]++, __webpack_require__(4));var _sagas = (cov_28pw6pvqnu.s[6]++, __webpack_require__(61));var ast = (cov_28pw6pvqnu.s[7]++, _interopRequireWildcard(_sagas));var _sagas2 = (cov_28pw6pvqnu.s[8]++, __webpack_require__(66));var controller = (cov_28pw6pvqnu.s[9]++, _interopRequireWildcard(_sagas2));var _sagas3 = (cov_28pw6pvqnu.s[10]++, __webpack_require__(68));var solidity = (cov_28pw6pvqnu.s[11]++, _interopRequireWildcard(_sagas3));var _sagas4 = (cov_28pw6pvqnu.s[12]++, __webpack_require__(69));var evm = (cov_28pw6pvqnu.s[13]++, _interopRequireWildcard(_sagas4));var _sagas5 = (cov_28pw6pvqnu.s[14]++, __webpack_require__(33));var trace = (cov_28pw6pvqnu.s[15]++, _interopRequireWildcard(_sagas5));var _sagas6 = (cov_28pw6pvqnu.s[16]++, __webpack_require__(31));var data = (cov_28pw6pvqnu.s[17]++, _interopRequireWildcard(_sagas6));var _sagas7 = (cov_28pw6pvqnu.s[18]++, __webpack_require__(70));var web3 = (cov_28pw6pvqnu.s[19]++, _interopRequireWildcard(_sagas7));var _actions = (cov_28pw6pvqnu.s[20]++, __webpack_require__(25));var actions = (cov_28pw6pvqnu.s[21]++, _interopRequireWildcard(_actions));function _interopRequireWildcard(obj) {
  cov_28pw6pvqnu.f[0]++;cov_28pw6pvqnu.s[22]++;if ((cov_28pw6pvqnu.b[1][0]++, obj) && (cov_28pw6pvqnu.b[1][1]++, obj.__esModule)) {
    cov_28pw6pvqnu.b[0][0]++;cov_28pw6pvqnu.s[23]++;return obj;
  } else {
    cov_28pw6pvqnu.b[0][1]++;var newObj = (cov_28pw6pvqnu.s[24]++, {});cov_28pw6pvqnu.s[25]++;if (obj != null) {
      cov_28pw6pvqnu.b[2][0]++;cov_28pw6pvqnu.s[26]++;for (var key in obj) {
        cov_28pw6pvqnu.s[27]++;if (Object.prototype.hasOwnProperty.call(obj, key)) {
          cov_28pw6pvqnu.b[3][0]++;cov_28pw6pvqnu.s[28]++;newObj[key] = obj[key];
        } else {
          cov_28pw6pvqnu.b[3][1]++;
        }
      }
    } else {
      cov_28pw6pvqnu.b[2][1]++;
    }cov_28pw6pvqnu.s[29]++;newObj.default = obj;cov_28pw6pvqnu.s[30]++;return newObj;
  }
}function _interopRequireDefault(obj) {
  cov_28pw6pvqnu.f[1]++;cov_28pw6pvqnu.s[31]++;return (cov_28pw6pvqnu.b[5][0]++, obj) && (cov_28pw6pvqnu.b[5][1]++, obj.__esModule) ? (cov_28pw6pvqnu.b[4][0]++, obj) : (cov_28pw6pvqnu.b[4][1]++, { default: obj });
}const debug = (cov_28pw6pvqnu.s[32]++, (0, _debug2.default)("debugger:session:sagas"));function* saga() {
  cov_28pw6pvqnu.f[2]++;cov_28pw6pvqnu.s[33]++;debug("starting listeners");let listeners = (cov_28pw6pvqnu.s[34]++, yield* forkListeners());cov_28pw6pvqnu.s[35]++;debug("waiting for contract information");let { contexts, sources } = (cov_28pw6pvqnu.s[36]++, yield (0, _effects.take)(actions.RECORD_CONTRACTS));cov_28pw6pvqnu.s[37]++;debug("recording contract binaries");cov_28pw6pvqnu.s[38]++;yield* recordContexts(...contexts);cov_28pw6pvqnu.s[39]++;debug("recording contract sources");cov_28pw6pvqnu.s[40]++;yield* recordSources(...sources);cov_28pw6pvqnu.s[41]++;debug("waiting for start");let { txHash, provider } = (cov_28pw6pvqnu.s[42]++, yield (0, _effects.take)(actions.START));cov_28pw6pvqnu.s[43]++;debug("starting");cov_28pw6pvqnu.s[44]++;debug("fetching transaction info");let err = (cov_28pw6pvqnu.s[45]++, yield* fetchTx(txHash, provider));cov_28pw6pvqnu.s[46]++;if (err) {
    cov_28pw6pvqnu.b[6][0]++;cov_28pw6pvqnu.s[47]++;debug("error %o", err);cov_28pw6pvqnu.s[48]++;yield* error(err);
  } else {
    cov_28pw6pvqnu.b[6][1]++;cov_28pw6pvqnu.s[49]++;debug("visiting ASTs");cov_28pw6pvqnu.s[50]++;yield* ast.visitAll();cov_28pw6pvqnu.s[51]++;debug("readying");cov_28pw6pvqnu.s[52]++;yield* ready();cov_28pw6pvqnu.s[53]++;debug("waiting for trace EOT");cov_28pw6pvqnu.s[54]++;yield* trace.wait();cov_28pw6pvqnu.s[55]++;debug("finishing");cov_28pw6pvqnu.s[56]++;yield (0, _effects.put)(actions.finish());
  }cov_28pw6pvqnu.s[57]++;debug("stopping listeners");cov_28pw6pvqnu.s[58]++;yield (0, _effects.all)(listeners.map(task => {
    cov_28pw6pvqnu.f[3]++;cov_28pw6pvqnu.s[59]++;return (0, _effects.cancel)(task);
  }));
}cov_28pw6pvqnu.s[60]++;exports.default = (0, _helpers.prefixName)("session", saga);function* forkListeners() {
  cov_28pw6pvqnu.f[4]++;cov_28pw6pvqnu.s[61]++;return yield (0, _effects.all)([ast, controller, data, evm, solidity, trace, web3].map(app => {
    cov_28pw6pvqnu.f[5]++;cov_28pw6pvqnu.s[62]++;return (0, _effects.fork)(app.saga);
  }));
}function* fetchTx(txHash, provider) {
  cov_28pw6pvqnu.f[6]++;let result = (cov_28pw6pvqnu.s[63]++, yield* web3.inspectTransaction(txHash, provider));cov_28pw6pvqnu.s[64]++;if (result.error) {
    cov_28pw6pvqnu.b[7][0]++;cov_28pw6pvqnu.s[65]++;return result.error;
  } else {
    cov_28pw6pvqnu.b[7][1]++;
  }cov_28pw6pvqnu.s[66]++;yield* evm.begin(result);let addresses = (cov_28pw6pvqnu.s[67]++, yield* trace.processTrace(result.trace));cov_28pw6pvqnu.s[68]++;if ((cov_28pw6pvqnu.b[9][0]++, result.address) && (cov_28pw6pvqnu.b[9][1]++, addresses.indexOf(result.address) == -1)) {
    cov_28pw6pvqnu.b[8][0]++;cov_28pw6pvqnu.s[69]++;addresses.push(result.address);
  } else {
    cov_28pw6pvqnu.b[8][1]++;
  }let binaries = (cov_28pw6pvqnu.s[70]++, yield* web3.obtainBinaries(addresses));cov_28pw6pvqnu.s[71]++;yield (0, _effects.all)(addresses.map((address, i) => {
    cov_28pw6pvqnu.f[7]++;cov_28pw6pvqnu.s[72]++;return (0, _effects.call)(recordInstance, address, binaries[i]);
  }));
}function* recordContexts(...contexts) {
  cov_28pw6pvqnu.f[8]++;cov_28pw6pvqnu.s[73]++;for (let _ref of contexts) {
    let { contractName, binary, sourceMap } = (cov_28pw6pvqnu.s[74]++, _ref);cov_28pw6pvqnu.s[75]++;yield* evm.addContext(contractName, binary);cov_28pw6pvqnu.s[76]++;if (sourceMap) {
      cov_28pw6pvqnu.b[10][0]++;cov_28pw6pvqnu.s[77]++;yield* solidity.addSourceMap(binary, sourceMap);
    } else {
      cov_28pw6pvqnu.b[10][1]++;
    }
  }
}function* recordSources(...sources) {
  cov_28pw6pvqnu.f[9]++;cov_28pw6pvqnu.s[78]++;for (let _ref2 of sources) {
    let { sourcePath, source, ast } = (cov_28pw6pvqnu.s[79]++, _ref2);cov_28pw6pvqnu.s[80]++;yield* solidity.addSource(source, sourcePath, ast);
  }
}function* recordInstance(address, binary) {
  cov_28pw6pvqnu.f[10]++;cov_28pw6pvqnu.s[81]++;yield* evm.addInstance(address, binary);
}function* ready() {
  cov_28pw6pvqnu.f[11]++;cov_28pw6pvqnu.s[82]++;yield (0, _effects.put)(actions.ready());
}function* error(err) {
  cov_28pw6pvqnu.f[12]++;cov_28pw6pvqnu.s[83]++;yield (0, _effects.put)(actions.error(err));
}

/***/ }),
/* 61 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var cov_aeme5kur4 = function () {
  var path = "/Users/gnidan/src/work/truffle/packages/truffle-debugger/lib/ast/sagas/index.js",
      hash = "1701bd9849c80cfb55009309caf6ffaa48f5bc48",
      Function = function () {}.constructor,
      global = new Function('return this')(),
      gcv = "__coverage__",
      coverageData = { path: "/Users/gnidan/src/work/truffle/packages/truffle-debugger/lib/ast/sagas/index.js", statementMap: { "0": { start: { line: 3, column: 0 }, end: { line: 5, column: 3 } }, "1": { start: { line: 7, column: 15 }, end: { line: 7, column: 62 } }, "2": { start: { line: 9, column: 16 }, end: { line: 9, column: 48 } }, "3": { start: { line: 11, column: 0 }, end: { line: 11, column: 28 } }, "4": { start: { line: 12, column: 0 }, end: { line: 12, column: 20 } }, "5": { start: { line: 14, column: 13 }, end: { line: 14, column: 29 } }, "6": { start: { line: 16, column: 14 }, end: { line: 16, column: 44 } }, "7": { start: { line: 18, column: 15 }, end: { line: 18, column: 44 } }, "8": { start: { line: 20, column: 15 }, end: { line: 20, column: 37 } }, "9": { start: { line: 22, column: 13 }, end: { line: 22, column: 38 } }, "10": { start: { line: 24, column: 11 }, end: { line: 24, column: 42 } }, "11": { start: { line: 26, column: 15 }, end: { line: 26, column: 36 } }, "12": { start: { line: 28, column: 14 }, end: { line: 28, column: 47 } }, "13": { start: { line: 30, column: 17 }, end: { line: 30, column: 40 } }, "14": { start: { line: 32, column: 18 }, end: { line: 32, column: 52 } }, "15": { start: { line: 34, column: 40 }, end: { line: 34, column: 267 } }, "16": { start: { line: 34, column: 69 }, end: { line: 34, column: 80 } }, "17": { start: { line: 34, column: 103 }, end: { line: 34, column: 105 } }, "18": { start: { line: 34, column: 107 }, end: { line: 34, column: 228 } }, "19": { start: { line: 34, column: 126 }, end: { line: 34, column: 226 } }, "20": { start: { line: 34, column: 149 }, end: { line: 34, column: 224 } }, "21": { start: { line: 34, column: 201 }, end: { line: 34, column: 224 } }, "22": { start: { line: 34, column: 229 }, end: { line: 34, column: 250 } }, "23": { start: { line: 34, column: 251 }, end: { line: 34, column: 265 } }, "24": { start: { line: 36, column: 39 }, end: { line: 36, column: 93 } }, "25": { start: { line: 38, column: 14 }, end: { line: 38, column: 56 } }, "26": { start: { line: 41, column: 2 }, end: { line: 41, column: 40 } }, "27": { start: { line: 43, column: 2 }, end: { line: 43, column: 56 } }, "28": { start: { line: 45, column: 2 }, end: { line: 53, column: 3 } }, "29": { start: { line: 46, column: 4 }, end: { line: 48, column: 5 } }, "30": { start: { line: 47, column: 6 }, end: { line: 47, column: 83 } }, "31": { start: { line: 49, column: 9 }, end: { line: 53, column: 3 } }, "32": { start: { line: 50, column: 4 }, end: { line: 52, column: 5 } }, "33": { start: { line: 51, column: 6 }, end: { line: 51, column: 84 } }, "34": { start: { line: 55, column: 2 }, end: { line: 55, column: 45 } }, "35": { start: { line: 59, column: 2 }, end: { line: 61, column: 3 } }, "36": { start: { line: 60, column: 4 }, end: { line: 60, column: 11 } }, "37": { start: { line: 63, column: 2 }, end: { line: 63, column: 32 } }, "38": { start: { line: 65, column: 2 }, end: { line: 68, column: 3 } }, "39": { start: { line: 66, column: 4 }, end: { line: 66, column: 53 } }, "40": { start: { line: 67, column: 4 }, end: { line: 67, column: 60 } }, "41": { start: { line: 70, column: 2 }, end: { line: 75, column: 3 } }, "42": { start: { line: 72, column: 6 }, end: { line: 72, column: 55 } }, "43": { start: { line: 73, column: 6 }, end: { line: 73, column: 32 } }, "44": { start: { line: 74, column: 6 }, end: { line: 74, column: 12 } }, "45": { start: { line: 79, column: 2 }, end: { line: 79, column: 31 } }, "46": { start: { line: 85, column: 2 }, end: { line: 85, column: 28 } }, "47": { start: { line: 89, column: 16 }, end: { line: 89, column: 77 } }, "48": { start: { line: 91, column: 14 }, end: { line: 91, column: 195 } }, "49": { start: { line: 91, column: 96 }, end: { line: 91, column: 101 } }, "50": { start: { line: 91, column: 126 }, end: { line: 91, column: 193 } }, "51": { start: { line: 91, column: 151 }, end: { line: 91, column: 192 } }, "52": { start: { line: 93, column: 2 }, end: { line: 95, column: 3 } }, "53": { start: { line: 94, column: 4 }, end: { line: 94, column: 39 } }, "54": { start: { line: 97, column: 2 }, end: { line: 97, column: 50 } }, "55": { start: { line: 101, column: 2 }, end: { line: 104, column: 5 } }, "56": { start: { line: 107, column: 0 }, end: { line: 107, column: 56 } } }, fnMap: { "0": { name: "_interopRequireWildcard", decl: { start: { line: 34, column: 9 }, end: { line: 34, column: 32 } }, loc: { start: { line: 34, column: 38 }, end: { line: 34, column: 269 } }, line: 34 }, "1": { name: "_interopRequireDefault", decl: { start: { line: 36, column: 9 }, end: { line: 36, column: 31 } }, loc: { start: { line: 36, column: 37 }, end: { line: 36, column: 95 } }, line: 36 }, "2": { name: "walk", decl: { start: { line: 40, column: 10 }, end: { line: 40, column: 14 } }, loc: { start: { line: 40, column: 62 }, end: { line: 56, column: 1 } }, line: 40 }, "3": { name: "handleEnter", decl: { start: { line: 58, column: 10 }, end: { line: 58, column: 21 } }, loc: { start: { line: 58, column: 57 }, end: { line: 76, column: 1 } }, line: 58 }, "4": { name: "handleExit", decl: { start: { line: 78, column: 10 }, end: { line: 78, column: 20 } }, loc: { start: { line: 78, column: 46 }, end: { line: 82, column: 1 } }, line: 78 }, "5": { name: "walkSaga", decl: { start: { line: 84, column: 10 }, end: { line: 84, column: 18 } }, loc: { start: { line: 84, column: 38 }, end: { line: 86, column: 1 } }, line: 84 }, "6": { name: "visitAll", decl: { start: { line: 88, column: 10 }, end: { line: 88, column: 18 } }, loc: { start: { line: 88, column: 24 }, end: { line: 98, column: 1 } }, line: 88 }, "7": { name: "(anonymous_7)", decl: { start: { line: 91, column: 77 }, end: { line: 91, column: 78 } }, loc: { start: { line: 91, column: 96 }, end: { line: 91, column: 101 } }, line: 91 }, "8": { name: "(anonymous_8)", decl: { start: { line: 91, column: 107 }, end: { line: 91, column: 108 } }, loc: { start: { line: 91, column: 126 }, end: { line: 91, column: 193 } }, line: 91 }, "9": { name: "(anonymous_9)", decl: { start: { line: 91, column: 145 }, end: { line: 91, column: 146 } }, loc: { start: { line: 91, column: 151 }, end: { line: 91, column: 192 } }, line: 91 }, "10": { name: "saga", decl: { start: { line: 100, column: 10 }, end: { line: 100, column: 14 } }, loc: { start: { line: 100, column: 17 }, end: { line: 105, column: 1 } }, line: 100 } }, branchMap: { "0": { loc: { start: { line: 34, column: 40 }, end: { line: 34, column: 267 } }, type: "if", locations: [{ start: { line: 34, column: 40 }, end: { line: 34, column: 267 } }, { start: { line: 34, column: 40 }, end: { line: 34, column: 267 } }], line: 34 }, "1": { loc: { start: { line: 34, column: 44 }, end: { line: 34, column: 65 } }, type: "binary-expr", locations: [{ start: { line: 34, column: 44 }, end: { line: 34, column: 47 } }, { start: { line: 34, column: 51 }, end: { line: 34, column: 65 } }], line: 34 }, "2": { loc: { start: { line: 34, column: 107 }, end: { line: 34, column: 228 } }, type: "if", locations: [{ start: { line: 34, column: 107 }, end: { line: 34, column: 228 } }, { start: { line: 34, column: 107 }, end: { line: 34, column: 228 } }], line: 34 }, "3": { loc: { start: { line: 34, column: 149 }, end: { line: 34, column: 224 } }, type: "if", locations: [{ start: { line: 34, column: 149 }, end: { line: 34, column: 224 } }, { start: { line: 34, column: 149 }, end: { line: 34, column: 224 } }], line: 34 }, "4": { loc: { start: { line: 36, column: 46 }, end: { line: 36, column: 92 } }, type: "cond-expr", locations: [{ start: { line: 36, column: 70 }, end: { line: 36, column: 73 } }, { start: { line: 36, column: 76 }, end: { line: 36, column: 92 } }], line: 36 }, "5": { loc: { start: { line: 36, column: 46 }, end: { line: 36, column: 67 } }, type: "binary-expr", locations: [{ start: { line: 36, column: 46 }, end: { line: 36, column: 49 } }, { start: { line: 36, column: 53 }, end: { line: 36, column: 67 } }], line: 36 }, "6": { loc: { start: { line: 40, column: 31 }, end: { line: 40, column: 43 } }, type: "default-arg", locations: [{ start: { line: 40, column: 41 }, end: { line: 40, column: 43 } }], line: 40 }, "7": { loc: { start: { line: 40, column: 45 }, end: { line: 40, column: 60 } }, type: "default-arg", locations: [{ start: { line: 40, column: 56 }, end: { line: 40, column: 60 } }], line: 40 }, "8": { loc: { start: { line: 45, column: 2 }, end: { line: 53, column: 3 } }, type: "if", locations: [{ start: { line: 45, column: 2 }, end: { line: 53, column: 3 } }, { start: { line: 45, column: 2 }, end: { line: 53, column: 3 } }], line: 45 }, "9": { loc: { start: { line: 49, column: 9 }, end: { line: 53, column: 3 } }, type: "if", locations: [{ start: { line: 49, column: 9 }, end: { line: 53, column: 3 } }, { start: { line: 49, column: 9 }, end: { line: 53, column: 3 } }], line: 49 }, "10": { loc: { start: { line: 59, column: 2 }, end: { line: 61, column: 3 } }, type: "if", locations: [{ start: { line: 59, column: 2 }, end: { line: 61, column: 3 } }, { start: { line: 59, column: 2 }, end: { line: 61, column: 3 } }], line: 59 }, "11": { loc: { start: { line: 65, column: 2 }, end: { line: 68, column: 3 } }, type: "if", locations: [{ start: { line: 65, column: 2 }, end: { line: 68, column: 3 } }, { start: { line: 65, column: 2 }, end: { line: 68, column: 3 } }], line: 65 }, "12": { loc: { start: { line: 70, column: 2 }, end: { line: 75, column: 3 } }, type: "switch", locations: [{ start: { line: 71, column: 4 }, end: { line: 74, column: 12 } }], line: 70 }, "13": { loc: { start: { line: 93, column: 2 }, end: { line: 95, column: 3 } }, type: "if", locations: [{ start: { line: 93, column: 2 }, end: { line: 95, column: 3 } }, { start: { line: 93, column: 2 }, end: { line: 95, column: 3 } }], line: 93 } }, s: { "0": 0, "1": 0, "2": 0, "3": 0, "4": 0, "5": 0, "6": 0, "7": 0, "8": 0, "9": 0, "10": 0, "11": 0, "12": 0, "13": 0, "14": 0, "15": 0, "16": 0, "17": 0, "18": 0, "19": 0, "20": 0, "21": 0, "22": 0, "23": 0, "24": 0, "25": 0, "26": 0, "27": 0, "28": 0, "29": 0, "30": 0, "31": 0, "32": 0, "33": 0, "34": 0, "35": 0, "36": 0, "37": 0, "38": 0, "39": 0, "40": 0, "41": 0, "42": 0, "43": 0, "44": 0, "45": 0, "46": 0, "47": 0, "48": 0, "49": 0, "50": 0, "51": 0, "52": 0, "53": 0, "54": 0, "55": 0, "56": 0 }, f: { "0": 0, "1": 0, "2": 0, "3": 0, "4": 0, "5": 0, "6": 0, "7": 0, "8": 0, "9": 0, "10": 0 }, b: { "0": [0, 0], "1": [0, 0], "2": [0, 0], "3": [0, 0], "4": [0, 0], "5": [0, 0], "6": [0], "7": [0], "8": [0, 0], "9": [0, 0], "10": [0, 0], "11": [0, 0], "12": [0], "13": [0, 0] }, inputSourceMap: { version: 3, sources: ["lib/ast/sagas/index.js"], names: ["visitAll", "saga", "data", "actions", "debug", "walk", "sourceId", "node", "pointer", "parentId", "handleEnter", "Array", "i", "child", "entries", "Object", "key", "id", "handleExit", "undefined", "scope", "nodeType", "declare", "walkSaga", "ast", "idx", "sources", "views", "tasks", "filter", "map", "visit", "length", "doneVisiting", "visitor", "VISIT", "done", "DONE_VISITING"], mappings: ";;;;;;;;;;QA8DiBA,Q,GAAAA,Q;QAgBAC,I,GAAAA,I;;AA9EjB;;;;AAGA;;AAEA;;AAEA;;IAAYC,I;;AAEZ;;IAAYC,O;;AAEZ;;;;;;;;AAVA,MAAMC,QAAQ,qBAAY,oBAAZ,CAAd;;AAaA,UAAUC,IAAV,CAAeC,QAAf,EAAyBC,IAAzB,EAA+BC,UAAU,EAAzC,EAA6CC,WAAW,IAAxD,EAA8D;AAC5DL,QAAM,eAAN,EAAuBI,OAAvB,EAAgCD,IAAhC;;AAEA,SAAOG,YAAYJ,QAAZ,EAAsBC,IAAtB,EAA4BC,OAA5B,EAAqCC,QAArC,CAAP;;AAEA,MAAIF,gBAAgBI,KAApB,EAA2B;AACzB,SAAK,IAAI,CAACC,CAAD,EAAIC,KAAJ,CAAT,IAAuBN,KAAKO,OAAL,EAAvB,EAAuC;AACrC,YAAM,mBAAKT,IAAL,EAAWC,QAAX,EAAqBO,KAArB,EAA6B,GAAEL,OAAQ,IAAGI,CAAE,EAA5C,EAA+CH,QAA/C,CAAN;AACD;AACF,GAJD,MAIO,IAAIF,gBAAgBQ,MAApB,EAA4B;AACjC,SAAK,IAAI,CAACC,GAAD,EAAMH,KAAN,CAAT,IAAyB,uBAAeN,IAAf,CAAzB,EAA+C;AAC7C,YAAM,mBAAKF,IAAL,EAAWC,QAAX,EAAqBO,KAArB,EAA6B,GAAEL,OAAQ,IAAGQ,GAAI,EAA9C,EAAiDT,KAAKU,EAAtD,CAAN;AACD;AACF;;AAED,SAAOC,WAAWZ,QAAX,EAAqBC,IAArB,EAA2BC,OAA3B,CAAP;AACD;;AAED,UAAUE,WAAV,CAAsBJ,QAAtB,EAAgCC,IAAhC,EAAsCC,OAAtC,EAA+CC,QAA/C,EAAyD;AACvD,MAAI,EAAEF,gBAAgBQ,MAAlB,CAAJ,EAA+B;AAC7B;AACD;;AAEDX,QAAM,aAAN,EAAqBI,OAArB;;AAEA,MAAID,KAAKU,EAAL,KAAYE,SAAhB,EAA2B;AACzBf,UAAM,uBAAN,EAA+BI,OAA/B,EAAwCD,KAAKU,EAA7C;AACA,WAAOf,KAAKkB,KAAL,CAAWb,KAAKU,EAAhB,EAAoBT,OAApB,EAA6BC,QAA7B,EAAuCH,QAAvC,CAAP;AACD;;AAED,UAAQC,KAAKc,QAAb;AACE,SAAK,qBAAL;AACEjB,YAAM,0BAAN,EAAkCI,OAAlC,EAA2CD,IAA3C;AACA,aAAOL,KAAKoB,OAAL,CAAaf,IAAb,CAAP;AACA;AAJJ;AAMD;;AAED,UAAUW,UAAV,CAAqBZ,QAArB,EAA+BC,IAA/B,EAAqCC,OAArC,EAA8C;AAC5CJ,QAAM,YAAN,EAAoBI,OAApB;;AAEA;AACD;;AAED,UAAUe,QAAV,CAAmB,EAACjB,QAAD,EAAWkB,GAAX,EAAnB,EAAoC;AAClC,QAAMnB,KAAKC,QAAL,EAAekB,GAAf,CAAN;AACD;;AAEM,UAAUxB,QAAV,CAAmByB,GAAnB,EAAwB;AAC7B,MAAIC,UAAU,MAAM,qBAAOF,oBAAIG,KAAJ,CAAUD,OAAjB,CAApB;;AAEA,MAAIE,QAAQ,MAAM,kBAChB,uBAAeF,OAAf,EACGG,MADH,CACW,CAAC,CAACZ,EAAD,EAAK,EAACO,GAAD,EAAL,CAAD,KAAiB,CAAC,CAACA,GAD9B,EAEGM,GAFH,CAEQ,CAAC,CAACb,EAAD,EAAK,EAACO,GAAD,EAAL,CAAD,KAAiB,mBAAM,MAAM,kBAAIrB,QAAQ4B,KAAR,CAAcd,EAAd,EAAkBO,GAAlB,CAAJ,CAAZ,CAFzB,CADgB,CAAlB;;AAMA,MAAII,MAAMI,MAAN,GAAe,CAAnB,EAAsB;AACpB,UAAM,mBAAK,GAAGJ,KAAR,CAAN;AACD;;AAED,QAAM,kBAAIzB,QAAQ8B,YAAR,EAAJ,CAAN;AACD;;AAEM,UAAUhC,IAAV,GAAiB;AACtB,QAAM,mBAAK;AACTiC,aAAS,wBAAU/B,QAAQgC,KAAlB,EAAyBZ,QAAzB,CADA;AAETa,UAAM,mBAAKjC,QAAQkC,aAAb;AAFG,GAAL,CAAN;AAID;;kBAEc,yBAAW,KAAX,EAAkBpC,IAAlB,C", file: "index.js", sourceRoot: "/Users/gnidan/src/work/truffle/packages/truffle-debugger", sourcesContent: ["import debugModule from \"debug\";\nconst debug = debugModule(\"debugger:ast:sagas\");\n\nimport { all, call, race, fork, join, take, takeEvery, put, select } from \"redux-saga/effects\";\n\nimport { prefixName } from \"lib/helpers\";\n\nimport * as data from \"lib/data/sagas\";\n\nimport * as actions from \"../actions\";\n\nimport ast from \"../selectors\";\n\n\nfunction *walk(sourceId, node, pointer = \"\", parentId = null) {\n  debug(\"walking %o %o\", pointer, node);\n\n  yield *handleEnter(sourceId, node, pointer, parentId);\n\n  if (node instanceof Array) {\n    for (let [i, child] of node.entries()) {\n      yield call(walk, sourceId, child, `${pointer}/${i}`, parentId);\n    }\n  } else if (node instanceof Object) {\n    for (let [key, child] of Object.entries(node)) {\n      yield call(walk, sourceId, child, `${pointer}/${key}`, node.id);\n    }\n  }\n\n  yield *handleExit(sourceId, node, pointer);\n}\n\nfunction *handleEnter(sourceId, node, pointer, parentId) {\n  if (!(node instanceof Object)) {\n    return;\n  }\n\n  debug(\"entering %s\", pointer);\n\n  if (node.id !== undefined) {\n    debug(\"%s recording scope %s\", pointer, node.id);\n    yield *data.scope(node.id, pointer, parentId, sourceId);\n  }\n\n  switch (node.nodeType) {\n    case \"VariableDeclaration\":\n      debug(\"%s recording variable %o\", pointer, node);\n      yield *data.declare(node);\n      break;\n  }\n}\n\nfunction *handleExit(sourceId, node, pointer) {\n  debug(\"exiting %s\", pointer);\n\n  // no-op right now\n}\n\nfunction *walkSaga({sourceId, ast}) {\n  yield walk(sourceId, ast);\n}\n\nexport function *visitAll(idx) {\n  let sources = yield select(ast.views.sources);\n\n  let tasks = yield all(\n    Object.entries(sources)\n      .filter( ([id, {ast}]) => !!ast )\n      .map( ([id, {ast}]) => fork( () => put(actions.visit(id, ast))) )\n  )\n\n  if (tasks.length > 0) {\n    yield join(...tasks);\n  }\n\n  yield put(actions.doneVisiting());\n}\n\nexport function* saga() {\n  yield race({\n    visitor: takeEvery(actions.VISIT, walkSaga),\n    done: take(actions.DONE_VISITING)\n  });\n}\n\nexport default prefixName(\"ast\", saga);\n"] }, _coverageSchema: "332fd63041d2c1bcb487cc26dd0d5f7d97098a6c" },
      coverage = global[gcv] || (global[gcv] = {});if (coverage[path] && coverage[path].hash === hash) {
    return coverage[path];
  }coverageData.hash = hash;return coverage[path] = coverageData;
}();cov_aeme5kur4.s[0]++;Object.defineProperty(exports, "__esModule", { value: true });var _entries = (cov_aeme5kur4.s[1]++, __webpack_require__(1));var _entries2 = (cov_aeme5kur4.s[2]++, _interopRequireDefault(_entries));cov_aeme5kur4.s[3]++;exports.visitAll = visitAll;cov_aeme5kur4.s[4]++;exports.saga = saga;var _debug = (cov_aeme5kur4.s[5]++, __webpack_require__(0));var _debug2 = (cov_aeme5kur4.s[6]++, _interopRequireDefault(_debug));var _effects = (cov_aeme5kur4.s[7]++, __webpack_require__(10));var _helpers = (cov_aeme5kur4.s[8]++, __webpack_require__(4));var _sagas = (cov_aeme5kur4.s[9]++, __webpack_require__(31));var data = (cov_aeme5kur4.s[10]++, _interopRequireWildcard(_sagas));var _actions = (cov_aeme5kur4.s[11]++, __webpack_require__(65));var actions = (cov_aeme5kur4.s[12]++, _interopRequireWildcard(_actions));var _selectors = (cov_aeme5kur4.s[13]++, __webpack_require__(14));var _selectors2 = (cov_aeme5kur4.s[14]++, _interopRequireDefault(_selectors));function _interopRequireWildcard(obj) {
  cov_aeme5kur4.f[0]++;cov_aeme5kur4.s[15]++;if ((cov_aeme5kur4.b[1][0]++, obj) && (cov_aeme5kur4.b[1][1]++, obj.__esModule)) {
    cov_aeme5kur4.b[0][0]++;cov_aeme5kur4.s[16]++;return obj;
  } else {
    cov_aeme5kur4.b[0][1]++;var newObj = (cov_aeme5kur4.s[17]++, {});cov_aeme5kur4.s[18]++;if (obj != null) {
      cov_aeme5kur4.b[2][0]++;cov_aeme5kur4.s[19]++;for (var key in obj) {
        cov_aeme5kur4.s[20]++;if (Object.prototype.hasOwnProperty.call(obj, key)) {
          cov_aeme5kur4.b[3][0]++;cov_aeme5kur4.s[21]++;newObj[key] = obj[key];
        } else {
          cov_aeme5kur4.b[3][1]++;
        }
      }
    } else {
      cov_aeme5kur4.b[2][1]++;
    }cov_aeme5kur4.s[22]++;newObj.default = obj;cov_aeme5kur4.s[23]++;return newObj;
  }
}function _interopRequireDefault(obj) {
  cov_aeme5kur4.f[1]++;cov_aeme5kur4.s[24]++;return (cov_aeme5kur4.b[5][0]++, obj) && (cov_aeme5kur4.b[5][1]++, obj.__esModule) ? (cov_aeme5kur4.b[4][0]++, obj) : (cov_aeme5kur4.b[4][1]++, { default: obj });
}const debug = (cov_aeme5kur4.s[25]++, (0, _debug2.default)("debugger:ast:sagas"));function* walk(sourceId, node, pointer = (cov_aeme5kur4.b[6][0]++, ""), parentId = (cov_aeme5kur4.b[7][0]++, null)) {
  cov_aeme5kur4.f[2]++;cov_aeme5kur4.s[26]++;debug("walking %o %o", pointer, node);cov_aeme5kur4.s[27]++;yield* handleEnter(sourceId, node, pointer, parentId);cov_aeme5kur4.s[28]++;if (node instanceof Array) {
    cov_aeme5kur4.b[8][0]++;cov_aeme5kur4.s[29]++;for (let [i, child] of node.entries()) {
      cov_aeme5kur4.s[30]++;yield (0, _effects.call)(walk, sourceId, child, `${pointer}/${i}`, parentId);
    }
  } else {
    cov_aeme5kur4.b[8][1]++;cov_aeme5kur4.s[31]++;if (node instanceof Object) {
      cov_aeme5kur4.b[9][0]++;cov_aeme5kur4.s[32]++;for (let [key, child] of (0, _entries2.default)(node)) {
        cov_aeme5kur4.s[33]++;yield (0, _effects.call)(walk, sourceId, child, `${pointer}/${key}`, node.id);
      }
    } else {
      cov_aeme5kur4.b[9][1]++;
    }
  }cov_aeme5kur4.s[34]++;yield* handleExit(sourceId, node, pointer);
}function* handleEnter(sourceId, node, pointer, parentId) {
  cov_aeme5kur4.f[3]++;cov_aeme5kur4.s[35]++;if (!(node instanceof Object)) {
    cov_aeme5kur4.b[10][0]++;cov_aeme5kur4.s[36]++;return;
  } else {
    cov_aeme5kur4.b[10][1]++;
  }cov_aeme5kur4.s[37]++;debug("entering %s", pointer);cov_aeme5kur4.s[38]++;if (node.id !== undefined) {
    cov_aeme5kur4.b[11][0]++;cov_aeme5kur4.s[39]++;debug("%s recording scope %s", pointer, node.id);cov_aeme5kur4.s[40]++;yield* data.scope(node.id, pointer, parentId, sourceId);
  } else {
    cov_aeme5kur4.b[11][1]++;
  }cov_aeme5kur4.s[41]++;switch (node.nodeType) {case "VariableDeclaration":
      cov_aeme5kur4.b[12][0]++;cov_aeme5kur4.s[42]++;debug("%s recording variable %o", pointer, node);cov_aeme5kur4.s[43]++;yield* data.declare(node);cov_aeme5kur4.s[44]++;break;}
}function* handleExit(sourceId, node, pointer) {
  cov_aeme5kur4.f[4]++;cov_aeme5kur4.s[45]++;debug("exiting %s", pointer);
}function* walkSaga({ sourceId, ast }) {
  cov_aeme5kur4.f[5]++;cov_aeme5kur4.s[46]++;yield walk(sourceId, ast);
}function* visitAll(idx) {
  cov_aeme5kur4.f[6]++;let sources = (cov_aeme5kur4.s[47]++, yield (0, _effects.select)(_selectors2.default.views.sources));let tasks = (cov_aeme5kur4.s[48]++, yield (0, _effects.all)((0, _entries2.default)(sources).filter(([id, { ast }]) => {
    cov_aeme5kur4.f[7]++;cov_aeme5kur4.s[49]++;return !!ast;
  }).map(([id, { ast }]) => {
    cov_aeme5kur4.f[8]++;cov_aeme5kur4.s[50]++;return (0, _effects.fork)(() => {
      cov_aeme5kur4.f[9]++;cov_aeme5kur4.s[51]++;return (0, _effects.put)(actions.visit(id, ast));
    });
  })));cov_aeme5kur4.s[52]++;if (tasks.length > 0) {
    cov_aeme5kur4.b[13][0]++;cov_aeme5kur4.s[53]++;yield (0, _effects.join)(...tasks);
  } else {
    cov_aeme5kur4.b[13][1]++;
  }cov_aeme5kur4.s[54]++;yield (0, _effects.put)(actions.doneVisiting());
}function* saga() {
  cov_aeme5kur4.f[10]++;cov_aeme5kur4.s[55]++;yield (0, _effects.race)({ visitor: (0, _effects.takeEvery)(actions.VISIT, walkSaga), done: (0, _effects.take)(actions.DONE_VISITING) });
}cov_aeme5kur4.s[56]++;exports.default = (0, _helpers.prefixName)("ast", saga);

/***/ }),
/* 62 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var cov_2h0rawf57g = function () {
  var path = "/Users/gnidan/src/work/truffle/packages/truffle-debugger/lib/data/decode/index.js",
      hash = "3fd88b1d578eb1d8fe9b6639ec6208293385e92f",
      Function = function () {}.constructor,
      global = new Function('return this')(),
      gcv = "__coverage__",
      coverageData = { path: "/Users/gnidan/src/work/truffle/packages/truffle-debugger/lib/data/decode/index.js", statementMap: { "0": { start: { line: 3, column: 0 }, end: { line: 5, column: 3 } }, "1": { start: { line: 7, column: 15 }, end: { line: 7, column: 62 } }, "2": { start: { line: 9, column: 16 }, end: { line: 9, column: 48 } }, "3": { start: { line: 11, column: 16 }, end: { line: 11, column: 56 } }, "4": { start: { line: 13, column: 16 }, end: { line: 13, column: 49 } }, "5": { start: { line: 15, column: 14 }, end: { line: 15, column: 60 } }, "6": { start: { line: 17, column: 15 }, end: { line: 17, column: 46 } }, "7": { start: { line: 19, column: 0 }, end: { line: 19, column: 20 } }, "8": { start: { line: 20, column: 0 }, end: { line: 20, column: 34 } }, "9": { start: { line: 21, column: 0 }, end: { line: 21, column: 54 } }, "10": { start: { line: 22, column: 0 }, end: { line: 22, column: 56 } }, "11": { start: { line: 23, column: 0 }, end: { line: 23, column: 38 } }, "12": { start: { line: 24, column: 0 }, end: { line: 24, column: 25 } }, "13": { start: { line: 26, column: 13 }, end: { line: 26, column: 29 } }, "14": { start: { line: 28, column: 14 }, end: { line: 28, column: 44 } }, "15": { start: { line: 30, column: 17 }, end: { line: 30, column: 40 } }, "16": { start: { line: 32, column: 14 }, end: { line: 32, column: 33 } }, "17": { start: { line: 34, column: 13 }, end: { line: 34, column: 45 } }, "18": { start: { line: 36, column: 15 }, end: { line: 36, column: 35 } }, "19": { start: { line: 38, column: 14 }, end: { line: 38, column: 47 } }, "20": { start: { line: 40, column: 13 }, end: { line: 40, column: 31 } }, "21": { start: { line: 42, column: 12 }, end: { line: 42, column: 43 } }, "22": { start: { line: 44, column: 40 }, end: { line: 44, column: 267 } }, "23": { start: { line: 44, column: 69 }, end: { line: 44, column: 80 } }, "24": { start: { line: 44, column: 103 }, end: { line: 44, column: 105 } }, "25": { start: { line: 44, column: 107 }, end: { line: 44, column: 228 } }, "26": { start: { line: 44, column: 126 }, end: { line: 44, column: 226 } }, "27": { start: { line: 44, column: 149 }, end: { line: 44, column: 224 } }, "28": { start: { line: 44, column: 201 }, end: { line: 44, column: 224 } }, "29": { start: { line: 44, column: 229 }, end: { line: 44, column: 250 } }, "30": { start: { line: 44, column: 251 }, end: { line: 44, column: 265 } }, "31": { start: { line: 46, column: 39 }, end: { line: 46, column: 93 } }, "32": { start: { line: 48, column: 14 }, end: { line: 48, column: 58 } }, "33": { start: { line: 51, column: 2 }, end: { line: 59, column: 3 } }, "34": { start: { line: 52, column: 4 }, end: { line: 52, column: 38 } }, "35": { start: { line: 53, column: 9 }, end: { line: 59, column: 3 } }, "36": { start: { line: 54, column: 4 }, end: { line: 54, column: 61 } }, "37": { start: { line: 55, column: 9 }, end: { line: 59, column: 3 } }, "38": { start: { line: 56, column: 4 }, end: { line: 56, column: 87 } }, "39": { start: { line: 57, column: 9 }, end: { line: 59, column: 3 } }, "40": { start: { line: 58, column: 4 }, end: { line: 58, column: 27 } }, "41": { start: { line: 63, column: 20 }, end: { line: 63, column: 24 } }, "42": { start: { line: 64, column: 2 }, end: { line: 64, column: 92 } }, "43": { start: { line: 65, column: 14 }, end: { line: 65, column: 34 } }, "44": { start: { line: 66, column: 2 }, end: { line: 69, column: 3 } }, "45": { start: { line: 67, column: 4 }, end: { line: 67, column: 61 } }, "46": { start: { line: 68, column: 4 }, end: { line: 68, column: 21 } }, "47": { start: { line: 71, column: 2 }, end: { line: 108, column: 3 } }, "48": { start: { line: 73, column: 6 }, end: { line: 73, column: 48 } }, "49": { start: { line: 76, column: 6 }, end: { line: 76, column: 38 } }, "50": { start: { line: 79, column: 6 }, end: { line: 79, column: 44 } }, "51": { start: { line: 82, column: 6 }, end: { line: 82, column: 44 } }, "52": { start: { line: 85, column: 6 }, end: { line: 85, column: 77 } }, "53": { start: { line: 87, column: 6 }, end: { line: 89, column: 7 } }, "54": { start: { line: 88, column: 8 }, end: { line: 88, column: 21 } }, "55": { start: { line: 90, column: 19 }, end: { line: 90, column: 50 } }, "56": { start: { line: 91, column: 6 }, end: { line: 91, column: 46 } }, "57": { start: { line: 95, column: 6 }, end: { line: 95, column: 77 } }, "58": { start: { line: 96, column: 6 }, end: { line: 98, column: 7 } }, "59": { start: { line: 97, column: 8 }, end: { line: 97, column: 21 } }, "60": { start: { line: 99, column: 6 }, end: { line: 99, column: 57 } }, "61": { start: { line: 102, column: 6 }, end: { line: 102, column: 77 } }, "62": { start: { line: 103, column: 6 }, end: { line: 103, column: 38 } }, "63": { start: { line: 106, column: 6 }, end: { line: 106, column: 72 } }, "64": { start: { line: 107, column: 6 }, end: { line: 107, column: 23 } }, "65": { start: { line: 112, column: 20 }, end: { line: 112, column: 24 } }, "66": { start: { line: 113, column: 2 }, end: { line: 113, column: 31 } }, "67": { start: { line: 114, column: 17 }, end: { line: 114, column: 37 } }, "68": { start: { line: 115, column: 2 }, end: { line: 117, column: 3 } }, "69": { start: { line: 116, column: 4 }, end: { line: 116, column: 21 } }, "70": { start: { line: 119, column: 2 }, end: { line: 119, column: 52 } }, "71": { start: { line: 122, column: 2 }, end: { line: 184, column: 3 } }, "72": { start: { line: 126, column: 6 }, end: { line: 128, column: 16 } }, "73": { start: { line: 130, column: 25 }, end: { line: 132, column: 7 } }, "74": { start: { line: 134, column: 6 }, end: { line: 134, column: 57 } }, "75": { start: { line: 137, column: 6 }, end: { line: 139, column: 28 } }, "76": { start: { line: 141, column: 6 }, end: { line: 143, column: 20 } }, "77": { start: { line: 145, column: 6 }, end: { line: 147, column: 16 } }, "78": { start: { line: 145, column: 64 }, end: { line: 147, column: 14 } }, "79": { start: { line: 150, column: 25 }, end: { line: 150, column: 29 } }, "80": { start: { line: 155, column: 36 }, end: { line: 155, column: 145 } }, "81": { start: { line: 157, column: 26 }, end: { line: 157, column: 61 } }, "82": { start: { line: 159, column: 6 }, end: { line: 178, column: 10 } }, "83": { start: { line: 160, column: 31 }, end: { line: 160, column: 52 } }, "84": { start: { line: 161, column: 28 }, end: { line: 163, column: 9 } }, "85": { start: { line: 167, column: 8 }, end: { line: 173, column: 11 } }, "86": { start: { line: 175, column: 8 }, end: { line: 177, column: 10 } }, "87": { start: { line: 181, column: 6 }, end: { line: 181, column: 83 } }, "88": { start: { line: 182, column: 6 }, end: { line: 182, column: 23 } }, "89": { start: { line: 193, column: 20 }, end: { line: 193, column: 24 } }, "90": { start: { line: 195, column: 2 }, end: { line: 309, column: 3 } }, "91": { start: { line: 197, column: 6 }, end: { line: 197, column: 42 } }, "92": { start: { line: 198, column: 6 }, end: { line: 198, column: 34 } }, "93": { start: { line: 199, column: 6 }, end: { line: 201, column: 7 } }, "94": { start: { line: 200, column: 8 }, end: { line: 200, column: 25 } }, "95": { start: { line: 203, column: 6 }, end: { line: 203, column: 50 } }, "96": { start: { line: 204, column: 6 }, end: { line: 204, column: 33 } }, "97": { start: { line: 206, column: 23 }, end: { line: 206, column: 74 } }, "98": { start: { line: 207, column: 22 }, end: { line: 207, column: 61 } }, "99": { start: { line: 208, column: 6 }, end: { line: 208, column: 37 } }, "100": { start: { line: 209, column: 6 }, end: { line: 209, column: 35 } }, "101": { start: { line: 211, column: 21 }, end: { line: 217, column: 7 } }, "102": { start: { line: 212, column: 8 }, end: { line: 214, column: 9 } }, "103": { start: { line: 213, column: 10 }, end: { line: 213, column: 19 } }, "104": { start: { line: 216, column: 8 }, end: { line: 216, column: 59 } }, "105": { start: { line: 219, column: 20 }, end: { line: 226, column: 7 } }, "106": { start: { line: 220, column: 8 }, end: { line: 222, column: 9 } }, "107": { start: { line: 221, column: 10 }, end: { line: 221, column: 45 } }, "108": { start: { line: 224, column: 25 }, end: { line: 224, column: 50 } }, "109": { start: { line: 225, column: 8 }, end: { line: 225, column: 35 } }, "110": { start: { line: 228, column: 17 }, end: { line: 231, column: 7 } }, "111": { start: { line: 233, column: 6 }, end: { line: 233, column: 36 } }, "112": { start: { line: 234, column: 6 }, end: { line: 249, column: 9 } }, "113": { start: { line: 235, column: 24 }, end: { line: 241, column: 9 } }, "114": { start: { line: 242, column: 8 }, end: { line: 242, column: 25 } }, "115": { start: { line: 244, column: 8 }, end: { line: 244, column: 50 } }, "116": { start: { line: 245, column: 8 }, end: { line: 248, column: 21 } }, "117": { start: { line: 253, column: 6 }, end: { line: 253, column: 34 } }, "118": { start: { line: 254, column: 6 }, end: { line: 256, column: 7 } }, "119": { start: { line: 255, column: 8 }, end: { line: 255, column: 25 } }, "120": { start: { line: 258, column: 6 }, end: { line: 258, column: 29 } }, "121": { start: { line: 259, column: 23 }, end: { line: 259, column: 49 } }, "122": { start: { line: 260, column: 6 }, end: { line: 262, column: 7 } }, "123": { start: { line: 261, column: 8 }, end: { line: 261, column: 23 } }, "124": { start: { line: 264, column: 6 }, end: { line: 284, column: 7 } }, "125": { start: { line: 266, column: 8 }, end: { line: 266, column: 32 } }, "126": { start: { line: 267, column: 8 }, end: { line: 267, column: 44 } }, "127": { start: { line: 268, column: 8 }, end: { line: 270, column: 9 } }, "128": { start: { line: 269, column: 10 }, end: { line: 269, column: 20 } }, "129": { start: { line: 272, column: 8 }, end: { line: 275, column: 21 } }, "130": { start: { line: 277, column: 8 }, end: { line: 277, column: 68 } }, "131": { start: { line: 278, column: 8 }, end: { line: 278, column: 45 } }, "132": { start: { line: 280, column: 8 }, end: { line: 283, column: 21 } }, "133": { start: { line: 287, column: 25 }, end: { line: 287, column: 29 } }, "134": { start: { line: 289, column: 36 }, end: { line: 289, column: 134 } }, "135": { start: { line: 291, column: 24 }, end: { line: 291, column: 77 } }, "136": { start: { line: 294, column: 6 }, end: { line: 298, column: 7 } }, "137": { start: { line: 295, column: 8 }, end: { line: 295, column: 41 } }, "138": { start: { line: 297, column: 8 }, end: { line: 297, column: 76 } }, "139": { start: { line: 300, column: 25 }, end: { line: 300, column: 76 } }, "140": { start: { line: 302, column: 6 }, end: { line: 304, column: 11 } }, "141": { start: { line: 302, column: 115 }, end: { line: 304, column: 7 } }, "142": { start: { line: 307, column: 6 }, end: { line: 307, column: 84 } }, "143": { start: { line: 308, column: 6 }, end: { line: 308, column: 23 } }, "144": { start: { line: 313, column: 2 }, end: { line: 316, column: 3 } }, "145": { start: { line: 315, column: 4 }, end: { line: 315, column: 21 } }, "146": { start: { line: 318, column: 26 }, end: { line: 318, column: 30 } }, "147": { start: { line: 320, column: 2 }, end: { line: 320, column: 31 } }, "148": { start: { line: 321, column: 2 }, end: { line: 321, column: 45 } }, "149": { start: { line: 322, column: 13 }, end: { line: 322, column: 45 } }, "150": { start: { line: 323, column: 2 }, end: { line: 323, column: 31 } }, "151": { start: { line: 325, column: 22 }, end: { line: 325, column: 49 } }, "152": { start: { line: 326, column: 24 }, end: { line: 326, column: 53 } }, "153": { start: { line: 328, column: 17 }, end: { line: 328, column: 42 } }, "154": { start: { line: 329, column: 2 }, end: { line: 331, column: 3 } }, "155": { start: { line: 330, column: 4 }, end: { line: 330, column: 26 } }, "156": { start: { line: 333, column: 16 }, end: { line: 333, column: 18 } }, "157": { start: { line: 334, column: 2 }, end: { line: 334, column: 31 } }, "158": { start: { line: 335, column: 2 }, end: { line: 357, column: 3 } }, "159": { start: { line: 336, column: 21 }, end: { line: 336, column: 39 } }, "160": { start: { line: 337, column: 23 }, end: { line: 348, column: 5 } }, "161": { start: { line: 349, column: 4 }, end: { line: 349, column: 39 } }, "162": { start: { line: 352, column: 19 }, end: { line: 352, column: 58 } }, "163": { start: { line: 353, column: 4 }, end: { line: 353, column: 35 } }, "164": { start: { line: 354, column: 4 }, end: { line: 356, column: 5 } }, "165": { start: { line: 355, column: 6 }, end: { line: 355, column: 81 } }, "166": { start: { line: 359, column: 2 }, end: { line: 359, column: 17 } }, "167": { start: { line: 363, column: 2 }, end: { line: 365, column: 3 } }, "168": { start: { line: 364, column: 4 }, end: { line: 364, column: 50 } }, "169": { start: { line: 367, column: 21 }, end: { line: 367, column: 53 } }, "170": { start: { line: 368, column: 2 }, end: { line: 380, column: 3 } }, "171": { start: { line: 369, column: 4 }, end: { line: 379, column: 5 } }, "172": { start: { line: 371, column: 8 }, end: { line: 371, column: 65 } }, "173": { start: { line: 372, column: 8 }, end: { line: 372, column: 64 } }, "174": { start: { line: 374, column: 8 }, end: { line: 374, column: 66 } }, "175": { start: { line: 375, column: 8 }, end: { line: 375, column: 65 } }, "176": { start: { line: 377, column: 8 }, end: { line: 377, column: 82 } }, "177": { start: { line: 378, column: 8 }, end: { line: 378, column: 25 } }, "178": { start: { line: 382, column: 2 }, end: { line: 385, column: 3 } }, "179": { start: { line: 383, column: 4 }, end: { line: 383, column: 52 } }, "180": { start: { line: 384, column: 4 }, end: { line: 384, column: 52 } }, "181": { start: { line: 387, column: 2 }, end: { line: 387, column: 48 } }, "182": { start: { line: 388, column: 2 }, end: { line: 388, column: 48 } } }, fnMap: { "0": { name: "_interopRequireWildcard", decl: { start: { line: 44, column: 9 }, end: { line: 44, column: 32 } }, loc: { start: { line: 44, column: 38 }, end: { line: 44, column: 269 } }, line: 44 }, "1": { name: "_interopRequireDefault", decl: { start: { line: 46, column: 9 }, end: { line: 46, column: 31 } }, loc: { start: { line: 46, column: 37 }, end: { line: 46, column: 95 } }, line: 46 }, "2": { name: "read", decl: { start: { line: 50, column: 9 }, end: { line: 50, column: 13 } }, loc: { start: { line: 50, column: 30 }, end: { line: 60, column: 1 } }, line: 50 }, "3": { name: "decodeValue", decl: { start: { line: 62, column: 9 }, end: { line: 62, column: 20 } }, loc: { start: { line: 62, column: 48 }, end: { line: 109, column: 1 } }, line: 62 }, "4": { name: "decodeMemoryReference", decl: { start: { line: 111, column: 9 }, end: { line: 111, column: 30 } }, loc: { start: { line: 111, column: 58 }, end: { line: 185, column: 1 } }, line: 111 }, "5": { name: "(anonymous_5)", decl: { start: { line: 145, column: 55 }, end: { line: 145, column: 56 } }, loc: { start: { line: 145, column: 64 }, end: { line: 147, column: 14 } }, line: 145 }, "6": { name: "(anonymous_6)", decl: { start: { line: 159, column: 64 }, end: { line: 159, column: 65 } }, loc: { start: { line: 159, column: 85 }, end: { line: 178, column: 7 } }, line: 159 }, "7": { name: "decodeStorageReference", decl: { start: { line: 187, column: 9 }, end: { line: 187, column: 31 } }, loc: { start: { line: 187, column: 59 }, end: { line: 310, column: 1 } }, line: 187 }, "8": { name: "(anonymous_8)", decl: { start: { line: 211, column: 21 }, end: { line: 211, column: 22 } }, loc: { start: { line: 211, column: 26 }, end: { line: 217, column: 7 } }, line: 211 }, "9": { name: "(anonymous_9)", decl: { start: { line: 219, column: 20 }, end: { line: 219, column: 21 } }, loc: { start: { line: 219, column: 25 }, end: { line: 226, column: 7 } }, line: 219 }, "10": { name: "(anonymous_10)", decl: { start: { line: 234, column: 43 }, end: { line: 234, column: 44 } }, loc: { start: { line: 234, column: 48 }, end: { line: 243, column: 7 } }, line: 234 }, "11": { name: "(anonymous_11)", decl: { start: { line: 243, column: 13 }, end: { line: 243, column: 14 } }, loc: { start: { line: 243, column: 33 }, end: { line: 249, column: 7 } }, line: 243 }, "12": { name: "(anonymous_12)", decl: { start: { line: 302, column: 90 }, end: { line: 302, column: 91 } }, loc: { start: { line: 302, column: 115 }, end: { line: 304, column: 7 } }, line: 302 }, "13": { name: "decodeMapping", decl: { start: { line: 312, column: 9 }, end: { line: 312, column: 22 } }, loc: { start: { line: 312, column: 50 }, end: { line: 360, column: 1 } }, line: 312 }, "14": { name: "decode", decl: { start: { line: 362, column: 9 }, end: { line: 362, column: 15 } }, loc: { start: { line: 362, column: 43 }, end: { line: 389, column: 1 } }, line: 362 } }, branchMap: { "0": { loc: { start: { line: 44, column: 40 }, end: { line: 44, column: 267 } }, type: "if", locations: [{ start: { line: 44, column: 40 }, end: { line: 44, column: 267 } }, { start: { line: 44, column: 40 }, end: { line: 44, column: 267 } }], line: 44 }, "1": { loc: { start: { line: 44, column: 44 }, end: { line: 44, column: 65 } }, type: "binary-expr", locations: [{ start: { line: 44, column: 44 }, end: { line: 44, column: 47 } }, { start: { line: 44, column: 51 }, end: { line: 44, column: 65 } }], line: 44 }, "2": { loc: { start: { line: 44, column: 107 }, end: { line: 44, column: 228 } }, type: "if", locations: [{ start: { line: 44, column: 107 }, end: { line: 44, column: 228 } }, { start: { line: 44, column: 107 }, end: { line: 44, column: 228 } }], line: 44 }, "3": { loc: { start: { line: 44, column: 149 }, end: { line: 44, column: 224 } }, type: "if", locations: [{ start: { line: 44, column: 149 }, end: { line: 44, column: 224 } }, { start: { line: 44, column: 149 }, end: { line: 44, column: 224 } }], line: 44 }, "4": { loc: { start: { line: 46, column: 46 }, end: { line: 46, column: 92 } }, type: "cond-expr", locations: [{ start: { line: 46, column: 70 }, end: { line: 46, column: 73 } }, { start: { line: 46, column: 76 }, end: { line: 46, column: 92 } }], line: 46 }, "5": { loc: { start: { line: 46, column: 46 }, end: { line: 46, column: 67 } }, type: "binary-expr", locations: [{ start: { line: 46, column: 46 }, end: { line: 46, column: 49 } }, { start: { line: 46, column: 53 }, end: { line: 46, column: 67 } }], line: 46 }, "6": { loc: { start: { line: 51, column: 2 }, end: { line: 59, column: 3 } }, type: "if", locations: [{ start: { line: 51, column: 2 }, end: { line: 59, column: 3 } }, { start: { line: 51, column: 2 }, end: { line: 59, column: 3 } }], line: 51 }, "7": { loc: { start: { line: 51, column: 6 }, end: { line: 51, column: 85 } }, type: "binary-expr", locations: [{ start: { line: 51, column: 6 }, end: { line: 51, column: 32 } }, { start: { line: 51, column: 36 }, end: { line: 51, column: 47 } }, { start: { line: 51, column: 51 }, end: { line: 51, column: 85 } }], line: 51 }, "8": { loc: { start: { line: 53, column: 9 }, end: { line: 59, column: 3 } }, type: "if", locations: [{ start: { line: 53, column: 9 }, end: { line: 59, column: 3 } }, { start: { line: 53, column: 9 }, end: { line: 59, column: 3 } }], line: 53 }, "9": { loc: { start: { line: 53, column: 13 }, end: { line: 53, column: 58 } }, type: "binary-expr", locations: [{ start: { line: 53, column: 13 }, end: { line: 53, column: 41 } }, { start: { line: 53, column: 45 }, end: { line: 53, column: 58 } }], line: 53 }, "10": { loc: { start: { line: 55, column: 9 }, end: { line: 59, column: 3 } }, type: "if", locations: [{ start: { line: 55, column: 9 }, end: { line: 59, column: 3 } }, { start: { line: 55, column: 9 }, end: { line: 59, column: 3 } }], line: 55 }, "11": { loc: { start: { line: 55, column: 13 }, end: { line: 55, column: 56 } }, type: "binary-expr", locations: [{ start: { line: 55, column: 13 }, end: { line: 55, column: 40 } }, { start: { line: 55, column: 44 }, end: { line: 55, column: 56 } }], line: 55 }, "12": { loc: { start: { line: 57, column: 9 }, end: { line: 59, column: 3 } }, type: "if", locations: [{ start: { line: 57, column: 9 }, end: { line: 59, column: 3 } }, { start: { line: 57, column: 9 }, end: { line: 59, column: 3 } }], line: 57 }, "13": { loc: { start: { line: 66, column: 2 }, end: { line: 69, column: 3 } }, type: "if", locations: [{ start: { line: 66, column: 2 }, end: { line: 69, column: 3 } }, { start: { line: 66, column: 2 }, end: { line: 69, column: 3 } }], line: 66 }, "14": { loc: { start: { line: 71, column: 2 }, end: { line: 108, column: 3 } }, type: "switch", locations: [{ start: { line: 72, column: 4 }, end: { line: 73, column: 48 } }, { start: { line: 75, column: 4 }, end: { line: 76, column: 38 } }, { start: { line: 78, column: 4 }, end: { line: 79, column: 44 } }, { start: { line: 81, column: 4 }, end: { line: 82, column: 44 } }, { start: { line: 84, column: 4 }, end: { line: 91, column: 46 } }, { start: { line: 93, column: 4 }, end: { line: 93, column: 18 } }, { start: { line: 94, column: 4 }, end: { line: 99, column: 57 } }, { start: { line: 101, column: 4 }, end: { line: 103, column: 38 } }, { start: { line: 105, column: 4 }, end: { line: 107, column: 23 } }], line: 71 }, "15": { loc: { start: { line: 87, column: 6 }, end: { line: 89, column: 7 } }, type: "if", locations: [{ start: { line: 87, column: 6 }, end: { line: 89, column: 7 } }, { start: { line: 87, column: 6 }, end: { line: 89, column: 7 } }], line: 87 }, "16": { loc: { start: { line: 96, column: 6 }, end: { line: 98, column: 7 } }, type: "if", locations: [{ start: { line: 96, column: 6 }, end: { line: 98, column: 7 } }, { start: { line: 96, column: 6 }, end: { line: 98, column: 7 } }], line: 96 }, "17": { loc: { start: { line: 115, column: 2 }, end: { line: 117, column: 3 } }, type: "if", locations: [{ start: { line: 115, column: 2 }, end: { line: 117, column: 3 } }, { start: { line: 115, column: 2 }, end: { line: 117, column: 3 } }], line: 115 }, "18": { loc: { start: { line: 122, column: 2 }, end: { line: 184, column: 3 } }, type: "switch", locations: [{ start: { line: 124, column: 4 }, end: { line: 124, column: 17 } }, { start: { line: 125, column: 4 }, end: { line: 134, column: 57 } }, { start: { line: 136, column: 4 }, end: { line: 147, column: 16 } }, { start: { line: 149, column: 4 }, end: { line: 178, column: 10 } }, { start: { line: 180, column: 4 }, end: { line: 182, column: 23 } }], line: 122 }, "19": { loc: { start: { line: 155, column: 36 }, end: { line: 155, column: 145 } }, type: "cond-expr", locations: [{ start: { line: 155, column: 58 }, end: { line: 155, column: 99 } }, { start: { line: 155, column: 102 }, end: { line: 155, column: 145 } }], line: 155 }, "20": { loc: { start: { line: 157, column: 26 }, end: { line: 157, column: 61 } }, type: "binary-expr", locations: [{ start: { line: 157, column: 26 }, end: { line: 157, column: 55 } }, { start: { line: 157, column: 59 }, end: { line: 157, column: 61 } }], line: 157 }, "21": { loc: { start: { line: 159, column: 43 }, end: { line: 159, column: 58 } }, type: "binary-expr", locations: [{ start: { line: 159, column: 43 }, end: { line: 159, column: 52 } }, { start: { line: 159, column: 56 }, end: { line: 159, column: 58 } }], line: 159 }, "22": { loc: { start: { line: 195, column: 2 }, end: { line: 309, column: 3 } }, type: "switch", locations: [{ start: { line: 196, column: 4 }, end: { line: 249, column: 9 } }, { start: { line: 251, column: 4 }, end: { line: 251, column: 17 } }, { start: { line: 252, column: 4 }, end: { line: 284, column: 7 } }, { start: { line: 286, column: 4 }, end: { line: 304, column: 11 } }, { start: { line: 306, column: 4 }, end: { line: 308, column: 23 } }], line: 195 }, "23": { loc: { start: { line: 199, column: 6 }, end: { line: 201, column: 7 } }, type: "if", locations: [{ start: { line: 199, column: 6 }, end: { line: 201, column: 7 } }, { start: { line: 199, column: 6 }, end: { line: 201, column: 7 } }], line: 199 }, "24": { loc: { start: { line: 212, column: 8 }, end: { line: 214, column: 9 } }, type: "if", locations: [{ start: { line: 212, column: 8 }, end: { line: 214, column: 9 } }, { start: { line: 212, column: 8 }, end: { line: 214, column: 9 } }], line: 212 }, "25": { loc: { start: { line: 220, column: 8 }, end: { line: 222, column: 9 } }, type: "if", locations: [{ start: { line: 220, column: 8 }, end: { line: 222, column: 9 } }, { start: { line: 220, column: 8 }, end: { line: 222, column: 9 } }], line: 220 }, "26": { loc: { start: { line: 237, column: 18 }, end: { line: 237, column: 80 } }, type: "cond-expr", locations: [{ start: { line: 237, column: 52 }, end: { line: 237, column: 66 } }, { start: { line: 237, column: 69 }, end: { line: 237, column: 80 } }], line: 237 }, "27": { loc: { start: { line: 254, column: 6 }, end: { line: 256, column: 7 } }, type: "if", locations: [{ start: { line: 254, column: 6 }, end: { line: 256, column: 7 } }, { start: { line: 254, column: 6 }, end: { line: 256, column: 7 } }], line: 254 }, "28": { loc: { start: { line: 260, column: 6 }, end: { line: 262, column: 7 } }, type: "if", locations: [{ start: { line: 260, column: 6 }, end: { line: 262, column: 7 } }, { start: { line: 260, column: 6 }, end: { line: 262, column: 7 } }], line: 260 }, "29": { loc: { start: { line: 264, column: 6 }, end: { line: 284, column: 7 } }, type: "if", locations: [{ start: { line: 264, column: 6 }, end: { line: 284, column: 7 } }, { start: { line: 264, column: 6 }, end: { line: 284, column: 7 } }], line: 264 }, "30": { loc: { start: { line: 268, column: 8 }, end: { line: 270, column: 9 } }, type: "if", locations: [{ start: { line: 268, column: 8 }, end: { line: 270, column: 9 } }, { start: { line: 268, column: 8 }, end: { line: 270, column: 9 } }], line: 268 }, "31": { loc: { start: { line: 289, column: 36 }, end: { line: 289, column: 134 } }, type: "cond-expr", locations: [{ start: { line: 289, column: 58 }, end: { line: 289, column: 99 } }, { start: { line: 289, column: 102 }, end: { line: 289, column: 134 } }], line: 289 }, "32": { loc: { start: { line: 291, column: 24 }, end: { line: 291, column: 77 } }, type: "binary-expr", locations: [{ start: { line: 291, column: 24 }, end: { line: 291, column: 71 } }, { start: { line: 291, column: 75 }, end: { line: 291, column: 77 } }], line: 291 }, "33": { loc: { start: { line: 291, column: 25 }, end: { line: 291, column: 60 } }, type: "binary-expr", locations: [{ start: { line: 291, column: 25 }, end: { line: 291, column: 54 } }, { start: { line: 291, column: 58 }, end: { line: 291, column: 60 } }], line: 291 }, "34": { loc: { start: { line: 294, column: 6 }, end: { line: 298, column: 7 } }, type: "if", locations: [{ start: { line: 294, column: 6 }, end: { line: 298, column: 7 } }, { start: { line: 294, column: 6 }, end: { line: 298, column: 7 } }], line: 294 }, "35": { loc: { start: { line: 313, column: 2 }, end: { line: 316, column: 3 } }, type: "if", locations: [{ start: { line: 313, column: 2 }, end: { line: 316, column: 3 } }, { start: { line: 313, column: 2 }, end: { line: 316, column: 3 } }], line: 313 }, "36": { loc: { start: { line: 322, column: 13 }, end: { line: 322, column: 45 } }, type: "binary-expr", locations: [{ start: { line: 322, column: 13 }, end: { line: 322, column: 39 } }, { start: { line: 322, column: 43 }, end: { line: 322, column: 45 } }], line: 322 }, "37": { loc: { start: { line: 329, column: 2 }, end: { line: 331, column: 3 } }, type: "if", locations: [{ start: { line: 329, column: 2 }, end: { line: 331, column: 3 } }, { start: { line: 329, column: 2 }, end: { line: 331, column: 3 } }], line: 329 }, "38": { loc: { start: { line: 354, column: 4 }, end: { line: 356, column: 5 } }, type: "if", locations: [{ start: { line: 354, column: 4 }, end: { line: 356, column: 5 } }, { start: { line: 354, column: 4 }, end: { line: 356, column: 5 } }], line: 354 }, "39": { loc: { start: { line: 363, column: 2 }, end: { line: 365, column: 3 } }, type: "if", locations: [{ start: { line: 363, column: 2 }, end: { line: 365, column: 3 } }, { start: { line: 363, column: 2 }, end: { line: 365, column: 3 } }], line: 363 }, "40": { loc: { start: { line: 368, column: 2 }, end: { line: 380, column: 3 } }, type: "if", locations: [{ start: { line: 368, column: 2 }, end: { line: 380, column: 3 } }, { start: { line: 368, column: 2 }, end: { line: 380, column: 3 } }], line: 368 }, "41": { loc: { start: { line: 369, column: 4 }, end: { line: 379, column: 5 } }, type: "switch", locations: [{ start: { line: 370, column: 6 }, end: { line: 372, column: 64 } }, { start: { line: 373, column: 6 }, end: { line: 375, column: 65 } }, { start: { line: 376, column: 6 }, end: { line: 378, column: 25 } }], line: 369 }, "42": { loc: { start: { line: 382, column: 2 }, end: { line: 385, column: 3 } }, type: "if", locations: [{ start: { line: 382, column: 2 }, end: { line: 385, column: 3 } }, { start: { line: 382, column: 2 }, end: { line: 385, column: 3 } }], line: 382 } }, s: { "0": 0, "1": 0, "2": 0, "3": 0, "4": 0, "5": 0, "6": 0, "7": 0, "8": 0, "9": 0, "10": 0, "11": 0, "12": 0, "13": 0, "14": 0, "15": 0, "16": 0, "17": 0, "18": 0, "19": 0, "20": 0, "21": 0, "22": 0, "23": 0, "24": 0, "25": 0, "26": 0, "27": 0, "28": 0, "29": 0, "30": 0, "31": 0, "32": 0, "33": 0, "34": 0, "35": 0, "36": 0, "37": 0, "38": 0, "39": 0, "40": 0, "41": 0, "42": 0, "43": 0, "44": 0, "45": 0, "46": 0, "47": 0, "48": 0, "49": 0, "50": 0, "51": 0, "52": 0, "53": 0, "54": 0, "55": 0, "56": 0, "57": 0, "58": 0, "59": 0, "60": 0, "61": 0, "62": 0, "63": 0, "64": 0, "65": 0, "66": 0, "67": 0, "68": 0, "69": 0, "70": 0, "71": 0, "72": 0, "73": 0, "74": 0, "75": 0, "76": 0, "77": 0, "78": 0, "79": 0, "80": 0, "81": 0, "82": 0, "83": 0, "84": 0, "85": 0, "86": 0, "87": 0, "88": 0, "89": 0, "90": 0, "91": 0, "92": 0, "93": 0, "94": 0, "95": 0, "96": 0, "97": 0, "98": 0, "99": 0, "100": 0, "101": 0, "102": 0, "103": 0, "104": 0, "105": 0, "106": 0, "107": 0, "108": 0, "109": 0, "110": 0, "111": 0, "112": 0, "113": 0, "114": 0, "115": 0, "116": 0, "117": 0, "118": 0, "119": 0, "120": 0, "121": 0, "122": 0, "123": 0, "124": 0, "125": 0, "126": 0, "127": 0, "128": 0, "129": 0, "130": 0, "131": 0, "132": 0, "133": 0, "134": 0, "135": 0, "136": 0, "137": 0, "138": 0, "139": 0, "140": 0, "141": 0, "142": 0, "143": 0, "144": 0, "145": 0, "146": 0, "147": 0, "148": 0, "149": 0, "150": 0, "151": 0, "152": 0, "153": 0, "154": 0, "155": 0, "156": 0, "157": 0, "158": 0, "159": 0, "160": 0, "161": 0, "162": 0, "163": 0, "164": 0, "165": 0, "166": 0, "167": 0, "168": 0, "169": 0, "170": 0, "171": 0, "172": 0, "173": 0, "174": 0, "175": 0, "176": 0, "177": 0, "178": 0, "179": 0, "180": 0, "181": 0, "182": 0 }, f: { "0": 0, "1": 0, "2": 0, "3": 0, "4": 0, "5": 0, "6": 0, "7": 0, "8": 0, "9": 0, "10": 0, "11": 0, "12": 0, "13": 0, "14": 0 }, b: { "0": [0, 0], "1": [0, 0], "2": [0, 0], "3": [0, 0], "4": [0, 0], "5": [0, 0], "6": [0, 0], "7": [0, 0, 0], "8": [0, 0], "9": [0, 0], "10": [0, 0], "11": [0, 0], "12": [0, 0], "13": [0, 0], "14": [0, 0, 0, 0, 0, 0, 0, 0, 0], "15": [0, 0], "16": [0, 0], "17": [0, 0], "18": [0, 0, 0, 0, 0], "19": [0, 0], "20": [0, 0], "21": [0, 0], "22": [0, 0, 0, 0, 0], "23": [0, 0], "24": [0, 0], "25": [0, 0], "26": [0, 0], "27": [0, 0], "28": [0, 0], "29": [0, 0], "30": [0, 0], "31": [0, 0], "32": [0, 0], "33": [0, 0], "34": [0, 0], "35": [0, 0], "36": [0, 0], "37": [0, 0], "38": [0, 0], "39": [0, 0], "40": [0, 0], "41": [0, 0, 0], "42": [0, 0] }, inputSourceMap: { version: 3, sources: ["lib/data/decode/index.js"], names: ["read", "decodeValue", "decodeMemoryReference", "decodeStorageReference", "decodeMapping", "decode", "memory", "storage", "utils", "debug", "pointer", "state", "stack", "undefined", "length", "readRange", "readBytes", "start", "literal", "definition", "info", "typeClass", "bytes", "toBigNumber", "isZero", "toSignedBigNumber", "toHexString", "typeIdentifier", "specifiedSize", "String", "fromCharCode", "apply", "rawValue", "toNumber", "WORD_SIZE", "childPointer", "chunk", "map", "baseDefinition", "scopes", "referencedDeclaration", "typeName", "expression", "variables", "name", "id", "i", "memberDefinition", "memberPointer", "typeDescriptions", "replace", "data", "slot", "baseSize", "storageSize", "perWord", "Math", "floor", "offset", "index", "position", "from", "normalizeSlot", "Array", "keys", "childFrom", "path", "idx", "lengthByte", "to", "minus", "div", "allocation", "allocateDeclarations", "children", "mappingKeys", "keyDefinition", "keyType", "valueDefinition", "valueType", "baseSlot", "isArray", "mapping", "key", "keyPointer", "valuePointer", "keyValue", "toString", "identifier", "isReference", "referenceType", "isMapping"], mappings: ";;;;;;;;;;;;;;;;;;QAUgBA,I,GAAAA,I;QAaAC,W,GAAAA,W;QAoDAC,qB,GAAAA,qB;QA8FAC,sB,GAAAA,sB;QAyIAC,a,GAAAA,a;kBAoDQC,M;;AAtWxB;;;;AAGA;;AAEA;;IAAYC,M;;AACZ;;IAAYC,O;;AACZ;;IAAYC,K;;;;;;AANZ,MAAMC,QAAQ,qBAAY,sBAAZ,CAAd;;AASO,SAAST,IAAT,CAAcU,OAAd,EAAuBC,KAAvB,EAA8B;AACnC,MAAID,QAAQE,KAAR,IAAiBC,SAAjB,IAA8BF,MAAMC,KAApC,IAA6CF,QAAQE,KAAR,GAAgBD,MAAMC,KAAN,CAAYE,MAA7E,EAAqF;AACnF,WAAOH,MAAMC,KAAN,CAAYF,QAAQE,KAApB,CAAP;AACD,GAFD,MAEO,IAAIF,QAAQH,OAAR,IAAmBM,SAAnB,IAAgCF,MAAMJ,OAA1C,EAAmD;AACxD,WAAOA,QAAQQ,SAAR,CAAkBJ,MAAMJ,OAAxB,EAAiCG,QAAQH,OAAzC,CAAP;AACD,GAFM,MAEA,IAAIG,QAAQJ,MAAR,IAAkBO,SAAlB,IAA+BF,MAAML,MAAzC,EAAiD;AACtD,WAAOA,OAAOU,SAAP,CAAiBL,MAAML,MAAvB,EAA+BI,QAAQJ,MAAR,CAAeW,KAA9C,EAAqDP,QAAQJ,MAAR,CAAeQ,MAApE,CAAP;AACD,GAFM,MAEA,IAAIJ,QAAQQ,OAAR,IAAmBL,SAAvB,EAAkC;AACvC,WAAOH,QAAQQ,OAAf;AACD;AACF;;AAGM,SAASjB,WAAT,CAAqBkB,UAArB,EAAiCT,OAAjC,EAA0CU,IAA1C,EAAgD;AACrD,QAAM,EAAET,KAAF,KAAYS,IAAlB;AACAX,QACE,4CADF,EAEEC,OAFF,EAEWF,MAAMa,SAAN,CAAgBF,UAAhB,CAFX;AAIA,MAAIG,QAAQtB,KAAKU,OAAL,EAAcC,KAAd,CAAZ;AACA,MAAIW,SAAST,SAAb,EAAwB;AACtBJ,UAAM,iCAAN,EAAyCC,OAAzC,EAAkDC,KAAlD;AACA,WAAOE,SAAP;AACD;;AAED,UAAQL,MAAMa,SAAN,CAAgBF,UAAhB,CAAR;AACE,SAAK,MAAL;AACE,aAAO,CAACX,MAAMe,WAAN,CAAkBD,KAAlB,EAAyBE,MAAzB,EAAR;;AAEF,SAAK,MAAL;AACE,aAAOhB,MAAMe,WAAN,CAAkBD,KAAlB,CAAP;;AAEF,SAAK,KAAL;AACE,aAAOd,MAAMiB,iBAAN,CAAwBH,KAAxB,CAAP;;AAEF,SAAK,SAAL;AACE,aAAOd,MAAMkB,WAAN,CAAkBJ,KAAlB,EAAyB,IAAzB,CAAP;;AAEF,SAAK,OAAL;AACEb,YAAM,sBAAN,EAA8BD,MAAMmB,cAAN,CAAqBR,UAArB,CAA9B,EAAgEG,KAAhE;AACA;AACA,UAAI,OAAOA,KAAP,IAAgB,QAApB,EAA8B;AAC5B,eAAOA,KAAP;AACD;AACD,UAAIR,SAASN,MAAMoB,aAAN,CAAoBT,UAApB,CAAb;AACA,aAAOX,MAAMkB,WAAN,CAAkBJ,KAAlB,EAAyBR,MAAzB,CAAP;;AAEF,SAAK,QAAL;AACA,SAAK,eAAL;AACEL,YAAM,sBAAN,EAA8BD,MAAMmB,cAAN,CAAqBR,UAArB,CAA9B,EAAgEG,KAAhE;AACA,UAAI,OAAOA,KAAP,IAAgB,QAApB,EAA8B;AAC5B,eAAOA,KAAP;AACD;AACD,aAAOO,OAAOC,YAAP,CAAoBC,KAApB,CAA0BlB,SAA1B,EAAqCS,KAArC,CAAP;;AAEF,SAAK,UAAL;AACEb,YAAM,sBAAN,EAA8BD,MAAMmB,cAAN,CAAqBR,UAArB,CAA9B,EAAgEG,KAAhE;AACA,aAAOd,MAAMe,WAAN,CAAkBD,KAAlB,CAAP;;AAEF;AACEb,YAAM,wBAAN,EAAgCD,MAAMmB,cAAN,CAAqBR,UAArB,CAAhC;AACA,aAAON,SAAP;AApCJ;AAsCD;;AAEM,SAASX,qBAAT,CAA+BiB,UAA/B,EAA2CT,OAA3C,EAAoDU,IAApD,EAA0D;AAC/D,QAAM,EAAET,KAAF,KAAYS,IAAlB;AACAX,QAAM,YAAN,EAAoBC,OAApB;AACA,MAAIsB,WAAWhC,KAAKU,OAAL,EAAcC,KAAd,CAAf;AACA,MAAIqB,YAAYnB,SAAhB,EAA2B;AACzB,WAAOA,SAAP;AACD;;AAEDmB,aAAWxB,MAAMe,WAAN,CAAkBS,QAAlB,EAA4BC,QAA5B,EAAX;;AAEA,MAAIX,KAAJ;AACA,UAAQd,MAAMa,SAAN,CAAgBF,UAAhB,CAAR;;AAEE,SAAK,OAAL;AACA,SAAK,QAAL;AACEG,cAAQtB,KAAK;AACXM,gBAAQ,EAAEW,OAAOe,QAAT,EAAmBlB,QAAQoB,gBAA3B;AADG,OAAL,EAELvB,KAFK,CAAR,CADF,CAGa;;AAEX,UAAIwB,eAAe;AACjB7B,gBAAQ,EAAEW,OAAOe,WAAWE,gBAApB,EAA+BpB,QAAQQ,KAAvC;AADS,OAAnB;;AAIA,aAAOrB,YAAYkB,UAAZ,EAAwBgB,YAAxB,EAAsCf,IAAtC,CAAP;;AAEF,SAAK,OAAL;AACEE,cAAQd,MAAMe,WAAN,CAAkBvB,KAAK;AAC7BM,gBAAQ,EAAEW,OAAOe,QAAT,EAAmBlB,QAAQoB,gBAA3B;AADqB,OAAL,EAEvBvB,KAFuB,CAAlB,EAEGsB,QAFH,EAAR,CADF,CAG0B;;AAExBX,cAAQtB,KAAK,EAAEM,QAAQ;AACrBW,iBAAOe,WAAWE,gBADG,EACQpB,QAAQQ,QAAQY;AADxB,SAAV,EAAL,EAEJvB,KAFI,CAAR,CALF,CAOc;;AAEZ,aAAOL,OAAO8B,KAAP,CAAad,KAAb,EAAoBY,gBAApB,EACJG,GADI,CAEFD,KAAD,IAAW/B,OAAOG,MAAM8B,cAAN,CAAqBnB,UAArB,CAAP,EAAyC;AAClDD,iBAASkB;AADyC,OAAzC,EAERhB,IAFQ,CAFR,CAAP;;AAOF,SAAK,QAAL;AACE,YAAM,EAAEmB,MAAF,KAAanB,IAAnB;;AAEA;AACA;AACA;AACA,YAAMoB,wBAAyBrB,WAAWsB,QAAZ,GAC1BtB,WAAWsB,QAAX,CAAoBD,qBADM,GAE1BrB,WAAWuB,UAAX,CAAsBF,qBAF1B;;AAIA,UAAI,EAAEG,SAAF,KAAiBJ,OAAOC,qBAAP,KAAiC,EAAtD;;AAEA,aAAO,sBACL,EADK,EACD,GAAG,CAACG,aAAa,EAAd,EACJN,GADI,CAEH,CAAC,EAACO,IAAD,EAAOC,EAAP,EAAD,EAAaC,CAAb,KAAmB;AACjB,YAAIC,mBAAmBR,OAAOM,EAAP,EAAW1B,UAAlC;AACA,YAAI6B,gBAAgB;AAClB1C,kBAAQ,EAAEW,OAAOe,WAAWc,IAAIZ,gBAAxB,EAAmCpB,QAAQoB,gBAA3C;AADU,SAApB;AAGA;;AAEA;AACAa,sDACKA,gBADL;;AAGEE,uDACKF,iBAAiBE,gBADtB;;AAGEtB,4BACEoB,iBAAiBE,gBAAjB,CAAkCtB,cAAlC,CACGuB,OADH,CACW,YADX,EACyB,UADzB;AAJJ;AAHF;;AAYA,eAAO;AACL,WAACN,IAAD,GAAQvC,OACN0C,gBADM,EACYC,aADZ,EAC2B5B,IAD3B;AADH,SAAP;AAKD,OA3BE,CADF,CAAP;;AAiCF;AACEX,YAAM,mCAAN,EAA2CD,MAAMmB,cAAN,CAAqBR,UAArB,CAA3C;AACA,aAAON,SAAP;;AA7EJ;AAiFD;;AAEM,SAASV,sBAAT,CAAgCgB,UAAhC,EAA4CT,OAA5C,EAAqDU,IAArD,EAA2D;AAChE,MAAI+B,IAAJ;AACA,MAAI7B,KAAJ;AACA,MAAIR,MAAJ;AACA,MAAIsC,IAAJ;;AAEA,QAAM,EAAEzC,KAAF,KAAYS,IAAlB;;AAEA,UAAQZ,MAAMa,SAAN,CAAgBF,UAAhB,CAAR;AACE,SAAK,OAAL;AACEV,YAAM,mBAAN,EAA2BC,OAA3B;AACAyC,aAAOnD,KAAKU,OAAL,EAAcC,KAAd,CAAP;AACA,UAAI,CAACwC,IAAL,EAAW;AACT,eAAOtC,SAAP;AACD;;AAEDC,eAASN,MAAMe,WAAN,CAAkB4B,IAAlB,EAAwBlB,QAAxB,EAAT;AACAxB,YAAM,WAAN,EAAmBK,MAAnB;;AAEA,YAAMuC,WAAW7C,MAAM8C,WAAN,CAAkB9C,MAAM8B,cAAN,CAAqBnB,UAArB,CAAlB,CAAjB;AACA,YAAMoC,UAAUC,KAAKC,KAAL,CAAWvB,mBAAYmB,QAAvB,CAAhB;AACA5C,YAAM,aAAN,EAAqB4C,QAArB;AACA5C,YAAM,YAAN,EAAoB8C,OAApB;;AAEA,YAAMG,SAAUZ,CAAD,IAAO;AACpB,YAAIS,WAAW,CAAf,EAAkB;AAChB,iBAAOT,CAAP;AACD;;AAED,eAAOU,KAAKC,KAAL,CAAWX,IAAIO,QAAJ,GAAenB,gBAA1B,CAAP;AACD,OAND;;AAQA,YAAMyB,QAASb,CAAD,IAAO;AACnB,YAAIS,WAAW,CAAf,EAAkB;AAChB,iBAAOrB,mBAAYmB,QAAnB;AACD;;AAED,cAAMO,WAAWL,UAAUT,IAAIS,OAAd,GAAwB,CAAzC;AACA,eAAOK,WAAWP,QAAlB;AACD,OAPD;;AASA,UAAIQ,OAAO;AACTT,cAAM5C,MAAMsD,aAAN,CAAoBpD,QAAQH,OAAR,CAAgBsD,IAAhB,CAAqBT,IAAzC,CADG;AAETO,eAAOjD,QAAQH,OAAR,CAAgBsD,IAAhB,CAAqBF;AAFnB,OAAX;;AAKAlD,YAAM,aAAN,EAAqBC,OAArB;AACA,aAAO,CAAC,GAAGqD,MAAMjD,MAAN,EAAckD,IAAd,EAAJ,EACJ3B,GADI,CACES,CAAD,IAAO;AACX,YAAImB,YAAY;AACdb,gBAAM;AACJc,kBAAOL,KAAKT,IAAL,CAAUc,IAAV,YAA0BH,KAA3B,GACFF,KAAKT,IAAL,CAAUc,IADR,GAEF,CAACL,KAAKT,IAAN,CAHA;AAIJM,oBAAQA,OAAOZ,CAAP;AAJJ,WADQ;AAOda,iBAAOA,MAAMb,CAAN;AAPO,SAAhB;AASA,eAAOmB,SAAP;AACD,OAZI,EAaJ5B,GAbI,CAaC,CAAC4B,SAAD,EAAYE,GAAZ,KAAoB;AACxB1D,cAAM,kBAAN,EAA0B0D,GAA1B,EAA+BF,SAA/B;AACA,eAAO5D,OAAOG,MAAM8B,cAAN,CAAqBnB,UAArB,CAAP,EAAyC,EAAEZ,SAAS;AACzDsD,kBAAMI,SADmD;AAEzDnD,oBAAQuC;AAFiD,WAAX,EAAzC,EAGHjC,IAHG,CAAP;AAID,OAnBI,CAAP;;AAqBF,SAAK,OAAL;AACA,SAAK,QAAL;AACE+B,aAAOnD,KAAKU,OAAL,EAAcC,KAAd,CAAP;AACA,UAAIwC,QAAQtC,SAAZ,EAAuB;AACrB,eAAOA,SAAP;AACD;;AAEDJ,YAAM,SAAN,EAAiB0C,IAAjB;AACA,UAAIiB,aAAajB,KAAKjB,mBAAY,CAAjB,CAAjB;AACA,UAAI,CAACkC,UAAL,EAAiB;AACfA,qBAAa,CAAb;AACD;;AAED,UAAIA,aAAa,CAAb,IAAkB,CAAtB,EAAyB;AACvB;AACAtD,iBAASsD,aAAa,CAAtB;AACA3D,cAAM,oBAAN,EAA4BK,MAA5B;AACA,YAAIA,UAAU,CAAd,EAAiB;AACf,iBAAO,EAAP;AACD;;AAED,eAAOb,YAAYkB,UAAZ,EAAwB,EAAEZ,SAAS;AACxCsD,kBAAM,EAAET,MAAM1C,QAAQH,OAAR,CAAgBsD,IAAhB,CAAqBT,IAA7B,EAAmCO,OAAO,CAA1C,EADkC;AAExCU,gBAAI,EAAEjB,MAAM1C,QAAQH,OAAR,CAAgBsD,IAAhB,CAAqBT,IAA7B,EAAmCO,OAAO7C,SAAS,CAAnD;AAFoC,WAAX,EAAxB,EAGHM,IAHG,CAAP;AAKD,OAbD,MAaO;AACLN,iBAASN,MAAMe,WAAN,CAAkB4B,IAAlB,EAAwBmB,KAAxB,CAA8B,CAA9B,EAAiCC,GAAjC,CAAqC,CAArC,EAAwCtC,QAAxC,EAAT;AACAxB,cAAM,qBAAN,EAA6BK,MAA7B;;AAEA,eAAOb,YAAYkB,UAAZ,EAAwB,EAAEZ,SAAS;AACxCsD,kBAAM,EAAET,MAAM,CAAC1C,QAAQH,OAAR,CAAgBsD,IAAhB,CAAqBT,IAAtB,CAAR,EAAqCO,OAAO,CAA5C,EADkC;AAExC7C;AAFwC,WAAX,EAAxB,EAGHM,IAHG,CAAP;AAID;;AAEH,SAAK,QAAL;AACE,YAAM,EAAEmB,MAAF,KAAanB,IAAnB;;AAEA,YAAMoB,wBAAyBrB,WAAWsB,QAAZ,GAC1BtB,WAAWsB,QAAX,CAAoBD,qBADM,GAE1BrB,WAAWqB,qBAFf;;AAIA,YAAMG,YAAY,CAACJ,OAAOC,qBAAP,KAAiC,EAAlC,EAAsCG,SAAtC,IAAmD,EAArE;;AAEA,UAAIS,IAAJ;AACA,UAAI1C,QAAQH,OAAR,IAAmBM,SAAvB,EAAkC;AAChCuC,eAAO1C,QAAQH,OAAR,CAAgBsD,IAAhB,CAAqBT,IAA5B;AACD,OAFD,MAEO;AACLA,eAAO5C,MAAMsD,aAAN,CAAoBtD,MAAMe,WAAN,CAAkBvB,KAAKU,OAAL,EAAcC,KAAd,CAAlB,CAApB,CAAP;AACD;;AAED,YAAM6D,aAAahE,MAAMiE,oBAAN,CAA2B9B,SAA3B,EAAsCJ,MAAtC,EAA8Ca,IAA9C,CAAnB;;AAEA,aAAO,sBACL,EADK,EACD,GAAG,uBAAeoB,WAAWE,QAA1B,EACJrC,GADI,CACC,CAAC,CAACQ,EAAD,EAAKV,YAAL,CAAD,MAAyB;AAC7B,SAACA,aAAaS,IAAd,GAAqBvC,OACnBkC,OAAOM,EAAP,EAAW1B,UADQ,EACI,EAAEZ,SAAS4B,YAAX,EADJ,EAC+Bf,IAD/B;AADQ,OAAzB,CADD,CADF,CAAP;;AASF;AACEX,YAAM,oCAAN,EAA4CD,MAAMmB,cAAN,CAAqBR,UAArB,CAA5C;AACA,aAAON,SAAP;AA7HJ;AA+HD;;AAEM,SAAST,aAAT,CAAuBe,UAAvB,EAAmCT,OAAnC,EAA4CU,IAA5C,EAAkD;AACvD,MAAID,WAAWqB,qBAAf,EAAsC;AACpC;AACA,WAAO3B,SAAP;AACD;;AAED,QAAM,EAAE8D,WAAF,KAAkBvD,IAAxB;;AAEAX,QAAM,YAAN,EAAoBC,OAApB;AACAD,QAAM,uBAAN,EAA+BU,UAA/B;AACA,MAAI6C,OAAOW,YAAYxD,WAAW0B,EAAvB,KAA8B,EAAzC;AACApC,QAAM,eAAN,EAAuBuD,IAAvB;;AAEA,MAAIY,gBAAgBzD,WAAWsB,QAAX,CAAoBoC,OAAxC;AACA,MAAIC,kBAAkB3D,WAAWsB,QAAX,CAAoBsC,SAA1C;;AAEA,MAAIC,WAAWtE,QAAQH,OAAR,CAAgBsD,IAAhB,CAAqBT,IAApC;AACA,MAAI,CAACW,MAAMkB,OAAN,CAAcD,QAAd,CAAL,EAA8B;AAC5BA,eAAW,CAACA,QAAD,CAAX;AACD;;AAED,MAAIE,UAAU,EAAd;AACAzE,QAAM,YAAN,EAAoByE,OAApB;AACA,OAAK,IAAIC,GAAT,IAAgBnB,IAAhB,EAAsB;AACpB,QAAIoB,aAAa,EAAE,WAAWD,GAAb,EAAjB;AACA,QAAIE,eAAe;AACjB9E,eAAS;AACPsD,cAAM;AACJT,gBAAM,CAAC+B,GAAD,EAAM,GAAGH,QAAT,CADF;AAEJrB,iBAAO;AAFH,SADC;AAKPU,YAAI;AACFjB,gBAAM,CAAC+B,GAAD,EAAM,GAAGH,QAAT,CADJ;AAEFrB,iBAAO;AAFL;AALG;AADQ,KAAnB;AAYAlD,UAAM,eAAN,EAAuB2E,UAAvB;;AAEA;AACA,QAAIE,WAAWjF,OAAOuE,aAAP,EAAsBQ,UAAtB,EAAkChE,IAAlC,CAAf;AACAX,UAAM,aAAN,EAAqB6E,QAArB;AACA,QAAIA,YAAYzE,SAAhB,EAA2B;AACzBqE,cAAQI,SAASC,QAAT,EAAR,IACElF,OAAOyE,eAAP,EAAwBO,YAAxB,EAAsCjE,IAAtC,CADF;AAED;AACF;;AAED,SAAO8D,OAAP;AACD;;AAGc,SAAS7E,MAAT,CAAgBc,UAAhB,EAA4BT,OAA5B,EAAqCU,IAArC,EAA2C;AACxD,MAAIV,QAAQQ,OAAR,IAAmBL,SAAvB,EAAkC;AAChC,WAAOZ,YAAYkB,UAAZ,EAAwBT,OAAxB,EAAiCU,IAAjC,CAAP;AACD;;AAED,QAAMoE,aAAahF,MAAMmB,cAAN,CAAqBR,UAArB,CAAnB;AACA,MAAIX,MAAMiF,WAAN,CAAkBtE,UAAlB,CAAJ,EAAmC;AACjC,YAAQX,MAAMkF,aAAN,CAAoBvE,UAApB,CAAR;AACE,WAAK,QAAL;AACEV,cAAM,qCAAN,EAA6C+E,UAA7C;AACA,eAAOtF,sBAAsBiB,UAAtB,EAAkCT,OAAlC,EAA2CU,IAA3C,CAAP;AACF,WAAK,SAAL;AACEX,cAAM,sCAAN,EAA8C+E,UAA9C;AACA,eAAOrF,uBAAuBgB,UAAvB,EAAmCT,OAAnC,EAA4CU,IAA5C,CAAP;AACF;AACEX,cAAM,gCAAN,EAAwCD,MAAMmB,cAAN,CAAqBR,UAArB,CAAxC;AACA,eAAON,SAAP;AATJ;AAWD;;AAED,MAAIL,MAAMmF,SAAN,CAAgBxE,UAAhB,CAAJ,EAAiC;AAC/BV,UAAM,4BAAN,EAAoC+E,UAApC;AACA,WAAOpF,cAAce,UAAd,EAA0BT,OAA1B,EAAmCU,IAAnC,CAAP;AACD;;AAEDX,QAAM,0BAAN,EAAkC+E,UAAlC;AACA,SAAOvF,YAAYkB,UAAZ,EAAwBT,OAAxB,EAAiCU,IAAjC,CAAP;AACD", file: "index.js", sourceRoot: "/Users/gnidan/src/work/truffle/packages/truffle-debugger", sourcesContent: ["import debugModule from \"debug\";\nconst debug = debugModule(\"debugger:data:decode\");\n\nimport {BigNumber} from \"bignumber.js\";\n\nimport * as memory from \"./memory\";\nimport * as storage from \"./storage\";\nimport * as utils from \"./utils\";\nimport { WORD_SIZE } from \"./utils\";\n\nexport function read(pointer, state) {\n  if (pointer.stack != undefined && state.stack && pointer.stack < state.stack.length) {\n    return state.stack[pointer.stack];\n  } else if (pointer.storage != undefined && state.storage) {\n    return storage.readRange(state.storage, pointer.storage);\n  } else if (pointer.memory != undefined && state.memory) {\n    return memory.readBytes(state.memory, pointer.memory.start, pointer.memory.length);\n  } else if (pointer.literal != undefined) {\n    return pointer.literal;\n  }\n}\n\n\nexport function decodeValue(definition, pointer, info) {\n  const { state } = info;\n  debug(\n    \"decoding value, pointer: %o, typeClass: %s\",\n    pointer, utils.typeClass(definition)\n  );\n  let bytes = read(pointer, state);\n  if (bytes == undefined) {\n    debug(\"segfault, pointer %o, state: %O\", pointer, state);\n    return undefined;\n  }\n\n  switch (utils.typeClass(definition)) {\n    case \"bool\":\n      return !utils.toBigNumber(bytes).isZero();\n\n    case \"uint\":\n      return utils.toBigNumber(bytes);\n\n    case \"int\":\n      return utils.toSignedBigNumber(bytes);\n\n    case \"address\":\n      return utils.toHexString(bytes, true);\n\n    case \"bytes\":\n      debug(\"typeIdentifier %s %o\", utils.typeIdentifier(definition), bytes);\n      // HACK bytes may be getting passed in as a literal hexstring\n      if (typeof bytes == \"string\") {\n        return bytes;\n      }\n      let length = utils.specifiedSize(definition);\n      return utils.toHexString(bytes, length);\n\n    case \"string\":\n    case \"stringliteral\":\n      debug(\"typeIdentifier %s %o\", utils.typeIdentifier(definition), bytes);\n      if (typeof bytes == \"string\") {\n        return bytes;\n      }\n      return String.fromCharCode.apply(undefined, bytes);\n\n    case \"rational\":\n      debug(\"typeIdentifier %s %o\", utils.typeIdentifier(definition), bytes);\n      return utils.toBigNumber(bytes);\n\n    default:\n      debug(\"Unknown value type: %s\", utils.typeIdentifier(definition));\n      return undefined;\n  }\n}\n\nexport function decodeMemoryReference(definition, pointer, info) {\n  const { state } = info\n  debug(\"pointer %o\", pointer);\n  let rawValue = read(pointer, state)\n  if (rawValue == undefined) {\n    return undefined;\n  }\n\n  rawValue = utils.toBigNumber(rawValue).toNumber();\n\n  var bytes;\n  switch (utils.typeClass(definition)) {\n\n    case \"bytes\":\n    case \"string\":\n      bytes = read({\n        memory: { start: rawValue, length: WORD_SIZE}\n      }, state); // bytes contain length\n\n      let childPointer = {\n        memory: { start: rawValue + WORD_SIZE, length: bytes }\n      }\n\n      return decodeValue(definition, childPointer, info);\n\n    case \"array\":\n      bytes = utils.toBigNumber(read({\n        memory: { start: rawValue, length: WORD_SIZE },\n      }, state)).toNumber();  // bytes contain array length\n\n      bytes = read({ memory: {\n        start: rawValue + WORD_SIZE, length: bytes * WORD_SIZE\n      }}, state); // now bytes contain items\n\n      return memory.chunk(bytes, WORD_SIZE)\n        .map(\n          (chunk) => decode(utils.baseDefinition(definition), {\n            literal: chunk\n          }, info)\n        )\n\n    case \"struct\":\n      const { scopes } = info;\n\n      // Declaration reference usually appears in `typeName`, but for\n      // { nodeType: \"FunctionCall\", kind: \"structConstructorCall\" }, this\n      // reference appears to live in `expression`\n      const referencedDeclaration = (definition.typeName)\n        ? definition.typeName.referencedDeclaration\n        : definition.expression.referencedDeclaration;\n\n      let { variables } = (scopes[referencedDeclaration] || {});\n\n      return Object.assign(\n        {}, ...(variables || [])\n          .map(\n            ({name, id}, i) => {\n              let memberDefinition = scopes[id].definition;\n              let memberPointer = {\n                memory: { start: rawValue + i * WORD_SIZE, length: WORD_SIZE }\n              };\n              // let memberPointer = memory.read(state.memory, pointer + i * WORD_SIZE);\n\n              // HACK\n              memberDefinition = {\n                ...memberDefinition,\n\n                typeDescriptions: {\n                  ...memberDefinition.typeDescriptions,\n\n                  typeIdentifier:\n                    memberDefinition.typeDescriptions.typeIdentifier\n                      .replace(/_storage_/g, \"_memory_\")\n                }\n              };\n\n              return {\n                [name]: decode(\n                  memberDefinition, memberPointer, info\n                )\n              };\n            }\n          )\n      );\n\n\n    default:\n      debug(\"Unknown memory reference type: %s\", utils.typeIdentifier(definition));\n      return undefined;\n\n  }\n\n}\n\nexport function decodeStorageReference(definition, pointer, info) {\n  var data;\n  var bytes;\n  var length;\n  var slot;\n\n  const { state } = info;\n\n  switch (utils.typeClass(definition)) {\n    case \"array\":\n      debug(\"storage array! %o\", pointer);\n      data = read(pointer, state);\n      if (!data) {\n        return undefined;\n      }\n\n      length = utils.toBigNumber(data).toNumber();\n      debug(\"length %o\", length);\n\n      const baseSize = utils.storageSize(utils.baseDefinition(definition));\n      const perWord = Math.floor(WORD_SIZE / baseSize);\n      debug(\"baseSize %o\", baseSize);\n      debug(\"perWord %d\", perWord);\n\n      const offset = (i) => {\n        if (perWord == 1) {\n          return i;\n        }\n\n        return Math.floor(i * baseSize / WORD_SIZE);\n      }\n\n      const index = (i) => {\n        if (perWord == 1) {\n          return WORD_SIZE - baseSize;\n        }\n\n        const position = perWord - i % perWord - 1;\n        return position * baseSize;\n      }\n\n      let from = {\n        slot: utils.normalizeSlot(pointer.storage.from.slot),\n        index: pointer.storage.from.index\n      };\n\n      debug(\"pointer: %o\", pointer);\n      return [...Array(length).keys()]\n        .map( (i) => {\n          let childFrom = {\n            slot: {\n              path: (from.slot.path instanceof Array)\n                ? from.slot.path\n                : [from.slot],\n              offset: offset(i),\n            },\n            index: index(i)\n          };\n          return childFrom;\n        })\n        .map( (childFrom, idx) => {\n          debug(\"childFrom %d, %o\", idx, childFrom);\n          return decode(utils.baseDefinition(definition), { storage: {\n            from: childFrom,\n            length: baseSize\n          }}, info);\n        });\n\n    case \"bytes\":\n    case \"string\":\n      data = read(pointer, state);\n      if (data == undefined) {\n        return undefined;\n      }\n\n      debug(\"data %O\", data);\n      let lengthByte = data[WORD_SIZE - 1];\n      if (!lengthByte) {\n        lengthByte = 0;\n      }\n\n      if (lengthByte % 2 == 0) {\n        // string lives in word, length is last byte / 2\n        length = lengthByte / 2;\n        debug(\"in-word; length %o\", length);\n        if (length == 0) {\n          return \"\";\n        }\n\n        return decodeValue(definition, { storage: {\n          from: { slot: pointer.storage.from.slot, index: 0 },\n          to: { slot: pointer.storage.from.slot, index: length - 1}\n        }}, info);\n\n      } else {\n        length = utils.toBigNumber(data).minus(1).div(2).toNumber();\n        debug(\"new-word, length %o\", length);\n\n        return decodeValue(definition, { storage: {\n          from: { slot: [pointer.storage.from.slot], index: 0 },\n          length\n        }}, info);\n      }\n\n    case \"struct\":\n      const { scopes } = info;\n\n      const referencedDeclaration = (definition.typeName)\n        ? definition.typeName.referencedDeclaration\n        : definition.referencedDeclaration;\n\n      const variables = (scopes[referencedDeclaration] || {}).variables || [];\n\n      let slot;\n      if (pointer.storage != undefined) {\n        slot = pointer.storage.from.slot;\n      } else {\n        slot = utils.normalizeSlot(utils.toBigNumber(read(pointer, state)));\n      }\n\n      const allocation = utils.allocateDeclarations(variables, scopes, slot);\n\n      return Object.assign(\n        {}, ...Object.entries(allocation.children)\n          .map( ([id, childPointer]) => ({\n            [childPointer.name]: decode(\n              scopes[id].definition, { storage: childPointer }, info\n            )\n          }))\n      );\n\n    default:\n      debug(\"Unknown storage reference type: %s\", utils.typeIdentifier(definition));\n      return undefined;\n  }\n}\n\nexport function decodeMapping(definition, pointer, info) {\n  if (definition.referencedDeclaration) {\n    // attempting to decode reference to mapping, thus missing valid pointer\n    return undefined;\n  }\n\n  const { mappingKeys } = info;\n\n  debug(\"mapping %O\", pointer);\n  debug(\"mapping definition %O\", definition);\n  let keys = mappingKeys[definition.id] || [];\n  debug(\"known keys %o\", keys);\n\n  let keyDefinition = definition.typeName.keyType;\n  let valueDefinition = definition.typeName.valueType;\n\n  let baseSlot = pointer.storage.from.slot;\n  if (!Array.isArray(baseSlot)) {\n    baseSlot = [baseSlot];\n  }\n\n  let mapping = {};\n  debug(\"mapping %O\", mapping);\n  for (let key of keys) {\n    let keyPointer = { \"literal\": key };\n    let valuePointer = {\n      storage: {\n        from: {\n          slot: [key, ...baseSlot],\n          index: 0\n        },\n        to: {\n          slot: [key, ...baseSlot],\n          index: 31\n        }\n      }\n    };\n    debug(\"keyPointer %o\", keyPointer);\n\n    // NOTE mapping keys are potentially lossy because JS only likes strings\n    let keyValue = decode(keyDefinition, keyPointer, info);\n    debug(\"keyValue %o\", keyValue);\n    if (keyValue != undefined) {\n      mapping[keyValue.toString()] =\n        decode(valueDefinition, valuePointer, info);\n    }\n  }\n\n  return mapping;\n}\n\n\nexport default function decode(definition, pointer, info) {\n  if (pointer.literal != undefined) {\n    return decodeValue(definition, pointer, info);\n  }\n\n  const identifier = utils.typeIdentifier(definition);\n  if (utils.isReference(definition)) {\n    switch (utils.referenceType(definition)) {\n      case \"memory\":\n        debug(\"decoding memory reference, type: %s\", identifier);\n        return decodeMemoryReference(definition, pointer, info);\n      case \"storage\":\n        debug(\"decoding storage reference, type: %s\", identifier);\n        return decodeStorageReference(definition, pointer, info);\n      default:\n        debug(\"Unknown reference category: %s\", utils.typeIdentifier(definition));\n        return undefined;\n    }\n  }\n\n  if (utils.isMapping(definition)) {\n    debug(\"decoding mapping, type: %s\", identifier);\n    return decodeMapping(definition, pointer, info);\n  }\n\n  debug(\"decoding value, type: %s\", identifier);\n  return decodeValue(definition, pointer, info);\n}\n"] }, _coverageSchema: "332fd63041d2c1bcb487cc26dd0d5f7d97098a6c" },
      coverage = global[gcv] || (global[gcv] = {});if (coverage[path] && coverage[path].hash === hash) {
    return coverage[path];
  }coverageData.hash = hash;return coverage[path] = coverageData;
}();cov_2h0rawf57g.s[0]++;Object.defineProperty(exports, "__esModule", { value: true });var _entries = (cov_2h0rawf57g.s[1]++, __webpack_require__(1));var _entries2 = (cov_2h0rawf57g.s[2]++, _interopRequireDefault(_entries));var _extends2 = (cov_2h0rawf57g.s[3]++, __webpack_require__(2));var _extends3 = (cov_2h0rawf57g.s[4]++, _interopRequireDefault(_extends2));var _assign = (cov_2h0rawf57g.s[5]++, __webpack_require__(3));var _assign2 = (cov_2h0rawf57g.s[6]++, _interopRequireDefault(_assign));cov_2h0rawf57g.s[7]++;exports.read = read;cov_2h0rawf57g.s[8]++;exports.decodeValue = decodeValue;cov_2h0rawf57g.s[9]++;exports.decodeMemoryReference = decodeMemoryReference;cov_2h0rawf57g.s[10]++;exports.decodeStorageReference = decodeStorageReference;cov_2h0rawf57g.s[11]++;exports.decodeMapping = decodeMapping;cov_2h0rawf57g.s[12]++;exports.default = decode;var _debug = (cov_2h0rawf57g.s[13]++, __webpack_require__(0));var _debug2 = (cov_2h0rawf57g.s[14]++, _interopRequireDefault(_debug));var _bignumber = (cov_2h0rawf57g.s[15]++, __webpack_require__(20));var _memory = (cov_2h0rawf57g.s[16]++, __webpack_require__(63));var memory = (cov_2h0rawf57g.s[17]++, _interopRequireWildcard(_memory));var _storage = (cov_2h0rawf57g.s[18]++, __webpack_require__(64));var storage = (cov_2h0rawf57g.s[19]++, _interopRequireWildcard(_storage));var _utils = (cov_2h0rawf57g.s[20]++, __webpack_require__(11));var utils = (cov_2h0rawf57g.s[21]++, _interopRequireWildcard(_utils));function _interopRequireWildcard(obj) {
  cov_2h0rawf57g.f[0]++;cov_2h0rawf57g.s[22]++;if ((cov_2h0rawf57g.b[1][0]++, obj) && (cov_2h0rawf57g.b[1][1]++, obj.__esModule)) {
    cov_2h0rawf57g.b[0][0]++;cov_2h0rawf57g.s[23]++;return obj;
  } else {
    cov_2h0rawf57g.b[0][1]++;var newObj = (cov_2h0rawf57g.s[24]++, {});cov_2h0rawf57g.s[25]++;if (obj != null) {
      cov_2h0rawf57g.b[2][0]++;cov_2h0rawf57g.s[26]++;for (var key in obj) {
        cov_2h0rawf57g.s[27]++;if (Object.prototype.hasOwnProperty.call(obj, key)) {
          cov_2h0rawf57g.b[3][0]++;cov_2h0rawf57g.s[28]++;newObj[key] = obj[key];
        } else {
          cov_2h0rawf57g.b[3][1]++;
        }
      }
    } else {
      cov_2h0rawf57g.b[2][1]++;
    }cov_2h0rawf57g.s[29]++;newObj.default = obj;cov_2h0rawf57g.s[30]++;return newObj;
  }
}function _interopRequireDefault(obj) {
  cov_2h0rawf57g.f[1]++;cov_2h0rawf57g.s[31]++;return (cov_2h0rawf57g.b[5][0]++, obj) && (cov_2h0rawf57g.b[5][1]++, obj.__esModule) ? (cov_2h0rawf57g.b[4][0]++, obj) : (cov_2h0rawf57g.b[4][1]++, { default: obj });
}const debug = (cov_2h0rawf57g.s[32]++, (0, _debug2.default)("debugger:data:decode"));function read(pointer, state) {
  cov_2h0rawf57g.f[2]++;cov_2h0rawf57g.s[33]++;if ((cov_2h0rawf57g.b[7][0]++, pointer.stack != undefined) && (cov_2h0rawf57g.b[7][1]++, state.stack) && (cov_2h0rawf57g.b[7][2]++, pointer.stack < state.stack.length)) {
    cov_2h0rawf57g.b[6][0]++;cov_2h0rawf57g.s[34]++;return state.stack[pointer.stack];
  } else {
    cov_2h0rawf57g.b[6][1]++;cov_2h0rawf57g.s[35]++;if ((cov_2h0rawf57g.b[9][0]++, pointer.storage != undefined) && (cov_2h0rawf57g.b[9][1]++, state.storage)) {
      cov_2h0rawf57g.b[8][0]++;cov_2h0rawf57g.s[36]++;return storage.readRange(state.storage, pointer.storage);
    } else {
      cov_2h0rawf57g.b[8][1]++;cov_2h0rawf57g.s[37]++;if ((cov_2h0rawf57g.b[11][0]++, pointer.memory != undefined) && (cov_2h0rawf57g.b[11][1]++, state.memory)) {
        cov_2h0rawf57g.b[10][0]++;cov_2h0rawf57g.s[38]++;return memory.readBytes(state.memory, pointer.memory.start, pointer.memory.length);
      } else {
        cov_2h0rawf57g.b[10][1]++;cov_2h0rawf57g.s[39]++;if (pointer.literal != undefined) {
          cov_2h0rawf57g.b[12][0]++;cov_2h0rawf57g.s[40]++;return pointer.literal;
        } else {
          cov_2h0rawf57g.b[12][1]++;
        }
      }
    }
  }
}function decodeValue(definition, pointer, info) {
  cov_2h0rawf57g.f[3]++;const { state } = (cov_2h0rawf57g.s[41]++, info);cov_2h0rawf57g.s[42]++;debug("decoding value, pointer: %o, typeClass: %s", pointer, utils.typeClass(definition));let bytes = (cov_2h0rawf57g.s[43]++, read(pointer, state));cov_2h0rawf57g.s[44]++;if (bytes == undefined) {
    cov_2h0rawf57g.b[13][0]++;cov_2h0rawf57g.s[45]++;debug("segfault, pointer %o, state: %O", pointer, state);cov_2h0rawf57g.s[46]++;return undefined;
  } else {
    cov_2h0rawf57g.b[13][1]++;
  }cov_2h0rawf57g.s[47]++;switch (utils.typeClass(definition)) {case "bool":
      cov_2h0rawf57g.b[14][0]++;cov_2h0rawf57g.s[48]++;return !utils.toBigNumber(bytes).isZero();case "uint":
      cov_2h0rawf57g.b[14][1]++;cov_2h0rawf57g.s[49]++;return utils.toBigNumber(bytes);case "int":
      cov_2h0rawf57g.b[14][2]++;cov_2h0rawf57g.s[50]++;return utils.toSignedBigNumber(bytes);case "address":
      cov_2h0rawf57g.b[14][3]++;cov_2h0rawf57g.s[51]++;return utils.toHexString(bytes, true);case "bytes":
      cov_2h0rawf57g.b[14][4]++;cov_2h0rawf57g.s[52]++;debug("typeIdentifier %s %o", utils.typeIdentifier(definition), bytes);cov_2h0rawf57g.s[53]++;if (typeof bytes == "string") {
        cov_2h0rawf57g.b[15][0]++;cov_2h0rawf57g.s[54]++;return bytes;
      } else {
        cov_2h0rawf57g.b[15][1]++;
      }let length = (cov_2h0rawf57g.s[55]++, utils.specifiedSize(definition));cov_2h0rawf57g.s[56]++;return utils.toHexString(bytes, length);case "string":
      cov_2h0rawf57g.b[14][5]++;case "stringliteral":
      cov_2h0rawf57g.b[14][6]++;cov_2h0rawf57g.s[57]++;debug("typeIdentifier %s %o", utils.typeIdentifier(definition), bytes);cov_2h0rawf57g.s[58]++;if (typeof bytes == "string") {
        cov_2h0rawf57g.b[16][0]++;cov_2h0rawf57g.s[59]++;return bytes;
      } else {
        cov_2h0rawf57g.b[16][1]++;
      }cov_2h0rawf57g.s[60]++;return String.fromCharCode.apply(undefined, bytes);case "rational":
      cov_2h0rawf57g.b[14][7]++;cov_2h0rawf57g.s[61]++;debug("typeIdentifier %s %o", utils.typeIdentifier(definition), bytes);cov_2h0rawf57g.s[62]++;return utils.toBigNumber(bytes);default:
      cov_2h0rawf57g.b[14][8]++;cov_2h0rawf57g.s[63]++;debug("Unknown value type: %s", utils.typeIdentifier(definition));cov_2h0rawf57g.s[64]++;return undefined;}
}function decodeMemoryReference(definition, pointer, info) {
  cov_2h0rawf57g.f[4]++;const { state } = (cov_2h0rawf57g.s[65]++, info);cov_2h0rawf57g.s[66]++;debug("pointer %o", pointer);let rawValue = (cov_2h0rawf57g.s[67]++, read(pointer, state));cov_2h0rawf57g.s[68]++;if (rawValue == undefined) {
    cov_2h0rawf57g.b[17][0]++;cov_2h0rawf57g.s[69]++;return undefined;
  } else {
    cov_2h0rawf57g.b[17][1]++;
  }cov_2h0rawf57g.s[70]++;rawValue = utils.toBigNumber(rawValue).toNumber();var bytes;cov_2h0rawf57g.s[71]++;switch (utils.typeClass(definition)) {case "bytes":
      cov_2h0rawf57g.b[18][0]++;case "string":
      cov_2h0rawf57g.b[18][1]++;cov_2h0rawf57g.s[72]++;bytes = read({ memory: { start: rawValue, length: _utils.WORD_SIZE } }, state);let childPointer = (cov_2h0rawf57g.s[73]++, { memory: { start: rawValue + _utils.WORD_SIZE, length: bytes } });cov_2h0rawf57g.s[74]++;return decodeValue(definition, childPointer, info);case "array":
      cov_2h0rawf57g.b[18][2]++;cov_2h0rawf57g.s[75]++;bytes = utils.toBigNumber(read({ memory: { start: rawValue, length: _utils.WORD_SIZE } }, state)).toNumber();cov_2h0rawf57g.s[76]++;bytes = read({ memory: { start: rawValue + _utils.WORD_SIZE, length: bytes * _utils.WORD_SIZE } }, state);cov_2h0rawf57g.s[77]++;return memory.chunk(bytes, _utils.WORD_SIZE).map(chunk => {
        cov_2h0rawf57g.f[5]++;cov_2h0rawf57g.s[78]++;return decode(utils.baseDefinition(definition), { literal: chunk }, info);
      });case "struct":
      cov_2h0rawf57g.b[18][3]++;const { scopes } = (cov_2h0rawf57g.s[79]++, info);const referencedDeclaration = (cov_2h0rawf57g.s[80]++, definition.typeName ? (cov_2h0rawf57g.b[19][0]++, definition.typeName.referencedDeclaration) : (cov_2h0rawf57g.b[19][1]++, definition.expression.referencedDeclaration));let { variables } = (cov_2h0rawf57g.s[81]++, (cov_2h0rawf57g.b[20][0]++, scopes[referencedDeclaration]) || (cov_2h0rawf57g.b[20][1]++, {}));cov_2h0rawf57g.s[82]++;return (0, _assign2.default)({}, ...((cov_2h0rawf57g.b[21][0]++, variables) || (cov_2h0rawf57g.b[21][1]++, [])).map(({ name, id }, i) => {
        cov_2h0rawf57g.f[6]++;let memberDefinition = (cov_2h0rawf57g.s[83]++, scopes[id].definition);let memberPointer = (cov_2h0rawf57g.s[84]++, { memory: { start: rawValue + i * _utils.WORD_SIZE, length: _utils.WORD_SIZE } });cov_2h0rawf57g.s[85]++;memberDefinition = (0, _extends3.default)({}, memberDefinition, { typeDescriptions: (0, _extends3.default)({}, memberDefinition.typeDescriptions, { typeIdentifier: memberDefinition.typeDescriptions.typeIdentifier.replace(/_storage_/g, "_memory_") }) });cov_2h0rawf57g.s[86]++;return { [name]: decode(memberDefinition, memberPointer, info) };
      }));default:
      cov_2h0rawf57g.b[18][4]++;cov_2h0rawf57g.s[87]++;debug("Unknown memory reference type: %s", utils.typeIdentifier(definition));cov_2h0rawf57g.s[88]++;return undefined;}
}function decodeStorageReference(definition, pointer, info) {
  cov_2h0rawf57g.f[7]++;var data;var bytes;var length;var slot;const { state } = (cov_2h0rawf57g.s[89]++, info);cov_2h0rawf57g.s[90]++;switch (utils.typeClass(definition)) {case "array":
      cov_2h0rawf57g.b[22][0]++;cov_2h0rawf57g.s[91]++;debug("storage array! %o", pointer);cov_2h0rawf57g.s[92]++;data = read(pointer, state);cov_2h0rawf57g.s[93]++;if (!data) {
        cov_2h0rawf57g.b[23][0]++;cov_2h0rawf57g.s[94]++;return undefined;
      } else {
        cov_2h0rawf57g.b[23][1]++;
      }cov_2h0rawf57g.s[95]++;length = utils.toBigNumber(data).toNumber();cov_2h0rawf57g.s[96]++;debug("length %o", length);const baseSize = (cov_2h0rawf57g.s[97]++, utils.storageSize(utils.baseDefinition(definition)));const perWord = (cov_2h0rawf57g.s[98]++, Math.floor(_utils.WORD_SIZE / baseSize));cov_2h0rawf57g.s[99]++;debug("baseSize %o", baseSize);cov_2h0rawf57g.s[100]++;debug("perWord %d", perWord);const offset = (cov_2h0rawf57g.s[101]++, i => {
        cov_2h0rawf57g.f[8]++;cov_2h0rawf57g.s[102]++;if (perWord == 1) {
          cov_2h0rawf57g.b[24][0]++;cov_2h0rawf57g.s[103]++;return i;
        } else {
          cov_2h0rawf57g.b[24][1]++;
        }cov_2h0rawf57g.s[104]++;return Math.floor(i * baseSize / _utils.WORD_SIZE);
      });const index = (cov_2h0rawf57g.s[105]++, i => {
        cov_2h0rawf57g.f[9]++;cov_2h0rawf57g.s[106]++;if (perWord == 1) {
          cov_2h0rawf57g.b[25][0]++;cov_2h0rawf57g.s[107]++;return _utils.WORD_SIZE - baseSize;
        } else {
          cov_2h0rawf57g.b[25][1]++;
        }const position = (cov_2h0rawf57g.s[108]++, perWord - i % perWord - 1);cov_2h0rawf57g.s[109]++;return position * baseSize;
      });let from = (cov_2h0rawf57g.s[110]++, { slot: utils.normalizeSlot(pointer.storage.from.slot), index: pointer.storage.from.index });cov_2h0rawf57g.s[111]++;debug("pointer: %o", pointer);cov_2h0rawf57g.s[112]++;return [...Array(length).keys()].map(i => {
        cov_2h0rawf57g.f[10]++;let childFrom = (cov_2h0rawf57g.s[113]++, { slot: { path: from.slot.path instanceof Array ? (cov_2h0rawf57g.b[26][0]++, from.slot.path) : (cov_2h0rawf57g.b[26][1]++, [from.slot]), offset: offset(i) }, index: index(i) });cov_2h0rawf57g.s[114]++;return childFrom;
      }).map((childFrom, idx) => {
        cov_2h0rawf57g.f[11]++;cov_2h0rawf57g.s[115]++;debug("childFrom %d, %o", idx, childFrom);cov_2h0rawf57g.s[116]++;return decode(utils.baseDefinition(definition), { storage: { from: childFrom, length: baseSize } }, info);
      });case "bytes":
      cov_2h0rawf57g.b[22][1]++;case "string":
      cov_2h0rawf57g.b[22][2]++;cov_2h0rawf57g.s[117]++;data = read(pointer, state);cov_2h0rawf57g.s[118]++;if (data == undefined) {
        cov_2h0rawf57g.b[27][0]++;cov_2h0rawf57g.s[119]++;return undefined;
      } else {
        cov_2h0rawf57g.b[27][1]++;
      }cov_2h0rawf57g.s[120]++;debug("data %O", data);let lengthByte = (cov_2h0rawf57g.s[121]++, data[_utils.WORD_SIZE - 1]);cov_2h0rawf57g.s[122]++;if (!lengthByte) {
        cov_2h0rawf57g.b[28][0]++;cov_2h0rawf57g.s[123]++;lengthByte = 0;
      } else {
        cov_2h0rawf57g.b[28][1]++;
      }cov_2h0rawf57g.s[124]++;if (lengthByte % 2 == 0) {
        cov_2h0rawf57g.b[29][0]++;cov_2h0rawf57g.s[125]++;length = lengthByte / 2;cov_2h0rawf57g.s[126]++;debug("in-word; length %o", length);cov_2h0rawf57g.s[127]++;if (length == 0) {
          cov_2h0rawf57g.b[30][0]++;cov_2h0rawf57g.s[128]++;return "";
        } else {
          cov_2h0rawf57g.b[30][1]++;
        }cov_2h0rawf57g.s[129]++;return decodeValue(definition, { storage: { from: { slot: pointer.storage.from.slot, index: 0 }, to: { slot: pointer.storage.from.slot, index: length - 1 } } }, info);
      } else {
        cov_2h0rawf57g.b[29][1]++;cov_2h0rawf57g.s[130]++;length = utils.toBigNumber(data).minus(1).div(2).toNumber();cov_2h0rawf57g.s[131]++;debug("new-word, length %o", length);cov_2h0rawf57g.s[132]++;return decodeValue(definition, { storage: { from: { slot: [pointer.storage.from.slot], index: 0 }, length } }, info);
      }case "struct":
      cov_2h0rawf57g.b[22][3]++;const { scopes } = (cov_2h0rawf57g.s[133]++, info);const referencedDeclaration = (cov_2h0rawf57g.s[134]++, definition.typeName ? (cov_2h0rawf57g.b[31][0]++, definition.typeName.referencedDeclaration) : (cov_2h0rawf57g.b[31][1]++, definition.referencedDeclaration));const variables = (cov_2h0rawf57g.s[135]++, (cov_2h0rawf57g.b[32][0]++, ((cov_2h0rawf57g.b[33][0]++, scopes[referencedDeclaration]) || (cov_2h0rawf57g.b[33][1]++, {})).variables) || (cov_2h0rawf57g.b[32][1]++, []));let slot;cov_2h0rawf57g.s[136]++;if (pointer.storage != undefined) {
        cov_2h0rawf57g.b[34][0]++;cov_2h0rawf57g.s[137]++;slot = pointer.storage.from.slot;
      } else {
        cov_2h0rawf57g.b[34][1]++;cov_2h0rawf57g.s[138]++;slot = utils.normalizeSlot(utils.toBigNumber(read(pointer, state)));
      }const allocation = (cov_2h0rawf57g.s[139]++, utils.allocateDeclarations(variables, scopes, slot));cov_2h0rawf57g.s[140]++;return (0, _assign2.default)({}, ...(0, _entries2.default)(allocation.children).map(([id, childPointer]) => {
        cov_2h0rawf57g.f[12]++;cov_2h0rawf57g.s[141]++;return { [childPointer.name]: decode(scopes[id].definition, { storage: childPointer }, info) };
      }));default:
      cov_2h0rawf57g.b[22][4]++;cov_2h0rawf57g.s[142]++;debug("Unknown storage reference type: %s", utils.typeIdentifier(definition));cov_2h0rawf57g.s[143]++;return undefined;}
}function decodeMapping(definition, pointer, info) {
  cov_2h0rawf57g.f[13]++;cov_2h0rawf57g.s[144]++;if (definition.referencedDeclaration) {
    cov_2h0rawf57g.b[35][0]++;cov_2h0rawf57g.s[145]++;return undefined;
  } else {
    cov_2h0rawf57g.b[35][1]++;
  }const { mappingKeys } = (cov_2h0rawf57g.s[146]++, info);cov_2h0rawf57g.s[147]++;debug("mapping %O", pointer);cov_2h0rawf57g.s[148]++;debug("mapping definition %O", definition);let keys = (cov_2h0rawf57g.s[149]++, (cov_2h0rawf57g.b[36][0]++, mappingKeys[definition.id]) || (cov_2h0rawf57g.b[36][1]++, []));cov_2h0rawf57g.s[150]++;debug("known keys %o", keys);let keyDefinition = (cov_2h0rawf57g.s[151]++, definition.typeName.keyType);let valueDefinition = (cov_2h0rawf57g.s[152]++, definition.typeName.valueType);let baseSlot = (cov_2h0rawf57g.s[153]++, pointer.storage.from.slot);cov_2h0rawf57g.s[154]++;if (!Array.isArray(baseSlot)) {
    cov_2h0rawf57g.b[37][0]++;cov_2h0rawf57g.s[155]++;baseSlot = [baseSlot];
  } else {
    cov_2h0rawf57g.b[37][1]++;
  }let mapping = (cov_2h0rawf57g.s[156]++, {});cov_2h0rawf57g.s[157]++;debug("mapping %O", mapping);cov_2h0rawf57g.s[158]++;for (let key of keys) {
    let keyPointer = (cov_2h0rawf57g.s[159]++, { "literal": key });let valuePointer = (cov_2h0rawf57g.s[160]++, { storage: { from: { slot: [key, ...baseSlot], index: 0 }, to: { slot: [key, ...baseSlot], index: 31 } } });cov_2h0rawf57g.s[161]++;debug("keyPointer %o", keyPointer);let keyValue = (cov_2h0rawf57g.s[162]++, decode(keyDefinition, keyPointer, info));cov_2h0rawf57g.s[163]++;debug("keyValue %o", keyValue);cov_2h0rawf57g.s[164]++;if (keyValue != undefined) {
      cov_2h0rawf57g.b[38][0]++;cov_2h0rawf57g.s[165]++;mapping[keyValue.toString()] = decode(valueDefinition, valuePointer, info);
    } else {
      cov_2h0rawf57g.b[38][1]++;
    }
  }cov_2h0rawf57g.s[166]++;return mapping;
}function decode(definition, pointer, info) {
  cov_2h0rawf57g.f[14]++;cov_2h0rawf57g.s[167]++;if (pointer.literal != undefined) {
    cov_2h0rawf57g.b[39][0]++;cov_2h0rawf57g.s[168]++;return decodeValue(definition, pointer, info);
  } else {
    cov_2h0rawf57g.b[39][1]++;
  }const identifier = (cov_2h0rawf57g.s[169]++, utils.typeIdentifier(definition));cov_2h0rawf57g.s[170]++;if (utils.isReference(definition)) {
    cov_2h0rawf57g.b[40][0]++;cov_2h0rawf57g.s[171]++;switch (utils.referenceType(definition)) {case "memory":
        cov_2h0rawf57g.b[41][0]++;cov_2h0rawf57g.s[172]++;debug("decoding memory reference, type: %s", identifier);cov_2h0rawf57g.s[173]++;return decodeMemoryReference(definition, pointer, info);case "storage":
        cov_2h0rawf57g.b[41][1]++;cov_2h0rawf57g.s[174]++;debug("decoding storage reference, type: %s", identifier);cov_2h0rawf57g.s[175]++;return decodeStorageReference(definition, pointer, info);default:
        cov_2h0rawf57g.b[41][2]++;cov_2h0rawf57g.s[176]++;debug("Unknown reference category: %s", utils.typeIdentifier(definition));cov_2h0rawf57g.s[177]++;return undefined;}
  } else {
    cov_2h0rawf57g.b[40][1]++;
  }cov_2h0rawf57g.s[178]++;if (utils.isMapping(definition)) {
    cov_2h0rawf57g.b[42][0]++;cov_2h0rawf57g.s[179]++;debug("decoding mapping, type: %s", identifier);cov_2h0rawf57g.s[180]++;return decodeMapping(definition, pointer, info);
  } else {
    cov_2h0rawf57g.b[42][1]++;
  }cov_2h0rawf57g.s[181]++;debug("decoding value, type: %s", identifier);cov_2h0rawf57g.s[182]++;return decodeValue(definition, pointer, info);
}

/***/ }),
/* 63 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var cov_2qvig2sh12 = function () {
  var path = "/Users/gnidan/src/work/truffle/packages/truffle-debugger/lib/data/decode/memory.js",
      hash = "adbfefaca980df26f25dae427e514d86983594f6",
      Function = function () {}.constructor,
      global = new Function('return this')(),
      gcv = "__coverage__",
      coverageData = { path: "/Users/gnidan/src/work/truffle/packages/truffle-debugger/lib/data/decode/memory.js", statementMap: { "0": { start: { line: 3, column: 0 }, end: { line: 5, column: 3 } }, "1": { start: { line: 6, column: 0 }, end: { line: 6, column: 20 } }, "2": { start: { line: 7, column: 0 }, end: { line: 7, column: 30 } }, "3": { start: { line: 8, column: 0 }, end: { line: 8, column: 22 } }, "4": { start: { line: 10, column: 13 }, end: { line: 10, column: 29 } }, "5": { start: { line: 12, column: 14 }, end: { line: 12, column: 44 } }, "6": { start: { line: 14, column: 17 }, end: { line: 14, column: 40 } }, "7": { start: { line: 16, column: 13 }, end: { line: 16, column: 31 } }, "8": { start: { line: 18, column: 12 }, end: { line: 18, column: 43 } }, "9": { start: { line: 20, column: 40 }, end: { line: 20, column: 267 } }, "10": { start: { line: 20, column: 69 }, end: { line: 20, column: 80 } }, "11": { start: { line: 20, column: 103 }, end: { line: 20, column: 105 } }, "12": { start: { line: 20, column: 107 }, end: { line: 20, column: 228 } }, "13": { start: { line: 20, column: 126 }, end: { line: 20, column: 226 } }, "14": { start: { line: 20, column: 149 }, end: { line: 20, column: 224 } }, "15": { start: { line: 20, column: 201 }, end: { line: 20, column: 224 } }, "16": { start: { line: 20, column: 229 }, end: { line: 20, column: 250 } }, "17": { start: { line: 20, column: 251 }, end: { line: 20, column: 265 } }, "18": { start: { line: 22, column: 39 }, end: { line: 22, column: 93 } }, "19": { start: { line: 24, column: 14 }, end: { line: 24, column: 65 } }, "20": { start: { line: 35, column: 2 }, end: { line: 35, column: 51 } }, "21": { start: { line: 44, column: 2 }, end: { line: 44, column: 33 } }, "22": { start: { line: 45, column: 2 }, end: { line: 45, column: 37 } }, "23": { start: { line: 47, column: 2 }, end: { line: 49, column: 3 } }, "24": { start: { line: 48, column: 4 }, end: { line: 48, column: 58 } }, "25": { start: { line: 51, column: 2 }, end: { line: 53, column: 3 } }, "26": { start: { line: 52, column: 4 }, end: { line: 52, column: 58 } }, "27": { start: { line: 56, column: 14 }, end: { line: 56, column: 47 } }, "28": { start: { line: 59, column: 15 }, end: { line: 59, column: 64 } }, "29": { start: { line: 60, column: 2 }, end: { line: 62, column: 3 } }, "30": { start: { line: 61, column: 4 }, end: { line: 61, column: 65 } }, "31": { start: { line: 64, column: 17 }, end: { line: 64, column: 82 } }, "32": { start: { line: 66, column: 2 }, end: { line: 66, column: 22 } }, "33": { start: { line: 68, column: 2 }, end: { line: 68, column: 15 } }, "34": { start: { line: 75, column: 15 }, end: { line: 75, column: 17 } }, "35": { start: { line: 77, column: 2 }, end: { line: 80, column: 3 } }, "36": { start: { line: 78, column: 16 }, end: { line: 78, column: 42 } }, "37": { start: { line: 79, column: 4 }, end: { line: 79, column: 23 } }, "38": { start: { line: 82, column: 2 }, end: { line: 82, column: 16 } } }, fnMap: { "0": { name: "_interopRequireWildcard", decl: { start: { line: 20, column: 9 }, end: { line: 20, column: 32 } }, loc: { start: { line: 20, column: 38 }, end: { line: 20, column: 269 } }, line: 20 }, "1": { name: "_interopRequireDefault", decl: { start: { line: 22, column: 9 }, end: { line: 22, column: 31 } }, loc: { start: { line: 22, column: 37 }, end: { line: 22, column: 95 } }, line: 22 }, "2": { name: "read", decl: { start: { line: 34, column: 9 }, end: { line: 34, column: 13 } }, loc: { start: { line: 34, column: 28 }, end: { line: 36, column: 1 } }, line: 34 }, "3": { name: "readBytes", decl: { start: { line: 43, column: 9 }, end: { line: 43, column: 18 } }, loc: { start: { line: 43, column: 41 }, end: { line: 69, column: 1 } }, line: 43 }, "4": { name: "chunk", decl: { start: { line: 74, column: 9 }, end: { line: 74, column: 14 } }, loc: { start: { line: 74, column: 48 }, end: { line: 83, column: 1 } }, line: 74 } }, branchMap: { "0": { loc: { start: { line: 20, column: 40 }, end: { line: 20, column: 267 } }, type: "if", locations: [{ start: { line: 20, column: 40 }, end: { line: 20, column: 267 } }, { start: { line: 20, column: 40 }, end: { line: 20, column: 267 } }], line: 20 }, "1": { loc: { start: { line: 20, column: 44 }, end: { line: 20, column: 65 } }, type: "binary-expr", locations: [{ start: { line: 20, column: 44 }, end: { line: 20, column: 47 } }, { start: { line: 20, column: 51 }, end: { line: 20, column: 65 } }], line: 20 }, "2": { loc: { start: { line: 20, column: 107 }, end: { line: 20, column: 228 } }, type: "if", locations: [{ start: { line: 20, column: 107 }, end: { line: 20, column: 228 } }, { start: { line: 20, column: 107 }, end: { line: 20, column: 228 } }], line: 20 }, "3": { loc: { start: { line: 20, column: 149 }, end: { line: 20, column: 224 } }, type: "if", locations: [{ start: { line: 20, column: 149 }, end: { line: 20, column: 224 } }, { start: { line: 20, column: 149 }, end: { line: 20, column: 224 } }], line: 20 }, "4": { loc: { start: { line: 22, column: 46 }, end: { line: 22, column: 92 } }, type: "cond-expr", locations: [{ start: { line: 22, column: 70 }, end: { line: 22, column: 73 } }, { start: { line: 22, column: 76 }, end: { line: 22, column: 92 } }], line: 22 }, "5": { loc: { start: { line: 22, column: 46 }, end: { line: 22, column: 67 } }, type: "binary-expr", locations: [{ start: { line: 22, column: 46 }, end: { line: 22, column: 49 } }, { start: { line: 22, column: 53 }, end: { line: 22, column: 67 } }], line: 22 }, "6": { loc: { start: { line: 47, column: 2 }, end: { line: 49, column: 3 } }, type: "if", locations: [{ start: { line: 47, column: 2 }, end: { line: 49, column: 3 } }, { start: { line: 47, column: 2 }, end: { line: 49, column: 3 } }], line: 47 }, "7": { loc: { start: { line: 48, column: 26 }, end: { line: 48, column: 56 } }, type: "cond-expr", locations: [{ start: { line: 48, column: 35 }, end: { line: 48, column: 52 } }, { start: { line: 48, column: 55 }, end: { line: 48, column: 56 } }], line: 48 }, "8": { loc: { start: { line: 51, column: 2 }, end: { line: 53, column: 3 } }, type: "if", locations: [{ start: { line: 51, column: 2 }, end: { line: 53, column: 3 } }, { start: { line: 51, column: 2 }, end: { line: 53, column: 3 } }], line: 51 }, "9": { loc: { start: { line: 60, column: 2 }, end: { line: 62, column: 3 } }, type: "if", locations: [{ start: { line: 60, column: 2 }, end: { line: 62, column: 3 } }, { start: { line: 60, column: 2 }, end: { line: 62, column: 3 } }], line: 60 }, "10": { loc: { start: { line: 74, column: 23 }, end: { line: 74, column: 46 } }, type: "default-arg", locations: [{ start: { line: 74, column: 30 }, end: { line: 74, column: 46 } }], line: 74 } }, s: { "0": 0, "1": 0, "2": 0, "3": 0, "4": 0, "5": 0, "6": 0, "7": 0, "8": 0, "9": 0, "10": 0, "11": 0, "12": 0, "13": 0, "14": 0, "15": 0, "16": 0, "17": 0, "18": 0, "19": 0, "20": 0, "21": 0, "22": 0, "23": 0, "24": 0, "25": 0, "26": 0, "27": 0, "28": 0, "29": 0, "30": 0, "31": 0, "32": 0, "33": 0, "34": 0, "35": 0, "36": 0, "37": 0, "38": 0 }, f: { "0": 0, "1": 0, "2": 0, "3": 0, "4": 0 }, b: { "0": [0, 0], "1": [0, 0], "2": [0, 0], "3": [0, 0], "4": [0, 0], "5": [0, 0], "6": [0, 0], "7": [0, 0], "8": [0, 0], "9": [0, 0], "10": [0] }, inputSourceMap: { version: 3, sources: ["lib/data/decode/memory.js"], names: ["read", "readBytes", "chunk", "utils", "debug", "memory", "byte", "WORD_SIZE", "length", "toBigNumber", "toNumber", "Uint8Array", "undefined", "buffer", "bytes", "excess", "plus", "minus", "BigNumber", "existing", "set", "size", "chunks", "i", "push"], mappings: ";;;;;QAgBgBA,I,GAAAA,I;QASAC,S,GAAAA,S;QA+BAC,K,GAAAA,K;;AAxDhB;;;;AAGA;;AAEA;;IAAYC,K;;;;;;AAJZ,MAAMC,QAAQ,qBAAY,6BAAZ,CAAd;;AAOA;;;;;;;;AAQO,SAASJ,IAAT,CAAcK,MAAd,EAAsBC,IAAtB,EAA4B;AACjC,SAAOL,UAAUI,MAAV,EAAkBC,IAAlB,EAAwBC,gBAAxB,CAAP;AACD;;AAED;;;;;AAKO,SAASN,SAAT,CAAmBI,MAAnB,EAA2BC,IAA3B,EAAiCE,MAAjC,EAAyC;AAC9CF,SAAOH,MAAMM,WAAN,CAAkBH,IAAlB,CAAP;AACAE,WAASL,MAAMM,WAAN,CAAkBD,MAAlB,CAAT;;AAEA,MAAIF,KAAKI,QAAL,MAAmBL,OAAOG,MAA9B,EAAsC;AACpC,WAAO,IAAIG,UAAJ,CAAeH,SAASA,OAAOE,QAAP,EAAT,GAA6B,CAA5C,CAAP;AACD;;AAED,MAAIF,UAAUI,SAAd,EAAyB;AACvB,WAAO,IAAID,UAAJ,CAAeN,OAAOQ,MAAtB,EAA8BP,KAAKI,QAAL,EAA9B,CAAP;AACD;;AAED;AACA,MAAII,QAAQ,IAAIH,UAAJ,CAAeH,OAAOE,QAAP,EAAf,CAAZ;;AAEA;AACA,MAAIK,SAAST,KAAKU,IAAL,CAAUR,MAAV,EAAkBS,KAAlB,CAAwBZ,OAAOG,MAA/B,EAAuCE,QAAvC,EAAb;AACA,MAAIK,SAAS,CAAb,EAAgB;AACdP,aAAS,IAAIU,oBAAJ,CAAcb,OAAOG,MAArB,EAA6BS,KAA7B,CAAmCX,IAAnC,CAAT;AACD;;AAED,MAAIa,WAAW,IAAIR,UAAJ,CAAeN,OAAOQ,MAAtB,EAA8BP,KAAKI,QAAL,EAA9B,EAA+CF,OAAOE,QAAP,EAA/C,CAAf;;AAEAI,QAAMM,GAAN,CAAUD,QAAV;;AAEA,SAAOL,KAAP;AACD;;AAED;;;AAGO,SAASZ,KAAT,CAAeG,MAAf,EAAuBgB,OAAOd,gBAA9B,EAAyC;AAC9C,MAAIe,SAAS,EAAb;;AAEA,OAAK,IAAIC,IAAI,CAAb,EAAgBA,IAAIlB,OAAOG,MAA3B,EAAmCe,KAAKF,IAAxC,EAA8C;AAC5C,QAAInB,QAAQD,UAAUI,MAAV,EAAkBkB,CAAlB,EAAqBF,IAArB,CAAZ;AACAC,WAAOE,IAAP,CAAYtB,KAAZ;AACD;;AAED,SAAOoB,MAAP;AACD", file: "memory.js", sourceRoot: "/Users/gnidan/src/work/truffle/packages/truffle-debugger", sourcesContent: ["import debugModule from \"debug\";\nconst debug = debugModule(\"debugger:data:decode:memory\");\n\nimport { BigNumber } from \"bignumber.js\";\n\nimport * as utils from \"./utils\";\nimport { WORD_SIZE } from \"./utils\";\n\n/**\n * read word from memory\n *\n * requires `byte` to be a multiple of WORD_SIZE (32)\n *\n * @param memory - Uint8Array\n * @return {BigNumber}\n */\nexport function read(memory, byte) {\n  return readBytes(memory, byte, WORD_SIZE);\n}\n\n/**\n * read <bytes> amount of bytes from memory, starting at byte <start>\n *\n * @param memory - Uint8Array\n */\nexport function readBytes(memory, byte, length) {\n  byte = utils.toBigNumber(byte);\n  length = utils.toBigNumber(length);\n\n  if (byte.toNumber() >= memory.length) {\n    return new Uint8Array(length ? length.toNumber() : 0);\n  }\n\n  if (length == undefined) {\n    return new Uint8Array(memory.buffer, byte.toNumber());\n  }\n\n  // grab `length` bytes no matter what, here fill this array\n  var bytes = new Uint8Array(length.toNumber());\n\n  // if we're reading past the end of memory, truncate the length to read\n  let excess = byte.plus(length).minus(memory.length).toNumber();\n  if (excess > 0) {\n    length = new BigNumber(memory.length).minus(byte);\n  }\n\n  let existing = new Uint8Array(memory.buffer, byte.toNumber(), length.toNumber());\n\n  bytes.set(existing);\n\n  return bytes;\n}\n\n/**\n * Split memory into chunks\n */\nexport function chunk(memory, size = WORD_SIZE) {\n  let chunks = [];\n\n  for (let i = 0; i < memory.length; i += size) {\n    let chunk = readBytes(memory, i, size);\n    chunks.push(chunk);\n  }\n\n  return chunks;\n}\n"] }, _coverageSchema: "332fd63041d2c1bcb487cc26dd0d5f7d97098a6c" },
      coverage = global[gcv] || (global[gcv] = {});if (coverage[path] && coverage[path].hash === hash) {
    return coverage[path];
  }coverageData.hash = hash;return coverage[path] = coverageData;
}();cov_2qvig2sh12.s[0]++;Object.defineProperty(exports, "__esModule", { value: true });cov_2qvig2sh12.s[1]++;exports.read = read;cov_2qvig2sh12.s[2]++;exports.readBytes = readBytes;cov_2qvig2sh12.s[3]++;exports.chunk = chunk;var _debug = (cov_2qvig2sh12.s[4]++, __webpack_require__(0));var _debug2 = (cov_2qvig2sh12.s[5]++, _interopRequireDefault(_debug));var _bignumber = (cov_2qvig2sh12.s[6]++, __webpack_require__(20));var _utils = (cov_2qvig2sh12.s[7]++, __webpack_require__(11));var utils = (cov_2qvig2sh12.s[8]++, _interopRequireWildcard(_utils));function _interopRequireWildcard(obj) {
  cov_2qvig2sh12.f[0]++;cov_2qvig2sh12.s[9]++;if ((cov_2qvig2sh12.b[1][0]++, obj) && (cov_2qvig2sh12.b[1][1]++, obj.__esModule)) {
    cov_2qvig2sh12.b[0][0]++;cov_2qvig2sh12.s[10]++;return obj;
  } else {
    cov_2qvig2sh12.b[0][1]++;var newObj = (cov_2qvig2sh12.s[11]++, {});cov_2qvig2sh12.s[12]++;if (obj != null) {
      cov_2qvig2sh12.b[2][0]++;cov_2qvig2sh12.s[13]++;for (var key in obj) {
        cov_2qvig2sh12.s[14]++;if (Object.prototype.hasOwnProperty.call(obj, key)) {
          cov_2qvig2sh12.b[3][0]++;cov_2qvig2sh12.s[15]++;newObj[key] = obj[key];
        } else {
          cov_2qvig2sh12.b[3][1]++;
        }
      }
    } else {
      cov_2qvig2sh12.b[2][1]++;
    }cov_2qvig2sh12.s[16]++;newObj.default = obj;cov_2qvig2sh12.s[17]++;return newObj;
  }
}function _interopRequireDefault(obj) {
  cov_2qvig2sh12.f[1]++;cov_2qvig2sh12.s[18]++;return (cov_2qvig2sh12.b[5][0]++, obj) && (cov_2qvig2sh12.b[5][1]++, obj.__esModule) ? (cov_2qvig2sh12.b[4][0]++, obj) : (cov_2qvig2sh12.b[4][1]++, { default: obj });
}const debug = (cov_2qvig2sh12.s[19]++, (0, _debug2.default)("debugger:data:decode:memory"));function read(memory, byte) {
  cov_2qvig2sh12.f[2]++;cov_2qvig2sh12.s[20]++;return readBytes(memory, byte, _utils.WORD_SIZE);
}function readBytes(memory, byte, length) {
  cov_2qvig2sh12.f[3]++;cov_2qvig2sh12.s[21]++;byte = utils.toBigNumber(byte);cov_2qvig2sh12.s[22]++;length = utils.toBigNumber(length);cov_2qvig2sh12.s[23]++;if (byte.toNumber() >= memory.length) {
    cov_2qvig2sh12.b[6][0]++;cov_2qvig2sh12.s[24]++;return new Uint8Array(length ? (cov_2qvig2sh12.b[7][0]++, length.toNumber()) : (cov_2qvig2sh12.b[7][1]++, 0));
  } else {
    cov_2qvig2sh12.b[6][1]++;
  }cov_2qvig2sh12.s[25]++;if (length == undefined) {
    cov_2qvig2sh12.b[8][0]++;cov_2qvig2sh12.s[26]++;return new Uint8Array(memory.buffer, byte.toNumber());
  } else {
    cov_2qvig2sh12.b[8][1]++;
  }var bytes = (cov_2qvig2sh12.s[27]++, new Uint8Array(length.toNumber()));let excess = (cov_2qvig2sh12.s[28]++, byte.plus(length).minus(memory.length).toNumber());cov_2qvig2sh12.s[29]++;if (excess > 0) {
    cov_2qvig2sh12.b[9][0]++;cov_2qvig2sh12.s[30]++;length = new _bignumber.BigNumber(memory.length).minus(byte);
  } else {
    cov_2qvig2sh12.b[9][1]++;
  }let existing = (cov_2qvig2sh12.s[31]++, new Uint8Array(memory.buffer, byte.toNumber(), length.toNumber()));cov_2qvig2sh12.s[32]++;bytes.set(existing);cov_2qvig2sh12.s[33]++;return bytes;
}function chunk(memory, size = (cov_2qvig2sh12.b[10][0]++, _utils.WORD_SIZE)) {
  cov_2qvig2sh12.f[4]++;let chunks = (cov_2qvig2sh12.s[34]++, []);cov_2qvig2sh12.s[35]++;for (let i = 0; i < memory.length; i += size) {
    let chunk = (cov_2qvig2sh12.s[36]++, readBytes(memory, i, size));cov_2qvig2sh12.s[37]++;chunks.push(chunk);
  }cov_2qvig2sh12.s[38]++;return chunks;
}

/***/ }),
/* 64 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var cov_222z4jyetz = function () {
  var path = "/Users/gnidan/src/work/truffle/packages/truffle-debugger/lib/data/decode/storage.js",
      hash = "36cf890169006f72ab7fbfc02ae334c284677031",
      Function = function () {}.constructor,
      global = new Function('return this')(),
      gcv = "__coverage__",
      coverageData = { path: "/Users/gnidan/src/work/truffle/packages/truffle-debugger/lib/data/decode/storage.js", statementMap: { "0": { start: { line: 3, column: 0 }, end: { line: 5, column: 3 } }, "1": { start: { line: 7, column: 16 }, end: { line: 7, column: 56 } }, "2": { start: { line: 9, column: 16 }, end: { line: 9, column: 49 } }, "3": { start: { line: 11, column: 0 }, end: { line: 11, column: 34 } }, "4": { start: { line: 12, column: 0 }, end: { line: 12, column: 20 } }, "5": { start: { line: 13, column: 0 }, end: { line: 13, column: 30 } }, "6": { start: { line: 15, column: 13 }, end: { line: 15, column: 29 } }, "7": { start: { line: 17, column: 14 }, end: { line: 17, column: 44 } }, "8": { start: { line: 19, column: 13 }, end: { line: 19, column: 31 } }, "9": { start: { line: 21, column: 12 }, end: { line: 21, column: 43 } }, "10": { start: { line: 23, column: 40 }, end: { line: 23, column: 267 } }, "11": { start: { line: 23, column: 69 }, end: { line: 23, column: 80 } }, "12": { start: { line: 23, column: 103 }, end: { line: 23, column: 105 } }, "13": { start: { line: 23, column: 107 }, end: { line: 23, column: 228 } }, "14": { start: { line: 23, column: 126 }, end: { line: 23, column: 226 } }, "15": { start: { line: 23, column: 149 }, end: { line: 23, column: 224 } }, "16": { start: { line: 23, column: 201 }, end: { line: 23, column: 224 } }, "17": { start: { line: 23, column: 229 }, end: { line: 23, column: 250 } }, "18": { start: { line: 23, column: 251 }, end: { line: 23, column: 265 } }, "19": { start: { line: 25, column: 39 }, end: { line: 25, column: 93 } }, "20": { start: { line: 27, column: 14 }, end: { line: 27, column: 66 } }, "21": { start: { line: 38, column: 2 }, end: { line: 47, column: 3 } }, "22": { start: { line: 39, column: 4 }, end: { line: 39, column: 53 } }, "23": { start: { line: 40, column: 9 }, end: { line: 47, column: 3 } }, "24": { start: { line: 41, column: 27 }, end: { line: 41, column: 31 } }, "25": { start: { line: 42, column: 4 }, end: { line: 42, column: 61 } }, "26": { start: { line: 43, column: 9 }, end: { line: 47, column: 3 } }, "27": { start: { line: 44, column: 4 }, end: { line: 44, column: 35 } }, "28": { start: { line: 46, column: 4 }, end: { line: 46, column: 16 } }, "29": { start: { line: 57, column: 18 }, end: { line: 57, column: 35 } }, "30": { start: { line: 59, column: 2 }, end: { line: 59, column: 56 } }, "31": { start: { line: 61, column: 13 }, end: { line: 61, column: 102 } }, "32": { start: { line: 63, column: 2 }, end: { line: 63, column: 25 } }, "33": { start: { line: 64, column: 2 }, end: { line: 64, column: 14 } }, "34": { start: { line: 92, column: 2 }, end: { line: 92, column: 31 } }, "35": { start: { line: 94, column: 29 }, end: { line: 94, column: 34 } }, "36": { start: { line: 95, column: 2 }, end: { line: 97, column: 3 } }, "37": { start: { line: 96, column: 4 }, end: { line: 96, column: 62 } }, "38": { start: { line: 99, column: 2 }, end: { line: 102, column: 4 } }, "39": { start: { line: 104, column: 2 }, end: { line: 117, column: 3 } }, "40": { start: { line: 105, column: 4 }, end: { line: 111, column: 6 } }, "41": { start: { line: 113, column: 4 }, end: { line: 116, column: 6 } }, "42": { start: { line: 119, column: 2 }, end: { line: 119, column: 49 } }, "43": { start: { line: 121, column: 21 }, end: { line: 121, column: 58 } }, "44": { start: { line: 122, column: 2 }, end: { line: 122, column: 37 } }, "45": { start: { line: 124, column: 13 }, end: { line: 124, column: 58 } }, "46": { start: { line: 126, column: 2 }, end: { line: 129, column: 3 } }, "47": { start: { line: 127, column: 17 }, end: { line: 127, column: 37 } }, "48": { start: { line: 128, column: 4 }, end: { line: 128, column: 101 } }, "49": { start: { line: 130, column: 2 }, end: { line: 130, column: 26 } }, "50": { start: { line: 132, column: 2 }, end: { line: 132, column: 84 } }, "51": { start: { line: 134, column: 2 }, end: { line: 134, column: 26 } }, "52": { start: { line: 136, column: 2 }, end: { line: 136, column: 14 } } }, fnMap: { "0": { name: "_interopRequireWildcard", decl: { start: { line: 23, column: 9 }, end: { line: 23, column: 32 } }, loc: { start: { line: 23, column: 38 }, end: { line: 23, column: 269 } }, line: 23 }, "1": { name: "_interopRequireDefault", decl: { start: { line: 25, column: 9 }, end: { line: 25, column: 31 } }, loc: { start: { line: 25, column: 37 }, end: { line: 25, column: 95 } }, line: 25 }, "2": { name: "slotAddress", decl: { start: { line: 37, column: 9 }, end: { line: 37, column: 20 } }, loc: { start: { line: 37, column: 27 }, end: { line: 48, column: 1 } }, line: 37 }, "3": { name: "read", decl: { start: { line: 56, column: 9 }, end: { line: 56, column: 13 } }, loc: { start: { line: 56, column: 29 }, end: { line: 65, column: 1 } }, line: 56 }, "4": { name: "readRange", decl: { start: { line: 91, column: 9 }, end: { line: 91, column: 18 } }, loc: { start: { line: 91, column: 35 }, end: { line: 137, column: 1 } }, line: 91 } }, branchMap: { "0": { loc: { start: { line: 23, column: 40 }, end: { line: 23, column: 267 } }, type: "if", locations: [{ start: { line: 23, column: 40 }, end: { line: 23, column: 267 } }, { start: { line: 23, column: 40 }, end: { line: 23, column: 267 } }], line: 23 }, "1": { loc: { start: { line: 23, column: 44 }, end: { line: 23, column: 65 } }, type: "binary-expr", locations: [{ start: { line: 23, column: 44 }, end: { line: 23, column: 47 } }, { start: { line: 23, column: 51 }, end: { line: 23, column: 65 } }], line: 23 }, "2": { loc: { start: { line: 23, column: 107 }, end: { line: 23, column: 228 } }, type: "if", locations: [{ start: { line: 23, column: 107 }, end: { line: 23, column: 228 } }, { start: { line: 23, column: 107 }, end: { line: 23, column: 228 } }], line: 23 }, "3": { loc: { start: { line: 23, column: 149 }, end: { line: 23, column: 224 } }, type: "if", locations: [{ start: { line: 23, column: 149 }, end: { line: 23, column: 224 } }, { start: { line: 23, column: 149 }, end: { line: 23, column: 224 } }], line: 23 }, "4": { loc: { start: { line: 25, column: 46 }, end: { line: 25, column: 92 } }, type: "cond-expr", locations: [{ start: { line: 25, column: 70 }, end: { line: 25, column: 73 } }, { start: { line: 25, column: 76 }, end: { line: 25, column: 92 } }], line: 25 }, "5": { loc: { start: { line: 25, column: 46 }, end: { line: 25, column: 67 } }, type: "binary-expr", locations: [{ start: { line: 25, column: 46 }, end: { line: 25, column: 49 } }, { start: { line: 25, column: 53 }, end: { line: 25, column: 67 } }], line: 25 }, "6": { loc: { start: { line: 38, column: 2 }, end: { line: 47, column: 3 } }, type: "if", locations: [{ start: { line: 38, column: 2 }, end: { line: 47, column: 3 } }, { start: { line: 38, column: 2 }, end: { line: 47, column: 3 } }], line: 38 }, "7": { loc: { start: { line: 40, column: 9 }, end: { line: 47, column: 3 } }, type: "if", locations: [{ start: { line: 40, column: 9 }, end: { line: 47, column: 3 } }, { start: { line: 40, column: 9 }, end: { line: 47, column: 3 } }], line: 40 }, "8": { loc: { start: { line: 40, column: 13 }, end: { line: 40, column: 62 } }, type: "binary-expr", locations: [{ start: { line: 40, column: 13 }, end: { line: 40, column: 36 } }, { start: { line: 40, column: 40 }, end: { line: 40, column: 62 } }], line: 40 }, "9": { loc: { start: { line: 43, column: 9 }, end: { line: 47, column: 3 } }, type: "if", locations: [{ start: { line: 43, column: 9 }, end: { line: 47, column: 3 } }, { start: { line: 43, column: 9 }, end: { line: 47, column: 3 } }], line: 43 }, "10": { loc: { start: { line: 43, column: 13 }, end: { line: 43, column: 64 } }, type: "binary-expr", locations: [{ start: { line: 43, column: 13 }, end: { line: 43, column: 36 } }, { start: { line: 43, column: 40 }, end: { line: 43, column: 64 } }], line: 43 }, "11": { loc: { start: { line: 61, column: 13 }, end: { line: 61, column: 102 } }, type: "binary-expr", locations: [{ start: { line: 61, column: 13 }, end: { line: 61, column: 66 } }, { start: { line: 61, column: 70 }, end: { line: 61, column: 102 } }], line: 61 }, "12": { loc: { start: { line: 95, column: 2 }, end: { line: 97, column: 3 } }, type: "if", locations: [{ start: { line: 95, column: 2 }, end: { line: 97, column: 3 } }, { start: { line: 95, column: 2 }, end: { line: 97, column: 3 } }], line: 95 }, "13": { loc: { start: { line: 95, column: 6 }, end: { line: 95, column: 36 } }, type: "binary-expr", locations: [{ start: { line: 95, column: 6 }, end: { line: 95, column: 13 } }, { start: { line: 95, column: 17 }, end: { line: 95, column: 20 } }, { start: { line: 95, column: 24 }, end: { line: 95, column: 30 } }, { start: { line: 95, column: 34 }, end: { line: 95, column: 36 } }], line: 95 }, "14": { loc: { start: { line: 101, column: 11 }, end: { line: 101, column: 26 } }, type: "binary-expr", locations: [{ start: { line: 101, column: 11 }, end: { line: 101, column: 21 } }, { start: { line: 101, column: 25 }, end: { line: 101, column: 26 } }], line: 101 }, "15": { loc: { start: { line: 104, column: 2 }, end: { line: 117, column: 3 } }, type: "if", locations: [{ start: { line: 104, column: 2 }, end: { line: 117, column: 3 } }, { start: { line: 104, column: 2 }, end: { line: 117, column: 3 } }], line: 104 } }, s: { "0": 0, "1": 0, "2": 0, "3": 0, "4": 0, "5": 0, "6": 0, "7": 0, "8": 0, "9": 0, "10": 0, "11": 0, "12": 0, "13": 0, "14": 0, "15": 0, "16": 0, "17": 0, "18": 0, "19": 0, "20": 0, "21": 0, "22": 0, "23": 0, "24": 0, "25": 0, "26": 0, "27": 0, "28": 0, "29": 0, "30": 0, "31": 0, "32": 0, "33": 0, "34": 0, "35": 0, "36": 0, "37": 0, "38": 0, "39": 0, "40": 0, "41": 0, "42": 0, "43": 0, "44": 0, "45": 0, "46": 0, "47": 0, "48": 0, "49": 0, "50": 0, "51": 0, "52": 0 }, f: { "0": 0, "1": 0, "2": 0, "3": 0, "4": 0 }, b: { "0": [0, 0], "1": [0, 0], "2": [0, 0], "3": [0, 0], "4": [0, 0], "5": [0, 0], "6": [0, 0], "7": [0, 0], "8": [0, 0], "9": [0, 0], "10": [0, 0], "11": [0, 0], "12": [0, 0], "13": [0, 0, 0, 0], "14": [0, 0], "15": [0, 0] }, inputSourceMap: { version: 3, sources: ["lib/data/decode/storage.js"], names: ["slotAddress", "read", "readRange", "utils", "debug", "slot", "Array", "keccak256", "map", "path", "undefined", "offset", "toBigNumber", "plus", "slice", "storage", "address", "toHexString", "word", "WORD_SIZE", "Uint8Array", "range", "from", "to", "length", "Error", "normalizeSlot", "index", "Math", "floor", "totalWords", "data", "i", "set"], mappings: "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", file: "storage.js", sourceRoot: "/Users/gnidan/src/work/truffle/packages/truffle-debugger", sourcesContent: ["import debugModule from \"debug\";\nconst debug = debugModule(\"debugger:data:decode:storage\");\n\nimport { WORD_SIZE } from \"./utils\";\nimport * as utils from \"./utils\";\n\n/**\n * convert a slot to a word corresponding to actual storage address\n *\n * if `slot` is an array, return hash of array values.\n * if `slot` array is nested, recurse on sub-arrays\n *\n * @param slot - number or possibly-nested array of numbers\n */\nexport function slotAddress(slot) {\n  if (slot instanceof Array) {\n    return utils.keccak256(...slot.map(slotAddress));\n  } else if (typeof slot == \"object\" && slot.path != undefined) {\n    let { path, offset } = slot;\n    return utils.toBigNumber(slotAddress(path)).plus(offset);\n  } else if (typeof slot == \"string\" && slot.slice(0,2) == \"0x\") {\n    return utils.toBigNumber(slot);\n  } else {\n    return slot;\n  }\n}\n\n/**\n * read slot from storage\n *\n * @param slot - big number or array of regular numbers\n * @param offset - for array, offset from the keccak determined location\n */\nexport function read(storage, slot) {\n  const address = slotAddress(slot);\n\n  debug(\"reading slot: %o\", utils.toHexString(address));\n\n  let word = storage[utils.toHexString(address, WORD_SIZE)] ||\n    new Uint8Array(WORD_SIZE);\n\n  debug(\"word %o\", word);\n  return word\n}\n\n/**\n * read all bytes in some range.\n *\n * parameters `from` and `to` are objects with the following properties:\n *\n *   slot - (required) one of the following:\n *     - a literal value referring to a slot (a number, a bytestring, etc.)\n *\n *     - a \"path\" array of literal values\n *       path array values get converted into keccak256 hash as per solidity\n *       storage allocation method, after recursing.\n *\n *     - an object { path, offset }, where path is one of the above ^\n *       offset values indicate sequential address offset, post-keccak\n *\n *     ref: https://solidity.readthedocs.io/en/v0.4.23/miscellaneous.html#layout-of-state-variables-in-storage\n *     (search \"concatenation\")\n *\n *  index - (default: 0) byte index in word\n *\n * @param from - location (see ^)\n * @param to - location (see ^). inclusive.\n * @param length - instead of `to`, number of bytes after `from`\n */\nexport function readRange(storage, range) {\n  debug(\"readRange %o\", range);\n\n  let { from, to, length } = range;\n  if (!length && !to || length && to) {\n    throw new Error(\"must specify exactly one `to`|`length`\");\n  }\n\n  from = {\n    slot: utils.normalizeSlot(from.slot),\n    index: from.index || 0\n  };\n\n  if (length) {\n    to = {\n      slot: {\n        path: from.slot.path,\n        offset: from.slot.offset +\n          Math.floor((from.index + length - 1) / WORD_SIZE)\n      },\n      index: (from.index + length - 1) % WORD_SIZE\n    };\n  } else {\n    to = {\n      slot: utils.normalizeSlot(to.slot),\n      index: to.index\n    }\n  }\n\n  debug(\"normalized readRange %o\", {from,to});\n\n  const totalWords = to.slot.offset - from.slot.offset + 1;\n  debug(\"totalWords %o\", totalWords);\n\n  let data = new Uint8Array(totalWords * WORD_SIZE);\n\n  for (let i = 0; i < totalWords; i++) {\n    let offset = i + from.slot.offset;\n    data.set(read(storage, { ...from.slot, offset }), i * WORD_SIZE);\n  }\n  debug(\"words %o\", data);\n\n  data = data.slice(from.index, (totalWords - 1) * WORD_SIZE + to.index + 1);\n\n  debug(\"data: %o\", data);\n\n  return data;\n}\n\n"] }, _coverageSchema: "332fd63041d2c1bcb487cc26dd0d5f7d97098a6c" },
      coverage = global[gcv] || (global[gcv] = {});if (coverage[path] && coverage[path].hash === hash) {
    return coverage[path];
  }coverageData.hash = hash;return coverage[path] = coverageData;
}();cov_222z4jyetz.s[0]++;Object.defineProperty(exports, "__esModule", { value: true });var _extends2 = (cov_222z4jyetz.s[1]++, __webpack_require__(2));var _extends3 = (cov_222z4jyetz.s[2]++, _interopRequireDefault(_extends2));cov_222z4jyetz.s[3]++;exports.slotAddress = slotAddress;cov_222z4jyetz.s[4]++;exports.read = read;cov_222z4jyetz.s[5]++;exports.readRange = readRange;var _debug = (cov_222z4jyetz.s[6]++, __webpack_require__(0));var _debug2 = (cov_222z4jyetz.s[7]++, _interopRequireDefault(_debug));var _utils = (cov_222z4jyetz.s[8]++, __webpack_require__(11));var utils = (cov_222z4jyetz.s[9]++, _interopRequireWildcard(_utils));function _interopRequireWildcard(obj) {
  cov_222z4jyetz.f[0]++;cov_222z4jyetz.s[10]++;if ((cov_222z4jyetz.b[1][0]++, obj) && (cov_222z4jyetz.b[1][1]++, obj.__esModule)) {
    cov_222z4jyetz.b[0][0]++;cov_222z4jyetz.s[11]++;return obj;
  } else {
    cov_222z4jyetz.b[0][1]++;var newObj = (cov_222z4jyetz.s[12]++, {});cov_222z4jyetz.s[13]++;if (obj != null) {
      cov_222z4jyetz.b[2][0]++;cov_222z4jyetz.s[14]++;for (var key in obj) {
        cov_222z4jyetz.s[15]++;if (Object.prototype.hasOwnProperty.call(obj, key)) {
          cov_222z4jyetz.b[3][0]++;cov_222z4jyetz.s[16]++;newObj[key] = obj[key];
        } else {
          cov_222z4jyetz.b[3][1]++;
        }
      }
    } else {
      cov_222z4jyetz.b[2][1]++;
    }cov_222z4jyetz.s[17]++;newObj.default = obj;cov_222z4jyetz.s[18]++;return newObj;
  }
}function _interopRequireDefault(obj) {
  cov_222z4jyetz.f[1]++;cov_222z4jyetz.s[19]++;return (cov_222z4jyetz.b[5][0]++, obj) && (cov_222z4jyetz.b[5][1]++, obj.__esModule) ? (cov_222z4jyetz.b[4][0]++, obj) : (cov_222z4jyetz.b[4][1]++, { default: obj });
}const debug = (cov_222z4jyetz.s[20]++, (0, _debug2.default)("debugger:data:decode:storage"));function slotAddress(slot) {
  cov_222z4jyetz.f[2]++;cov_222z4jyetz.s[21]++;if (slot instanceof Array) {
    cov_222z4jyetz.b[6][0]++;cov_222z4jyetz.s[22]++;return utils.keccak256(...slot.map(slotAddress));
  } else {
    cov_222z4jyetz.b[6][1]++;cov_222z4jyetz.s[23]++;if ((cov_222z4jyetz.b[8][0]++, typeof slot == "object") && (cov_222z4jyetz.b[8][1]++, slot.path != undefined)) {
      cov_222z4jyetz.b[7][0]++;let { path, offset } = (cov_222z4jyetz.s[24]++, slot);cov_222z4jyetz.s[25]++;return utils.toBigNumber(slotAddress(path)).plus(offset);
    } else {
      cov_222z4jyetz.b[7][1]++;cov_222z4jyetz.s[26]++;if ((cov_222z4jyetz.b[10][0]++, typeof slot == "string") && (cov_222z4jyetz.b[10][1]++, slot.slice(0, 2) == "0x")) {
        cov_222z4jyetz.b[9][0]++;cov_222z4jyetz.s[27]++;return utils.toBigNumber(slot);
      } else {
        cov_222z4jyetz.b[9][1]++;cov_222z4jyetz.s[28]++;return slot;
      }
    }
  }
}function read(storage, slot) {
  cov_222z4jyetz.f[3]++;const address = (cov_222z4jyetz.s[29]++, slotAddress(slot));cov_222z4jyetz.s[30]++;debug("reading slot: %o", utils.toHexString(address));let word = (cov_222z4jyetz.s[31]++, (cov_222z4jyetz.b[11][0]++, storage[utils.toHexString(address, _utils.WORD_SIZE)]) || (cov_222z4jyetz.b[11][1]++, new Uint8Array(_utils.WORD_SIZE)));cov_222z4jyetz.s[32]++;debug("word %o", word);cov_222z4jyetz.s[33]++;return word;
}function readRange(storage, range) {
  cov_222z4jyetz.f[4]++;cov_222z4jyetz.s[34]++;debug("readRange %o", range);let { from, to, length } = (cov_222z4jyetz.s[35]++, range);cov_222z4jyetz.s[36]++;if ((cov_222z4jyetz.b[13][0]++, !length) && (cov_222z4jyetz.b[13][1]++, !to) || (cov_222z4jyetz.b[13][2]++, length) && (cov_222z4jyetz.b[13][3]++, to)) {
    cov_222z4jyetz.b[12][0]++;cov_222z4jyetz.s[37]++;throw new Error("must specify exactly one `to`|`length`");
  } else {
    cov_222z4jyetz.b[12][1]++;
  }cov_222z4jyetz.s[38]++;from = { slot: utils.normalizeSlot(from.slot), index: (cov_222z4jyetz.b[14][0]++, from.index) || (cov_222z4jyetz.b[14][1]++, 0) };cov_222z4jyetz.s[39]++;if (length) {
    cov_222z4jyetz.b[15][0]++;cov_222z4jyetz.s[40]++;to = { slot: { path: from.slot.path, offset: from.slot.offset + Math.floor((from.index + length - 1) / _utils.WORD_SIZE) }, index: (from.index + length - 1) % _utils.WORD_SIZE };
  } else {
    cov_222z4jyetz.b[15][1]++;cov_222z4jyetz.s[41]++;to = { slot: utils.normalizeSlot(to.slot), index: to.index };
  }cov_222z4jyetz.s[42]++;debug("normalized readRange %o", { from, to });const totalWords = (cov_222z4jyetz.s[43]++, to.slot.offset - from.slot.offset + 1);cov_222z4jyetz.s[44]++;debug("totalWords %o", totalWords);let data = (cov_222z4jyetz.s[45]++, new Uint8Array(totalWords * _utils.WORD_SIZE));cov_222z4jyetz.s[46]++;for (let i = 0; i < totalWords; i++) {
    let offset = (cov_222z4jyetz.s[47]++, i + from.slot.offset);cov_222z4jyetz.s[48]++;data.set(read(storage, (0, _extends3.default)({}, from.slot, { offset })), i * _utils.WORD_SIZE);
  }cov_222z4jyetz.s[49]++;debug("words %o", data);cov_222z4jyetz.s[50]++;data = data.slice(from.index, (totalWords - 1) * _utils.WORD_SIZE + to.index + 1);cov_222z4jyetz.s[51]++;debug("data: %o", data);cov_222z4jyetz.s[52]++;return data;
}

/***/ }),
/* 65 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var cov_z8p1jzvq = function () {
  var path = "/Users/gnidan/src/work/truffle/packages/truffle-debugger/lib/ast/actions/index.js",
      hash = "c7f4a3199894cf8f50c5983236a17102e7674382",
      Function = function () {}.constructor,
      global = new Function('return this')(),
      gcv = "__coverage__",
      coverageData = { path: "/Users/gnidan/src/work/truffle/packages/truffle-debugger/lib/ast/actions/index.js", statementMap: { "0": { start: { line: 3, column: 0 }, end: { line: 5, column: 3 } }, "1": { start: { line: 6, column: 0 }, end: { line: 6, column: 22 } }, "2": { start: { line: 7, column: 0 }, end: { line: 7, column: 36 } }, "3": { start: { line: 8, column: 14 }, end: { line: 8, column: 37 } }, "4": { start: { line: 10, column: 2 }, end: { line: 13, column: 4 } }, "5": { start: { line: 16, column: 22 }, end: { line: 16, column: 61 } }, "6": { start: { line: 18, column: 2 }, end: { line: 20, column: 4 } } }, fnMap: { "0": { name: "visit", decl: { start: { line: 9, column: 9 }, end: { line: 9, column: 14 } }, loc: { start: { line: 9, column: 30 }, end: { line: 14, column: 1 } }, line: 9 }, "1": { name: "doneVisiting", decl: { start: { line: 17, column: 9 }, end: { line: 17, column: 21 } }, loc: { start: { line: 17, column: 24 }, end: { line: 21, column: 1 } }, line: 17 } }, branchMap: {}, s: { "0": 0, "1": 0, "2": 0, "3": 0, "4": 0, "5": 0, "6": 0 }, f: { "0": 0, "1": 0 }, b: {}, inputSourceMap: { version: 3, sources: ["lib/ast/actions/index.js"], names: ["visit", "doneVisiting", "VISIT", "sourceId", "ast", "type", "DONE_VISITING"], mappings: ";;;;;QACgBA,K,GAAAA,K;QAQAC,Y,GAAAA,Y;AATT,MAAMC,wBAAQ,OAAd;AACA,SAASF,KAAT,CAAeG,QAAf,EAAyBC,GAAzB,EAA8B;AACnC,SAAO;AACLC,UAAMH,KADD;AAELC,YAFK,EAEKC;AAFL,GAAP;AAID;;AAEM,MAAME,wCAAgB,eAAtB;AACA,SAASL,YAAT,GAAwB;AAC7B,SAAO;AACLI,UAAMC;AADD,GAAP;AAGD", file: "index.js", sourceRoot: "/Users/gnidan/src/work/truffle/packages/truffle-debugger", sourcesContent: ["export const VISIT = \"VISIT\";\nexport function visit(sourceId, ast) {\n  return {\n    type: VISIT,\n    sourceId, ast\n  }\n}\n\nexport const DONE_VISITING = \"DONE_VISITING\";\nexport function doneVisiting() {\n  return {\n    type: DONE_VISITING\n  };\n}\n"] }, _coverageSchema: "332fd63041d2c1bcb487cc26dd0d5f7d97098a6c" },
      coverage = global[gcv] || (global[gcv] = {});if (coverage[path] && coverage[path].hash === hash) {
    return coverage[path];
  }coverageData.hash = hash;return coverage[path] = coverageData;
}();cov_z8p1jzvq.s[0]++;Object.defineProperty(exports, "__esModule", { value: true });cov_z8p1jzvq.s[1]++;exports.visit = visit;cov_z8p1jzvq.s[2]++;exports.doneVisiting = doneVisiting;const VISIT = (cov_z8p1jzvq.s[3]++, exports.VISIT = "VISIT");function visit(sourceId, ast) {
  cov_z8p1jzvq.f[0]++;cov_z8p1jzvq.s[4]++;return { type: VISIT, sourceId, ast };
}const DONE_VISITING = (cov_z8p1jzvq.s[5]++, exports.DONE_VISITING = "DONE_VISITING");function doneVisiting() {
  cov_z8p1jzvq.f[1]++;cov_z8p1jzvq.s[6]++;return { type: DONE_VISITING };
}

/***/ }),
/* 66 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var cov_2he17h4koc = function () {
  var path = "/Users/gnidan/src/work/truffle/packages/truffle-debugger/lib/controller/sagas/index.js",
      hash = "4769be9d4d01e06a94a8e3062b1fc7244da06cd5",
      Function = function () {}.constructor,
      global = new Function('return this')(),
      gcv = "__coverage__",
      coverageData = { path: "/Users/gnidan/src/work/truffle/packages/truffle-debugger/lib/controller/sagas/index.js", statementMap: { "0": { start: { line: 3, column: 0 }, end: { line: 5, column: 3 } }, "1": { start: { line: 7, column: 12 }, end: { line: 7, column: 56 } }, "2": { start: { line: 9, column: 13 }, end: { line: 9, column: 42 } }, "3": { start: { line: 11, column: 11 }, end: { line: 11, column: 47 } }, "4": { start: { line: 13, column: 12 }, end: { line: 13, column: 40 } }, "5": { start: { line: 15, column: 0 }, end: { line: 15, column: 20 } }, "6": { start: { line: 17, column: 13 }, end: { line: 17, column: 29 } }, "7": { start: { line: 19, column: 14 }, end: { line: 19, column: 44 } }, "8": { start: { line: 21, column: 15 }, end: { line: 21, column: 44 } }, "9": { start: { line: 23, column: 15 }, end: { line: 23, column: 37 } }, "10": { start: { line: 25, column: 13 }, end: { line: 25, column: 39 } }, "11": { start: { line: 27, column: 12 }, end: { line: 27, column: 43 } }, "12": { start: { line: 29, column: 15 }, end: { line: 29, column: 36 } }, "13": { start: { line: 31, column: 14 }, end: { line: 31, column: 47 } }, "14": { start: { line: 33, column: 17 }, end: { line: 33, column: 40 } }, "15": { start: { line: 35, column: 18 }, end: { line: 35, column: 52 } }, "16": { start: { line: 37, column: 40 }, end: { line: 37, column: 267 } }, "17": { start: { line: 37, column: 69 }, end: { line: 37, column: 80 } }, "18": { start: { line: 37, column: 103 }, end: { line: 37, column: 105 } }, "19": { start: { line: 37, column: 107 }, end: { line: 37, column: 228 } }, "20": { start: { line: 37, column: 126 }, end: { line: 37, column: 226 } }, "21": { start: { line: 37, column: 149 }, end: { line: 37, column: 224 } }, "22": { start: { line: 37, column: 201 }, end: { line: 37, column: 224 } }, "23": { start: { line: 37, column: 229 }, end: { line: 37, column: 250 } }, "24": { start: { line: 37, column: 251 }, end: { line: 37, column: 265 } }, "25": { start: { line: 39, column: 39 }, end: { line: 39, column: 93 } }, "26": { start: { line: 41, column: 14 }, end: { line: 41, column: 63 } }, "27": { start: { line: 43, column: 22 }, end: { line: 50, column: 1 } }, "28": { start: { line: 53, column: 22 }, end: { line: 53, column: 86 } }, "29": { start: { line: 56, column: 2 }, end: { line: 68, column: 3 } }, "30": { start: { line: 57, column: 4 }, end: { line: 57, column: 40 } }, "31": { start: { line: 58, column: 17 }, end: { line: 58, column: 77 } }, "32": { start: { line: 59, column: 4 }, end: { line: 59, column: 32 } }, "33": { start: { line: 60, column: 15 }, end: { line: 60, column: 41 } }, "34": { start: { line: 62, column: 4 }, end: { line: 62, column: 60 } }, "35": { start: { line: 64, column: 4 }, end: { line: 67, column: 7 } }, "36": { start: { line: 71, column: 0 }, end: { line: 71, column: 63 } }, "37": { start: { line: 79, column: 2 }, end: { line: 79, column: 25 } }, "38": { start: { line: 90, column: 24 }, end: { line: 90, column: 100 } }, "39": { start: { line: 94, column: 2 }, end: { line: 106, column: 193 } }, "40": { start: { line: 96, column: 4 }, end: { line: 96, column: 21 } }, "41": { start: { line: 99, column: 4 }, end: { line: 103, column: 5 } }, "42": { start: { line: 100, column: 6 }, end: { line: 100, column: 82 } }, "43": { start: { line: 102, column: 6 }, end: { line: 102, column: 22 } }, "44": { start: { line: 122, column: 2 }, end: { line: 126, column: 3 } }, "45": { start: { line: 123, column: 4 }, end: { line: 123, column: 22 } }, "46": { start: { line: 125, column: 4 }, end: { line: 125, column: 11 } }, "47": { start: { line: 128, column: 2 }, end: { line: 132, column: 3 } }, "48": { start: { line: 129, column: 4 }, end: { line: 129, column: 22 } }, "49": { start: { line: 131, column: 4 }, end: { line: 131, column: 11 } }, "50": { start: { line: 134, column: 24 }, end: { line: 134, column: 93 } }, "51": { start: { line: 135, column: 24 }, end: { line: 135, column: 100 } }, "52": { start: { line: 139, column: 2 }, end: { line: 152, column: 90 } }, "53": { start: { line: 140, column: 4 }, end: { line: 140, column: 22 } }, "54": { start: { line: 142, column: 4 }, end: { line: 142, column: 89 } }, "55": { start: { line: 143, column: 4 }, end: { line: 143, column: 96 } }, "56": { start: { line: 161, column: 2 }, end: { line: 165, column: 3 } }, "57": { start: { line: 162, column: 4 }, end: { line: 162, column: 22 } }, "58": { start: { line: 164, column: 4 }, end: { line: 164, column: 11 } }, "59": { start: { line: 167, column: 24 }, end: { line: 167, column: 93 } }, "60": { start: { line: 170, column: 2 }, end: { line: 174, column: 42 } }, "61": { start: { line: 171, column: 4 }, end: { line: 171, column: 22 } }, "62": { start: { line: 173, column: 4 }, end: { line: 173, column: 89 } }, "63": { start: { line: 184, column: 24 }, end: { line: 184, column: 93 } }, "64": { start: { line: 185, column: 24 }, end: { line: 185, column: 100 } }, "65": { start: { line: 189, column: 2 }, end: { line: 203, column: 100 } }, "66": { start: { line: 190, column: 4 }, end: { line: 190, column: 22 } }, "67": { start: { line: 192, column: 4 }, end: { line: 192, column: 89 } }, "68": { start: { line: 193, column: 4 }, end: { line: 193, column: 96 } }, "69": { start: { line: 215, column: 22 }, end: { line: 215, column: 27 } }, "70": { start: { line: 217, column: 2 }, end: { line: 224, column: 27 } }, "71": { start: { line: 218, column: 4 }, end: { line: 218, column: 22 } }, "72": { start: { line: 220, column: 4 }, end: { line: 220, column: 91 } }, "73": { start: { line: 221, column: 4 }, end: { line: 221, column: 87 } }, "74": { start: { line: 223, column: 4 }, end: { line: 223, column: 246 } }, "75": { start: { line: 223, column: 76 }, end: { line: 223, column: 233 } } }, fnMap: { "0": { name: "_interopRequireWildcard", decl: { start: { line: 37, column: 9 }, end: { line: 37, column: 32 } }, loc: { start: { line: 37, column: 38 }, end: { line: 37, column: 269 } }, line: 37 }, "1": { name: "_interopRequireDefault", decl: { start: { line: 39, column: 9 }, end: { line: 39, column: 31 } }, loc: { start: { line: 39, column: 37 }, end: { line: 39, column: 95 } }, line: 39 }, "2": { name: "saga", decl: { start: { line: 55, column: 10 }, end: { line: 55, column: 14 } }, loc: { start: { line: 55, column: 17 }, end: { line: 69, column: 1 } }, line: 55 }, "3": { name: "advance", decl: { start: { line: 77, column: 10 }, end: { line: 77, column: 17 } }, loc: { start: { line: 77, column: 20 }, end: { line: 80, column: 1 } }, line: 77 }, "4": { name: "stepNext", decl: { start: { line: 89, column: 10 }, end: { line: 89, column: 18 } }, loc: { start: { line: 89, column: 21 }, end: { line: 107, column: 1 } }, line: 89 }, "5": { name: "stepInto", decl: { start: { line: 121, column: 10 }, end: { line: 121, column: 18 } }, loc: { start: { line: 121, column: 21 }, end: { line: 153, column: 1 } }, line: 121 }, "6": { name: "stepOut", decl: { start: { line: 160, column: 10 }, end: { line: 160, column: 17 } }, loc: { start: { line: 160, column: 20 }, end: { line: 175, column: 1 } }, line: 160 }, "7": { name: "stepOver", decl: { start: { line: 183, column: 10 }, end: { line: 183, column: 18 } }, loc: { start: { line: 183, column: 21 }, end: { line: 204, column: 1 } }, line: 183 }, "8": { name: "continueUntil", decl: { start: { line: 211, column: 10 }, end: { line: 211, column: 23 } }, loc: { start: { line: 211, column: 41 }, end: { line: 225, column: 1 } }, line: 211 }, "9": { name: "(anonymous_9)", decl: { start: { line: 223, column: 39 }, end: { line: 223, column: 40 } }, loc: { start: { line: 223, column: 76 }, end: { line: 223, column: 233 } }, line: 223 } }, branchMap: { "0": { loc: { start: { line: 37, column: 40 }, end: { line: 37, column: 267 } }, type: "if", locations: [{ start: { line: 37, column: 40 }, end: { line: 37, column: 267 } }, { start: { line: 37, column: 40 }, end: { line: 37, column: 267 } }], line: 37 }, "1": { loc: { start: { line: 37, column: 44 }, end: { line: 37, column: 65 } }, type: "binary-expr", locations: [{ start: { line: 37, column: 44 }, end: { line: 37, column: 47 } }, { start: { line: 37, column: 51 }, end: { line: 37, column: 65 } }], line: 37 }, "2": { loc: { start: { line: 37, column: 107 }, end: { line: 37, column: 228 } }, type: "if", locations: [{ start: { line: 37, column: 107 }, end: { line: 37, column: 228 } }, { start: { line: 37, column: 107 }, end: { line: 37, column: 228 } }], line: 37 }, "3": { loc: { start: { line: 37, column: 149 }, end: { line: 37, column: 224 } }, type: "if", locations: [{ start: { line: 37, column: 149 }, end: { line: 37, column: 224 } }, { start: { line: 37, column: 149 }, end: { line: 37, column: 224 } }], line: 37 }, "4": { loc: { start: { line: 39, column: 46 }, end: { line: 39, column: 92 } }, type: "cond-expr", locations: [{ start: { line: 39, column: 70 }, end: { line: 39, column: 73 } }, { start: { line: 39, column: 76 }, end: { line: 39, column: 92 } }], line: 39 }, "5": { loc: { start: { line: 39, column: 46 }, end: { line: 39, column: 67 } }, type: "binary-expr", locations: [{ start: { line: 39, column: 46 }, end: { line: 39, column: 49 } }, { start: { line: 39, column: 53 }, end: { line: 39, column: 67 } }], line: 39 }, "6": { loc: { start: { line: 106, column: 11 }, end: { line: 106, column: 191 } }, type: "binary-expr", locations: [{ start: { line: 106, column: 11 }, end: { line: 106, column: 20 } }, { start: { line: 106, column: 24 }, end: { line: 106, column: 38 } }, { start: { line: 106, column: 42 }, end: { line: 106, column: 83 } }, { start: { line: 106, column: 87 }, end: { line: 106, column: 136 } }, { start: { line: 106, column: 140 }, end: { line: 106, column: 191 } }], line: 106 }, "7": { loc: { start: { line: 122, column: 2 }, end: { line: 126, column: 3 } }, type: "if", locations: [{ start: { line: 122, column: 2 }, end: { line: 126, column: 3 } }, { start: { line: 122, column: 2 }, end: { line: 126, column: 3 } }], line: 122 }, "8": { loc: { start: { line: 128, column: 2 }, end: { line: 132, column: 3 } }, type: "if", locations: [{ start: { line: 128, column: 2 }, end: { line: 132, column: 3 } }, { start: { line: 128, column: 2 }, end: { line: 132, column: 3 } }], line: 128 }, "9": { loc: { start: { line: 146, column: 2 }, end: { line: 152, column: 88 } }, type: "binary-expr", locations: [{ start: { line: 146, column: 2 }, end: { line: 146, column: 31 } }, { start: { line: 149, column: 2 }, end: { line: 149, column: 43 } }, { start: { line: 152, column: 2 }, end: { line: 152, column: 88 } }], line: 146 }, "10": { loc: { start: { line: 161, column: 2 }, end: { line: 165, column: 3 } }, type: "if", locations: [{ start: { line: 161, column: 2 }, end: { line: 165, column: 3 } }, { start: { line: 161, column: 2 }, end: { line: 165, column: 3 } }], line: 161 }, "11": { loc: { start: { line: 198, column: 2 }, end: { line: 203, column: 98 } }, type: "binary-expr", locations: [{ start: { line: 198, column: 2 }, end: { line: 198, column: 33 } }, { start: { line: 203, column: 2 }, end: { line: 203, column: 30 } }, { start: { line: 203, column: 34 }, end: { line: 203, column: 97 } }], line: 198 }, "12": { loc: { start: { line: 223, column: 76 }, end: { line: 223, column: 233 } }, type: "binary-expr", locations: [{ start: { line: 223, column: 77 }, end: { line: 223, column: 107 } }, { start: { line: 223, column: 111 }, end: { line: 223, column: 139 } }, { start: { line: 223, column: 145 }, end: { line: 223, column: 197 } }, { start: { line: 223, column: 201 }, end: { line: 223, column: 232 } }], line: 223 } }, s: { "0": 0, "1": 0, "2": 0, "3": 0, "4": 0, "5": 0, "6": 0, "7": 0, "8": 0, "9": 0, "10": 0, "11": 0, "12": 0, "13": 0, "14": 0, "15": 0, "16": 0, "17": 0, "18": 0, "19": 0, "20": 0, "21": 0, "22": 0, "23": 0, "24": 0, "25": 0, "26": 0, "27": 0, "28": 0, "29": 0, "30": 0, "31": 0, "32": 0, "33": 0, "34": 0, "35": 0, "36": 0, "37": 0, "38": 0, "39": 0, "40": 0, "41": 0, "42": 0, "43": 0, "44": 0, "45": 0, "46": 0, "47": 0, "48": 0, "49": 0, "50": 0, "51": 0, "52": 0, "53": 0, "54": 0, "55": 0, "56": 0, "57": 0, "58": 0, "59": 0, "60": 0, "61": 0, "62": 0, "63": 0, "64": 0, "65": 0, "66": 0, "67": 0, "68": 0, "69": 0, "70": 0, "71": 0, "72": 0, "73": 0, "74": 0, "75": 0 }, f: { "0": 0, "1": 0, "2": 0, "3": 0, "4": 0, "5": 0, "6": 0, "7": 0, "8": 0, "9": 0 }, b: { "0": [0, 0], "1": [0, 0], "2": [0, 0], "3": [0, 0], "4": [0, 0], "5": [0, 0], "6": [0, 0, 0, 0, 0], "7": [0, 0], "8": [0, 0], "9": [0, 0, 0], "10": [0, 0], "11": [0, 0, 0], "12": [0, 0, 0, 0] }, inputSourceMap: { version: 3, sources: ["lib/controller/sagas/index.js"], names: ["saga", "trace", "actions", "debug", "CONTROL_SAGAS", "ADVANCE", "advance", "STEP_NEXT", "stepNext", "STEP_OVER", "stepOver", "STEP_INTO", "stepInto", "STEP_OUT", "stepOut", "CONTINUE_UNTIL", "continueUntil", "SKIPPED_TYPES", "action", "type", "beginStep", "exec", "interrupt", "INTERRUPT", "startingRange", "controller", "current", "location", "sourceRange", "upcoming", "e", "node", "has", "nodeType", "start", "length", "willJump", "isMultiline", "startingDepth", "functionDepth", "currentDepth", "currentRange", "lines", "line", "breakpoints", "currentCall", "currentLocation", "breakpointHit", "executionContext", "filter", "address", "binary", "id"], mappings: "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", file: "index.js", sourceRoot: "/Users/gnidan/src/work/truffle/packages/truffle-debugger", sourcesContent: ["import debugModule from \"debug\";\nconst debug = debugModule(\"debugger:controller:sagas\");\n\nimport { put, call, race, take, select } from 'redux-saga/effects';\n\nimport { prefixName } from \"lib/helpers\";\n\nimport * as trace from \"lib/trace/sagas\";\n\nimport * as actions from \"../actions\";\n\nimport controller from \"../selectors\";\n\nconst CONTROL_SAGAS = {\n  [actions.ADVANCE]: advance,\n  [actions.STEP_NEXT]: stepNext,\n  [actions.STEP_OVER]: stepOver,\n  [actions.STEP_INTO]: stepInto,\n  [actions.STEP_OUT]: stepOut,\n  [actions.CONTINUE_UNTIL]: continueUntil\n};\n\n/** AST node types that are skipped to filter out some noise */\nconst SKIPPED_TYPES = new Set([\n  \"ContractDefinition\",\n  \"VariableDeclaration\",\n]);\n\nexport function* saga() {\n  while (true) {\n    debug(\"waiting for control action\");\n    let action = yield take(Object.keys(CONTROL_SAGAS));\n    debug(\"got control action\");\n    let saga = CONTROL_SAGAS[action.type];\n\n    yield put(actions.beginStep(action.type));\n\n    yield race({\n      exec: call(saga, action),\n      interrupt: take(actions.INTERRUPT)\n    });\n  }\n}\n\nexport default prefixName(\"controller\", saga);\n\n/**\n * Advance the state by one instruction\n */\nfunction* advance() {\n  // send action to advance trace\n  yield *trace.advance();\n}\n\n/**\n * stepNext - step to the next logical code segment\n *\n * Note: It might take multiple instructions to express the same section of code.\n * \"Stepping\", then, is stepping to the next logical item, not stepping to the next\n * instruction. See advance() if you'd like to advance by one instruction.\n */\nfunction* stepNext () {\n  const startingRange = yield select(controller.current.location.sourceRange);\n\n  var upcoming;\n\n  do {\n    // advance at least once step\n    yield* advance();\n\n    // and check the next source range\n    try {\n      upcoming = yield select(controller.current.location);\n    } catch (e) {\n      upcoming = null;\n    }\n\n    // if the next step's source range is still the same, keep going\n  } while (\n    !upcoming ||\n    !upcoming.node ||\n    SKIPPED_TYPES.has(upcoming.node.nodeType) ||\n\n    upcoming.sourceRange.start == startingRange.start &&\n    upcoming.sourceRange.length == startingRange.length\n  );\n}\n\n/**\n * stepInto - step into the current function\n *\n * Conceptually this is easy, but from a programming standpoint it's hard.\n * Code like `getBalance(msg.sender)` might be highlighted, but there could\n * be a number of different intermediate steps (like evaluating `msg.sender`)\n * before `getBalance` is stepped into. This function will step into the first\n * function available (where instruction.jump == \"i\"), ignoring any intermediate\n * steps that fall within the same code range. If there's a step encountered\n * that exists outside of the range, then stepInto will only execute until that\n * step.\n */\nfunction* stepInto () {\n  if (yield select(controller.current.willJump)) {\n    yield* stepNext();\n\n    return;\n  }\n\n  if (yield select(controller.current.location.isMultiline)) {\n    yield* stepOver();\n\n    return;\n  }\n\n  const startingDepth = yield select(controller.current.functionDepth);\n  const startingRange = yield select(controller.current.location.sourceRange);\n  var currentDepth;\n  var currentRange;\n\n  do {\n    yield* stepNext();\n\n    currentDepth = yield select(controller.current.functionDepth);\n    currentRange = yield select(controller.current.location.sourceRange);\n\n  } while (\n    // the function stack has not increased,\n    currentDepth <= startingDepth &&\n\n    // the current source range begins on or after the starting range\n    currentRange.start >= startingRange.start &&\n\n    // and the current range ends on or before the starting range ends\n    (currentRange.start + currentRange.length) <=\n      (startingRange.start + startingRange.length)\n  );\n}\n\n/**\n * Step out of the current function\n *\n * This will run until the debugger encounters a decrease in function depth.\n */\nfunction* stepOut () {\n  if (yield select(controller.current.location.isMultiline)) {\n    yield *stepOver();\n\n    return;\n  }\n\n  const startingDepth = yield select(controller.current.functionDepth);\n  var currentDepth;\n\n  do {\n    yield* stepNext();\n\n    currentDepth = yield select(controller.current.functionDepth);\n\n  } while(currentDepth >= startingDepth);\n}\n\n/**\n * stepOver - step over the current line\n *\n * Step over the current line. This will step to the next instruction that\n * exists on a different line of code within the same function depth.\n */\nfunction* stepOver () {\n  const startingDepth = yield select(controller.current.functionDepth);\n  const startingRange = yield select(controller.current.location.sourceRange);\n  var currentDepth;\n  var currentRange;\n\n  do {\n    yield* stepNext();\n\n    currentDepth = yield select(controller.current.functionDepth);\n    currentRange = yield select(controller.current.location.sourceRange);\n\n  } while (\n    // keep stepping provided:\n    //\n    // we haven't jumped out\n    !(currentDepth < startingDepth) &&\n\n    // either: function depth is greater than starting (ignore function calls)\n    // or, if we're at the same depth, keep stepping until we're on a new\n    // line.\n    (currentDepth > startingDepth ||\n      currentRange.lines.start.line == startingRange.lines.start.line)\n  )\n}\n\n/**\n * continueUntil - step through execution until a breakpoint\n *\n * @param breakpoints - array of breakpoints ({ ...call, line })\n */\nfunction *continueUntil ({breakpoints}) {\n  var currentCall;\n  var currentLocation;\n\n  let breakpointHit = false;\n\n  do {\n    yield* stepNext();\n\n    currentCall = yield select(controller.current.executionContext);\n    currentLocation = yield select(controller.current.location);\n\n    breakpointHit = breakpoints\n      .filter( ({address, binary, line, node}) =>\n        (\n          address == currentCall.address ||\n          binary == currentCall.binary\n        ) && (\n          line == currentLocation.sourceRange.lines.start.line ||\n          node == currentLocation.node.id\n        )\n      )\n      .length > 0;\n\n  } while (!breakpointHit);\n}\n"] }, _coverageSchema: "332fd63041d2c1bcb487cc26dd0d5f7d97098a6c" },
      coverage = global[gcv] || (global[gcv] = {});if (coverage[path] && coverage[path].hash === hash) {
    return coverage[path];
  }coverageData.hash = hash;return coverage[path] = coverageData;
}();cov_2he17h4koc.s[0]++;Object.defineProperty(exports, "__esModule", { value: true });var _keys = (cov_2he17h4koc.s[1]++, __webpack_require__(17));var _keys2 = (cov_2he17h4koc.s[2]++, _interopRequireDefault(_keys));var _set = (cov_2he17h4koc.s[3]++, __webpack_require__(22));var _set2 = (cov_2he17h4koc.s[4]++, _interopRequireDefault(_set));cov_2he17h4koc.s[5]++;exports.saga = saga;var _debug = (cov_2he17h4koc.s[6]++, __webpack_require__(0));var _debug2 = (cov_2he17h4koc.s[7]++, _interopRequireDefault(_debug));var _effects = (cov_2he17h4koc.s[8]++, __webpack_require__(10));var _helpers = (cov_2he17h4koc.s[9]++, __webpack_require__(4));var _sagas = (cov_2he17h4koc.s[10]++, __webpack_require__(33));var trace = (cov_2he17h4koc.s[11]++, _interopRequireWildcard(_sagas));var _actions = (cov_2he17h4koc.s[12]++, __webpack_require__(30));var actions = (cov_2he17h4koc.s[13]++, _interopRequireWildcard(_actions));var _selectors = (cov_2he17h4koc.s[14]++, __webpack_require__(67));var _selectors2 = (cov_2he17h4koc.s[15]++, _interopRequireDefault(_selectors));function _interopRequireWildcard(obj) {
  cov_2he17h4koc.f[0]++;cov_2he17h4koc.s[16]++;if ((cov_2he17h4koc.b[1][0]++, obj) && (cov_2he17h4koc.b[1][1]++, obj.__esModule)) {
    cov_2he17h4koc.b[0][0]++;cov_2he17h4koc.s[17]++;return obj;
  } else {
    cov_2he17h4koc.b[0][1]++;var newObj = (cov_2he17h4koc.s[18]++, {});cov_2he17h4koc.s[19]++;if (obj != null) {
      cov_2he17h4koc.b[2][0]++;cov_2he17h4koc.s[20]++;for (var key in obj) {
        cov_2he17h4koc.s[21]++;if (Object.prototype.hasOwnProperty.call(obj, key)) {
          cov_2he17h4koc.b[3][0]++;cov_2he17h4koc.s[22]++;newObj[key] = obj[key];
        } else {
          cov_2he17h4koc.b[3][1]++;
        }
      }
    } else {
      cov_2he17h4koc.b[2][1]++;
    }cov_2he17h4koc.s[23]++;newObj.default = obj;cov_2he17h4koc.s[24]++;return newObj;
  }
}function _interopRequireDefault(obj) {
  cov_2he17h4koc.f[1]++;cov_2he17h4koc.s[25]++;return (cov_2he17h4koc.b[5][0]++, obj) && (cov_2he17h4koc.b[5][1]++, obj.__esModule) ? (cov_2he17h4koc.b[4][0]++, obj) : (cov_2he17h4koc.b[4][1]++, { default: obj });
}const debug = (cov_2he17h4koc.s[26]++, (0, _debug2.default)("debugger:controller:sagas"));const CONTROL_SAGAS = (cov_2he17h4koc.s[27]++, { [actions.ADVANCE]: advance, [actions.STEP_NEXT]: stepNext, [actions.STEP_OVER]: stepOver, [actions.STEP_INTO]: stepInto, [actions.STEP_OUT]: stepOut, [actions.CONTINUE_UNTIL]: continueUntil });const SKIPPED_TYPES = (cov_2he17h4koc.s[28]++, new _set2.default(["ContractDefinition", "VariableDeclaration"]));function* saga() {
  cov_2he17h4koc.f[2]++;cov_2he17h4koc.s[29]++;while (true) {
    cov_2he17h4koc.s[30]++;debug("waiting for control action");let action = (cov_2he17h4koc.s[31]++, yield (0, _effects.take)((0, _keys2.default)(CONTROL_SAGAS)));cov_2he17h4koc.s[32]++;debug("got control action");let saga = (cov_2he17h4koc.s[33]++, CONTROL_SAGAS[action.type]);cov_2he17h4koc.s[34]++;yield (0, _effects.put)(actions.beginStep(action.type));cov_2he17h4koc.s[35]++;yield (0, _effects.race)({ exec: (0, _effects.call)(saga, action), interrupt: (0, _effects.take)(actions.INTERRUPT) });
  }
}cov_2he17h4koc.s[36]++;exports.default = (0, _helpers.prefixName)("controller", saga);function* advance() {
  cov_2he17h4koc.f[3]++;cov_2he17h4koc.s[37]++;yield* trace.advance();
}function* stepNext() {
  cov_2he17h4koc.f[4]++;const startingRange = (cov_2he17h4koc.s[38]++, yield (0, _effects.select)(_selectors2.default.current.location.sourceRange));var upcoming;cov_2he17h4koc.s[39]++;do {
    cov_2he17h4koc.s[40]++;yield* advance();cov_2he17h4koc.s[41]++;try {
      cov_2he17h4koc.s[42]++;upcoming = yield (0, _effects.select)(_selectors2.default.current.location);
    } catch (e) {
      cov_2he17h4koc.s[43]++;upcoming = null;
    }
  } while ((cov_2he17h4koc.b[6][0]++, !upcoming) || (cov_2he17h4koc.b[6][1]++, !upcoming.node) || (cov_2he17h4koc.b[6][2]++, SKIPPED_TYPES.has(upcoming.node.nodeType)) || (cov_2he17h4koc.b[6][3]++, upcoming.sourceRange.start == startingRange.start) && (cov_2he17h4koc.b[6][4]++, upcoming.sourceRange.length == startingRange.length));
}function* stepInto() {
  cov_2he17h4koc.f[5]++;cov_2he17h4koc.s[44]++;if (yield (0, _effects.select)(_selectors2.default.current.willJump)) {
    cov_2he17h4koc.b[7][0]++;cov_2he17h4koc.s[45]++;yield* stepNext();cov_2he17h4koc.s[46]++;return;
  } else {
    cov_2he17h4koc.b[7][1]++;
  }cov_2he17h4koc.s[47]++;if (yield (0, _effects.select)(_selectors2.default.current.location.isMultiline)) {
    cov_2he17h4koc.b[8][0]++;cov_2he17h4koc.s[48]++;yield* stepOver();cov_2he17h4koc.s[49]++;return;
  } else {
    cov_2he17h4koc.b[8][1]++;
  }const startingDepth = (cov_2he17h4koc.s[50]++, yield (0, _effects.select)(_selectors2.default.current.functionDepth));const startingRange = (cov_2he17h4koc.s[51]++, yield (0, _effects.select)(_selectors2.default.current.location.sourceRange));var currentDepth;var currentRange;cov_2he17h4koc.s[52]++;do {
    cov_2he17h4koc.s[53]++;yield* stepNext();cov_2he17h4koc.s[54]++;currentDepth = yield (0, _effects.select)(_selectors2.default.current.functionDepth);cov_2he17h4koc.s[55]++;currentRange = yield (0, _effects.select)(_selectors2.default.current.location.sourceRange);
  } while ((cov_2he17h4koc.b[9][0]++, currentDepth <= startingDepth) && (cov_2he17h4koc.b[9][1]++, currentRange.start >= startingRange.start) && (cov_2he17h4koc.b[9][2]++, currentRange.start + currentRange.length <= startingRange.start + startingRange.length));
}function* stepOut() {
  cov_2he17h4koc.f[6]++;cov_2he17h4koc.s[56]++;if (yield (0, _effects.select)(_selectors2.default.current.location.isMultiline)) {
    cov_2he17h4koc.b[10][0]++;cov_2he17h4koc.s[57]++;yield* stepOver();cov_2he17h4koc.s[58]++;return;
  } else {
    cov_2he17h4koc.b[10][1]++;
  }const startingDepth = (cov_2he17h4koc.s[59]++, yield (0, _effects.select)(_selectors2.default.current.functionDepth));var currentDepth;cov_2he17h4koc.s[60]++;do {
    cov_2he17h4koc.s[61]++;yield* stepNext();cov_2he17h4koc.s[62]++;currentDepth = yield (0, _effects.select)(_selectors2.default.current.functionDepth);
  } while (currentDepth >= startingDepth);
}function* stepOver() {
  cov_2he17h4koc.f[7]++;const startingDepth = (cov_2he17h4koc.s[63]++, yield (0, _effects.select)(_selectors2.default.current.functionDepth));const startingRange = (cov_2he17h4koc.s[64]++, yield (0, _effects.select)(_selectors2.default.current.location.sourceRange));var currentDepth;var currentRange;cov_2he17h4koc.s[65]++;do {
    cov_2he17h4koc.s[66]++;yield* stepNext();cov_2he17h4koc.s[67]++;currentDepth = yield (0, _effects.select)(_selectors2.default.current.functionDepth);cov_2he17h4koc.s[68]++;currentRange = yield (0, _effects.select)(_selectors2.default.current.location.sourceRange);
  } while ((cov_2he17h4koc.b[11][0]++, !(currentDepth < startingDepth)) && ((cov_2he17h4koc.b[11][1]++, currentDepth > startingDepth) || (cov_2he17h4koc.b[11][2]++, currentRange.lines.start.line == startingRange.lines.start.line)));
}function* continueUntil({ breakpoints }) {
  cov_2he17h4koc.f[8]++;var currentCall;var currentLocation;let breakpointHit = (cov_2he17h4koc.s[69]++, false);cov_2he17h4koc.s[70]++;do {
    cov_2he17h4koc.s[71]++;yield* stepNext();cov_2he17h4koc.s[72]++;currentCall = yield (0, _effects.select)(_selectors2.default.current.executionContext);cov_2he17h4koc.s[73]++;currentLocation = yield (0, _effects.select)(_selectors2.default.current.location);cov_2he17h4koc.s[74]++;breakpointHit = breakpoints.filter(({ address, binary, line, node }) => {
      cov_2he17h4koc.f[9]++;cov_2he17h4koc.s[75]++;return ((cov_2he17h4koc.b[12][0]++, address == currentCall.address) || (cov_2he17h4koc.b[12][1]++, binary == currentCall.binary)) && ((cov_2he17h4koc.b[12][2]++, line == currentLocation.sourceRange.lines.start.line) || (cov_2he17h4koc.b[12][3]++, node == currentLocation.node.id));
    }).length > 0;
  } while (!breakpointHit);
}

/***/ }),
/* 67 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var cov_kojt2n1xq = function () {
  var path = "/Users/gnidan/src/work/truffle/packages/truffle-debugger/lib/controller/selectors/index.js",
      hash = "ebb00c523fb9277a31eae077113fe7221a75dd1a",
      Function = function () {}.constructor,
      global = new Function('return this')(),
      gcv = "__coverage__",
      coverageData = { path: "/Users/gnidan/src/work/truffle/packages/truffle-debugger/lib/controller/selectors/index.js", statementMap: { "0": { start: { line: 3, column: 0 }, end: { line: 5, column: 3 } }, "1": { start: { line: 7, column: 13 }, end: { line: 7, column: 29 } }, "2": { start: { line: 9, column: 14 }, end: { line: 9, column: 44 } }, "3": { start: { line: 11, column: 20 }, end: { line: 11, column: 44 } }, "4": { start: { line: 13, column: 17 }, end: { line: 13, column: 45 } }, "5": { start: { line: 15, column: 18 }, end: { line: 15, column: 52 } }, "6": { start: { line: 17, column: 18 }, end: { line: 17, column: 51 } }, "7": { start: { line: 19, column: 18 }, end: { line: 19, column: 53 } }, "8": { start: { line: 21, column: 18 }, end: { line: 21, column: 46 } }, "9": { start: { line: 23, column: 18 }, end: { line: 23, column: 53 } }, "10": { start: { line: 25, column: 39 }, end: { line: 25, column: 93 } }, "11": { start: { line: 27, column: 14 }, end: { line: 27, column: 63 } }, "12": { start: { line: 32, column: 17 }, end: { line: 32, column: 23 } }, "13": { start: { line: 32, column: 22 }, end: { line: 32, column: 23 } }, "14": { start: { line: 37, column: 19 }, end: { line: 78, column: 2 } }, "15": { start: { line: 80, column: 0 }, end: { line: 80, column: 29 } } }, fnMap: { "0": { name: "_interopRequireDefault", decl: { start: { line: 25, column: 9 }, end: { line: 25, column: 31 } }, loc: { start: { line: 25, column: 37 }, end: { line: 25, column: 95 } }, line: 25 }, "1": { name: "(anonymous_1)", decl: { start: { line: 32, column: 17 }, end: { line: 32, column: 18 } }, loc: { start: { line: 32, column: 22 }, end: { line: 32, column: 23 } }, line: 32 } }, branchMap: { "0": { loc: { start: { line: 25, column: 46 }, end: { line: 25, column: 92 } }, type: "cond-expr", locations: [{ start: { line: 25, column: 70 }, end: { line: 25, column: 73 } }, { start: { line: 25, column: 76 }, end: { line: 25, column: 92 } }], line: 25 }, "1": { loc: { start: { line: 25, column: 46 }, end: { line: 25, column: 67 } }, type: "binary-expr", locations: [{ start: { line: 25, column: 46 }, end: { line: 25, column: 49 } }, { start: { line: 25, column: 53 }, end: { line: 25, column: 67 } }], line: 25 } }, s: { "0": 0, "1": 0, "2": 0, "3": 0, "4": 0, "5": 0, "6": 0, "7": 0, "8": 0, "9": 0, "10": 0, "11": 0, "12": 0, "13": 0, "14": 0, "15": 0 }, f: { "0": 0, "1": 0 }, b: { "0": [0, 0], "1": [0, 0] }, inputSourceMap: { version: 3, sources: ["lib/controller/selectors/index.js"], names: ["debug", "identity", "x", "controller", "current", "functionDepth", "solidity", "executionContext", "evm", "call", "willJump", "step", "isJump", "location", "sourceRange", "node", "ast", "isMultiline"], mappings: ";;;;;;AAAA;;;;AAGA;;AAEA;;;;AACA;;;;AACA;;;;;;AANA,MAAMA,QAAQ,qBAAY,2BAAZ,CAAd;;AAQA;;;AAGA,MAAMC,WAAYC,CAAD,IAAOA,CAAxB;;AAEA;;;AAGA,MAAMC,aAAa,sCAAmB;;AAEpC;;;AAGAC,WAAS;AACP;;;AAGAC,mBAAe,8BAAW,CAACC,oBAASF,OAAT,CAAiBC,aAAlB,CAAX,EAA6CJ,QAA7C,CAJR;;AAMP;;;AAGAM,sBAAkB,8BAAW,CAACC,oBAAIJ,OAAJ,CAAYK,IAAb,CAAX,EAA+BR,QAA/B,CATX;;AAWP;;;AAGAS,cAAU,8BAAW,CAACF,oBAAIJ,OAAJ,CAAYO,IAAZ,CAAiBC,MAAlB,CAAX,EAAsCX,QAAtC,CAdH;;AAgBP;;;AAGAY,cAAU;AACR;;;AAGAC,mBAAa,8BAAW,CAACR,oBAASF,OAAT,CAAiBU,WAAlB,CAAX,EAA2Cb,QAA3C,CAJL;;AAMR;;;AAGAc,YAAM,8BAAW,CAACC,oBAAIZ,OAAJ,CAAYW,IAAb,CAAX,EAA+Bd,QAA/B,CATE;;AAWR;;;AAGAgB,mBAAa,8BAAW,CAACX,oBAASF,OAAT,CAAiBa,WAAlB,CAAX,EAA2ChB,QAA3C;AAdL;AAnBH;AAL2B,CAAnB,CAAnB;;kBA2CeE,U", file: "index.js", sourceRoot: "/Users/gnidan/src/work/truffle/packages/truffle-debugger", sourcesContent: ["import debugModule from \"debug\";\nconst debug = debugModule(\"debugger:controller:sagas\");\n\nimport { createSelectorTree, createLeaf } from \"reselect-tree\";\n\nimport evm from \"lib/evm/selectors\";\nimport solidity from \"lib/solidity/selectors\";\nimport ast from \"lib/ast/selectors\";\n\n/**\n * @private\n */\nconst identity = (x) => x\n\n/**\n * controller\n */\nconst controller = createSelectorTree({\n\n  /**\n   * controller.current\n   */\n  current: {\n    /**\n     * controller.current.functionDepth\n     */\n    functionDepth: createLeaf([solidity.current.functionDepth], identity),\n\n    /**\n     * controller.current.executionContext\n     */\n    executionContext: createLeaf([evm.current.call], identity),\n\n    /**\n     * controller.current.willJump\n     */\n    willJump: createLeaf([evm.current.step.isJump], identity),\n\n    /**\n     * controller.current.location\n     */\n    location: {\n      /**\n       * controller.current.location.sourceRange\n       */\n      sourceRange: createLeaf([solidity.current.sourceRange], identity),\n\n      /**\n       * controller.current.location.node\n       */\n      node: createLeaf([ast.current.node], identity),\n\n      /**\n       * controller.current.location.isMultiline\n       */\n      isMultiline: createLeaf([solidity.current.isMultiline], identity),\n    }\n  }\n});\n\nexport default controller;\n"] }, _coverageSchema: "332fd63041d2c1bcb487cc26dd0d5f7d97098a6c" },
      coverage = global[gcv] || (global[gcv] = {});if (coverage[path] && coverage[path].hash === hash) {
    return coverage[path];
  }coverageData.hash = hash;return coverage[path] = coverageData;
}();cov_kojt2n1xq.s[0]++;Object.defineProperty(exports, "__esModule", { value: true });var _debug = (cov_kojt2n1xq.s[1]++, __webpack_require__(0));var _debug2 = (cov_kojt2n1xq.s[2]++, _interopRequireDefault(_debug));var _reselectTree = (cov_kojt2n1xq.s[3]++, __webpack_require__(9));var _selectors = (cov_kojt2n1xq.s[4]++, __webpack_require__(5));var _selectors2 = (cov_kojt2n1xq.s[5]++, _interopRequireDefault(_selectors));var _selectors3 = (cov_kojt2n1xq.s[6]++, __webpack_require__(6));var _selectors4 = (cov_kojt2n1xq.s[7]++, _interopRequireDefault(_selectors3));var _selectors5 = (cov_kojt2n1xq.s[8]++, __webpack_require__(14));var _selectors6 = (cov_kojt2n1xq.s[9]++, _interopRequireDefault(_selectors5));function _interopRequireDefault(obj) {
  cov_kojt2n1xq.f[0]++;cov_kojt2n1xq.s[10]++;return (cov_kojt2n1xq.b[1][0]++, obj) && (cov_kojt2n1xq.b[1][1]++, obj.__esModule) ? (cov_kojt2n1xq.b[0][0]++, obj) : (cov_kojt2n1xq.b[0][1]++, { default: obj });
}const debug = (cov_kojt2n1xq.s[11]++, (0, _debug2.default)("debugger:controller:sagas"));cov_kojt2n1xq.s[12]++;const identity = x => {
  cov_kojt2n1xq.f[1]++;cov_kojt2n1xq.s[13]++;return x;
};const controller = (cov_kojt2n1xq.s[14]++, (0, _reselectTree.createSelectorTree)({ current: { functionDepth: (0, _reselectTree.createLeaf)([_selectors4.default.current.functionDepth], identity), executionContext: (0, _reselectTree.createLeaf)([_selectors2.default.current.call], identity), willJump: (0, _reselectTree.createLeaf)([_selectors2.default.current.step.isJump], identity), location: { sourceRange: (0, _reselectTree.createLeaf)([_selectors4.default.current.sourceRange], identity), node: (0, _reselectTree.createLeaf)([_selectors6.default.current.node], identity), isMultiline: (0, _reselectTree.createLeaf)([_selectors4.default.current.isMultiline], identity) } } }));cov_kojt2n1xq.s[15]++;exports.default = controller;

/***/ }),
/* 68 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var cov_l72hxq5wc = function () {
  var path = "/Users/gnidan/src/work/truffle/packages/truffle-debugger/lib/solidity/sagas/index.js",
      hash = "c0ae92a0d019ab8aa14d5ef3f668cf2df5b566fe",
      Function = function () {}.constructor,
      global = new Function('return this')(),
      gcv = "__coverage__",
      coverageData = { path: "/Users/gnidan/src/work/truffle/packages/truffle-debugger/lib/solidity/sagas/index.js", statementMap: { "0": { start: { line: 3, column: 0 }, end: { line: 5, column: 3 } }, "1": { start: { line: 6, column: 0 }, end: { line: 6, column: 30 } }, "2": { start: { line: 7, column: 0 }, end: { line: 7, column: 36 } }, "3": { start: { line: 8, column: 0 }, end: { line: 8, column: 20 } }, "4": { start: { line: 10, column: 13 }, end: { line: 10, column: 29 } }, "5": { start: { line: 12, column: 14 }, end: { line: 12, column: 44 } }, "6": { start: { line: 14, column: 15 }, end: { line: 14, column: 44 } }, "7": { start: { line: 16, column: 15 }, end: { line: 16, column: 37 } }, "8": { start: { line: 18, column: 15 }, end: { line: 18, column: 36 } }, "9": { start: { line: 20, column: 14 }, end: { line: 20, column: 47 } }, "10": { start: { line: 22, column: 16 }, end: { line: 22, column: 44 } }, "11": { start: { line: 24, column: 17 }, end: { line: 24, column: 40 } }, "12": { start: { line: 26, column: 18 }, end: { line: 26, column: 52 } }, "13": { start: { line: 28, column: 40 }, end: { line: 28, column: 267 } }, "14": { start: { line: 28, column: 69 }, end: { line: 28, column: 80 } }, "15": { start: { line: 28, column: 103 }, end: { line: 28, column: 105 } }, "16": { start: { line: 28, column: 107 }, end: { line: 28, column: 228 } }, "17": { start: { line: 28, column: 126 }, end: { line: 28, column: 226 } }, "18": { start: { line: 28, column: 149 }, end: { line: 28, column: 224 } }, "19": { start: { line: 28, column: 201 }, end: { line: 28, column: 224 } }, "20": { start: { line: 28, column: 229 }, end: { line: 28, column: 250 } }, "21": { start: { line: 28, column: 251 }, end: { line: 28, column: 265 } }, "22": { start: { line: 30, column: 39 }, end: { line: 30, column: 93 } }, "23": { start: { line: 32, column: 14 }, end: { line: 32, column: 61 } }, "24": { start: { line: 35, column: 2 }, end: { line: 35, column: 70 } }, "25": { start: { line: 39, column: 2 }, end: { line: 39, column: 67 } }, "26": { start: { line: 43, column: 2 }, end: { line: 48, column: 3 } }, "27": { start: { line: 44, column: 4 }, end: { line: 44, column: 45 } }, "28": { start: { line: 45, column: 4 }, end: { line: 45, column: 22 } }, "29": { start: { line: 47, column: 4 }, end: { line: 47, column: 31 } }, "30": { start: { line: 52, column: 2 }, end: { line: 56, column: 3 } }, "31": { start: { line: 53, column: 24 }, end: { line: 53, column: 93 } }, "32": { start: { line: 55, column: 4 }, end: { line: 55, column: 57 } }, "33": { start: { line: 60, column: 2 }, end: { line: 60, column: 37 } }, "34": { start: { line: 63, column: 0 }, end: { line: 63, column: 61 } } }, fnMap: { "0": { name: "_interopRequireWildcard", decl: { start: { line: 28, column: 9 }, end: { line: 28, column: 32 } }, loc: { start: { line: 28, column: 38 }, end: { line: 28, column: 269 } }, line: 28 }, "1": { name: "_interopRequireDefault", decl: { start: { line: 30, column: 9 }, end: { line: 30, column: 31 } }, loc: { start: { line: 30, column: 37 }, end: { line: 30, column: 95 } }, line: 30 }, "2": { name: "addSource", decl: { start: { line: 34, column: 10 }, end: { line: 34, column: 19 } }, loc: { start: { line: 34, column: 45 }, end: { line: 36, column: 1 } }, line: 34 }, "3": { name: "addSourceMap", decl: { start: { line: 38, column: 10 }, end: { line: 38, column: 22 } }, loc: { start: { line: 38, column: 42 }, end: { line: 40, column: 1 } }, line: 38 }, "4": { name: "tickSaga", decl: { start: { line: 42, column: 10 }, end: { line: 42, column: 18 } }, loc: { start: { line: 42, column: 21 }, end: { line: 49, column: 1 } }, line: 42 }, "5": { name: "functionDepthSaga", decl: { start: { line: 51, column: 10 }, end: { line: 51, column: 27 } }, loc: { start: { line: 51, column: 30 }, end: { line: 57, column: 1 } }, line: 51 }, "6": { name: "saga", decl: { start: { line: 59, column: 10 }, end: { line: 59, column: 14 } }, loc: { start: { line: 59, column: 17 }, end: { line: 61, column: 1 } }, line: 59 } }, branchMap: { "0": { loc: { start: { line: 28, column: 40 }, end: { line: 28, column: 267 } }, type: "if", locations: [{ start: { line: 28, column: 40 }, end: { line: 28, column: 267 } }, { start: { line: 28, column: 40 }, end: { line: 28, column: 267 } }], line: 28 }, "1": { loc: { start: { line: 28, column: 44 }, end: { line: 28, column: 65 } }, type: "binary-expr", locations: [{ start: { line: 28, column: 44 }, end: { line: 28, column: 47 } }, { start: { line: 28, column: 51 }, end: { line: 28, column: 65 } }], line: 28 }, "2": { loc: { start: { line: 28, column: 107 }, end: { line: 28, column: 228 } }, type: "if", locations: [{ start: { line: 28, column: 107 }, end: { line: 28, column: 228 } }, { start: { line: 28, column: 107 }, end: { line: 28, column: 228 } }], line: 28 }, "3": { loc: { start: { line: 28, column: 149 }, end: { line: 28, column: 224 } }, type: "if", locations: [{ start: { line: 28, column: 149 }, end: { line: 28, column: 224 } }, { start: { line: 28, column: 149 }, end: { line: 28, column: 224 } }], line: 28 }, "4": { loc: { start: { line: 30, column: 46 }, end: { line: 30, column: 92 } }, type: "cond-expr", locations: [{ start: { line: 30, column: 70 }, end: { line: 30, column: 73 } }, { start: { line: 30, column: 76 }, end: { line: 30, column: 92 } }], line: 30 }, "5": { loc: { start: { line: 30, column: 46 }, end: { line: 30, column: 67 } }, type: "binary-expr", locations: [{ start: { line: 30, column: 46 }, end: { line: 30, column: 49 } }, { start: { line: 30, column: 53 }, end: { line: 30, column: 67 } }], line: 30 }, "6": { loc: { start: { line: 52, column: 2 }, end: { line: 56, column: 3 } }, type: "if", locations: [{ start: { line: 52, column: 2 }, end: { line: 56, column: 3 } }, { start: { line: 52, column: 2 }, end: { line: 56, column: 3 } }], line: 52 } }, s: { "0": 0, "1": 0, "2": 0, "3": 0, "4": 0, "5": 0, "6": 0, "7": 0, "8": 0, "9": 0, "10": 0, "11": 0, "12": 0, "13": 0, "14": 0, "15": 0, "16": 0, "17": 0, "18": 0, "19": 0, "20": 0, "21": 0, "22": 0, "23": 0, "24": 0, "25": 0, "26": 0, "27": 0, "28": 0, "29": 0, "30": 0, "31": 0, "32": 0, "33": 0, "34": 0 }, f: { "0": 0, "1": 0, "2": 0, "3": 0, "4": 0, "5": 0, "6": 0 }, b: { "0": [0, 0], "1": [0, 0], "2": [0, 0], "3": [0, 0], "4": [0, 0], "5": [0, 0], "6": [0, 0] }, inputSourceMap: { version: 3, sources: ["lib/solidity/sagas/index.js"], names: ["addSource", "addSourceMap", "saga", "actions", "debug", "source", "sourcePath", "ast", "binary", "sourceMap", "tickSaga", "TICK", "functionDepthSaga", "solidity", "current", "willJump", "jumpDirection", "jump"], mappings: ";;;;;QAWiBA,S,GAAAA,S;QAIAC,Y,GAAAA,Y;QAsBAC,I,GAAAA,I;;AArCjB;;;;AAGA;;AACA;;AAEA;;IAAYC,O;;AACZ;;AAEA;;;;;;;;AARA,MAAMC,QAAQ,qBAAY,yBAAZ,CAAd;;AAUO,UAAUJ,SAAV,CAAoBK,MAApB,EAA4BC,UAA5B,EAAwCC,GAAxC,EAA6C;AAClD,QAAM,kBAAIJ,QAAQH,SAAR,CAAkBK,MAAlB,EAA0BC,UAA1B,EAAsCC,GAAtC,CAAJ,CAAN;AACD;;AAEM,UAAUN,YAAV,CAAuBO,MAAvB,EAA+BC,SAA/B,EAA0C;AAC/C,QAAM,kBAAIN,QAAQF,YAAR,CAAqBO,MAArB,EAA6BC,SAA7B,CAAJ,CAAN;AACD;;AAED,UAAUC,QAAV,GAAqB;AACnB,SAAO,IAAP,EAAa;AACX,UAAM,mBAAKC,cAAL,CAAN;AACAP,UAAM,UAAN;;AAEA,WAAOQ,mBAAP;AACD;AACF;;AAED,UAAUA,iBAAV,GAA+B;AAC7B,MAAI,MAAM,qBAAOC,oBAASC,OAAT,CAAiBC,QAAxB,CAAV,EAA6C;AAC3C,QAAIC,gBAAgB,MAAM,qBAAOH,oBAASC,OAAT,CAAiBE,aAAxB,CAA1B;;AAGA,UAAM,kBAAIb,QAAQc,IAAR,CAAaD,aAAb,CAAJ,CAAN;AACD;AACF;;AAEM,UAAUd,IAAV,GAAkB;AACvB,QAAM,mBAAKQ,QAAL,CAAN;AACD;;kBAEc,yBAAW,UAAX,EAAuBR,IAAvB,C", file: "index.js", sourceRoot: "/Users/gnidan/src/work/truffle/packages/truffle-debugger", sourcesContent: ["import debugModule from \"debug\";\nconst debug = debugModule(\"debugger:solidity:sagas\");\n\nimport { call, put, take, select } from \"redux-saga/effects\";\nimport { prefixName } from \"lib/helpers\";\n\nimport * as actions from \"../actions\";\nimport { TICK } from \"lib/trace/actions\";\n\nimport solidity from \"../selectors\";\n\nexport function *addSource(source, sourcePath, ast) {\n  yield put(actions.addSource(source, sourcePath, ast));\n}\n\nexport function *addSourceMap(binary, sourceMap) {\n  yield put(actions.addSourceMap(binary, sourceMap));\n}\n\nfunction *tickSaga() {\n  while (true) {\n    yield take(TICK);\n    debug(\"got TICK\");\n\n    yield *functionDepthSaga();\n  }\n}\n\nfunction* functionDepthSaga () {\n  if (yield select(solidity.current.willJump)) {\n    let jumpDirection = yield select(solidity.current.jumpDirection);\n\n\n    yield put(actions.jump(jumpDirection));\n  }\n}\n\nexport function* saga () {\n  yield call(tickSaga);\n}\n\nexport default prefixName(\"solidity\", saga);\n"] }, _coverageSchema: "332fd63041d2c1bcb487cc26dd0d5f7d97098a6c" },
      coverage = global[gcv] || (global[gcv] = {});if (coverage[path] && coverage[path].hash === hash) {
    return coverage[path];
  }coverageData.hash = hash;return coverage[path] = coverageData;
}();cov_l72hxq5wc.s[0]++;Object.defineProperty(exports, "__esModule", { value: true });cov_l72hxq5wc.s[1]++;exports.addSource = addSource;cov_l72hxq5wc.s[2]++;exports.addSourceMap = addSourceMap;cov_l72hxq5wc.s[3]++;exports.saga = saga;var _debug = (cov_l72hxq5wc.s[4]++, __webpack_require__(0));var _debug2 = (cov_l72hxq5wc.s[5]++, _interopRequireDefault(_debug));var _effects = (cov_l72hxq5wc.s[6]++, __webpack_require__(10));var _helpers = (cov_l72hxq5wc.s[7]++, __webpack_require__(4));var _actions = (cov_l72hxq5wc.s[8]++, __webpack_require__(34));var actions = (cov_l72hxq5wc.s[9]++, _interopRequireWildcard(_actions));var _actions2 = (cov_l72hxq5wc.s[10]++, __webpack_require__(21));var _selectors = (cov_l72hxq5wc.s[11]++, __webpack_require__(6));var _selectors2 = (cov_l72hxq5wc.s[12]++, _interopRequireDefault(_selectors));function _interopRequireWildcard(obj) {
  cov_l72hxq5wc.f[0]++;cov_l72hxq5wc.s[13]++;if ((cov_l72hxq5wc.b[1][0]++, obj) && (cov_l72hxq5wc.b[1][1]++, obj.__esModule)) {
    cov_l72hxq5wc.b[0][0]++;cov_l72hxq5wc.s[14]++;return obj;
  } else {
    cov_l72hxq5wc.b[0][1]++;var newObj = (cov_l72hxq5wc.s[15]++, {});cov_l72hxq5wc.s[16]++;if (obj != null) {
      cov_l72hxq5wc.b[2][0]++;cov_l72hxq5wc.s[17]++;for (var key in obj) {
        cov_l72hxq5wc.s[18]++;if (Object.prototype.hasOwnProperty.call(obj, key)) {
          cov_l72hxq5wc.b[3][0]++;cov_l72hxq5wc.s[19]++;newObj[key] = obj[key];
        } else {
          cov_l72hxq5wc.b[3][1]++;
        }
      }
    } else {
      cov_l72hxq5wc.b[2][1]++;
    }cov_l72hxq5wc.s[20]++;newObj.default = obj;cov_l72hxq5wc.s[21]++;return newObj;
  }
}function _interopRequireDefault(obj) {
  cov_l72hxq5wc.f[1]++;cov_l72hxq5wc.s[22]++;return (cov_l72hxq5wc.b[5][0]++, obj) && (cov_l72hxq5wc.b[5][1]++, obj.__esModule) ? (cov_l72hxq5wc.b[4][0]++, obj) : (cov_l72hxq5wc.b[4][1]++, { default: obj });
}const debug = (cov_l72hxq5wc.s[23]++, (0, _debug2.default)("debugger:solidity:sagas"));function* addSource(source, sourcePath, ast) {
  cov_l72hxq5wc.f[2]++;cov_l72hxq5wc.s[24]++;yield (0, _effects.put)(actions.addSource(source, sourcePath, ast));
}function* addSourceMap(binary, sourceMap) {
  cov_l72hxq5wc.f[3]++;cov_l72hxq5wc.s[25]++;yield (0, _effects.put)(actions.addSourceMap(binary, sourceMap));
}function* tickSaga() {
  cov_l72hxq5wc.f[4]++;cov_l72hxq5wc.s[26]++;while (true) {
    cov_l72hxq5wc.s[27]++;yield (0, _effects.take)(_actions2.TICK);cov_l72hxq5wc.s[28]++;debug("got TICK");cov_l72hxq5wc.s[29]++;yield* functionDepthSaga();
  }
}function* functionDepthSaga() {
  cov_l72hxq5wc.f[5]++;cov_l72hxq5wc.s[30]++;if (yield (0, _effects.select)(_selectors2.default.current.willJump)) {
    cov_l72hxq5wc.b[6][0]++;let jumpDirection = (cov_l72hxq5wc.s[31]++, yield (0, _effects.select)(_selectors2.default.current.jumpDirection));cov_l72hxq5wc.s[32]++;yield (0, _effects.put)(actions.jump(jumpDirection));
  } else {
    cov_l72hxq5wc.b[6][1]++;
  }
}function* saga() {
  cov_l72hxq5wc.f[6]++;cov_l72hxq5wc.s[33]++;yield (0, _effects.call)(tickSaga);
}cov_l72hxq5wc.s[34]++;exports.default = (0, _helpers.prefixName)("solidity", saga);

/***/ }),
/* 69 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var cov_gj3m4bc7n = function () {
  var path = "/Users/gnidan/src/work/truffle/packages/truffle-debugger/lib/evm/sagas/index.js",
      hash = "caee372d4f397b35c6949d57083b3e9e41ba9dd3",
      Function = function () {}.constructor,
      global = new Function('return this')(),
      gcv = "__coverage__",
      coverageData = { path: "/Users/gnidan/src/work/truffle/packages/truffle-debugger/lib/evm/sagas/index.js", statementMap: { "0": { start: { line: 3, column: 0 }, end: { line: 5, column: 3 } }, "1": { start: { line: 6, column: 0 }, end: { line: 6, column: 32 } }, "2": { start: { line: 7, column: 0 }, end: { line: 7, column: 34 } }, "3": { start: { line: 8, column: 0 }, end: { line: 8, column: 22 } }, "4": { start: { line: 9, column: 0 }, end: { line: 9, column: 38 } }, "5": { start: { line: 10, column: 0 }, end: { line: 10, column: 20 } }, "6": { start: { line: 12, column: 13 }, end: { line: 12, column: 29 } }, "7": { start: { line: 14, column: 14 }, end: { line: 14, column: 44 } }, "8": { start: { line: 16, column: 15 }, end: { line: 16, column: 44 } }, "9": { start: { line: 18, column: 15 }, end: { line: 18, column: 37 } }, "10": { start: { line: 20, column: 15 }, end: { line: 20, column: 43 } }, "11": { start: { line: 22, column: 16 }, end: { line: 22, column: 37 } }, "12": { start: { line: 24, column: 14 }, end: { line: 24, column: 48 } }, "13": { start: { line: 26, column: 17 }, end: { line: 26, column: 40 } }, "14": { start: { line: 28, column: 18 }, end: { line: 28, column: 52 } }, "15": { start: { line: 30, column: 40 }, end: { line: 30, column: 267 } }, "16": { start: { line: 30, column: 69 }, end: { line: 30, column: 80 } }, "17": { start: { line: 30, column: 103 }, end: { line: 30, column: 105 } }, "18": { start: { line: 30, column: 107 }, end: { line: 30, column: 228 } }, "19": { start: { line: 30, column: 126 }, end: { line: 30, column: 226 } }, "20": { start: { line: 30, column: 149 }, end: { line: 30, column: 224 } }, "21": { start: { line: 30, column: 201 }, end: { line: 30, column: 224 } }, "22": { start: { line: 30, column: 229 }, end: { line: 30, column: 250 } }, "23": { start: { line: 30, column: 251 }, end: { line: 30, column: 265 } }, "24": { start: { line: 32, column: 39 }, end: { line: 32, column: 93 } }, "25": { start: { line: 34, column: 14 }, end: { line: 34, column: 56 } }, "26": { start: { line: 42, column: 2 }, end: { line: 42, column: 68 } }, "27": { start: { line: 44, column: 2 }, end: { line: 44, column: 41 } }, "28": { start: { line: 53, column: 15 }, end: { line: 53, column: 83 } }, "29": { start: { line: 54, column: 2 }, end: { line: 60, column: 3 } }, "30": { start: { line: 55, column: 22 }, end: { line: 55, column: 36 } }, "31": { start: { line: 57, column: 4 }, end: { line: 57, column: 75 } }, "32": { start: { line: 59, column: 4 }, end: { line: 59, column: 19 } }, "33": { start: { line: 64, column: 2 }, end: { line: 68, column: 3 } }, "34": { start: { line: 65, column: 4 }, end: { line: 65, column: 51 } }, "35": { start: { line: 67, column: 4 }, end: { line: 67, column: 52 } }, "36": { start: { line: 72, column: 2 }, end: { line: 90, column: 3 } }, "37": { start: { line: 73, column: 4 }, end: { line: 73, column: 44 } }, "38": { start: { line: 74, column: 4 }, end: { line: 74, column: 22 } }, "39": { start: { line: 76, column: 4 }, end: { line: 89, column: 5 } }, "40": { start: { line: 77, column: 6 }, end: { line: 77, column: 24 } }, "41": { start: { line: 78, column: 20 }, end: { line: 78, column: 92 } }, "42": { start: { line: 80, column: 6 }, end: { line: 80, column: 53 } }, "43": { start: { line: 81, column: 11 }, end: { line: 89, column: 5 } }, "44": { start: { line: 82, column: 6 }, end: { line: 82, column: 26 } }, "45": { start: { line: 83, column: 19 }, end: { line: 83, column: 92 } }, "46": { start: { line: 85, column: 6 }, end: { line: 85, column: 54 } }, "47": { start: { line: 86, column: 11 }, end: { line: 89, column: 5 } }, "48": { start: { line: 87, column: 6 }, end: { line: 87, column: 26 } }, "49": { start: { line: 88, column: 6 }, end: { line: 88, column: 52 } }, "50": { start: { line: 94, column: 2 }, end: { line: 94, column: 42 } }, "51": { start: { line: 97, column: 0 }, end: { line: 97, column: 56 } } }, fnMap: { "0": { name: "_interopRequireWildcard", decl: { start: { line: 30, column: 9 }, end: { line: 30, column: 32 } }, loc: { start: { line: 30, column: 38 }, end: { line: 30, column: 269 } }, line: 30 }, "1": { name: "_interopRequireDefault", decl: { start: { line: 32, column: 9 }, end: { line: 32, column: 31 } }, loc: { start: { line: 32, column: 37 }, end: { line: 32, column: 95 } }, line: 32 }, "2": { name: "addContext", decl: { start: { line: 41, column: 10 }, end: { line: 41, column: 20 } }, loc: { start: { line: 41, column: 43 }, end: { line: 45, column: 1 } }, line: 41 }, "3": { name: "addInstance", decl: { start: { line: 52, column: 10 }, end: { line: 52, column: 21 } }, loc: { start: { line: 52, column: 39 }, end: { line: 61, column: 1 } }, line: 52 }, "4": { name: "begin", decl: { start: { line: 63, column: 10 }, end: { line: 63, column: 15 } }, loc: { start: { line: 63, column: 37 }, end: { line: 69, column: 1 } }, line: 63 }, "5": { name: "callstackSaga", decl: { start: { line: 71, column: 10 }, end: { line: 71, column: 23 } }, loc: { start: { line: 71, column: 26 }, end: { line: 91, column: 1 } }, line: 71 }, "6": { name: "saga", decl: { start: { line: 93, column: 10 }, end: { line: 93, column: 14 } }, loc: { start: { line: 93, column: 17 }, end: { line: 95, column: 1 } }, line: 93 } }, branchMap: { "0": { loc: { start: { line: 30, column: 40 }, end: { line: 30, column: 267 } }, type: "if", locations: [{ start: { line: 30, column: 40 }, end: { line: 30, column: 267 } }, { start: { line: 30, column: 40 }, end: { line: 30, column: 267 } }], line: 30 }, "1": { loc: { start: { line: 30, column: 44 }, end: { line: 30, column: 65 } }, type: "binary-expr", locations: [{ start: { line: 30, column: 44 }, end: { line: 30, column: 47 } }, { start: { line: 30, column: 51 }, end: { line: 30, column: 65 } }], line: 30 }, "2": { loc: { start: { line: 30, column: 107 }, end: { line: 30, column: 228 } }, type: "if", locations: [{ start: { line: 30, column: 107 }, end: { line: 30, column: 228 } }, { start: { line: 30, column: 107 }, end: { line: 30, column: 228 } }], line: 30 }, "3": { loc: { start: { line: 30, column: 149 }, end: { line: 30, column: 224 } }, type: "if", locations: [{ start: { line: 30, column: 149 }, end: { line: 30, column: 224 } }, { start: { line: 30, column: 149 }, end: { line: 30, column: 224 } }], line: 30 }, "4": { loc: { start: { line: 32, column: 46 }, end: { line: 32, column: 92 } }, type: "cond-expr", locations: [{ start: { line: 32, column: 70 }, end: { line: 32, column: 73 } }, { start: { line: 32, column: 76 }, end: { line: 32, column: 92 } }], line: 32 }, "5": { loc: { start: { line: 32, column: 46 }, end: { line: 32, column: 67 } }, type: "binary-expr", locations: [{ start: { line: 32, column: 46 }, end: { line: 32, column: 49 } }, { start: { line: 32, column: 53 }, end: { line: 32, column: 67 } }], line: 32 }, "6": { loc: { start: { line: 54, column: 2 }, end: { line: 60, column: 3 } }, type: "if", locations: [{ start: { line: 54, column: 2 }, end: { line: 60, column: 3 } }, { start: { line: 54, column: 2 }, end: { line: 60, column: 3 } }], line: 54 }, "7": { loc: { start: { line: 64, column: 2 }, end: { line: 68, column: 3 } }, type: "if", locations: [{ start: { line: 64, column: 2 }, end: { line: 68, column: 3 } }, { start: { line: 64, column: 2 }, end: { line: 68, column: 3 } }], line: 64 }, "8": { loc: { start: { line: 76, column: 4 }, end: { line: 89, column: 5 } }, type: "if", locations: [{ start: { line: 76, column: 4 }, end: { line: 89, column: 5 } }, { start: { line: 76, column: 4 }, end: { line: 89, column: 5 } }], line: 76 }, "9": { loc: { start: { line: 81, column: 11 }, end: { line: 89, column: 5 } }, type: "if", locations: [{ start: { line: 81, column: 11 }, end: { line: 89, column: 5 } }, { start: { line: 81, column: 11 }, end: { line: 89, column: 5 } }], line: 81 }, "10": { loc: { start: { line: 86, column: 11 }, end: { line: 89, column: 5 } }, type: "if", locations: [{ start: { line: 86, column: 11 }, end: { line: 89, column: 5 } }, { start: { line: 86, column: 11 }, end: { line: 89, column: 5 } }], line: 86 } }, s: { "0": 0, "1": 0, "2": 0, "3": 0, "4": 0, "5": 0, "6": 0, "7": 0, "8": 0, "9": 0, "10": 0, "11": 0, "12": 0, "13": 0, "14": 0, "15": 0, "16": 0, "17": 0, "18": 0, "19": 0, "20": 0, "21": 0, "22": 0, "23": 0, "24": 0, "25": 0, "26": 0, "27": 0, "28": 0, "29": 0, "30": 0, "31": 0, "32": 0, "33": 0, "34": 0, "35": 0, "36": 0, "37": 0, "38": 0, "39": 0, "40": 0, "41": 0, "42": 0, "43": 0, "44": 0, "45": 0, "46": 0, "47": 0, "48": 0, "49": 0, "50": 0, "51": 0 }, f: { "0": 0, "1": 0, "2": 0, "3": 0, "4": 0, "5": 0, "6": 0 }, b: { "0": [0, 0], "1": [0, 0], "2": [0, 0], "3": [0, 0], "4": [0, 0], "5": [0, 0], "6": [0, 0], "7": [0, 0], "8": [0, 0], "9": [0, 0], "10": [0, 0] }, inputSourceMap: { version: 3, sources: ["lib/evm/sagas/index.js"], names: ["addContext", "addInstance", "begin", "callstackSaga", "saga", "actions", "debug", "contractName", "binary", "address", "search", "evm", "info", "binaries", "context", "call", "create", "TICK", "current", "step", "isCall", "callAddress", "isCreate", "createBinary", "isHalting", "returnCall"], mappings: ";;;;;QAgBiBA,U,GAAAA,U;QAWAC,W,GAAAA,W;QAWAC,K,GAAAA,K;QAQAC,a,GAAAA,a;QAwBAC,I,GAAAA,I;;AAtEjB;;;;AAGA;;AACA;;AAEA;;AACA;;IAAYC,O;;AAEZ;;;;;;;;AARA,MAAMC,QAAQ,qBAAY,oBAAZ,CAAd;;AAUA;;;;;AAKO,UAAUN,UAAV,CAAqBO,YAArB,EAAmCC,MAAnC,EAA2C;AAChD,QAAM,kBAAIH,QAAQL,UAAR,CAAmBO,YAAnB,EAAiCC,MAAjC,CAAJ,CAAN;;AAEA,SAAO,wBAAUA,MAAV,CAAP;AACD;;AAED;;;;;AAKO,UAAUP,WAAV,CAAsBQ,OAAtB,EAA+BD,MAA/B,EAAuC;AAC5C,MAAIE,SAAS,MAAM,qBAAOC,oBAAIC,IAAJ,CAASC,QAAT,CAAkBH,MAAzB,CAAnB;AACA,MAAIF,UAAU,KAAd,EAAqB;AACnB,QAAI,EAAEM,OAAF,KAAcJ,OAAOF,MAAP,CAAlB;;AAEA,UAAM,kBAAIH,QAAQJ,WAAR,CAAoBQ,OAApB,EAA6BK,OAA7B,EAAsCN,MAAtC,CAAJ,CAAN;;AAEA,WAAOM,OAAP;AACD;AACF;;AAEM,UAAUZ,KAAV,CAAgB,EAAEO,OAAF,EAAWD,MAAX,EAAhB,EAAqC;AAC1C,MAAIC,OAAJ,EAAa;AACX,UAAM,kBAAIJ,QAAQU,IAAR,CAAaN,OAAb,CAAJ,CAAN;AACD,GAFD,MAEO;AACL,UAAM,kBAAIJ,QAAQW,MAAR,CAAeR,MAAf,CAAJ,CAAN;AACD;AACF;;AAEM,UAAUL,aAAV,GAA2B;AAChC,SAAO,IAAP,EAAa;AACX,UAAM,mBAAKc,aAAL,CAAN;AACAX,UAAM,UAAN;;AAEA,QAAI,MAAM,qBAAOK,oBAAIO,OAAJ,CAAYC,IAAZ,CAAiBC,MAAxB,CAAV,EAA2C;AACzCd,YAAM,UAAN;AACA,UAAIG,UAAU,MAAM,qBAAOE,oBAAIO,OAAJ,CAAYC,IAAZ,CAAiBE,WAAxB,CAApB;;AAEA,YAAM,kBAAIhB,QAAQU,IAAR,CAAaN,OAAb,CAAJ,CAAN;AAED,KAND,MAMO,IAAI,MAAM,qBAAOE,oBAAIO,OAAJ,CAAYC,IAAZ,CAAiBG,QAAxB,CAAV,EAA6C;AAClDhB,YAAM,YAAN;AACA,UAAIE,SAAS,MAAM,qBAAOG,oBAAIO,OAAJ,CAAYC,IAAZ,CAAiBI,YAAxB,CAAnB;;AAEA,YAAM,kBAAIlB,QAAQW,MAAR,CAAeR,MAAf,CAAJ,CAAN;AAED,KANM,MAMA,IAAI,MAAM,qBAAOG,oBAAIO,OAAJ,CAAYC,IAAZ,CAAiBK,SAAxB,CAAV,EAA8C;AACnDlB,YAAM,YAAN;AACA,YAAM,kBAAID,QAAQoB,UAAR,EAAJ,CAAN;AACD;AACF;AACF;;AAEM,UAAUrB,IAAV,GAAkB;AACvB,QAAM,mBAAKD,aAAL,CAAN;AACD;;kBAEc,yBAAW,KAAX,EAAkBC,IAAlB,C", file: "index.js", sourceRoot: "/Users/gnidan/src/work/truffle/packages/truffle-debugger", sourcesContent: ["import debugModule from \"debug\";\nconst debug = debugModule(\"debugger:evm:sagas\");\n\nimport { call, put, take, select } from \"redux-saga/effects\";\nimport { prefixName, keccak256 } from \"lib/helpers\";\n\nimport { TICK } from \"lib/trace/actions\";\nimport * as actions from \"../actions\";\n\nimport evm from \"../selectors\";\n\n/**\n * Adds EVM bytecode context\n *\n * @return {string} ID (0x-prefixed keccak of binary)\n */\nexport function *addContext(contractName, binary) {\n  yield put(actions.addContext(contractName, binary));\n\n  return keccak256(binary);\n}\n\n/**\n * Adds known deployed instance of binary at address\n *\n * @return {string} ID (0x-prefixed keccak of binary)\n */\nexport function *addInstance(address, binary) {\n  let search = yield select(evm.info.binaries.search);\n  if (binary != \"0x0\") {\n    let { context } = search(binary);\n\n    yield put(actions.addInstance(address, context, binary));\n\n    return context;\n  }\n}\n\nexport function* begin({ address, binary }) {\n  if (address) {\n    yield put(actions.call(address));\n  } else {\n    yield put(actions.create(binary));\n  }\n}\n\nexport function* callstackSaga () {\n  while (true) {\n    yield take(TICK);\n    debug(\"got TICK\");\n\n    if (yield select(evm.current.step.isCall)) {\n      debug(\"got call\");\n      let address = yield select(evm.current.step.callAddress);\n\n      yield put(actions.call(address));\n\n    } else if (yield select(evm.current.step.isCreate)) {\n      debug(\"got create\");\n      let binary = yield select(evm.current.step.createBinary);\n\n      yield put(actions.create(binary));\n\n    } else if (yield select(evm.current.step.isHalting)) {\n      debug(\"got return\");\n      yield put(actions.returnCall());\n    }\n  }\n}\n\nexport function* saga () {\n  yield call(callstackSaga);\n}\n\nexport default prefixName(\"evm\", saga);\n"] }, _coverageSchema: "332fd63041d2c1bcb487cc26dd0d5f7d97098a6c" },
      coverage = global[gcv] || (global[gcv] = {});if (coverage[path] && coverage[path].hash === hash) {
    return coverage[path];
  }coverageData.hash = hash;return coverage[path] = coverageData;
}();cov_gj3m4bc7n.s[0]++;Object.defineProperty(exports, "__esModule", { value: true });cov_gj3m4bc7n.s[1]++;exports.addContext = addContext;cov_gj3m4bc7n.s[2]++;exports.addInstance = addInstance;cov_gj3m4bc7n.s[3]++;exports.begin = begin;cov_gj3m4bc7n.s[4]++;exports.callstackSaga = callstackSaga;cov_gj3m4bc7n.s[5]++;exports.saga = saga;var _debug = (cov_gj3m4bc7n.s[6]++, __webpack_require__(0));var _debug2 = (cov_gj3m4bc7n.s[7]++, _interopRequireDefault(_debug));var _effects = (cov_gj3m4bc7n.s[8]++, __webpack_require__(10));var _helpers = (cov_gj3m4bc7n.s[9]++, __webpack_require__(4));var _actions = (cov_gj3m4bc7n.s[10]++, __webpack_require__(21));var _actions2 = (cov_gj3m4bc7n.s[11]++, __webpack_require__(35));var actions = (cov_gj3m4bc7n.s[12]++, _interopRequireWildcard(_actions2));var _selectors = (cov_gj3m4bc7n.s[13]++, __webpack_require__(5));var _selectors2 = (cov_gj3m4bc7n.s[14]++, _interopRequireDefault(_selectors));function _interopRequireWildcard(obj) {
  cov_gj3m4bc7n.f[0]++;cov_gj3m4bc7n.s[15]++;if ((cov_gj3m4bc7n.b[1][0]++, obj) && (cov_gj3m4bc7n.b[1][1]++, obj.__esModule)) {
    cov_gj3m4bc7n.b[0][0]++;cov_gj3m4bc7n.s[16]++;return obj;
  } else {
    cov_gj3m4bc7n.b[0][1]++;var newObj = (cov_gj3m4bc7n.s[17]++, {});cov_gj3m4bc7n.s[18]++;if (obj != null) {
      cov_gj3m4bc7n.b[2][0]++;cov_gj3m4bc7n.s[19]++;for (var key in obj) {
        cov_gj3m4bc7n.s[20]++;if (Object.prototype.hasOwnProperty.call(obj, key)) {
          cov_gj3m4bc7n.b[3][0]++;cov_gj3m4bc7n.s[21]++;newObj[key] = obj[key];
        } else {
          cov_gj3m4bc7n.b[3][1]++;
        }
      }
    } else {
      cov_gj3m4bc7n.b[2][1]++;
    }cov_gj3m4bc7n.s[22]++;newObj.default = obj;cov_gj3m4bc7n.s[23]++;return newObj;
  }
}function _interopRequireDefault(obj) {
  cov_gj3m4bc7n.f[1]++;cov_gj3m4bc7n.s[24]++;return (cov_gj3m4bc7n.b[5][0]++, obj) && (cov_gj3m4bc7n.b[5][1]++, obj.__esModule) ? (cov_gj3m4bc7n.b[4][0]++, obj) : (cov_gj3m4bc7n.b[4][1]++, { default: obj });
}const debug = (cov_gj3m4bc7n.s[25]++, (0, _debug2.default)("debugger:evm:sagas"));function* addContext(contractName, binary) {
  cov_gj3m4bc7n.f[2]++;cov_gj3m4bc7n.s[26]++;yield (0, _effects.put)(actions.addContext(contractName, binary));cov_gj3m4bc7n.s[27]++;return (0, _helpers.keccak256)(binary);
}function* addInstance(address, binary) {
  cov_gj3m4bc7n.f[3]++;let search = (cov_gj3m4bc7n.s[28]++, yield (0, _effects.select)(_selectors2.default.info.binaries.search));cov_gj3m4bc7n.s[29]++;if (binary != "0x0") {
    cov_gj3m4bc7n.b[6][0]++;let { context } = (cov_gj3m4bc7n.s[30]++, search(binary));cov_gj3m4bc7n.s[31]++;yield (0, _effects.put)(actions.addInstance(address, context, binary));cov_gj3m4bc7n.s[32]++;return context;
  } else {
    cov_gj3m4bc7n.b[6][1]++;
  }
}function* begin({ address, binary }) {
  cov_gj3m4bc7n.f[4]++;cov_gj3m4bc7n.s[33]++;if (address) {
    cov_gj3m4bc7n.b[7][0]++;cov_gj3m4bc7n.s[34]++;yield (0, _effects.put)(actions.call(address));
  } else {
    cov_gj3m4bc7n.b[7][1]++;cov_gj3m4bc7n.s[35]++;yield (0, _effects.put)(actions.create(binary));
  }
}function* callstackSaga() {
  cov_gj3m4bc7n.f[5]++;cov_gj3m4bc7n.s[36]++;while (true) {
    cov_gj3m4bc7n.s[37]++;yield (0, _effects.take)(_actions.TICK);cov_gj3m4bc7n.s[38]++;debug("got TICK");cov_gj3m4bc7n.s[39]++;if (yield (0, _effects.select)(_selectors2.default.current.step.isCall)) {
      cov_gj3m4bc7n.b[8][0]++;cov_gj3m4bc7n.s[40]++;debug("got call");let address = (cov_gj3m4bc7n.s[41]++, yield (0, _effects.select)(_selectors2.default.current.step.callAddress));cov_gj3m4bc7n.s[42]++;yield (0, _effects.put)(actions.call(address));
    } else {
      cov_gj3m4bc7n.b[8][1]++;cov_gj3m4bc7n.s[43]++;if (yield (0, _effects.select)(_selectors2.default.current.step.isCreate)) {
        cov_gj3m4bc7n.b[9][0]++;cov_gj3m4bc7n.s[44]++;debug("got create");let binary = (cov_gj3m4bc7n.s[45]++, yield (0, _effects.select)(_selectors2.default.current.step.createBinary));cov_gj3m4bc7n.s[46]++;yield (0, _effects.put)(actions.create(binary));
      } else {
        cov_gj3m4bc7n.b[9][1]++;cov_gj3m4bc7n.s[47]++;if (yield (0, _effects.select)(_selectors2.default.current.step.isHalting)) {
          cov_gj3m4bc7n.b[10][0]++;cov_gj3m4bc7n.s[48]++;debug("got return");cov_gj3m4bc7n.s[49]++;yield (0, _effects.put)(actions.returnCall());
        } else {
          cov_gj3m4bc7n.b[10][1]++;
        }
      }
    }
  }
}function* saga() {
  cov_gj3m4bc7n.f[6]++;cov_gj3m4bc7n.s[50]++;yield (0, _effects.call)(callstackSaga);
}cov_gj3m4bc7n.s[51]++;exports.default = (0, _helpers.prefixName)("evm", saga);

/***/ }),
/* 70 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var cov_qeobva4y7 = function () {
  var path = "/Users/gnidan/src/work/truffle/packages/truffle-debugger/lib/web3/sagas/index.js",
      hash = "e482860c3485140ae5e895f198ac5bcd8139a911",
      Function = function () {}.constructor,
      global = new Function('return this')(),
      gcv = "__coverage__",
      coverageData = { path: "/Users/gnidan/src/work/truffle/packages/truffle-debugger/lib/web3/sagas/index.js", statementMap: { "0": { start: { line: 3, column: 0 }, end: { line: 5, column: 3 } }, "1": { start: { line: 6, column: 0 }, end: { line: 6, column: 48 } }, "2": { start: { line: 7, column: 0 }, end: { line: 7, column: 40 } }, "3": { start: { line: 8, column: 0 }, end: { line: 8, column: 20 } }, "4": { start: { line: 10, column: 13 }, end: { line: 10, column: 29 } }, "5": { start: { line: 12, column: 14 }, end: { line: 12, column: 44 } }, "6": { start: { line: 14, column: 15 }, end: { line: 14, column: 44 } }, "7": { start: { line: 16, column: 15 }, end: { line: 16, column: 37 } }, "8": { start: { line: 18, column: 15 }, end: { line: 18, column: 36 } }, "9": { start: { line: 20, column: 14 }, end: { line: 20, column: 47 } }, "10": { start: { line: 22, column: 15 }, end: { line: 22, column: 36 } }, "11": { start: { line: 24, column: 16 }, end: { line: 24, column: 48 } }, "12": { start: { line: 26, column: 40 }, end: { line: 26, column: 267 } }, "13": { start: { line: 26, column: 69 }, end: { line: 26, column: 80 } }, "14": { start: { line: 26, column: 103 }, end: { line: 26, column: 105 } }, "15": { start: { line: 26, column: 107 }, end: { line: 26, column: 228 } }, "16": { start: { line: 26, column: 126 }, end: { line: 26, column: 226 } }, "17": { start: { line: 26, column: 149 }, end: { line: 26, column: 224 } }, "18": { start: { line: 26, column: 201 }, end: { line: 26, column: 224 } }, "19": { start: { line: 26, column: 229 }, end: { line: 26, column: 250 } }, "20": { start: { line: 26, column: 251 }, end: { line: 26, column: 265 } }, "21": { start: { line: 28, column: 39 }, end: { line: 28, column: 93 } }, "22": { start: { line: 30, column: 14 }, end: { line: 30, column: 57 } }, "23": { start: { line: 33, column: 2 }, end: { line: 33, column: 34 } }, "24": { start: { line: 35, column: 2 }, end: { line: 41, column: 3 } }, "25": { start: { line: 36, column: 4 }, end: { line: 36, column: 75 } }, "26": { start: { line: 38, column: 4 }, end: { line: 38, column: 27 } }, "27": { start: { line: 39, column: 4 }, end: { line: 39, column: 46 } }, "28": { start: { line: 40, column: 4 }, end: { line: 40, column: 11 } }, "29": { start: { line: 43, column: 2 }, end: { line: 43, column: 21 } }, "30": { start: { line: 44, column: 2 }, end: { line: 44, column: 55 } }, "31": { start: { line: 46, column: 11 }, end: { line: 46, column: 79 } }, "32": { start: { line: 47, column: 2 }, end: { line: 50, column: 3 } }, "33": { start: { line: 48, column: 4 }, end: { line: 48, column: 69 } }, "34": { start: { line: 49, column: 4 }, end: { line: 49, column: 11 } }, "35": { start: { line: 52, column: 16 }, end: { line: 52, column: 80 } }, "36": { start: { line: 53, column: 2 }, end: { line: 56, column: 3 } }, "37": { start: { line: 54, column: 4 }, end: { line: 54, column: 71 } }, "38": { start: { line: 55, column: 4 }, end: { line: 55, column: 11 } }, "39": { start: { line: 58, column: 2 }, end: { line: 58, column: 193 } }, "40": { start: { line: 62, column: 2 }, end: { line: 62, column: 43 } }, "41": { start: { line: 63, column: 15 }, end: { line: 63, column: 85 } }, "42": { start: { line: 65, column: 2 }, end: { line: 65, column: 43 } }, "43": { start: { line: 66, column: 2 }, end: { line: 66, column: 66 } }, "44": { start: { line: 70, column: 2 }, end: { line: 70, column: 50 } }, "45": { start: { line: 71, column: 2 }, end: { line: 71, column: 51 } }, "46": { start: { line: 73, column: 15 }, end: { line: 73, column: 114 } }, "47": { start: { line: 73, column: 54 }, end: { line: 73, column: 113 } }, "48": { start: { line: 74, column: 2 }, end: { line: 74, column: 29 } }, "49": { start: { line: 77, column: 2 }, end: { line: 82, column: 3 } }, "50": { start: { line: 78, column: 4 }, end: { line: 78, column: 25 } }, "51": { start: { line: 79, column: 4 }, end: { line: 79, column: 28 } }, "52": { start: { line: 81, column: 4 }, end: { line: 81, column: 35 } }, "53": { start: { line: 84, column: 28 }, end: { line: 84, column: 74 } }, "54": { start: { line: 85, column: 2 }, end: { line: 85, column: 25 } }, "55": { start: { line: 87, column: 2 }, end: { line: 87, column: 36 } }, "56": { start: { line: 91, column: 14 }, end: { line: 91, column: 107 } }, "57": { start: { line: 91, column: 63 }, end: { line: 91, column: 105 } }, "58": { start: { line: 93, column: 2 }, end: { line: 93, column: 31 } }, "59": { start: { line: 94, column: 2 }, end: { line: 94, column: 101 } }, "60": { start: { line: 94, column: 51 }, end: { line: 94, column: 98 } }, "61": { start: { line: 96, column: 17 }, end: { line: 96, column: 19 } }, "62": { start: { line: 97, column: 2 }, end: { line: 97, column: 82 } }, "63": { start: { line: 97, column: 55 }, end: { line: 97, column: 79 } }, "64": { start: { line: 99, column: 2 }, end: { line: 99, column: 33 } }, "65": { start: { line: 101, column: 2 }, end: { line: 101, column: 18 } }, "66": { start: { line: 105, column: 19 }, end: { line: 105, column: 121 } }, "67": { start: { line: 105, column: 54 }, end: { line: 105, column: 120 } }, "68": { start: { line: 106, column: 2 }, end: { line: 106, column: 38 } }, "69": { start: { line: 108, column: 2 }, end: { line: 108, column: 16 } }, "70": { start: { line: 113, column: 21 }, end: { line: 113, column: 64 } }, "71": { start: { line: 114, column: 16 }, end: { line: 114, column: 47 } }, "72": { start: { line: 116, column: 2 }, end: { line: 116, column: 80 } }, "73": { start: { line: 117, column: 2 }, end: { line: 117, column: 76 } }, "74": { start: { line: 120, column: 0 }, end: { line: 120, column: 57 } } }, fnMap: { "0": { name: "_interopRequireWildcard", decl: { start: { line: 26, column: 9 }, end: { line: 26, column: 32 } }, loc: { start: { line: 26, column: 38 }, end: { line: 26, column: 269 } }, line: 26 }, "1": { name: "_interopRequireDefault", decl: { start: { line: 28, column: 9 }, end: { line: 28, column: 31 } }, loc: { start: { line: 28, column: 37 }, end: { line: 28, column: 95 } }, line: 28 }, "2": { name: "fetchTransactionInfo", decl: { start: { line: 32, column: 10 }, end: { line: 32, column: 30 } }, loc: { start: { line: 32, column: 52 }, end: { line: 59, column: 1 } }, line: 32 }, "3": { name: "fetchBinary", decl: { start: { line: 61, column: 10 }, end: { line: 61, column: 21 } }, loc: { start: { line: 61, column: 44 }, end: { line: 67, column: 1 } }, line: 61 }, "4": { name: "inspectTransaction", decl: { start: { line: 69, column: 10 }, end: { line: 69, column: 28 } }, loc: { start: { line: 69, column: 47 }, end: { line: 88, column: 1 } }, line: 69 }, "5": { name: "(anonymous_5)", decl: { start: { line: 73, column: 40 }, end: { line: 73, column: 41 } }, loc: { start: { line: 73, column: 54 }, end: { line: 73, column: 113 } }, line: 73 }, "6": { name: "obtainBinaries", decl: { start: { line: 90, column: 10 }, end: { line: 90, column: 24 } }, loc: { start: { line: 90, column: 36 }, end: { line: 102, column: 1 } }, line: 90 }, "7": { name: "(anonymous_7)", decl: { start: { line: 91, column: 52 }, end: { line: 91, column: 53 } }, loc: { start: { line: 91, column: 63 }, end: { line: 91, column: 105 } }, line: 91 }, "8": { name: "(anonymous_8)", decl: { start: { line: 94, column: 40 }, end: { line: 94, column: 41 } }, loc: { start: { line: 94, column: 51 }, end: { line: 94, column: 98 } }, line: 94 }, "9": { name: "(anonymous_9)", decl: { start: { line: 97, column: 47 }, end: { line: 97, column: 48 } }, loc: { start: { line: 97, column: 55 }, end: { line: 97, column: 79 } }, line: 97 }, "10": { name: "receiveBinary", decl: { start: { line: 104, column: 10 }, end: { line: 104, column: 23 } }, loc: { start: { line: 104, column: 33 }, end: { line: 109, column: 1 } }, line: 104 }, "11": { name: "(anonymous_11)", decl: { start: { line: 105, column: 44 }, end: { line: 105, column: 45 } }, loc: { start: { line: 105, column: 54 }, end: { line: 105, column: 120 } }, line: 105 }, "12": { name: "saga", decl: { start: { line: 111, column: 10 }, end: { line: 111, column: 14 } }, loc: { start: { line: 111, column: 17 }, end: { line: 118, column: 1 } }, line: 111 } }, branchMap: { "0": { loc: { start: { line: 26, column: 40 }, end: { line: 26, column: 267 } }, type: "if", locations: [{ start: { line: 26, column: 40 }, end: { line: 26, column: 267 } }, { start: { line: 26, column: 40 }, end: { line: 26, column: 267 } }], line: 26 }, "1": { loc: { start: { line: 26, column: 44 }, end: { line: 26, column: 65 } }, type: "binary-expr", locations: [{ start: { line: 26, column: 44 }, end: { line: 26, column: 47 } }, { start: { line: 26, column: 51 }, end: { line: 26, column: 65 } }], line: 26 }, "2": { loc: { start: { line: 26, column: 107 }, end: { line: 26, column: 228 } }, type: "if", locations: [{ start: { line: 26, column: 107 }, end: { line: 26, column: 228 } }, { start: { line: 26, column: 107 }, end: { line: 26, column: 228 } }], line: 26 }, "3": { loc: { start: { line: 26, column: 149 }, end: { line: 26, column: 224 } }, type: "if", locations: [{ start: { line: 26, column: 149 }, end: { line: 26, column: 224 } }, { start: { line: 26, column: 149 }, end: { line: 26, column: 224 } }], line: 26 }, "4": { loc: { start: { line: 28, column: 46 }, end: { line: 28, column: 92 } }, type: "cond-expr", locations: [{ start: { line: 28, column: 70 }, end: { line: 28, column: 73 } }, { start: { line: 28, column: 76 }, end: { line: 28, column: 92 } }], line: 28 }, "5": { loc: { start: { line: 28, column: 46 }, end: { line: 28, column: 67 } }, type: "binary-expr", locations: [{ start: { line: 28, column: 46 }, end: { line: 28, column: 49 } }, { start: { line: 28, column: 53 }, end: { line: 28, column: 67 } }], line: 28 }, "6": { loc: { start: { line: 47, column: 2 }, end: { line: 50, column: 3 } }, type: "if", locations: [{ start: { line: 47, column: 2 }, end: { line: 50, column: 3 } }, { start: { line: 47, column: 2 }, end: { line: 50, column: 3 } }], line: 47 }, "7": { loc: { start: { line: 47, column: 6 }, end: { line: 47, column: 29 } }, type: "binary-expr", locations: [{ start: { line: 47, column: 6 }, end: { line: 47, column: 11 } }, { start: { line: 47, column: 15 }, end: { line: 47, column: 29 } }], line: 47 }, "8": { loc: { start: { line: 53, column: 2 }, end: { line: 56, column: 3 } }, type: "if", locations: [{ start: { line: 53, column: 2 }, end: { line: 56, column: 3 } }, { start: { line: 53, column: 2 }, end: { line: 56, column: 3 } }], line: 53 }, "9": { loc: { start: { line: 73, column: 54 }, end: { line: 73, column: 113 } }, type: "binary-expr", locations: [{ start: { line: 73, column: 54 }, end: { line: 73, column: 83 } }, { start: { line: 73, column: 87 }, end: { line: 73, column: 113 } }], line: 73 }, "10": { loc: { start: { line: 77, column: 2 }, end: { line: 82, column: 3 } }, type: "if", locations: [{ start: { line: 77, column: 2 }, end: { line: 82, column: 3 } }, { start: { line: 77, column: 2 }, end: { line: 82, column: 3 } }], line: 77 }, "11": { loc: { start: { line: 105, column: 54 }, end: { line: 105, column: 120 } }, type: "binary-expr", locations: [{ start: { line: 105, column: 54 }, end: { line: 105, column: 91 } }, { start: { line: 105, column: 95 }, end: { line: 105, column: 120 } }], line: 105 } }, s: { "0": 0, "1": 0, "2": 0, "3": 0, "4": 0, "5": 0, "6": 0, "7": 0, "8": 0, "9": 0, "10": 0, "11": 0, "12": 0, "13": 0, "14": 0, "15": 0, "16": 0, "17": 0, "18": 0, "19": 0, "20": 0, "21": 0, "22": 0, "23": 0, "24": 0, "25": 0, "26": 0, "27": 0, "28": 0, "29": 0, "30": 0, "31": 0, "32": 0, "33": 0, "34": 0, "35": 0, "36": 0, "37": 0, "38": 0, "39": 0, "40": 0, "41": 0, "42": 0, "43": 0, "44": 0, "45": 0, "46": 0, "47": 0, "48": 0, "49": 0, "50": 0, "51": 0, "52": 0, "53": 0, "54": 0, "55": 0, "56": 0, "57": 0, "58": 0, "59": 0, "60": 0, "61": 0, "62": 0, "63": 0, "64": 0, "65": 0, "66": 0, "67": 0, "68": 0, "69": 0, "70": 0, "71": 0, "72": 0, "73": 0, "74": 0 }, f: { "0": 0, "1": 0, "2": 0, "3": 0, "4": 0, "5": 0, "6": 0, "7": 0, "8": 0, "9": 0, "10": 0, "11": 0, "12": 0 }, b: { "0": [0, 0], "1": [0, 0], "2": [0, 0], "3": [0, 0], "4": [0, 0], "5": [0, 0], "6": [0, 0], "7": [0, 0], "8": [0, 0], "9": [0, 0], "10": [0, 0], "11": [0, 0] }, inputSourceMap: { version: 3, sources: ["lib/web3/sagas/index.js"], names: ["inspectTransaction", "obtainBinaries", "saga", "actions", "debug", "fetchTransactionInfo", "adapter", "txHash", "trace", "getTrace", "e", "error", "receiveTrace", "tx", "getTransaction", "to", "receiveCall", "address", "receipt", "getReceipt", "contractAddress", "binary", "input", "Error", "fetchBinary", "getDeployedCode", "receiveBinary", "provider", "init", "inspect", "action", "type", "RECEIVE_TRACE", "ERROR_WEB3", "RECEIVE_CALL", "addresses", "tasks", "map", "binaries", "task", "RECEIVE_BINARY", "INIT_WEB3", "Web3Adapter", "INSPECT", "FETCH_BINARY"], mappings: "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", file: "index.js", sourceRoot: "/Users/gnidan/src/work/truffle/packages/truffle-debugger", sourcesContent: ["import debugModule from \"debug\";\nconst debug = debugModule(\"debugger:web3:sagas\");\n\nimport { all, takeEvery, apply, fork, join, take, put, select } from 'redux-saga/effects';\nimport { prefixName } from \"lib/helpers\";\n\nimport * as actions from \"../actions\";\n\nimport Web3Adapter from \"../adapter\";\n\nfunction* fetchTransactionInfo(adapter, {txHash}) {\n  debug(\"inspecting transaction\");\n  var trace;\n  try {\n    trace = yield apply(adapter, adapter.getTrace, [txHash]);\n  } catch(e) {\n    debug(\"putting error\");\n    yield put(actions.error(e));\n    return;\n  }\n\n  debug(\"got trace\");\n  yield put(actions.receiveTrace(trace));\n\n  let tx = yield apply(adapter, adapter.getTransaction, [txHash]);\n  if (tx.to && tx.to != \"0x0\") {\n    yield put(actions.receiveCall({address: tx.to}));\n    return;\n  }\n\n  let receipt = yield apply(adapter, adapter.getReceipt, [txHash]);\n  if (receipt.contractAddress) {\n    yield put(actions.receiveCall({binary: tx.input}));\n    return;\n  }\n\n  throw new Error(\n    \"Could not find contract associated with transaction. \" +\n    \"Please make sure you're debugging a transaction that executes a \" +\n    \"contract function or creates a new contract.\"\n  );\n}\n\nfunction* fetchBinary(adapter, {address}) {\n  debug(\"fetching binary for %s\", address);\n  let binary = yield apply(adapter, adapter.getDeployedCode, [address]);\n\n  debug(\"received binary for %s\", address);\n  yield put(actions.receiveBinary(address, binary));\n}\n\nexport function *inspectTransaction(txHash, provider) {\n  yield put(actions.init(provider));\n  yield put(actions.inspect(txHash));\n\n  let action = yield take( ({type}) =>\n    type == actions.RECEIVE_TRACE || type == actions.ERROR_WEB3\n  );\n  debug(\"action %o\", action);\n\n  var trace;\n  if (action.type == actions.RECEIVE_TRACE) {\n    trace = action.trace;\n    debug(\"received trace\");\n  } else {\n    return { error: action.error };\n  }\n\n  let {address, binary} = yield take(actions.RECEIVE_CALL);\n  debug(\"received call\");\n\n  return { trace, address, binary };\n}\n\nexport function *obtainBinaries(addresses) {\n  let tasks = yield all(\n    addresses.map( (address) => fork(receiveBinary, address) )\n  );\n\n  debug(\"requesting binaries\");\n  yield all(\n    addresses.map( (address) => put(actions.fetchBinary(address)) )\n  );\n\n  let binaries = [];\n  binaries = yield all(\n    tasks.map(task => join(task))\n  );\n\n  debug(\"binaries %o\", binaries);\n\n  return binaries;\n}\n\nfunction *receiveBinary(address) {\n  let {binary} = yield take((action) => (\n    action.type == actions.RECEIVE_BINARY &&\n    action.address == address\n  ));\n  debug(\"got binary for %s\", address);\n\n  return binary;\n}\n\nexport function* saga() {\n  // wait for web3 init signal\n  let {provider} = yield take(actions.INIT_WEB3);\n  let adapter = new Web3Adapter(provider);\n\n  yield takeEvery(actions.INSPECT, fetchTransactionInfo, adapter);\n  yield takeEvery(actions.FETCH_BINARY, fetchBinary, adapter);\n}\n\nexport default prefixName(\"web3\", saga);\n"] }, _coverageSchema: "332fd63041d2c1bcb487cc26dd0d5f7d97098a6c" },
      coverage = global[gcv] || (global[gcv] = {});if (coverage[path] && coverage[path].hash === hash) {
    return coverage[path];
  }coverageData.hash = hash;return coverage[path] = coverageData;
}();cov_qeobva4y7.s[0]++;Object.defineProperty(exports, "__esModule", { value: true });cov_qeobva4y7.s[1]++;exports.inspectTransaction = inspectTransaction;cov_qeobva4y7.s[2]++;exports.obtainBinaries = obtainBinaries;cov_qeobva4y7.s[3]++;exports.saga = saga;var _debug = (cov_qeobva4y7.s[4]++, __webpack_require__(0));var _debug2 = (cov_qeobva4y7.s[5]++, _interopRequireDefault(_debug));var _effects = (cov_qeobva4y7.s[6]++, __webpack_require__(10));var _helpers = (cov_qeobva4y7.s[7]++, __webpack_require__(4));var _actions = (cov_qeobva4y7.s[8]++, __webpack_require__(71));var actions = (cov_qeobva4y7.s[9]++, _interopRequireWildcard(_actions));var _adapter = (cov_qeobva4y7.s[10]++, __webpack_require__(72));var _adapter2 = (cov_qeobva4y7.s[11]++, _interopRequireDefault(_adapter));function _interopRequireWildcard(obj) {
  cov_qeobva4y7.f[0]++;cov_qeobva4y7.s[12]++;if ((cov_qeobva4y7.b[1][0]++, obj) && (cov_qeobva4y7.b[1][1]++, obj.__esModule)) {
    cov_qeobva4y7.b[0][0]++;cov_qeobva4y7.s[13]++;return obj;
  } else {
    cov_qeobva4y7.b[0][1]++;var newObj = (cov_qeobva4y7.s[14]++, {});cov_qeobva4y7.s[15]++;if (obj != null) {
      cov_qeobva4y7.b[2][0]++;cov_qeobva4y7.s[16]++;for (var key in obj) {
        cov_qeobva4y7.s[17]++;if (Object.prototype.hasOwnProperty.call(obj, key)) {
          cov_qeobva4y7.b[3][0]++;cov_qeobva4y7.s[18]++;newObj[key] = obj[key];
        } else {
          cov_qeobva4y7.b[3][1]++;
        }
      }
    } else {
      cov_qeobva4y7.b[2][1]++;
    }cov_qeobva4y7.s[19]++;newObj.default = obj;cov_qeobva4y7.s[20]++;return newObj;
  }
}function _interopRequireDefault(obj) {
  cov_qeobva4y7.f[1]++;cov_qeobva4y7.s[21]++;return (cov_qeobva4y7.b[5][0]++, obj) && (cov_qeobva4y7.b[5][1]++, obj.__esModule) ? (cov_qeobva4y7.b[4][0]++, obj) : (cov_qeobva4y7.b[4][1]++, { default: obj });
}const debug = (cov_qeobva4y7.s[22]++, (0, _debug2.default)("debugger:web3:sagas"));function* fetchTransactionInfo(adapter, { txHash }) {
  cov_qeobva4y7.f[2]++;cov_qeobva4y7.s[23]++;debug("inspecting transaction");var trace;cov_qeobva4y7.s[24]++;try {
    cov_qeobva4y7.s[25]++;trace = yield (0, _effects.apply)(adapter, adapter.getTrace, [txHash]);
  } catch (e) {
    cov_qeobva4y7.s[26]++;debug("putting error");cov_qeobva4y7.s[27]++;yield (0, _effects.put)(actions.error(e));cov_qeobva4y7.s[28]++;return;
  }cov_qeobva4y7.s[29]++;debug("got trace");cov_qeobva4y7.s[30]++;yield (0, _effects.put)(actions.receiveTrace(trace));let tx = (cov_qeobva4y7.s[31]++, yield (0, _effects.apply)(adapter, adapter.getTransaction, [txHash]));cov_qeobva4y7.s[32]++;if ((cov_qeobva4y7.b[7][0]++, tx.to) && (cov_qeobva4y7.b[7][1]++, tx.to != "0x0")) {
    cov_qeobva4y7.b[6][0]++;cov_qeobva4y7.s[33]++;yield (0, _effects.put)(actions.receiveCall({ address: tx.to }));cov_qeobva4y7.s[34]++;return;
  } else {
    cov_qeobva4y7.b[6][1]++;
  }let receipt = (cov_qeobva4y7.s[35]++, yield (0, _effects.apply)(adapter, adapter.getReceipt, [txHash]));cov_qeobva4y7.s[36]++;if (receipt.contractAddress) {
    cov_qeobva4y7.b[8][0]++;cov_qeobva4y7.s[37]++;yield (0, _effects.put)(actions.receiveCall({ binary: tx.input }));cov_qeobva4y7.s[38]++;return;
  } else {
    cov_qeobva4y7.b[8][1]++;
  }cov_qeobva4y7.s[39]++;throw new Error("Could not find contract associated with transaction. " + "Please make sure you're debugging a transaction that executes a " + "contract function or creates a new contract.");
}function* fetchBinary(adapter, { address }) {
  cov_qeobva4y7.f[3]++;cov_qeobva4y7.s[40]++;debug("fetching binary for %s", address);let binary = (cov_qeobva4y7.s[41]++, yield (0, _effects.apply)(adapter, adapter.getDeployedCode, [address]));cov_qeobva4y7.s[42]++;debug("received binary for %s", address);cov_qeobva4y7.s[43]++;yield (0, _effects.put)(actions.receiveBinary(address, binary));
}function* inspectTransaction(txHash, provider) {
  cov_qeobva4y7.f[4]++;cov_qeobva4y7.s[44]++;yield (0, _effects.put)(actions.init(provider));cov_qeobva4y7.s[45]++;yield (0, _effects.put)(actions.inspect(txHash));let action = (cov_qeobva4y7.s[46]++, yield (0, _effects.take)(({ type }) => {
    cov_qeobva4y7.f[5]++;cov_qeobva4y7.s[47]++;return (cov_qeobva4y7.b[9][0]++, type == actions.RECEIVE_TRACE) || (cov_qeobva4y7.b[9][1]++, type == actions.ERROR_WEB3);
  }));cov_qeobva4y7.s[48]++;debug("action %o", action);var trace;cov_qeobva4y7.s[49]++;if (action.type == actions.RECEIVE_TRACE) {
    cov_qeobva4y7.b[10][0]++;cov_qeobva4y7.s[50]++;trace = action.trace;cov_qeobva4y7.s[51]++;debug("received trace");
  } else {
    cov_qeobva4y7.b[10][1]++;cov_qeobva4y7.s[52]++;return { error: action.error };
  }let { address, binary } = (cov_qeobva4y7.s[53]++, yield (0, _effects.take)(actions.RECEIVE_CALL));cov_qeobva4y7.s[54]++;debug("received call");cov_qeobva4y7.s[55]++;return { trace, address, binary };
}function* obtainBinaries(addresses) {
  cov_qeobva4y7.f[6]++;let tasks = (cov_qeobva4y7.s[56]++, yield (0, _effects.all)(addresses.map(address => {
    cov_qeobva4y7.f[7]++;cov_qeobva4y7.s[57]++;return (0, _effects.fork)(receiveBinary, address);
  })));cov_qeobva4y7.s[58]++;debug("requesting binaries");cov_qeobva4y7.s[59]++;yield (0, _effects.all)(addresses.map(address => {
    cov_qeobva4y7.f[8]++;cov_qeobva4y7.s[60]++;return (0, _effects.put)(actions.fetchBinary(address));
  }));let binaries = (cov_qeobva4y7.s[61]++, []);cov_qeobva4y7.s[62]++;binaries = yield (0, _effects.all)(tasks.map(task => {
    cov_qeobva4y7.f[9]++;cov_qeobva4y7.s[63]++;return (0, _effects.join)(task);
  }));cov_qeobva4y7.s[64]++;debug("binaries %o", binaries);cov_qeobva4y7.s[65]++;return binaries;
}function* receiveBinary(address) {
  cov_qeobva4y7.f[10]++;let { binary } = (cov_qeobva4y7.s[66]++, yield (0, _effects.take)(action => {
    cov_qeobva4y7.f[11]++;cov_qeobva4y7.s[67]++;return (cov_qeobva4y7.b[11][0]++, action.type == actions.RECEIVE_BINARY) && (cov_qeobva4y7.b[11][1]++, action.address == address);
  }));cov_qeobva4y7.s[68]++;debug("got binary for %s", address);cov_qeobva4y7.s[69]++;return binary;
}function* saga() {
  cov_qeobva4y7.f[12]++;let { provider } = (cov_qeobva4y7.s[70]++, yield (0, _effects.take)(actions.INIT_WEB3));let adapter = (cov_qeobva4y7.s[71]++, new _adapter2.default(provider));cov_qeobva4y7.s[72]++;yield (0, _effects.takeEvery)(actions.INSPECT, fetchTransactionInfo, adapter);cov_qeobva4y7.s[73]++;yield (0, _effects.takeEvery)(actions.FETCH_BINARY, fetchBinary, adapter);
}cov_qeobva4y7.s[74]++;exports.default = (0, _helpers.prefixName)("web3", saga);

/***/ }),
/* 71 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var cov_1820yj2utr = function () {
  var path = "/Users/gnidan/src/work/truffle/packages/truffle-debugger/lib/web3/actions/index.js",
      hash = "05a74dc611be52283a52c7930c537384983828ca",
      Function = function () {}.constructor,
      global = new Function('return this')(),
      gcv = "__coverage__",
      coverageData = { path: "/Users/gnidan/src/work/truffle/packages/truffle-debugger/lib/web3/actions/index.js", statementMap: { "0": { start: { line: 3, column: 0 }, end: { line: 5, column: 3 } }, "1": { start: { line: 6, column: 0 }, end: { line: 6, column: 20 } }, "2": { start: { line: 7, column: 0 }, end: { line: 7, column: 26 } }, "3": { start: { line: 8, column: 0 }, end: { line: 8, column: 34 } }, "4": { start: { line: 9, column: 0 }, end: { line: 9, column: 38 } }, "5": { start: { line: 10, column: 0 }, end: { line: 10, column: 36 } }, "6": { start: { line: 11, column: 0 }, end: { line: 11, column: 34 } }, "7": { start: { line: 12, column: 0 }, end: { line: 12, column: 22 } }, "8": { start: { line: 13, column: 18 }, end: { line: 13, column: 49 } }, "9": { start: { line: 15, column: 2 }, end: { line: 18, column: 4 } }, "10": { start: { line: 21, column: 16 }, end: { line: 21, column: 55 } }, "11": { start: { line: 23, column: 2 }, end: { line: 26, column: 4 } }, "12": { start: { line: 29, column: 21 }, end: { line: 29, column: 58 } }, "13": { start: { line: 31, column: 2 }, end: { line: 34, column: 4 } }, "14": { start: { line: 37, column: 23 }, end: { line: 37, column: 64 } }, "15": { start: { line: 39, column: 2 }, end: { line: 42, column: 4 } }, "16": { start: { line: 45, column: 22 }, end: { line: 45, column: 61 } }, "17": { start: { line: 47, column: 2 }, end: { line: 50, column: 4 } }, "18": { start: { line: 53, column: 21 }, end: { line: 53, column: 58 } }, "19": { start: { line: 55, column: 2 }, end: { line: 58, column: 4 } }, "20": { start: { line: 61, column: 19 }, end: { line: 61, column: 52 } }, "21": { start: { line: 63, column: 2 }, end: { line: 66, column: 4 } } }, fnMap: { "0": { name: "init", decl: { start: { line: 14, column: 9 }, end: { line: 14, column: 13 } }, loc: { start: { line: 14, column: 24 }, end: { line: 19, column: 1 } }, line: 14 }, "1": { name: "inspect", decl: { start: { line: 22, column: 9 }, end: { line: 22, column: 16 } }, loc: { start: { line: 22, column: 25 }, end: { line: 27, column: 1 } }, line: 22 }, "2": { name: "fetchBinary", decl: { start: { line: 30, column: 9 }, end: { line: 30, column: 20 } }, loc: { start: { line: 30, column: 30 }, end: { line: 35, column: 1 } }, line: 30 }, "3": { name: "receiveBinary", decl: { start: { line: 38, column: 9 }, end: { line: 38, column: 22 } }, loc: { start: { line: 38, column: 40 }, end: { line: 43, column: 1 } }, line: 38 }, "4": { name: "receiveTrace", decl: { start: { line: 46, column: 9 }, end: { line: 46, column: 21 } }, loc: { start: { line: 46, column: 29 }, end: { line: 51, column: 1 } }, line: 46 }, "5": { name: "receiveCall", decl: { start: { line: 54, column: 9 }, end: { line: 54, column: 20 } }, loc: { start: { line: 54, column: 42 }, end: { line: 59, column: 1 } }, line: 54 }, "6": { name: "error", decl: { start: { line: 62, column: 9 }, end: { line: 62, column: 14 } }, loc: { start: { line: 62, column: 22 }, end: { line: 67, column: 1 } }, line: 62 } }, branchMap: {}, s: { "0": 0, "1": 0, "2": 0, "3": 0, "4": 0, "5": 0, "6": 0, "7": 0, "8": 0, "9": 0, "10": 0, "11": 0, "12": 0, "13": 0, "14": 0, "15": 0, "16": 0, "17": 0, "18": 0, "19": 0, "20": 0, "21": 0 }, f: { "0": 0, "1": 0, "2": 0, "3": 0, "4": 0, "5": 0, "6": 0 }, b: {}, inputSourceMap: { version: 3, sources: ["lib/web3/actions/index.js"], names: ["init", "inspect", "fetchBinary", "receiveBinary", "receiveTrace", "receiveCall", "error", "INIT_WEB3", "provider", "type", "INSPECT", "txHash", "FETCH_BINARY", "address", "RECEIVE_BINARY", "binary", "RECEIVE_TRACE", "trace", "RECEIVE_CALL", "ERROR_WEB3"], mappings: ";;;;;QACgBA,I,GAAAA,I;QAQAC,O,GAAAA,O;QAQAC,W,GAAAA,W;QAQAC,a,GAAAA,a;QAQAC,Y,GAAAA,Y;QAQAC,W,GAAAA,W;QAQAC,K,GAAAA,K;AAjDT,MAAMC,gCAAY,WAAlB;AACA,SAASP,IAAT,CAAcQ,QAAd,EAAwB;AAC7B,SAAO;AACLC,UAAMF,SADD;AAELC;AAFK,GAAP;AAID;;AAEM,MAAME,4BAAU,qBAAhB;AACA,SAAST,OAAT,CAAiBU,MAAjB,EAAyB;AAC9B,SAAO;AACLF,UAAMC,OADD;AAELC;AAFK,GAAP;AAID;;AAEM,MAAMC,sCAAe,cAArB;AACA,SAASV,WAAT,CAAqBW,OAArB,EAA8B;AACnC,SAAO;AACLJ,UAAMG,YADD;AAELC;AAFK,GAAP;AAID;;AAEM,MAAMC,0CAAiB,gBAAvB;AACA,SAASX,aAAT,CAAuBU,OAAvB,EAAgCE,MAAhC,EAAwC;AAC7C,SAAO;AACLN,UAAMK,cADD;AAELD,WAFK,EAEIE;AAFJ,GAAP;AAID;;AAEM,MAAMC,wCAAgB,eAAtB;AACA,SAASZ,YAAT,CAAsBa,KAAtB,EAA6B;AAClC,SAAO;AACLR,UAAMO,aADD;AAELC;AAFK,GAAP;AAID;;AAEM,MAAMC,sCAAe,cAArB;AACA,SAASb,WAAT,CAAqB,EAACQ,OAAD,EAAUE,MAAV,EAArB,EAAwC;AAC7C,SAAO;AACLN,UAAMS,YADD;AAELL,WAFK,EAEIE;AAFJ,GAAP;AAID;;AAEM,MAAMI,kCAAa,YAAnB;AACA,SAASb,KAAT,CAAeA,KAAf,EAAsB;AAC3B,SAAO;AACLG,UAAMU,UADD;AAELb;AAFK,GAAP;AAID", file: "index.js", sourceRoot: "/Users/gnidan/src/work/truffle/packages/truffle-debugger", sourcesContent: ["export const INIT_WEB3 = \"INIT_WEB3\";\nexport function init(provider) {\n  return {\n    type: INIT_WEB3,\n    provider\n  }\n}\n\nexport const INSPECT = \"INSPECT_TRANSACTION\";\nexport function inspect(txHash) {\n  return {\n    type: INSPECT,\n    txHash\n  }\n}\n\nexport const FETCH_BINARY = \"FETCH_BINARY\";\nexport function fetchBinary(address) {\n  return {\n    type: FETCH_BINARY,\n    address\n  };\n}\n\nexport const RECEIVE_BINARY = \"RECEIVE_BINARY\";\nexport function receiveBinary(address, binary) {\n  return {\n    type: RECEIVE_BINARY,\n    address, binary\n  }\n}\n\nexport const RECEIVE_TRACE = \"RECEIVE_TRACE\";\nexport function receiveTrace(trace) {\n  return {\n    type: RECEIVE_TRACE,\n    trace\n  }\n}\n\nexport const RECEIVE_CALL = \"RECEIVE_CALL\";\nexport function receiveCall({address, binary}) {\n  return {\n    type: RECEIVE_CALL,\n    address, binary\n  }\n}\n\nexport const ERROR_WEB3 = \"ERROR_WEB3\";\nexport function error(error) {\n  return {\n    type: ERROR_WEB3,\n    error\n  };\n}\n"] }, _coverageSchema: "332fd63041d2c1bcb487cc26dd0d5f7d97098a6c" },
      coverage = global[gcv] || (global[gcv] = {});if (coverage[path] && coverage[path].hash === hash) {
    return coverage[path];
  }coverageData.hash = hash;return coverage[path] = coverageData;
}();cov_1820yj2utr.s[0]++;Object.defineProperty(exports, "__esModule", { value: true });cov_1820yj2utr.s[1]++;exports.init = init;cov_1820yj2utr.s[2]++;exports.inspect = inspect;cov_1820yj2utr.s[3]++;exports.fetchBinary = fetchBinary;cov_1820yj2utr.s[4]++;exports.receiveBinary = receiveBinary;cov_1820yj2utr.s[5]++;exports.receiveTrace = receiveTrace;cov_1820yj2utr.s[6]++;exports.receiveCall = receiveCall;cov_1820yj2utr.s[7]++;exports.error = error;const INIT_WEB3 = (cov_1820yj2utr.s[8]++, exports.INIT_WEB3 = "INIT_WEB3");function init(provider) {
  cov_1820yj2utr.f[0]++;cov_1820yj2utr.s[9]++;return { type: INIT_WEB3, provider };
}const INSPECT = (cov_1820yj2utr.s[10]++, exports.INSPECT = "INSPECT_TRANSACTION");function inspect(txHash) {
  cov_1820yj2utr.f[1]++;cov_1820yj2utr.s[11]++;return { type: INSPECT, txHash };
}const FETCH_BINARY = (cov_1820yj2utr.s[12]++, exports.FETCH_BINARY = "FETCH_BINARY");function fetchBinary(address) {
  cov_1820yj2utr.f[2]++;cov_1820yj2utr.s[13]++;return { type: FETCH_BINARY, address };
}const RECEIVE_BINARY = (cov_1820yj2utr.s[14]++, exports.RECEIVE_BINARY = "RECEIVE_BINARY");function receiveBinary(address, binary) {
  cov_1820yj2utr.f[3]++;cov_1820yj2utr.s[15]++;return { type: RECEIVE_BINARY, address, binary };
}const RECEIVE_TRACE = (cov_1820yj2utr.s[16]++, exports.RECEIVE_TRACE = "RECEIVE_TRACE");function receiveTrace(trace) {
  cov_1820yj2utr.f[4]++;cov_1820yj2utr.s[17]++;return { type: RECEIVE_TRACE, trace };
}const RECEIVE_CALL = (cov_1820yj2utr.s[18]++, exports.RECEIVE_CALL = "RECEIVE_CALL");function receiveCall({ address, binary }) {
  cov_1820yj2utr.f[5]++;cov_1820yj2utr.s[19]++;return { type: RECEIVE_CALL, address, binary };
}const ERROR_WEB3 = (cov_1820yj2utr.s[20]++, exports.ERROR_WEB3 = "ERROR_WEB3");function error(error) {
  cov_1820yj2utr.f[6]++;cov_1820yj2utr.s[21]++;return { type: ERROR_WEB3, error };
}

/***/ }),
/* 72 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var cov_1g3b2au6c6 = function () {
  var path = "/Users/gnidan/src/work/truffle/packages/truffle-debugger/lib/web3/adapter.js",
      hash = "3c84fdf4ea5d1b72e6e2f7c1f96ba07f4f82b46f",
      Function = function () {}.constructor,
      global = new Function('return this')(),
      gcv = "__coverage__",
      coverageData = { path: "/Users/gnidan/src/work/truffle/packages/truffle-debugger/lib/web3/adapter.js", statementMap: { "0": { start: { line: 3, column: 0 }, end: { line: 5, column: 3 } }, "1": { start: { line: 7, column: 15 }, end: { line: 7, column: 55 } }, "2": { start: { line: 9, column: 16 }, end: { line: 9, column: 48 } }, "3": { start: { line: 11, column: 25 }, end: { line: 11, column: 74 } }, "4": { start: { line: 13, column: 25 }, end: { line: 13, column: 67 } }, "5": { start: { line: 15, column: 13 }, end: { line: 15, column: 29 } }, "6": { start: { line: 17, column: 14 }, end: { line: 17, column: 44 } }, "7": { start: { line: 19, column: 11 }, end: { line: 19, column: 26 } }, "8": { start: { line: 21, column: 12 }, end: { line: 21, column: 40 } }, "9": { start: { line: 23, column: 39 }, end: { line: 23, column: 93 } }, "10": { start: { line: 25, column: 14 }, end: { line: 25, column: 59 } }, "11": { start: { line: 29, column: 4 }, end: { line: 29, column: 44 } }, "12": { start: { line: 33, column: 16 }, end: { line: 33, column: 20 } }, "13": { start: { line: 35, column: 4 }, end: { line: 49, column: 9 } }, "14": { start: { line: 36, column: 6 }, end: { line: 48, column: 9 } }, "15": { start: { line: 37, column: 8 }, end: { line: 47, column: 11 } }, "16": { start: { line: 43, column: 10 }, end: { line: 43, column: 38 } }, "17": { start: { line: 43, column: 19 }, end: { line: 43, column: 38 } }, "18": { start: { line: 44, column: 10 }, end: { line: 44, column: 75 } }, "19": { start: { line: 44, column: 28 }, end: { line: 44, column: 75 } }, "20": { start: { line: 45, column: 10 }, end: { line: 45, column: 38 } }, "21": { start: { line: 46, column: 10 }, end: { line: 46, column: 43 } }, "22": { start: { line: 53, column: 17 }, end: { line: 53, column: 21 } }, "23": { start: { line: 55, column: 4 }, end: { line: 63, column: 9 } }, "24": { start: { line: 56, column: 6 }, end: { line: 62, column: 9 } }, "25": { start: { line: 57, column: 8 }, end: { line: 61, column: 11 } }, "26": { start: { line: 58, column: 10 }, end: { line: 58, column: 38 } }, "27": { start: { line: 58, column: 19 }, end: { line: 58, column: 38 } }, "28": { start: { line: 60, column: 10 }, end: { line: 60, column: 28 } }, "29": { start: { line: 67, column: 17 }, end: { line: 67, column: 21 } }, "30": { start: { line: 69, column: 4 }, end: { line: 77, column: 9 } }, "31": { start: { line: 70, column: 6 }, end: { line: 76, column: 9 } }, "32": { start: { line: 71, column: 8 }, end: { line: 75, column: 11 } }, "33": { start: { line: 72, column: 10 }, end: { line: 72, column: 38 } }, "34": { start: { line: 72, column: 19 }, end: { line: 72, column: 38 } }, "35": { start: { line: 74, column: 10 }, end: { line: 74, column: 33 } }, "36": { start: { line: 86, column: 17 }, end: { line: 86, column: 21 } }, "37": { start: { line: 88, column: 4 }, end: { line: 98, column: 9 } }, "38": { start: { line: 89, column: 6 }, end: { line: 89, column: 53 } }, "39": { start: { line: 90, column: 6 }, end: { line: 97, column: 9 } }, "40": { start: { line: 91, column: 8 }, end: { line: 96, column: 11 } }, "41": { start: { line: 92, column: 10 }, end: { line: 92, column: 43 } }, "42": { start: { line: 92, column: 19 }, end: { line: 92, column: 43 } }, "43": { start: { line: 93, column: 10 }, end: { line: 93, column: 38 } }, "44": { start: { line: 93, column: 19 }, end: { line: 93, column: 38 } }, "45": { start: { line: 94, column: 10 }, end: { line: 94, column: 53 } }, "46": { start: { line: 95, column: 10 }, end: { line: 95, column: 33 } }, "47": { start: { line: 101, column: 0 }, end: { line: 101, column: 30 } } }, fnMap: { "0": { name: "_interopRequireDefault", decl: { start: { line: 23, column: 9 }, end: { line: 23, column: 31 } }, loc: { start: { line: 23, column: 37 }, end: { line: 23, column: 95 } }, line: 23 }, "1": { name: "(anonymous_1)", decl: { start: { line: 28, column: 2 }, end: { line: 28, column: 3 } }, loc: { start: { line: 28, column: 24 }, end: { line: 30, column: 3 } }, line: 28 }, "2": { name: "(anonymous_2)", decl: { start: { line: 32, column: 2 }, end: { line: 32, column: 3 } }, loc: { start: { line: 32, column: 19 }, end: { line: 50, column: 3 } }, line: 32 }, "3": { name: "(anonymous_3)", decl: { start: { line: 35, column: 43 }, end: { line: 35, column: 44 } }, loc: { start: { line: 35, column: 56 }, end: { line: 49, column: 5 } }, line: 35 }, "4": { name: "(anonymous_4)", decl: { start: { line: 36, column: 35 }, end: { line: 36, column: 36 } }, loc: { start: { line: 36, column: 61 }, end: { line: 48, column: 7 } }, line: 36 }, "5": { name: "(anonymous_5)", decl: { start: { line: 42, column: 11 }, end: { line: 42, column: 12 } }, loc: { start: { line: 42, column: 34 }, end: { line: 47, column: 9 } }, line: 42 }, "6": { name: "(anonymous_6)", decl: { start: { line: 52, column: 2 }, end: { line: 52, column: 3 } }, loc: { start: { line: 52, column: 25 }, end: { line: 64, column: 3 } }, line: 52 }, "7": { name: "(anonymous_7)", decl: { start: { line: 55, column: 43 }, end: { line: 55, column: 44 } }, loc: { start: { line: 55, column: 56 }, end: { line: 63, column: 5 } }, line: 55 }, "8": { name: "(anonymous_8)", decl: { start: { line: 56, column: 35 }, end: { line: 56, column: 36 } }, loc: { start: { line: 56, column: 61 }, end: { line: 62, column: 7 } }, line: 56 }, "9": { name: "(anonymous_9)", decl: { start: { line: 57, column: 47 }, end: { line: 57, column: 48 } }, loc: { start: { line: 57, column: 66 }, end: { line: 61, column: 9 } }, line: 57 }, "10": { name: "(anonymous_10)", decl: { start: { line: 66, column: 2 }, end: { line: 66, column: 3 } }, loc: { start: { line: 66, column: 21 }, end: { line: 78, column: 3 } }, line: 66 }, "11": { name: "(anonymous_11)", decl: { start: { line: 69, column: 43 }, end: { line: 69, column: 44 } }, loc: { start: { line: 69, column: 56 }, end: { line: 77, column: 5 } }, line: 69 }, "12": { name: "(anonymous_12)", decl: { start: { line: 70, column: 35 }, end: { line: 70, column: 36 } }, loc: { start: { line: 70, column: 61 }, end: { line: 76, column: 7 } }, line: 70 }, "13": { name: "(anonymous_13)", decl: { start: { line: 71, column: 54 }, end: { line: 71, column: 55 } }, loc: { start: { line: 71, column: 78 }, end: { line: 75, column: 9 } }, line: 71 }, "14": { name: "(anonymous_14)", decl: { start: { line: 85, column: 2 }, end: { line: 85, column: 3 } }, loc: { start: { line: 85, column: 27 }, end: { line: 99, column: 3 } }, line: 85 }, "15": { name: "(anonymous_15)", decl: { start: { line: 88, column: 43 }, end: { line: 88, column: 44 } }, loc: { start: { line: 88, column: 56 }, end: { line: 98, column: 5 } }, line: 88 }, "16": { name: "(anonymous_16)", decl: { start: { line: 90, column: 35 }, end: { line: 90, column: 36 } }, loc: { start: { line: 90, column: 61 }, end: { line: 97, column: 7 } }, line: 90 }, "17": { name: "(anonymous_17)", decl: { start: { line: 91, column: 41 }, end: { line: 91, column: 42 } }, loc: { start: { line: 91, column: 72 }, end: { line: 96, column: 9 } }, line: 91 } }, branchMap: { "0": { loc: { start: { line: 23, column: 46 }, end: { line: 23, column: 92 } }, type: "cond-expr", locations: [{ start: { line: 23, column: 70 }, end: { line: 23, column: 73 } }, { start: { line: 23, column: 76 }, end: { line: 23, column: 92 } }], line: 23 }, "1": { loc: { start: { line: 23, column: 46 }, end: { line: 23, column: 67 } }, type: "binary-expr", locations: [{ start: { line: 23, column: 46 }, end: { line: 23, column: 49 } }, { start: { line: 23, column: 53 }, end: { line: 23, column: 67 } }], line: 23 }, "2": { loc: { start: { line: 43, column: 10 }, end: { line: 43, column: 38 } }, type: "if", locations: [{ start: { line: 43, column: 10 }, end: { line: 43, column: 38 } }, { start: { line: 43, column: 10 }, end: { line: 43, column: 38 } }], line: 43 }, "3": { loc: { start: { line: 44, column: 10 }, end: { line: 44, column: 75 } }, type: "if", locations: [{ start: { line: 44, column: 10 }, end: { line: 44, column: 75 } }, { start: { line: 44, column: 10 }, end: { line: 44, column: 75 } }], line: 44 }, "4": { loc: { start: { line: 58, column: 10 }, end: { line: 58, column: 38 } }, type: "if", locations: [{ start: { line: 58, column: 10 }, end: { line: 58, column: 38 } }, { start: { line: 58, column: 10 }, end: { line: 58, column: 38 } }], line: 58 }, "5": { loc: { start: { line: 72, column: 10 }, end: { line: 72, column: 38 } }, type: "if", locations: [{ start: { line: 72, column: 10 }, end: { line: 72, column: 38 } }, { start: { line: 72, column: 10 }, end: { line: 72, column: 38 } }], line: 72 }, "6": { loc: { start: { line: 92, column: 10 }, end: { line: 92, column: 43 } }, type: "if", locations: [{ start: { line: 92, column: 10 }, end: { line: 92, column: 43 } }, { start: { line: 92, column: 10 }, end: { line: 92, column: 43 } }], line: 92 }, "7": { loc: { start: { line: 93, column: 10 }, end: { line: 93, column: 38 } }, type: "if", locations: [{ start: { line: 93, column: 10 }, end: { line: 93, column: 38 } }, { start: { line: 93, column: 10 }, end: { line: 93, column: 38 } }], line: 93 } }, s: { "0": 0, "1": 0, "2": 0, "3": 0, "4": 0, "5": 0, "6": 0, "7": 0, "8": 0, "9": 0, "10": 0, "11": 0, "12": 0, "13": 0, "14": 0, "15": 0, "16": 0, "17": 0, "18": 0, "19": 0, "20": 0, "21": 0, "22": 0, "23": 0, "24": 0, "25": 0, "26": 0, "27": 0, "28": 0, "29": 0, "30": 0, "31": 0, "32": 0, "33": 0, "34": 0, "35": 0, "36": 0, "37": 0, "38": 0, "39": 0, "40": 0, "41": 0, "42": 0, "43": 0, "44": 0, "45": 0, "46": 0, "47": 0 }, f: { "0": 0, "1": 0, "2": 0, "3": 0, "4": 0, "5": 0, "6": 0, "7": 0, "8": 0, "9": 0, "10": 0, "11": 0, "12": 0, "13": 0, "14": 0, "15": 0, "16": 0, "17": 0 }, b: { "0": [0, 0], "1": [0, 0], "2": [0, 0], "3": [0, 0], "4": [0, 0], "5": [0, 0], "6": [0, 0], "7": [0, 0] }, inputSourceMap: { version: 3, sources: ["lib/web3/adapter.js"], names: ["debug", "Web3Adapter", "constructor", "provider", "web3", "Web3", "getTrace", "txHash", "accept", "reject", "currentProvider", "send", "jsonrpc", "method", "params", "id", "Date", "getTime", "err", "result", "error", "Error", "message", "structLogs", "getTransaction", "eth", "tx", "getReceipt", "getTransactionReceipt", "receipt", "getDeployedCode", "address", "getCode", "deployedBinary"], mappings: ";;;;;;;;;;;;;;AAAA;;;;AAEA;;;;;;AAEA,MAAMA,QAAQ,qBAAY,uBAAZ,CAAd;;AAEe,MAAMC,WAAN,CAAkB;AAC/BC,cAAYC,QAAZ,EAAsB;AACpB,SAAKC,IAAL,GAAY,IAAIC,aAAJ,CAASF,QAAT,CAAZ;AACD;;AAEKG,UAAN,CAAeC,MAAf,EAAuB;AAAA;;AAAA;AACrB,aAAO,sBAAa,UAACC,MAAD,EAASC,MAAT,EAAoB;AACtC,cAAKL,IAAL,CAAUM,eAAV,CAA0BC,IAA1B,CAA+B;AAC7BC,mBAAS,KADoB;AAE7BC,kBAAQ,wBAFqB;AAG7BC,kBAAQ,CAACP,MAAD,EAAS,EAAT,CAHqB;AAI7BQ,cAAI,IAAIC,IAAJ,GAAWC,OAAX;AAJyB,SAA/B,EAKG,UAACC,GAAD,EAAMC,MAAN,EAAiB;AAClB,cAAID,GAAJ,EAAS,OAAOT,OAAOS,GAAP,CAAP;AACT,cAAIC,OAAOC,KAAX,EAAkB,OAAOX,OAAO,IAAIY,KAAJ,CAAUF,OAAOC,KAAP,CAAaE,OAAvB,CAAP,CAAP;AAClBtB,gBAAM,YAAN,EAAoBmB,MAApB;AACAX,iBAAOW,OAAOA,MAAP,CAAcI,UAArB;AACD,SAVD;AAWD,OAZM,CAAP;AADqB;AActB;;AAEKC,gBAAN,CAAqBjB,MAArB,EAA6B;AAAA;;AAAA;AAC3B,aAAO,sBAAa,UAACC,MAAD,EAASC,MAAT,EAAoB;AACtC,eAAKL,IAAL,CAAUqB,GAAV,CAAcD,cAAd,CAA6BjB,MAA7B,EAAqC,UAACW,GAAD,EAAMQ,EAAN,EAAa;AAChD,cAAIR,GAAJ,EAAS,OAAOT,OAAOS,GAAP,CAAP;;AAET,iBAAOV,OAAOkB,EAAP,CAAP;AACD,SAJD;AAKD,OANM,CAAP;AAD2B;AAQ5B;;AAEKC,YAAN,CAAiBpB,MAAjB,EAAyB;AAAA;;AAAA;AACvB,aAAO,sBAAa,UAACC,MAAD,EAASC,MAAT,EAAoB;AACtC,eAAKL,IAAL,CAAUqB,GAAV,CAAcG,qBAAd,CAAoCrB,MAApC,EAA4C,UAACW,GAAD,EAAMW,OAAN,EAAkB;AAC5D,cAAIX,GAAJ,EAAS,OAAOT,OAAOS,GAAP,CAAP;;AAET,iBAAOV,OAAOqB,OAAP,CAAP;AACD,SAJD;AAKD,OANM,CAAP;AADuB;AAQxB;;AAED;;;;;AAKMC,iBAAN,CAAsBC,OAAtB,EAA+B;AAAA;;AAAA;AAC7B/B,YAAM,8BAAN,EAAsC+B,OAAtC;AACA,aAAO,sBAAY,UAACvB,MAAD,EAASC,MAAT,EAAoB;AACrC,eAAKL,IAAL,CAAUqB,GAAV,CAAcO,OAAd,CAAsBD,OAAtB,EAA+B,UAACb,GAAD,EAAMe,cAAN,EAAyB;AACtD,cAAIf,GAAJ,EAASlB,MAAM,WAAN,EAAmBkB,GAAnB;AACT,cAAIA,GAAJ,EAAS,OAAOT,OAAOS,GAAP,CAAP;AACTlB,gBAAM,0BAAN,EAAkC+B,OAAlC;AACAvB,iBAAOyB,cAAP;AACD,SALD;AAMD,OAPM,CAAP;AAF6B;AAU9B;AAxD8B;kBAAZhC,W", file: "adapter.js", sourceRoot: "/Users/gnidan/src/work/truffle/packages/truffle-debugger", sourcesContent: ["import debugModule from \"debug\";\n\nimport Web3 from \"web3\";\n\nconst debug = debugModule(\"debugger:web3:adapter\");\n\nexport default class Web3Adapter {\n  constructor(provider) {\n    this.web3 = new Web3(provider);\n  }\n\n  async getTrace(txHash) {\n    return new Promise( (accept, reject) => {\n      this.web3.currentProvider.send({\n        jsonrpc: \"2.0\",\n        method: \"debug_traceTransaction\",\n        params: [txHash, {}],\n        id: new Date().getTime()\n      }, (err, result) => {\n        if (err) return reject(err);\n        if (result.error) return reject(new Error(result.error.message));\n        debug(\"result: %o\", result);\n        accept(result.result.structLogs);\n      });\n    });\n  };\n\n  async getTransaction(txHash) {\n    return new Promise( (accept, reject) => {\n      this.web3.eth.getTransaction(txHash, (err, tx) => {\n        if (err) return reject(err);\n\n        return accept(tx);\n      });\n    });\n  };\n\n  async getReceipt(txHash) {\n    return new Promise( (accept, reject) => {\n      this.web3.eth.getTransactionReceipt(txHash, (err, receipt) => {\n        if (err) return reject(err);\n\n        return accept(receipt);\n      });\n    });\n  };\n\n  /**\n   * getDeployedCode - get the deployed code for an address from the client\n   * @param  {String} address\n   * @return {String}         deployedBinary\n   */\n  async getDeployedCode(address) {\n    debug(\"getting deployed code for %s\", address);\n    return new Promise((accept, reject) => {\n      this.web3.eth.getCode(address, (err, deployedBinary) => {\n        if (err) debug(\"error: %o\", err);\n        if (err) return reject(err);\n        debug(\"got deployed code for %s\", address);\n        accept(deployedBinary);\n      });\n    });\n  };\n}\n"] }, _coverageSchema: "332fd63041d2c1bcb487cc26dd0d5f7d97098a6c" },
      coverage = global[gcv] || (global[gcv] = {});if (coverage[path] && coverage[path].hash === hash) {
    return coverage[path];
  }coverageData.hash = hash;return coverage[path] = coverageData;
}();cov_1g3b2au6c6.s[0]++;Object.defineProperty(exports, "__esModule", { value: true });var _promise = (cov_1g3b2au6c6.s[1]++, __webpack_require__(23));var _promise2 = (cov_1g3b2au6c6.s[2]++, _interopRequireDefault(_promise));var _asyncToGenerator2 = (cov_1g3b2au6c6.s[3]++, __webpack_require__(7));var _asyncToGenerator3 = (cov_1g3b2au6c6.s[4]++, _interopRequireDefault(_asyncToGenerator2));var _debug = (cov_1g3b2au6c6.s[5]++, __webpack_require__(0));var _debug2 = (cov_1g3b2au6c6.s[6]++, _interopRequireDefault(_debug));var _web = (cov_1g3b2au6c6.s[7]++, __webpack_require__(8));var _web2 = (cov_1g3b2au6c6.s[8]++, _interopRequireDefault(_web));function _interopRequireDefault(obj) {
  cov_1g3b2au6c6.f[0]++;cov_1g3b2au6c6.s[9]++;return (cov_1g3b2au6c6.b[1][0]++, obj) && (cov_1g3b2au6c6.b[1][1]++, obj.__esModule) ? (cov_1g3b2au6c6.b[0][0]++, obj) : (cov_1g3b2au6c6.b[0][1]++, { default: obj });
}const debug = (cov_1g3b2au6c6.s[10]++, (0, _debug2.default)("debugger:web3:adapter"));class Web3Adapter {
  constructor(provider) {
    cov_1g3b2au6c6.f[1]++;cov_1g3b2au6c6.s[11]++;this.web3 = new _web2.default(provider);
  }getTrace(txHash) {
    cov_1g3b2au6c6.f[2]++;var _this = (cov_1g3b2au6c6.s[12]++, this);cov_1g3b2au6c6.s[13]++;return (0, _asyncToGenerator3.default)(function* () {
      cov_1g3b2au6c6.f[3]++;cov_1g3b2au6c6.s[14]++;return new _promise2.default(function (accept, reject) {
        cov_1g3b2au6c6.f[4]++;cov_1g3b2au6c6.s[15]++;_this.web3.currentProvider.send({ jsonrpc: "2.0", method: "debug_traceTransaction", params: [txHash, {}], id: new Date().getTime() }, function (err, result) {
          cov_1g3b2au6c6.f[5]++;cov_1g3b2au6c6.s[16]++;if (err) {
            cov_1g3b2au6c6.b[2][0]++;cov_1g3b2au6c6.s[17]++;return reject(err);
          } else {
            cov_1g3b2au6c6.b[2][1]++;
          }cov_1g3b2au6c6.s[18]++;if (result.error) {
            cov_1g3b2au6c6.b[3][0]++;cov_1g3b2au6c6.s[19]++;return reject(new Error(result.error.message));
          } else {
            cov_1g3b2au6c6.b[3][1]++;
          }cov_1g3b2au6c6.s[20]++;debug("result: %o", result);cov_1g3b2au6c6.s[21]++;accept(result.result.structLogs);
        });
      });
    })();
  }getTransaction(txHash) {
    cov_1g3b2au6c6.f[6]++;var _this2 = (cov_1g3b2au6c6.s[22]++, this);cov_1g3b2au6c6.s[23]++;return (0, _asyncToGenerator3.default)(function* () {
      cov_1g3b2au6c6.f[7]++;cov_1g3b2au6c6.s[24]++;return new _promise2.default(function (accept, reject) {
        cov_1g3b2au6c6.f[8]++;cov_1g3b2au6c6.s[25]++;_this2.web3.eth.getTransaction(txHash, function (err, tx) {
          cov_1g3b2au6c6.f[9]++;cov_1g3b2au6c6.s[26]++;if (err) {
            cov_1g3b2au6c6.b[4][0]++;cov_1g3b2au6c6.s[27]++;return reject(err);
          } else {
            cov_1g3b2au6c6.b[4][1]++;
          }cov_1g3b2au6c6.s[28]++;return accept(tx);
        });
      });
    })();
  }getReceipt(txHash) {
    cov_1g3b2au6c6.f[10]++;var _this3 = (cov_1g3b2au6c6.s[29]++, this);cov_1g3b2au6c6.s[30]++;return (0, _asyncToGenerator3.default)(function* () {
      cov_1g3b2au6c6.f[11]++;cov_1g3b2au6c6.s[31]++;return new _promise2.default(function (accept, reject) {
        cov_1g3b2au6c6.f[12]++;cov_1g3b2au6c6.s[32]++;_this3.web3.eth.getTransactionReceipt(txHash, function (err, receipt) {
          cov_1g3b2au6c6.f[13]++;cov_1g3b2au6c6.s[33]++;if (err) {
            cov_1g3b2au6c6.b[5][0]++;cov_1g3b2au6c6.s[34]++;return reject(err);
          } else {
            cov_1g3b2au6c6.b[5][1]++;
          }cov_1g3b2au6c6.s[35]++;return accept(receipt);
        });
      });
    })();
  }getDeployedCode(address) {
    cov_1g3b2au6c6.f[14]++;var _this4 = (cov_1g3b2au6c6.s[36]++, this);cov_1g3b2au6c6.s[37]++;return (0, _asyncToGenerator3.default)(function* () {
      cov_1g3b2au6c6.f[15]++;cov_1g3b2au6c6.s[38]++;debug("getting deployed code for %s", address);cov_1g3b2au6c6.s[39]++;return new _promise2.default(function (accept, reject) {
        cov_1g3b2au6c6.f[16]++;cov_1g3b2au6c6.s[40]++;_this4.web3.eth.getCode(address, function (err, deployedBinary) {
          cov_1g3b2au6c6.f[17]++;cov_1g3b2au6c6.s[41]++;if (err) {
            cov_1g3b2au6c6.b[6][0]++;cov_1g3b2au6c6.s[42]++;debug("error: %o", err);
          } else {
            cov_1g3b2au6c6.b[6][1]++;
          }cov_1g3b2au6c6.s[43]++;if (err) {
            cov_1g3b2au6c6.b[7][0]++;cov_1g3b2au6c6.s[44]++;return reject(err);
          } else {
            cov_1g3b2au6c6.b[7][1]++;
          }cov_1g3b2au6c6.s[45]++;debug("got deployed code for %s", address);cov_1g3b2au6c6.s[46]++;accept(deployedBinary);
        });
      });
    })();
  }
}cov_1g3b2au6c6.s[47]++;exports.default = Web3Adapter;

/***/ }),
/* 73 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var cov_1tkg2zem3h = function () {
  var path = "/Users/gnidan/src/work/truffle/packages/truffle-debugger/lib/session/reducers.js",
      hash = "2eb69cde194e4d73b83afabf604598f6d329531e",
      Function = function () {}.constructor,
      global = new Function('return this')(),
      gcv = "__coverage__",
      coverageData = { path: "/Users/gnidan/src/work/truffle/packages/truffle-debugger/lib/session/reducers.js", statementMap: { "0": { start: { line: 3, column: 0 }, end: { line: 5, column: 3 } }, "1": { start: { line: 6, column: 0 }, end: { line: 6, column: 80 } }, "2": { start: { line: 7, column: 0 }, end: { line: 7, column: 26 } }, "3": { start: { line: 9, column: 13 }, end: { line: 9, column: 29 } }, "4": { start: { line: 11, column: 16 }, end: { line: 11, column: 44 } }, "5": { start: { line: 13, column: 17 }, end: { line: 13, column: 50 } }, "6": { start: { line: 15, column: 17 }, end: { line: 15, column: 44 } }, "7": { start: { line: 17, column: 17 }, end: { line: 17, column: 51 } }, "8": { start: { line: 19, column: 17 }, end: { line: 19, column: 49 } }, "9": { start: { line: 21, column: 17 }, end: { line: 21, column: 51 } }, "10": { start: { line: 23, column: 17 }, end: { line: 23, column: 46 } }, "11": { start: { line: 25, column: 17 }, end: { line: 25, column: 51 } }, "12": { start: { line: 27, column: 15 }, end: { line: 27, column: 35 } }, "13": { start: { line: 29, column: 14 }, end: { line: 29, column: 47 } }, "14": { start: { line: 31, column: 40 }, end: { line: 31, column: 267 } }, "15": { start: { line: 31, column: 69 }, end: { line: 31, column: 80 } }, "16": { start: { line: 31, column: 103 }, end: { line: 31, column: 105 } }, "17": { start: { line: 31, column: 107 }, end: { line: 31, column: 228 } }, "18": { start: { line: 31, column: 126 }, end: { line: 31, column: 226 } }, "19": { start: { line: 31, column: 149 }, end: { line: 31, column: 224 } }, "20": { start: { line: 31, column: 201 }, end: { line: 31, column: 224 } }, "21": { start: { line: 31, column: 229 }, end: { line: 31, column: 250 } }, "22": { start: { line: 31, column: 251 }, end: { line: 31, column: 265 } }, "23": { start: { line: 33, column: 39 }, end: { line: 33, column: 93 } }, "24": { start: { line: 35, column: 16 }, end: { line: 35, column: 43 } }, "25": { start: { line: 36, column: 15 }, end: { line: 36, column: 40 } }, "26": { start: { line: 37, column: 14 }, end: { line: 37, column: 37 } }, "27": { start: { line: 38, column: 17 }, end: { line: 38, column: 46 } }, "28": { start: { line: 41, column: 2 }, end: { line: 53, column: 3 } }, "29": { start: { line: 43, column: 6 }, end: { line: 43, column: 20 } }, "30": { start: { line: 46, column: 6 }, end: { line: 46, column: 37 } }, "31": { start: { line: 49, column: 6 }, end: { line: 49, column: 22 } }, "32": { start: { line: 52, column: 6 }, end: { line: 52, column: 19 } }, "33": { start: { line: 56, column: 20 }, end: { line: 62, column: 2 } }, "34": { start: { line: 64, column: 0 }, end: { line: 64, column: 30 } } }, fnMap: { "0": { name: "_interopRequireWildcard", decl: { start: { line: 31, column: 9 }, end: { line: 31, column: 32 } }, loc: { start: { line: 31, column: 38 }, end: { line: 31, column: 269 } }, line: 31 }, "1": { name: "_interopRequireDefault", decl: { start: { line: 33, column: 9 }, end: { line: 33, column: 31 } }, loc: { start: { line: 33, column: 37 }, end: { line: 33, column: 95 } }, line: 33 }, "2": { name: "session", decl: { start: { line: 40, column: 9 }, end: { line: 40, column: 16 } }, loc: { start: { line: 40, column: 42 }, end: { line: 54, column: 1 } }, line: 40 } }, branchMap: { "0": { loc: { start: { line: 31, column: 40 }, end: { line: 31, column: 267 } }, type: "if", locations: [{ start: { line: 31, column: 40 }, end: { line: 31, column: 267 } }, { start: { line: 31, column: 40 }, end: { line: 31, column: 267 } }], line: 31 }, "1": { loc: { start: { line: 31, column: 44 }, end: { line: 31, column: 65 } }, type: "binary-expr", locations: [{ start: { line: 31, column: 44 }, end: { line: 31, column: 47 } }, { start: { line: 31, column: 51 }, end: { line: 31, column: 65 } }], line: 31 }, "2": { loc: { start: { line: 31, column: 107 }, end: { line: 31, column: 228 } }, type: "if", locations: [{ start: { line: 31, column: 107 }, end: { line: 31, column: 228 } }, { start: { line: 31, column: 107 }, end: { line: 31, column: 228 } }], line: 31 }, "3": { loc: { start: { line: 31, column: 149 }, end: { line: 31, column: 224 } }, type: "if", locations: [{ start: { line: 31, column: 149 }, end: { line: 31, column: 224 } }, { start: { line: 31, column: 149 }, end: { line: 31, column: 224 } }], line: 31 }, "4": { loc: { start: { line: 33, column: 46 }, end: { line: 33, column: 92 } }, type: "cond-expr", locations: [{ start: { line: 33, column: 70 }, end: { line: 33, column: 73 } }, { start: { line: 33, column: 76 }, end: { line: 33, column: 92 } }], line: 33 }, "5": { loc: { start: { line: 33, column: 46 }, end: { line: 33, column: 67 } }, type: "binary-expr", locations: [{ start: { line: 33, column: 46 }, end: { line: 33, column: 49 } }, { start: { line: 33, column: 53 }, end: { line: 33, column: 67 } }], line: 33 }, "6": { loc: { start: { line: 40, column: 17 }, end: { line: 40, column: 32 } }, type: "default-arg", locations: [{ start: { line: 40, column: 25 }, end: { line: 40, column: 32 } }], line: 40 }, "7": { loc: { start: { line: 41, column: 2 }, end: { line: 53, column: 3 } }, type: "switch", locations: [{ start: { line: 42, column: 4 }, end: { line: 43, column: 20 } }, { start: { line: 45, column: 4 }, end: { line: 46, column: 37 } }, { start: { line: 48, column: 4 }, end: { line: 49, column: 22 } }, { start: { line: 51, column: 4 }, end: { line: 52, column: 19 } }], line: 41 } }, s: { "0": 0, "1": 0, "2": 0, "3": 0, "4": 0, "5": 0, "6": 0, "7": 0, "8": 0, "9": 0, "10": 0, "11": 0, "12": 0, "13": 0, "14": 0, "15": 0, "16": 0, "17": 0, "18": 0, "19": 0, "20": 0, "21": 0, "22": 0, "23": 0, "24": 0, "25": 0, "26": 0, "27": 0, "28": 0, "29": 0, "30": 0, "31": 0, "32": 0, "33": 0, "34": 0 }, f: { "0": 0, "1": 0, "2": 0 }, b: { "0": [0, 0], "1": [0, 0], "2": [0, 0], "3": [0, 0], "4": [0, 0], "5": [0, 0], "6": [0], "7": [0, 0, 0, 0] }, inputSourceMap: { version: 3, sources: ["lib/session/reducers.js"], names: ["session", "actions", "WAITING", "ACTIVE", "ERROR", "FINISHED", "state", "action", "type", "READY", "error", "FINISH", "reduceState", "data", "evm", "solidity", "trace"], mappings: ";;;;;;QAcgBA,O,GAAAA,O;;AAdhB;;AAEA;;;;AACA;;;;AACA;;;;AACA;;;;AAEA;;IAAYC,O;;;;;;AAEL,MAAMC,4BAAU,SAAhB;AACA,MAAMC,0BAAS,QAAf;AACA,MAAMC,wBAAQ,OAAd;AACA,MAAMC,8BAAW,UAAjB;;AAEA,SAASL,OAAT,CAAiBM,QAAQJ,OAAzB,EAAkCK,MAAlC,EAA0C;AAC/C,UAAQA,OAAOC,IAAf;AACE,SAAKP,QAAQQ,KAAb;AACE,aAAON,MAAP;;AAEF,SAAKF,QAAQG,KAAb;AACE,aAAO,EAAEM,OAAOH,OAAOG,KAAhB,EAAP;;AAEF,SAAKT,QAAQU,MAAb;AACE,aAAON,QAAP;;AAEF;AACE,aAAOC,KAAP;AAXJ;AAaD;;AAED,MAAMM,cAAc,4BAAgB;AAClCZ,SADkC;AAElCa,0BAFkC;AAGlCC,yBAHkC;AAIlCC,8BAJkC;AAKlCC;AALkC,CAAhB,CAApB;;kBAQeJ,W", file: "reducers.js", sourceRoot: "/Users/gnidan/src/work/truffle/packages/truffle-debugger", sourcesContent: ["import { combineReducers } from \"redux\";\n\nimport data from \"lib/data/reducers\";\nimport evm from \"lib/evm/reducers\";\nimport solidity from \"lib/solidity/reducers\";\nimport trace from \"lib/trace/reducers\";\n\nimport * as actions from \"./actions\";\n\nexport const WAITING = \"WAITING\";\nexport const ACTIVE = \"ACTIVE\";\nexport const ERROR = \"ERROR\";\nexport const FINISHED = \"FINISHED\";\n\nexport function session(state = WAITING, action) {\n  switch (action.type) {\n    case actions.READY:\n      return ACTIVE;\n\n    case actions.ERROR:\n      return { error: action.error };\n\n    case actions.FINISH:\n      return FINISHED;\n\n    default:\n      return state;\n  }\n}\n\nconst reduceState = combineReducers({\n  session,\n  data,\n  evm,\n  solidity,\n  trace,\n});\n\nexport default reduceState;\n"] }, _coverageSchema: "332fd63041d2c1bcb487cc26dd0d5f7d97098a6c" },
      coverage = global[gcv] || (global[gcv] = {});if (coverage[path] && coverage[path].hash === hash) {
    return coverage[path];
  }coverageData.hash = hash;return coverage[path] = coverageData;
}();cov_1tkg2zem3h.s[0]++;Object.defineProperty(exports, "__esModule", { value: true });cov_1tkg2zem3h.s[1]++;exports.FINISHED = exports.ERROR = exports.ACTIVE = exports.WAITING = undefined;cov_1tkg2zem3h.s[2]++;exports.session = session;var _redux = (cov_1tkg2zem3h.s[3]++, __webpack_require__(15));var _reducers = (cov_1tkg2zem3h.s[4]++, __webpack_require__(74));var _reducers2 = (cov_1tkg2zem3h.s[5]++, _interopRequireDefault(_reducers));var _reducers3 = (cov_1tkg2zem3h.s[6]++, __webpack_require__(75));var _reducers4 = (cov_1tkg2zem3h.s[7]++, _interopRequireDefault(_reducers3));var _reducers5 = (cov_1tkg2zem3h.s[8]++, __webpack_require__(77));var _reducers6 = (cov_1tkg2zem3h.s[9]++, _interopRequireDefault(_reducers5));var _reducers7 = (cov_1tkg2zem3h.s[10]++, __webpack_require__(78));var _reducers8 = (cov_1tkg2zem3h.s[11]++, _interopRequireDefault(_reducers7));var _actions = (cov_1tkg2zem3h.s[12]++, __webpack_require__(25));var actions = (cov_1tkg2zem3h.s[13]++, _interopRequireWildcard(_actions));function _interopRequireWildcard(obj) {
  cov_1tkg2zem3h.f[0]++;cov_1tkg2zem3h.s[14]++;if ((cov_1tkg2zem3h.b[1][0]++, obj) && (cov_1tkg2zem3h.b[1][1]++, obj.__esModule)) {
    cov_1tkg2zem3h.b[0][0]++;cov_1tkg2zem3h.s[15]++;return obj;
  } else {
    cov_1tkg2zem3h.b[0][1]++;var newObj = (cov_1tkg2zem3h.s[16]++, {});cov_1tkg2zem3h.s[17]++;if (obj != null) {
      cov_1tkg2zem3h.b[2][0]++;cov_1tkg2zem3h.s[18]++;for (var key in obj) {
        cov_1tkg2zem3h.s[19]++;if (Object.prototype.hasOwnProperty.call(obj, key)) {
          cov_1tkg2zem3h.b[3][0]++;cov_1tkg2zem3h.s[20]++;newObj[key] = obj[key];
        } else {
          cov_1tkg2zem3h.b[3][1]++;
        }
      }
    } else {
      cov_1tkg2zem3h.b[2][1]++;
    }cov_1tkg2zem3h.s[21]++;newObj.default = obj;cov_1tkg2zem3h.s[22]++;return newObj;
  }
}function _interopRequireDefault(obj) {
  cov_1tkg2zem3h.f[1]++;cov_1tkg2zem3h.s[23]++;return (cov_1tkg2zem3h.b[5][0]++, obj) && (cov_1tkg2zem3h.b[5][1]++, obj.__esModule) ? (cov_1tkg2zem3h.b[4][0]++, obj) : (cov_1tkg2zem3h.b[4][1]++, { default: obj });
}const WAITING = (cov_1tkg2zem3h.s[24]++, exports.WAITING = "WAITING");const ACTIVE = (cov_1tkg2zem3h.s[25]++, exports.ACTIVE = "ACTIVE");const ERROR = (cov_1tkg2zem3h.s[26]++, exports.ERROR = "ERROR");const FINISHED = (cov_1tkg2zem3h.s[27]++, exports.FINISHED = "FINISHED");function session(state = (cov_1tkg2zem3h.b[6][0]++, WAITING), action) {
  cov_1tkg2zem3h.f[2]++;cov_1tkg2zem3h.s[28]++;switch (action.type) {case actions.READY:
      cov_1tkg2zem3h.b[7][0]++;cov_1tkg2zem3h.s[29]++;return ACTIVE;case actions.ERROR:
      cov_1tkg2zem3h.b[7][1]++;cov_1tkg2zem3h.s[30]++;return { error: action.error };case actions.FINISH:
      cov_1tkg2zem3h.b[7][2]++;cov_1tkg2zem3h.s[31]++;return FINISHED;default:
      cov_1tkg2zem3h.b[7][3]++;cov_1tkg2zem3h.s[32]++;return state;}
}const reduceState = (cov_1tkg2zem3h.s[33]++, (0, _redux.combineReducers)({ session, data: _reducers2.default, evm: _reducers4.default, solidity: _reducers6.default, trace: _reducers8.default }));cov_1tkg2zem3h.s[34]++;exports.default = reduceState;

/***/ }),
/* 74 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var cov_1fv1dskiyx = function () {
  var path = "/Users/gnidan/src/work/truffle/packages/truffle-debugger/lib/data/reducers.js",
      hash = "32ae78e7d2ae55f31acc41549c2dd63180748919",
      Function = function () {}.constructor,
      global = new Function('return this')(),
      gcv = "__coverage__",
      coverageData = { path: "/Users/gnidan/src/work/truffle/packages/truffle-debugger/lib/data/reducers.js", statementMap: { "0": { start: { line: 3, column: 0 }, end: { line: 5, column: 3 } }, "1": { start: { line: 7, column: 11 }, end: { line: 7, column: 47 } }, "2": { start: { line: 9, column: 12 }, end: { line: 9, column: 40 } }, "3": { start: { line: 11, column: 15 }, end: { line: 11, column: 62 } }, "4": { start: { line: 13, column: 16 }, end: { line: 13, column: 48 } }, "5": { start: { line: 15, column: 14 }, end: { line: 15, column: 60 } }, "6": { start: { line: 17, column: 15 }, end: { line: 17, column: 46 } }, "7": { start: { line: 19, column: 16 }, end: { line: 19, column: 56 } }, "8": { start: { line: 21, column: 16 }, end: { line: 21, column: 49 } }, "9": { start: { line: 23, column: 13 }, end: { line: 23, column: 29 } }, "10": { start: { line: 25, column: 14 }, end: { line: 25, column: 44 } }, "11": { start: { line: 27, column: 13 }, end: { line: 27, column: 29 } }, "12": { start: { line: 29, column: 15 }, end: { line: 29, column: 35 } }, "13": { start: { line: 31, column: 14 }, end: { line: 31, column: 47 } }, "14": { start: { line: 33, column: 40 }, end: { line: 33, column: 267 } }, "15": { start: { line: 33, column: 69 }, end: { line: 33, column: 80 } }, "16": { start: { line: 33, column: 103 }, end: { line: 33, column: 105 } }, "17": { start: { line: 33, column: 107 }, end: { line: 33, column: 228 } }, "18": { start: { line: 33, column: 126 }, end: { line: 33, column: 226 } }, "19": { start: { line: 33, column: 149 }, end: { line: 33, column: 224 } }, "20": { start: { line: 33, column: 201 }, end: { line: 33, column: 224 } }, "21": { start: { line: 33, column: 229 }, end: { line: 33, column: 250 } }, "22": { start: { line: 33, column: 251 }, end: { line: 33, column: 265 } }, "23": { start: { line: 35, column: 39 }, end: { line: 35, column: 93 } }, "24": { start: { line: 37, column: 14 }, end: { line: 37, column: 60 } }, "25": { start: { line: 39, column: 23 }, end: { line: 41, column: 1 } }, "26": { start: { line: 48, column: 2 }, end: { line: 81, column: 3 } }, "27": { start: { line: 50, column: 6 }, end: { line: 50, column: 42 } }, "28": { start: { line: 52, column: 6 }, end: { line: 63, column: 8 } }, "29": { start: { line: 66, column: 6 }, end: { line: 66, column: 50 } }, "30": { start: { line: 67, column: 6 }, end: { line: 67, column: 40 } }, "31": { start: { line: 69, column: 6 }, end: { line: 77, column: 8 } }, "32": { start: { line: 80, column: 6 }, end: { line: 80, column: 19 } }, "33": { start: { line: 84, column: 13 }, end: { line: 86, column: 2 } }, "34": { start: { line: 88, column: 28 }, end: { line: 90, column: 1 } }, "35": { start: { line: 93, column: 2 }, end: { line: 105, column: 3 } }, "36": { start: { line: 95, column: 6 }, end: { line: 101, column: 8 } }, "37": { start: { line: 96, column: 145 }, end: { line: 100, column: 9 } }, "38": { start: { line: 104, column: 6 }, end: { line: 104, column: 19 } }, "39": { start: { line: 108, column: 29 }, end: { line: 110, column: 1 } }, "40": { start: { line: 113, column: 2 }, end: { line: 126, column: 3 } }, "41": { start: { line: 115, column: 24 }, end: { line: 115, column: 30 } }, "42": { start: { line: 116, column: 6 }, end: { line: 122, column: 8 } }, "43": { start: { line: 125, column: 6 }, end: { line: 125, column: 19 } }, "44": { start: { line: 129, column: 13 }, end: { line: 132, column: 2 } }, "45": { start: { line: 134, column: 16 }, end: { line: 137, column: 2 } }, "46": { start: { line: 139, column: 0 }, end: { line: 139, column: 26 } } }, fnMap: { "0": { name: "_interopRequireWildcard", decl: { start: { line: 33, column: 9 }, end: { line: 33, column: 32 } }, loc: { start: { line: 33, column: 38 }, end: { line: 33, column: 269 } }, line: 33 }, "1": { name: "_interopRequireDefault", decl: { start: { line: 35, column: 9 }, end: { line: 35, column: 31 } }, loc: { start: { line: 35, column: 37 }, end: { line: 35, column: 95 } }, line: 35 }, "2": { name: "scopes", decl: { start: { line: 43, column: 9 }, end: { line: 43, column: 15 } }, loc: { start: { line: 43, column: 48 }, end: { line: 82, column: 1 } }, line: 43 }, "3": { name: "assignments", decl: { start: { line: 92, column: 9 }, end: { line: 92, column: 20 } }, loc: { start: { line: 92, column: 58 }, end: { line: 106, column: 1 } }, line: 92 }, "4": { name: "(anonymous_4)", decl: { start: { line: 96, column: 129 }, end: { line: 96, column: 130 } }, loc: { start: { line: 96, column: 145 }, end: { line: 100, column: 9 } }, line: 96 }, "5": { name: "mappingKeys", decl: { start: { line: 112, column: 9 }, end: { line: 112, column: 20 } }, loc: { start: { line: 112, column: 59 }, end: { line: 127, column: 1 } }, line: 112 } }, branchMap: { "0": { loc: { start: { line: 33, column: 40 }, end: { line: 33, column: 267 } }, type: "if", locations: [{ start: { line: 33, column: 40 }, end: { line: 33, column: 267 } }, { start: { line: 33, column: 40 }, end: { line: 33, column: 267 } }], line: 33 }, "1": { loc: { start: { line: 33, column: 44 }, end: { line: 33, column: 65 } }, type: "binary-expr", locations: [{ start: { line: 33, column: 44 }, end: { line: 33, column: 47 } }, { start: { line: 33, column: 51 }, end: { line: 33, column: 65 } }], line: 33 }, "2": { loc: { start: { line: 33, column: 107 }, end: { line: 33, column: 228 } }, type: "if", locations: [{ start: { line: 33, column: 107 }, end: { line: 33, column: 228 } }, { start: { line: 33, column: 107 }, end: { line: 33, column: 228 } }], line: 33 }, "3": { loc: { start: { line: 33, column: 149 }, end: { line: 33, column: 224 } }, type: "if", locations: [{ start: { line: 33, column: 149 }, end: { line: 33, column: 224 } }, { start: { line: 33, column: 149 }, end: { line: 33, column: 224 } }], line: 33 }, "4": { loc: { start: { line: 35, column: 46 }, end: { line: 35, column: 92 } }, type: "cond-expr", locations: [{ start: { line: 35, column: 70 }, end: { line: 35, column: 73 } }, { start: { line: 35, column: 76 }, end: { line: 35, column: 92 } }], line: 35 }, "5": { loc: { start: { line: 35, column: 46 }, end: { line: 35, column: 67 } }, type: "binary-expr", locations: [{ start: { line: 35, column: 46 }, end: { line: 35, column: 49 } }, { start: { line: 35, column: 53 }, end: { line: 35, column: 67 } }], line: 35 }, "6": { loc: { start: { line: 43, column: 16 }, end: { line: 43, column: 38 } }, type: "default-arg", locations: [{ start: { line: 43, column: 24 }, end: { line: 43, column: 38 } }], line: 43 }, "7": { loc: { start: { line: 48, column: 2 }, end: { line: 81, column: 3 } }, type: "switch", locations: [{ start: { line: 49, column: 4 }, end: { line: 63, column: 8 } }, { start: { line: 65, column: 4 }, end: { line: 77, column: 8 } }, { start: { line: 79, column: 4 }, end: { line: 80, column: 19 } }], line: 48 }, "8": { loc: { start: { line: 50, column: 14 }, end: { line: 50, column: 41 } }, type: "binary-expr", locations: [{ start: { line: 50, column: 14 }, end: { line: 50, column: 35 } }, { start: { line: 50, column: 39 }, end: { line: 50, column: 41 } }], line: 50 }, "9": { loc: { start: { line: 66, column: 14 }, end: { line: 66, column: 49 } }, type: "binary-expr", locations: [{ start: { line: 66, column: 14 }, end: { line: 66, column: 43 } }, { start: { line: 66, column: 47 }, end: { line: 66, column: 49 } }], line: 66 }, "10": { loc: { start: { line: 67, column: 18 }, end: { line: 67, column: 39 } }, type: "binary-expr", locations: [{ start: { line: 67, column: 18 }, end: { line: 67, column: 33 } }, { start: { line: 67, column: 37 }, end: { line: 67, column: 39 } }], line: 67 }, "11": { loc: { start: { line: 92, column: 21 }, end: { line: 92, column: 48 } }, type: "default-arg", locations: [{ start: { line: 92, column: 29 }, end: { line: 92, column: 48 } }], line: 92 }, "12": { loc: { start: { line: 93, column: 2 }, end: { line: 105, column: 3 } }, type: "switch", locations: [{ start: { line: 94, column: 4 }, end: { line: 101, column: 8 } }, { start: { line: 103, column: 4 }, end: { line: 104, column: 19 } }], line: 93 }, "13": { loc: { start: { line: 112, column: 21 }, end: { line: 112, column: 49 } }, type: "default-arg", locations: [{ start: { line: 112, column: 29 }, end: { line: 112, column: 49 } }], line: 112 }, "14": { loc: { start: { line: 113, column: 2 }, end: { line: 126, column: 3 } }, type: "switch", locations: [{ start: { line: 114, column: 4 }, end: { line: 122, column: 8 } }, { start: { line: 124, column: 4 }, end: { line: 125, column: 19 } }], line: 113 }, "15": { loc: { start: { line: 120, column: 43 }, end: { line: 120, column: 63 } }, type: "binary-expr", locations: [{ start: { line: 120, column: 43 }, end: { line: 120, column: 57 } }, { start: { line: 120, column: 61 }, end: { line: 120, column: 63 } }], line: 120 } }, s: { "0": 0, "1": 0, "2": 0, "3": 0, "4": 0, "5": 0, "6": 0, "7": 0, "8": 0, "9": 0, "10": 0, "11": 0, "12": 0, "13": 0, "14": 0, "15": 0, "16": 0, "17": 0, "18": 0, "19": 0, "20": 0, "21": 0, "22": 0, "23": 0, "24": 0, "25": 0, "26": 0, "27": 0, "28": 0, "29": 0, "30": 0, "31": 0, "32": 0, "33": 0, "34": 0, "35": 0, "36": 0, "37": 0, "38": 0, "39": 0, "40": 0, "41": 0, "42": 0, "43": 0, "44": 0, "45": 0, "46": 0 }, f: { "0": 0, "1": 0, "2": 0, "3": 0, "4": 0, "5": 0 }, b: { "0": [0, 0], "1": [0, 0], "2": [0, 0], "3": [0, 0], "4": [0, 0], "5": [0, 0], "6": [0], "7": [0, 0, 0], "8": [0, 0], "9": [0, 0], "10": [0, 0], "11": [0], "12": [0, 0], "13": [0], "14": [0, 0], "15": [0, 0] }, inputSourceMap: { version: 3, sources: ["lib/data/reducers.js"], names: ["actions", "debug", "DEFAULT_SCOPES", "byId", "scopes", "state", "action", "context", "scope", "variables", "type", "SCOPE", "id", "sourceId", "parentId", "pointer", "DECLARE", "node", "name", "info", "DEFAULT_ASSIGNMENTS", "assignments", "ASSIGN", "map", "ref", "DEFAULT_MAPPING_KEYS", "mappingKeys", "MAP_KEY", "key", "proc", "reducer"], mappings: ";;;;;;;;;;;;;;;;;;;;;;AAAA;;;;AAGA;;AAEA;;IAAYA,O;;;;;;AAJZ,MAAMC,QAAQ,qBAAY,wBAAZ,CAAd;;AAMA,MAAMC,iBAAiB;AACrBC,QAAM;AADe,CAAvB;;AAIA,SAASC,MAAT,CAAgBC,QAAQH,cAAxB,EAAwCI,MAAxC,EAAgD;AAC9C,MAAIC,OAAJ;AACA,MAAIC,KAAJ;AACA,MAAIC,SAAJ;;AAEA,UAAQH,OAAOI,IAAf;AACE,SAAKV,QAAQW,KAAb;AACEH,cAAQH,MAAMF,IAAN,CAAWG,OAAOM,EAAlB,KAAyB,EAAjC;;AAEA,aAAO;AACLT,yCACKE,MAAMF,IADX;;AAGE,WAACG,OAAOM,EAAR,8BACKJ,KADL;;AAGEI,gBAAIN,OAAOM,EAHb;AAIEC,sBAAUP,OAAOO,QAJnB;AAKEC,sBAAUR,OAAOQ,QALnB;AAMEC,qBAAST,OAAOS;AANlB;AAHF;AADK,OAAP;;AAeF,SAAKf,QAAQgB,OAAb;AACER,cAAQH,MAAMF,IAAN,CAAWG,OAAOW,IAAP,CAAYT,KAAvB,KAAiC,EAAzC;AACAC,kBAAYD,MAAMC,SAAN,IAAmB,EAA/B;;AAEA,aAAO;AACLN,yCACKE,MAAMF,IADX;;AAGE,WAACG,OAAOW,IAAP,CAAYT,KAAb,8BACKA,KADL;;AAGEC,uBAAW,CACT,GAAGA,SADM,EAGT,EAACS,MAAMZ,OAAOW,IAAP,CAAYC,IAAnB,EAAyBN,IAAIN,OAAOW,IAAP,CAAYL,EAAzC,EAHS;AAHb;AAHF;AADK,OAAP;;AAgBF;AACE,aAAOP,KAAP;AAxCJ;AA0CD;;AAED,MAAMc,OAAO,4BAAgB;AAC3Bf;AAD2B,CAAhB,CAAb;;AAIA,MAAMgB,sBAAsB;AAC1BjB,QAAM;AADoB,CAA5B;;AAIA,SAASkB,WAAT,CAAqBhB,QAAQe,mBAA7B,EAAkDd,MAAlD,EAA0D;AACxD,UAAQA,OAAOI,IAAf;AACE,SAAKV,QAAQsB,MAAb;AACE,aAAO;AACLnB,yCACKE,MAAMF,IADX,EAGK,sBAAc,EAAd,EACD,GAAG,uBAAeG,OAAOe,WAAtB,EAAmCE,GAAnC,CACD,CAAC,CAACX,EAAD,EAAKY,GAAL,CAAD,MAAgB;AACd,WAACZ,EAAD,8BACKP,MAAMF,IAAN,CAAWS,EAAX,CADL;AAEEY;AAFF;AADc,SAAhB,CADC,CADF,CAHL;AADK,OAAP;;AAiBF;AACE,aAAOnB,KAAP;AApBJ;AAsBD;;AAED,MAAMoB,uBAAuB;AAC3BtB,QAAM;AADqB,CAA7B;;AAIA,SAASuB,WAAT,CAAqBrB,QAAQoB,oBAA7B,EAAmDnB,MAAnD,EAA2D;AACzD,UAAQA,OAAOI,IAAf;AACE,SAAKV,QAAQ2B,OAAb;AACE,UAAI,EAAEf,EAAF,EAAMgB,GAAN,KAActB,MAAlB;AACA,aAAO;AACLH,yCACKE,MAAMF,IADX;;AAGE;AACA,WAACS,EAAD,GAAM,CAAC,GAAG,kBAAQ,CAChB,IAAIP,MAAMF,IAAN,CAAWS,EAAX,KAAkB,EAAtB,CADgB,EAEhBgB,GAFgB,CAAR,CAAJ;AAJR;AADK,OAAP;;AAYF;AACE,aAAOvB,KAAP;AAhBJ;AAkBD;;AAED,MAAMwB,OAAO,4BAAgB;AAC3BR,aAD2B;AAE3BK;AAF2B,CAAhB,CAAb;;AAKA,MAAMI,UAAU,4BAAgB;AAC9BX,MAD8B;AAE9BU;AAF8B,CAAhB,CAAhB;;kBAKeC,O", file: "reducers.js", sourceRoot: "/Users/gnidan/src/work/truffle/packages/truffle-debugger", sourcesContent: ["import debugModule from \"debug\";\nconst debug = debugModule(\"debugger:data:reducers\");\n\nimport { combineReducers } from \"redux\";\n\nimport * as actions from \"./actions\";\n\nconst DEFAULT_SCOPES = {\n  byId: {}\n};\n\nfunction scopes(state = DEFAULT_SCOPES, action) {\n  var context;\n  var scope;\n  var variables;\n\n  switch (action.type) {\n    case actions.SCOPE:\n      scope = state.byId[action.id] || {};\n\n      return {\n        byId: {\n          ...state.byId,\n\n          [action.id]: {\n            ...scope,\n\n            id: action.id,\n            sourceId: action.sourceId,\n            parentId: action.parentId,\n            pointer: action.pointer\n          }\n        }\n      }\n\n    case actions.DECLARE:\n      scope = state.byId[action.node.scope] || {};\n      variables = scope.variables || [];\n\n      return {\n        byId: {\n          ...state.byId,\n\n          [action.node.scope]: {\n            ...scope,\n\n            variables: [\n              ...variables,\n\n              {name: action.node.name, id: action.node.id}\n            ]\n          }\n        }\n      }\n\n    default:\n      return state;\n  }\n}\n\nconst info = combineReducers({\n  scopes\n});\n\nconst DEFAULT_ASSIGNMENTS = {\n  byId: {}\n};\n\nfunction assignments(state = DEFAULT_ASSIGNMENTS, action) {\n  switch (action.type) {\n    case actions.ASSIGN:\n      return {\n        byId: {\n          ...state.byId,\n\n          ...Object.assign({},\n            ...Object.entries(action.assignments).map(\n              ([id, ref]) => ({\n                [id]: {\n                  ...state.byId[id],\n                  ref\n                }\n              })\n            )\n          )\n        }\n      };\n\n    default:\n      return state;\n  }\n};\n\nconst DEFAULT_MAPPING_KEYS = {\n  byId: {}\n}\n\nfunction mappingKeys(state = DEFAULT_MAPPING_KEYS, action) {\n  switch (action.type) {\n    case actions.MAP_KEY:\n      let { id, key } = action;\n      return {\n        byId: {\n          ...state.byId,\n\n          // add new key to set of keys already defined\n          [id]: [...new Set([\n            ...(state.byId[id] || []),\n            key\n          ])]\n        }\n      };\n\n    default:\n      return state;\n  }\n}\n\nconst proc = combineReducers({\n  assignments,\n  mappingKeys\n});\n\nconst reducer = combineReducers({\n  info,\n  proc\n});\n\nexport default reducer;\n"] }, _coverageSchema: "332fd63041d2c1bcb487cc26dd0d5f7d97098a6c" },
      coverage = global[gcv] || (global[gcv] = {});if (coverage[path] && coverage[path].hash === hash) {
    return coverage[path];
  }coverageData.hash = hash;return coverage[path] = coverageData;
}();cov_1fv1dskiyx.s[0]++;Object.defineProperty(exports, "__esModule", { value: true });var _set = (cov_1fv1dskiyx.s[1]++, __webpack_require__(22));var _set2 = (cov_1fv1dskiyx.s[2]++, _interopRequireDefault(_set));var _entries = (cov_1fv1dskiyx.s[3]++, __webpack_require__(1));var _entries2 = (cov_1fv1dskiyx.s[4]++, _interopRequireDefault(_entries));var _assign = (cov_1fv1dskiyx.s[5]++, __webpack_require__(3));var _assign2 = (cov_1fv1dskiyx.s[6]++, _interopRequireDefault(_assign));var _extends2 = (cov_1fv1dskiyx.s[7]++, __webpack_require__(2));var _extends3 = (cov_1fv1dskiyx.s[8]++, _interopRequireDefault(_extends2));var _debug = (cov_1fv1dskiyx.s[9]++, __webpack_require__(0));var _debug2 = (cov_1fv1dskiyx.s[10]++, _interopRequireDefault(_debug));var _redux = (cov_1fv1dskiyx.s[11]++, __webpack_require__(15));var _actions = (cov_1fv1dskiyx.s[12]++, __webpack_require__(32));var actions = (cov_1fv1dskiyx.s[13]++, _interopRequireWildcard(_actions));function _interopRequireWildcard(obj) {
  cov_1fv1dskiyx.f[0]++;cov_1fv1dskiyx.s[14]++;if ((cov_1fv1dskiyx.b[1][0]++, obj) && (cov_1fv1dskiyx.b[1][1]++, obj.__esModule)) {
    cov_1fv1dskiyx.b[0][0]++;cov_1fv1dskiyx.s[15]++;return obj;
  } else {
    cov_1fv1dskiyx.b[0][1]++;var newObj = (cov_1fv1dskiyx.s[16]++, {});cov_1fv1dskiyx.s[17]++;if (obj != null) {
      cov_1fv1dskiyx.b[2][0]++;cov_1fv1dskiyx.s[18]++;for (var key in obj) {
        cov_1fv1dskiyx.s[19]++;if (Object.prototype.hasOwnProperty.call(obj, key)) {
          cov_1fv1dskiyx.b[3][0]++;cov_1fv1dskiyx.s[20]++;newObj[key] = obj[key];
        } else {
          cov_1fv1dskiyx.b[3][1]++;
        }
      }
    } else {
      cov_1fv1dskiyx.b[2][1]++;
    }cov_1fv1dskiyx.s[21]++;newObj.default = obj;cov_1fv1dskiyx.s[22]++;return newObj;
  }
}function _interopRequireDefault(obj) {
  cov_1fv1dskiyx.f[1]++;cov_1fv1dskiyx.s[23]++;return (cov_1fv1dskiyx.b[5][0]++, obj) && (cov_1fv1dskiyx.b[5][1]++, obj.__esModule) ? (cov_1fv1dskiyx.b[4][0]++, obj) : (cov_1fv1dskiyx.b[4][1]++, { default: obj });
}const debug = (cov_1fv1dskiyx.s[24]++, (0, _debug2.default)("debugger:data:reducers"));const DEFAULT_SCOPES = (cov_1fv1dskiyx.s[25]++, { byId: {} });function scopes(state = (cov_1fv1dskiyx.b[6][0]++, DEFAULT_SCOPES), action) {
  cov_1fv1dskiyx.f[2]++;var context;var scope;var variables;cov_1fv1dskiyx.s[26]++;switch (action.type) {case actions.SCOPE:
      cov_1fv1dskiyx.b[7][0]++;cov_1fv1dskiyx.s[27]++;scope = (cov_1fv1dskiyx.b[8][0]++, state.byId[action.id]) || (cov_1fv1dskiyx.b[8][1]++, {});cov_1fv1dskiyx.s[28]++;return { byId: (0, _extends3.default)({}, state.byId, { [action.id]: (0, _extends3.default)({}, scope, { id: action.id, sourceId: action.sourceId, parentId: action.parentId, pointer: action.pointer }) }) };case actions.DECLARE:
      cov_1fv1dskiyx.b[7][1]++;cov_1fv1dskiyx.s[29]++;scope = (cov_1fv1dskiyx.b[9][0]++, state.byId[action.node.scope]) || (cov_1fv1dskiyx.b[9][1]++, {});cov_1fv1dskiyx.s[30]++;variables = (cov_1fv1dskiyx.b[10][0]++, scope.variables) || (cov_1fv1dskiyx.b[10][1]++, []);cov_1fv1dskiyx.s[31]++;return { byId: (0, _extends3.default)({}, state.byId, { [action.node.scope]: (0, _extends3.default)({}, scope, { variables: [...variables, { name: action.node.name, id: action.node.id }] }) }) };default:
      cov_1fv1dskiyx.b[7][2]++;cov_1fv1dskiyx.s[32]++;return state;}
}const info = (cov_1fv1dskiyx.s[33]++, (0, _redux.combineReducers)({ scopes }));const DEFAULT_ASSIGNMENTS = (cov_1fv1dskiyx.s[34]++, { byId: {} });function assignments(state = (cov_1fv1dskiyx.b[11][0]++, DEFAULT_ASSIGNMENTS), action) {
  cov_1fv1dskiyx.f[3]++;cov_1fv1dskiyx.s[35]++;switch (action.type) {case actions.ASSIGN:
      cov_1fv1dskiyx.b[12][0]++;cov_1fv1dskiyx.s[36]++;return { byId: (0, _extends3.default)({}, state.byId, (0, _assign2.default)({}, ...(0, _entries2.default)(action.assignments).map(([id, ref]) => {
          cov_1fv1dskiyx.f[4]++;cov_1fv1dskiyx.s[37]++;return { [id]: (0, _extends3.default)({}, state.byId[id], { ref }) };
        }))) };default:
      cov_1fv1dskiyx.b[12][1]++;cov_1fv1dskiyx.s[38]++;return state;}
};const DEFAULT_MAPPING_KEYS = (cov_1fv1dskiyx.s[39]++, { byId: {} });function mappingKeys(state = (cov_1fv1dskiyx.b[13][0]++, DEFAULT_MAPPING_KEYS), action) {
  cov_1fv1dskiyx.f[5]++;cov_1fv1dskiyx.s[40]++;switch (action.type) {case actions.MAP_KEY:
      cov_1fv1dskiyx.b[14][0]++;let { id, key } = (cov_1fv1dskiyx.s[41]++, action);cov_1fv1dskiyx.s[42]++;return { byId: (0, _extends3.default)({}, state.byId, { [id]: [...new _set2.default([...((cov_1fv1dskiyx.b[15][0]++, state.byId[id]) || (cov_1fv1dskiyx.b[15][1]++, [])), key])] }) };default:
      cov_1fv1dskiyx.b[14][1]++;cov_1fv1dskiyx.s[43]++;return state;}
}const proc = (cov_1fv1dskiyx.s[44]++, (0, _redux.combineReducers)({ assignments, mappingKeys }));const reducer = (cov_1fv1dskiyx.s[45]++, (0, _redux.combineReducers)({ info, proc }));cov_1fv1dskiyx.s[46]++;exports.default = reducer;

/***/ }),
/* 75 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var cov_zru3qzhor = function () {
  var path = "/Users/gnidan/src/work/truffle/packages/truffle-debugger/lib/evm/reducers.js",
      hash = "54012bd3408204db3e178cb1f33bc49b28b76afe",
      Function = function () {}.constructor,
      global = new Function('return this')(),
      gcv = "__coverage__",
      coverageData = { path: "/Users/gnidan/src/work/truffle/packages/truffle-debugger/lib/evm/reducers.js", statementMap: { "0": { start: { line: 3, column: 0 }, end: { line: 5, column: 3 } }, "1": { start: { line: 7, column: 11 }, end: { line: 7, column: 47 } }, "2": { start: { line: 9, column: 12 }, end: { line: 9, column: 40 } }, "3": { start: { line: 11, column: 12 }, end: { line: 11, column: 55 } }, "4": { start: { line: 13, column: 13 }, end: { line: 13, column: 42 } }, "5": { start: { line: 15, column: 16 }, end: { line: 15, column: 56 } }, "6": { start: { line: 17, column: 16 }, end: { line: 17, column: 49 } }, "7": { start: { line: 19, column: 0 }, end: { line: 19, column: 30 } }, "8": { start: { line: 21, column: 13 }, end: { line: 21, column: 29 } }, "9": { start: { line: 23, column: 15 }, end: { line: 23, column: 35 } }, "10": { start: { line: 25, column: 14 }, end: { line: 25, column: 47 } }, "11": { start: { line: 27, column: 15 }, end: { line: 27, column: 37 } }, "12": { start: { line: 29, column: 40 }, end: { line: 29, column: 267 } }, "13": { start: { line: 29, column: 69 }, end: { line: 29, column: 80 } }, "14": { start: { line: 29, column: 103 }, end: { line: 29, column: 105 } }, "15": { start: { line: 29, column: 107 }, end: { line: 29, column: 228 } }, "16": { start: { line: 29, column: 126 }, end: { line: 29, column: 226 } }, "17": { start: { line: 29, column: 149 }, end: { line: 29, column: 224 } }, "18": { start: { line: 29, column: 201 }, end: { line: 29, column: 224 } }, "19": { start: { line: 29, column: 229 }, end: { line: 29, column: 250 } }, "20": { start: { line: 29, column: 251 }, end: { line: 29, column: 265 } }, "21": { start: { line: 31, column: 39 }, end: { line: 31, column: 93 } }, "22": { start: { line: 33, column: 25 }, end: { line: 36, column: 1 } }, "23": { start: { line: 39, column: 2 }, end: { line: 69, column: 3 } }, "24": { start: { line: 44, column: 37 }, end: { line: 44, column: 43 } }, "25": { start: { line: 46, column: 6 }, end: { line: 48, column: 7 } }, "26": { start: { line: 47, column: 8 }, end: { line: 47, column: 21 } }, "27": { start: { line: 50, column: 20 }, end: { line: 50, column: 51 } }, "28": { start: { line: 52, column: 6 }, end: { line: 62, column: 8 } }, "29": { start: { line: 68, column: 6 }, end: { line: 68, column: 19 } }, "30": { start: { line: 72, column: 26 }, end: { line: 75, column: 1 } }, "31": { start: { line: 78, column: 2 }, end: { line: 107, column: 3 } }, "32": { start: { line: 83, column: 41 }, end: { line: 83, column: 47 } }, "33": { start: { line: 86, column: 27 }, end: { line: 86, column: 57 } }, "34": { start: { line: 87, column: 27 }, end: { line: 87, column: 71 } }, "35": { start: { line: 87, column: 63 }, end: { line: 87, column: 70 } }, "36": { start: { line: 89, column: 6 }, end: { line: 100, column: 8 } }, "37": { start: { line: 98, column: 105 }, end: { line: 98, column: 116 } }, "38": { start: { line: 106, column: 6 }, end: { line: 106, column: 19 } }, "39": { start: { line: 110, column: 13 }, end: { line: 113, column: 2 } }, "40": { start: { line: 116, column: 2 }, end: { line: 130, column: 3 } }, "41": { start: { line: 118, column: 20 }, end: { line: 118, column: 34 } }, "42": { start: { line: 119, column: 6 }, end: { line: 119, column: 41 } }, "43": { start: { line: 122, column: 21 }, end: { line: 122, column: 34 } }, "44": { start: { line: 123, column: 6 }, end: { line: 123, column: 40 } }, "45": { start: { line: 126, column: 6 }, end: { line: 126, column: 32 } }, "46": { start: { line: 129, column: 6 }, end: { line: 129, column: 19 } }, "47": { start: { line: 133, column: 13 }, end: { line: 135, column: 2 } }, "48": { start: { line: 137, column: 16 }, end: { line: 140, column: 2 } }, "49": { start: { line: 142, column: 0 }, end: { line: 142, column: 26 } } }, fnMap: { "0": { name: "_interopRequireWildcard", decl: { start: { line: 29, column: 9 }, end: { line: 29, column: 32 } }, loc: { start: { line: 29, column: 38 }, end: { line: 29, column: 269 } }, line: 29 }, "1": { name: "_interopRequireDefault", decl: { start: { line: 31, column: 9 }, end: { line: 31, column: 31 } }, loc: { start: { line: 31, column: 37 }, end: { line: 31, column: 95 } }, line: 31 }, "2": { name: "contexts", decl: { start: { line: 38, column: 9 }, end: { line: 38, column: 17 } }, loc: { start: { line: 38, column: 52 }, end: { line: 70, column: 1 } }, line: 38 }, "3": { name: "instances", decl: { start: { line: 77, column: 9 }, end: { line: 77, column: 18 } }, loc: { start: { line: 77, column: 54 }, end: { line: 108, column: 1 } }, line: 77 }, "4": { name: "(anonymous_4)", decl: { start: { line: 87, column: 46 }, end: { line: 87, column: 47 } }, loc: { start: { line: 87, column: 63 }, end: { line: 87, column: 70 } }, line: 87 }, "5": { name: "(anonymous_5)", decl: { start: { line: 98, column: 93 }, end: { line: 98, column: 94 } }, loc: { start: { line: 98, column: 105 }, end: { line: 98, column: 116 } }, line: 98 }, "6": { name: "callstack", decl: { start: { line: 115, column: 9 }, end: { line: 115, column: 18 } }, loc: { start: { line: 115, column: 39 }, end: { line: 131, column: 1 } }, line: 115 } }, branchMap: { "0": { loc: { start: { line: 29, column: 40 }, end: { line: 29, column: 267 } }, type: "if", locations: [{ start: { line: 29, column: 40 }, end: { line: 29, column: 267 } }, { start: { line: 29, column: 40 }, end: { line: 29, column: 267 } }], line: 29 }, "1": { loc: { start: { line: 29, column: 44 }, end: { line: 29, column: 65 } }, type: "binary-expr", locations: [{ start: { line: 29, column: 44 }, end: { line: 29, column: 47 } }, { start: { line: 29, column: 51 }, end: { line: 29, column: 65 } }], line: 29 }, "2": { loc: { start: { line: 29, column: 107 }, end: { line: 29, column: 228 } }, type: "if", locations: [{ start: { line: 29, column: 107 }, end: { line: 29, column: 228 } }, { start: { line: 29, column: 107 }, end: { line: 29, column: 228 } }], line: 29 }, "3": { loc: { start: { line: 29, column: 149 }, end: { line: 29, column: 224 } }, type: "if", locations: [{ start: { line: 29, column: 149 }, end: { line: 29, column: 224 } }, { start: { line: 29, column: 149 }, end: { line: 29, column: 224 } }], line: 29 }, "4": { loc: { start: { line: 31, column: 46 }, end: { line: 31, column: 92 } }, type: "cond-expr", locations: [{ start: { line: 31, column: 70 }, end: { line: 31, column: 73 } }, { start: { line: 31, column: 76 }, end: { line: 31, column: 92 } }], line: 31 }, "5": { loc: { start: { line: 31, column: 46 }, end: { line: 31, column: 67 } }, type: "binary-expr", locations: [{ start: { line: 31, column: 46 }, end: { line: 31, column: 49 } }, { start: { line: 31, column: 53 }, end: { line: 31, column: 67 } }], line: 31 }, "6": { loc: { start: { line: 38, column: 18 }, end: { line: 38, column: 42 } }, type: "default-arg", locations: [{ start: { line: 38, column: 26 }, end: { line: 38, column: 42 } }], line: 38 }, "7": { loc: { start: { line: 39, column: 2 }, end: { line: 69, column: 3 } }, type: "switch", locations: [{ start: { line: 43, column: 4 }, end: { line: 62, column: 8 } }, { start: { line: 67, column: 4 }, end: { line: 68, column: 19 } }], line: 39 }, "8": { loc: { start: { line: 46, column: 6 }, end: { line: 48, column: 7 } }, type: "if", locations: [{ start: { line: 46, column: 6 }, end: { line: 48, column: 7 } }, { start: { line: 46, column: 6 }, end: { line: 48, column: 7 } }], line: 46 }, "9": { loc: { start: { line: 77, column: 19 }, end: { line: 77, column: 44 } }, type: "default-arg", locations: [{ start: { line: 77, column: 27 }, end: { line: 77, column: 44 } }], line: 77 }, "10": { loc: { start: { line: 78, column: 2 }, end: { line: 107, column: 3 } }, type: "switch", locations: [{ start: { line: 82, column: 4 }, end: { line: 100, column: 8 } }, { start: { line: 105, column: 4 }, end: { line: 106, column: 19 } }], line: 78 }, "11": { loc: { start: { line: 86, column: 27 }, end: { line: 86, column: 57 } }, type: "binary-expr", locations: [{ start: { line: 86, column: 27 }, end: { line: 86, column: 51 } }, { start: { line: 86, column: 55 }, end: { line: 86, column: 57 } }], line: 86 }, "12": { loc: { start: { line: 115, column: 19 }, end: { line: 115, column: 29 } }, type: "default-arg", locations: [{ start: { line: 115, column: 27 }, end: { line: 115, column: 29 } }], line: 115 }, "13": { loc: { start: { line: 116, column: 2 }, end: { line: 130, column: 3 } }, type: "switch", locations: [{ start: { line: 117, column: 4 }, end: { line: 119, column: 41 } }, { start: { line: 121, column: 4 }, end: { line: 123, column: 40 } }, { start: { line: 125, column: 4 }, end: { line: 126, column: 32 } }, { start: { line: 128, column: 4 }, end: { line: 129, column: 19 } }], line: 116 } }, s: { "0": 0, "1": 0, "2": 0, "3": 0, "4": 0, "5": 0, "6": 0, "7": 0, "8": 0, "9": 0, "10": 0, "11": 0, "12": 0, "13": 0, "14": 0, "15": 0, "16": 0, "17": 0, "18": 0, "19": 0, "20": 0, "21": 0, "22": 0, "23": 0, "24": 0, "25": 0, "26": 0, "27": 0, "28": 0, "29": 0, "30": 0, "31": 0, "32": 0, "33": 0, "34": 0, "35": 0, "36": 0, "37": 0, "38": 0, "39": 0, "40": 0, "41": 0, "42": 0, "43": 0, "44": 0, "45": 0, "46": 0, "47": 0, "48": 0, "49": 0 }, f: { "0": 0, "1": 0, "2": 0, "3": 0, "4": 0, "5": 0, "6": 0 }, b: { "0": [0, 0], "1": [0, 0], "2": [0, 0], "3": [0, 0], "4": [0, 0], "5": [0, 0], "6": [0], "7": [0, 0], "8": [0, 0], "9": [0], "10": [0, 0], "11": [0, 0], "12": [0], "13": [0, 0, 0, 0] }, inputSourceMap: { version: 3, sources: ["lib/evm/reducers.js"], names: ["callstack", "actions", "DEFAULT_CONTEXTS", "byContext", "byBinary", "contexts", "state", "action", "type", "ADD_CONTEXT", "contractName", "binary", "context", "DEFAULT_INSTANCES", "byAddress", "instances", "ADD_INSTANCE", "address", "otherInstances", "otherAddresses", "map", "add", "info", "CALL", "concat", "CREATE", "RETURN", "slice", "proc", "reducer"], mappings: ";;;;;;;;;;;;;;;;;;QA6FgBA,S,GAAAA,S;;AA7FhB;;AAEA;;IAAYC,O;;AACZ;;;;;;AAEA,MAAMC,mBAAmB;AACvBC,aAAW,EADY;AAEvBC,YAAU;AAFa,CAAzB;;AAKA,SAASC,QAAT,CAAkBC,QAAQJ,gBAA1B,EAA4CK,MAA5C,EAAoD;AAClD,UAAQA,OAAOC,IAAf;AACE;;;AAGA,SAAKP,QAAQQ,WAAb;AACE,UAAI,EAAEC,YAAF,EAAgBC,MAAhB,KAA2BJ,MAA/B;;AAEA,UAAID,MAAMF,QAAN,CAAeO,MAAf,CAAJ,EAA4B;AAC1B,eAAOL,KAAP;AACD;;AAED,UAAIM,UAAU,wBAAUD,MAAV,CAAd;;AAEA,aAAO;AACLR,8CACKG,MAAMH,SADX;;AAGE,WAACS,OAAD,GAAW,EAAEA,OAAF,EAAWD,MAAX,EAAmBD,YAAnB;AAHb,UADK;;AAOLN,6CACKE,MAAMF,QADX;;AAGE,WAACO,MAAD,GAAU,EAAEC,SAASA,OAAX;AAHZ;AAPK,OAAP;;AAcF;;;AAGA;AACE,aAAON,KAAP;AA/BJ;AAiCD;;AAED,MAAMO,oBAAoB;AACxBC,aAAW,EADa;AAExBX,aAAW;AAFa,CAA1B;;AAKA,SAASY,SAAT,CAAmBT,QAAQO,iBAA3B,EAA8CN,MAA9C,EAAsD;AACpD,UAAQA,OAAOC,IAAf;AACE;;;AAGA,SAAKP,QAAQe,YAAb;AACE,UAAI,EAAEC,OAAF,EAAWL,OAAX,EAAoBD,MAApB,KAA+BJ,MAAnC;;AAEA;AACA,UAAIW,iBAAiBZ,MAAMH,SAAN,CAAgBS,OAAhB,KAA4B,EAAjD;AACA,UAAIO,iBAAiBD,eAAeE,GAAf,CAAmB,CAAC,EAACH,OAAD,EAAD,KAAeA,OAAlC,CAArB;;AAEA,aAAO;AACLH,8CACKR,MAAMQ,SADX;;AAGE,WAACG,OAAD,GAAW,EAAEL,OAAF,EAAWD,MAAX;AAHb,UADK;;AAOLR,8CACKG,MAAMH,SADX;;AAGE;AACA,WAACS,OAAD,GAAW,oBAAW,kBAAQO,cAAR,EAAwBE,GAAxB,CAA4BJ,OAA5B,CAAX,EACRG,GADQ,CACHH,OAAD,KAAc,EAACA,OAAD,EAAd,CADI;AAJb;AAPK,OAAP;;AAgBF;;;AAGA;AACE,aAAOX,KAAP;AA/BJ;AAkCD;;AAED,MAAMgB,OAAO,4BAAgB;AAC3BjB,UAD2B;AAE3BU;AAF2B,CAAhB,CAAb;;AAKO,SAASf,SAAT,CAAmBM,QAAQ,EAA3B,EAA+BC,MAA/B,EAAuC;AAC5C,UAAOA,OAAOC,IAAd;AACE,SAAKP,QAAQsB,IAAb;AACE,UAAIN,UAAUV,OAAOU,OAArB;AACA,aAAOX,MAAMkB,MAAN,CAAa,CAAE,EAACP,OAAD,EAAF,CAAb,CAAP;;AAEF,SAAKhB,QAAQwB,MAAb;AACE,YAAMd,SAASJ,OAAOI,MAAtB;AACA,aAAOL,MAAMkB,MAAN,CAAa,CAAE,EAACb,MAAD,EAAF,CAAb,CAAP;;AAEF,SAAKV,QAAQyB,MAAb;AACE,aAAOpB,MAAMqB,KAAN,CAAY,CAAZ,EAAe,CAAC,CAAhB,CAAP,CAVJ,CAU+B;;AAE7B;AACE,aAAOrB,KAAP;AAbJ,GAcC;AACF;;AAED,MAAMsB,OAAO,4BAAgB;AAC3B5B;AAD2B,CAAhB,CAAb;;AAIA,MAAM6B,UAAU,4BAAgB;AAC9BP,MAD8B;AAE9BM;AAF8B,CAAhB,CAAhB;;kBAKeC,O", file: "reducers.js", sourceRoot: "/Users/gnidan/src/work/truffle/packages/truffle-debugger", sourcesContent: ["import { combineReducers } from \"redux\";\n\nimport * as actions from \"./actions\";\nimport { keccak256 } from \"lib/helpers\";\n\nconst DEFAULT_CONTEXTS = {\n  byContext: {},\n  byBinary: {}\n};\n\nfunction contexts(state = DEFAULT_CONTEXTS, action) {\n  switch (action.type) {\n    /*\n     * Adding a new context\n     */\n    case actions.ADD_CONTEXT:\n      let { contractName, binary } = action;\n\n      if (state.byBinary[binary]) {\n        return state;\n      }\n\n      let context = keccak256(binary);\n\n      return {\n        byContext: {\n          ...state.byContext,\n\n          [context]: { context, binary, contractName }\n        },\n\n        byBinary: {\n          ...state.byBinary,\n\n          [binary]: { context: context }\n        }\n      };\n\n    /*\n     * Default case\n     */\n    default:\n      return state;\n  }\n}\n\nconst DEFAULT_INSTANCES = {\n  byAddress: {},\n  byContext: {}\n}\n\nfunction instances(state = DEFAULT_INSTANCES, action) {\n  switch (action.type) {\n    /*\n     * Adding a new address for context\n     */\n    case actions.ADD_INSTANCE:\n      let { address, context, binary } = action;\n\n      // get known addresses for this context\n      let otherInstances = state.byContext[context] || [];\n      let otherAddresses = otherInstances.map(({address}) => address);\n\n      return {\n        byAddress: {\n          ...state.byAddress,\n\n          [address]: { context, binary }\n        },\n\n        byContext: {\n          ...state.byContext,\n\n          // reconstruct context instances to include new address\n          [context]: Array.from(new Set(otherAddresses).add(address))\n            .map((address) => ({address}))\n        }\n      };\n\n    /*\n     * Default case\n     */\n    default:\n      return state;\n  }\n\n}\n\nconst info = combineReducers({\n  contexts,\n  instances\n});\n\nexport function callstack(state = [], action) {\n  switch(action.type) {\n    case actions.CALL:\n      let address = action.address;\n      return state.concat([ {address} ]);\n\n    case actions.CREATE:\n      const binary = action.binary;\n      return state.concat([ {binary} ]);\n\n    case actions.RETURN:\n      return state.slice(0, -1); // pop\n\n    default:\n      return state;\n  };\n}\n\nconst proc = combineReducers({\n  callstack\n});\n\nconst reducer = combineReducers({\n  info,\n  proc\n});\n\nexport default reducer;\n"] }, _coverageSchema: "332fd63041d2c1bcb487cc26dd0d5f7d97098a6c" },
      coverage = global[gcv] || (global[gcv] = {});if (coverage[path] && coverage[path].hash === hash) {
    return coverage[path];
  }coverageData.hash = hash;return coverage[path] = coverageData;
}();cov_zru3qzhor.s[0]++;Object.defineProperty(exports, "__esModule", { value: true });var _set = (cov_zru3qzhor.s[1]++, __webpack_require__(22));var _set2 = (cov_zru3qzhor.s[2]++, _interopRequireDefault(_set));var _from = (cov_zru3qzhor.s[3]++, __webpack_require__(76));var _from2 = (cov_zru3qzhor.s[4]++, _interopRequireDefault(_from));var _extends2 = (cov_zru3qzhor.s[5]++, __webpack_require__(2));var _extends3 = (cov_zru3qzhor.s[6]++, _interopRequireDefault(_extends2));cov_zru3qzhor.s[7]++;exports.callstack = callstack;var _redux = (cov_zru3qzhor.s[8]++, __webpack_require__(15));var _actions = (cov_zru3qzhor.s[9]++, __webpack_require__(35));var actions = (cov_zru3qzhor.s[10]++, _interopRequireWildcard(_actions));var _helpers = (cov_zru3qzhor.s[11]++, __webpack_require__(4));function _interopRequireWildcard(obj) {
  cov_zru3qzhor.f[0]++;cov_zru3qzhor.s[12]++;if ((cov_zru3qzhor.b[1][0]++, obj) && (cov_zru3qzhor.b[1][1]++, obj.__esModule)) {
    cov_zru3qzhor.b[0][0]++;cov_zru3qzhor.s[13]++;return obj;
  } else {
    cov_zru3qzhor.b[0][1]++;var newObj = (cov_zru3qzhor.s[14]++, {});cov_zru3qzhor.s[15]++;if (obj != null) {
      cov_zru3qzhor.b[2][0]++;cov_zru3qzhor.s[16]++;for (var key in obj) {
        cov_zru3qzhor.s[17]++;if (Object.prototype.hasOwnProperty.call(obj, key)) {
          cov_zru3qzhor.b[3][0]++;cov_zru3qzhor.s[18]++;newObj[key] = obj[key];
        } else {
          cov_zru3qzhor.b[3][1]++;
        }
      }
    } else {
      cov_zru3qzhor.b[2][1]++;
    }cov_zru3qzhor.s[19]++;newObj.default = obj;cov_zru3qzhor.s[20]++;return newObj;
  }
}function _interopRequireDefault(obj) {
  cov_zru3qzhor.f[1]++;cov_zru3qzhor.s[21]++;return (cov_zru3qzhor.b[5][0]++, obj) && (cov_zru3qzhor.b[5][1]++, obj.__esModule) ? (cov_zru3qzhor.b[4][0]++, obj) : (cov_zru3qzhor.b[4][1]++, { default: obj });
}const DEFAULT_CONTEXTS = (cov_zru3qzhor.s[22]++, { byContext: {}, byBinary: {} });function contexts(state = (cov_zru3qzhor.b[6][0]++, DEFAULT_CONTEXTS), action) {
  cov_zru3qzhor.f[2]++;cov_zru3qzhor.s[23]++;switch (action.type) {case actions.ADD_CONTEXT:
      cov_zru3qzhor.b[7][0]++;let { contractName, binary } = (cov_zru3qzhor.s[24]++, action);cov_zru3qzhor.s[25]++;if (state.byBinary[binary]) {
        cov_zru3qzhor.b[8][0]++;cov_zru3qzhor.s[26]++;return state;
      } else {
        cov_zru3qzhor.b[8][1]++;
      }let context = (cov_zru3qzhor.s[27]++, (0, _helpers.keccak256)(binary));cov_zru3qzhor.s[28]++;return { byContext: (0, _extends3.default)({}, state.byContext, { [context]: { context, binary, contractName } }), byBinary: (0, _extends3.default)({}, state.byBinary, { [binary]: { context: context } }) };default:
      cov_zru3qzhor.b[7][1]++;cov_zru3qzhor.s[29]++;return state;}
}const DEFAULT_INSTANCES = (cov_zru3qzhor.s[30]++, { byAddress: {}, byContext: {} });function instances(state = (cov_zru3qzhor.b[9][0]++, DEFAULT_INSTANCES), action) {
  cov_zru3qzhor.f[3]++;cov_zru3qzhor.s[31]++;switch (action.type) {case actions.ADD_INSTANCE:
      cov_zru3qzhor.b[10][0]++;let { address, context, binary } = (cov_zru3qzhor.s[32]++, action);let otherInstances = (cov_zru3qzhor.s[33]++, (cov_zru3qzhor.b[11][0]++, state.byContext[context]) || (cov_zru3qzhor.b[11][1]++, []));let otherAddresses = (cov_zru3qzhor.s[34]++, otherInstances.map(({ address }) => {
        cov_zru3qzhor.f[4]++;cov_zru3qzhor.s[35]++;return address;
      }));cov_zru3qzhor.s[36]++;return { byAddress: (0, _extends3.default)({}, state.byAddress, { [address]: { context, binary } }), byContext: (0, _extends3.default)({}, state.byContext, { [context]: (0, _from2.default)(new _set2.default(otherAddresses).add(address)).map(address => {
            cov_zru3qzhor.f[5]++;cov_zru3qzhor.s[37]++;return { address };
          }) }) };default:
      cov_zru3qzhor.b[10][1]++;cov_zru3qzhor.s[38]++;return state;}
}const info = (cov_zru3qzhor.s[39]++, (0, _redux.combineReducers)({ contexts, instances }));function callstack(state = (cov_zru3qzhor.b[12][0]++, []), action) {
  cov_zru3qzhor.f[6]++;cov_zru3qzhor.s[40]++;switch (action.type) {case actions.CALL:
      cov_zru3qzhor.b[13][0]++;let address = (cov_zru3qzhor.s[41]++, action.address);cov_zru3qzhor.s[42]++;return state.concat([{ address }]);case actions.CREATE:
      cov_zru3qzhor.b[13][1]++;const binary = (cov_zru3qzhor.s[43]++, action.binary);cov_zru3qzhor.s[44]++;return state.concat([{ binary }]);case actions.RETURN:
      cov_zru3qzhor.b[13][2]++;cov_zru3qzhor.s[45]++;return state.slice(0, -1);default:
      cov_zru3qzhor.b[13][3]++;cov_zru3qzhor.s[46]++;return state;};
}const proc = (cov_zru3qzhor.s[47]++, (0, _redux.combineReducers)({ callstack }));const reducer = (cov_zru3qzhor.s[48]++, (0, _redux.combineReducers)({ info, proc }));cov_zru3qzhor.s[49]++;exports.default = reducer;

/***/ }),
/* 76 */
/***/ (function(module, exports) {

module.exports = require("babel-runtime/core-js/array/from");

/***/ }),
/* 77 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var cov_iu6ku0aar = function () {
  var path = "/Users/gnidan/src/work/truffle/packages/truffle-debugger/lib/solidity/reducers.js",
      hash = "8248870eb72066d1b4f183e39f28a69670d22ee3",
      Function = function () {}.constructor,
      global = new Function('return this')(),
      gcv = "__coverage__",
      coverageData = { path: "/Users/gnidan/src/work/truffle/packages/truffle-debugger/lib/solidity/reducers.js", statementMap: { "0": { start: { line: 3, column: 0 }, end: { line: 5, column: 3 } }, "1": { start: { line: 7, column: 16 }, end: { line: 7, column: 56 } }, "2": { start: { line: 9, column: 16 }, end: { line: 9, column: 49 } }, "3": { start: { line: 11, column: 12 }, end: { line: 11, column: 56 } }, "4": { start: { line: 13, column: 13 }, end: { line: 13, column: 42 } }, "5": { start: { line: 15, column: 0 }, end: { line: 15, column: 38 } }, "6": { start: { line: 17, column: 13 }, end: { line: 17, column: 29 } }, "7": { start: { line: 19, column: 15 }, end: { line: 19, column: 37 } }, "8": { start: { line: 21, column: 15 }, end: { line: 21, column: 35 } }, "9": { start: { line: 23, column: 14 }, end: { line: 23, column: 47 } }, "10": { start: { line: 25, column: 40 }, end: { line: 25, column: 267 } }, "11": { start: { line: 25, column: 69 }, end: { line: 25, column: 80 } }, "12": { start: { line: 25, column: 103 }, end: { line: 25, column: 105 } }, "13": { start: { line: 25, column: 107 }, end: { line: 25, column: 228 } }, "14": { start: { line: 25, column: 126 }, end: { line: 25, column: 226 } }, "15": { start: { line: 25, column: 149 }, end: { line: 25, column: 224 } }, "16": { start: { line: 25, column: 201 }, end: { line: 25, column: 224 } }, "17": { start: { line: 25, column: 229 }, end: { line: 25, column: 250 } }, "18": { start: { line: 25, column: 251 }, end: { line: 25, column: 265 } }, "19": { start: { line: 27, column: 39 }, end: { line: 27, column: 93 } }, "20": { start: { line: 29, column: 24 }, end: { line: 31, column: 1 } }, "21": { start: { line: 34, column: 2 }, end: { line: 59, column: 3 } }, "22": { start: { line: 39, column: 40 }, end: { line: 39, column: 46 } }, "23": { start: { line: 41, column: 15 }, end: { line: 41, column: 53 } }, "24": { start: { line: 43, column: 6 }, end: { line: 57, column: 8 } }, "25": { start: { line: 58, column: 6 }, end: { line: 58, column: 19 } }, "26": { start: { line: 62, column: 27 }, end: { line: 64, column: 1 } }, "27": { start: { line: 67, column: 2 }, end: { line: 90, column: 3 } }, "28": { start: { line: 72, column: 34 }, end: { line: 72, column: 40 } }, "29": { start: { line: 73, column: 20 }, end: { line: 73, column: 51 } }, "30": { start: { line: 75, column: 6 }, end: { line: 83, column: 8 } }, "31": { start: { line: 89, column: 6 }, end: { line: 89, column: 19 } }, "32": { start: { line: 93, column: 13 }, end: { line: 96, column: 2 } }, "33": { start: { line: 99, column: 2 }, end: { line: 104, column: 3 } }, "34": { start: { line: 100, column: 18 }, end: { line: 100, column: 47 } }, "35": { start: { line: 101, column: 4 }, end: { line: 101, column: 25 } }, "36": { start: { line: 103, column: 4 }, end: { line: 103, column: 17 } }, "37": { start: { line: 108, column: 2 }, end: { line: 114, column: 3 } }, "38": { start: { line: 109, column: 4 }, end: { line: 109, column: 13 } }, "39": { start: { line: 110, column: 9 }, end: { line: 114, column: 3 } }, "40": { start: { line: 111, column: 4 }, end: { line: 111, column: 14 } }, "41": { start: { line: 113, column: 4 }, end: { line: 113, column: 13 } }, "42": { start: { line: 117, column: 13 }, end: { line: 119, column: 2 } }, "43": { start: { line: 121, column: 16 }, end: { line: 124, column: 2 } }, "44": { start: { line: 126, column: 0 }, end: { line: 126, column: 26 } } }, fnMap: { "0": { name: "_interopRequireWildcard", decl: { start: { line: 25, column: 9 }, end: { line: 25, column: 32 } }, loc: { start: { line: 25, column: 38 }, end: { line: 25, column: 269 } }, line: 25 }, "1": { name: "_interopRequireDefault", decl: { start: { line: 27, column: 9 }, end: { line: 27, column: 31 } }, loc: { start: { line: 27, column: 37 }, end: { line: 27, column: 95 } }, line: 27 }, "2": { name: "sources", decl: { start: { line: 33, column: 9 }, end: { line: 33, column: 16 } }, loc: { start: { line: 33, column: 50 }, end: { line: 60, column: 1 } }, line: 33 }, "3": { name: "sourceMaps", decl: { start: { line: 66, column: 9 }, end: { line: 66, column: 19 } }, loc: { start: { line: 66, column: 56 }, end: { line: 91, column: 1 } }, line: 66 }, "4": { name: "functionDepth", decl: { start: { line: 98, column: 9 }, end: { line: 98, column: 22 } }, loc: { start: { line: 98, column: 42 }, end: { line: 105, column: 1 } }, line: 98 }, "5": { name: "spelunk", decl: { start: { line: 107, column: 9 }, end: { line: 107, column: 16 } }, loc: { start: { line: 107, column: 23 }, end: { line: 115, column: 1 } }, line: 107 } }, branchMap: { "0": { loc: { start: { line: 25, column: 40 }, end: { line: 25, column: 267 } }, type: "if", locations: [{ start: { line: 25, column: 40 }, end: { line: 25, column: 267 } }, { start: { line: 25, column: 40 }, end: { line: 25, column: 267 } }], line: 25 }, "1": { loc: { start: { line: 25, column: 44 }, end: { line: 25, column: 65 } }, type: "binary-expr", locations: [{ start: { line: 25, column: 44 }, end: { line: 25, column: 47 } }, { start: { line: 25, column: 51 }, end: { line: 25, column: 65 } }], line: 25 }, "2": { loc: { start: { line: 25, column: 107 }, end: { line: 25, column: 228 } }, type: "if", locations: [{ start: { line: 25, column: 107 }, end: { line: 25, column: 228 } }, { start: { line: 25, column: 107 }, end: { line: 25, column: 228 } }], line: 25 }, "3": { loc: { start: { line: 25, column: 149 }, end: { line: 25, column: 224 } }, type: "if", locations: [{ start: { line: 25, column: 149 }, end: { line: 25, column: 224 } }, { start: { line: 25, column: 149 }, end: { line: 25, column: 224 } }], line: 25 }, "4": { loc: { start: { line: 27, column: 46 }, end: { line: 27, column: 92 } }, type: "cond-expr", locations: [{ start: { line: 27, column: 70 }, end: { line: 27, column: 73 } }, { start: { line: 27, column: 76 }, end: { line: 27, column: 92 } }], line: 27 }, "5": { loc: { start: { line: 27, column: 46 }, end: { line: 27, column: 67 } }, type: "binary-expr", locations: [{ start: { line: 27, column: 46 }, end: { line: 27, column: 49 } }, { start: { line: 27, column: 53 }, end: { line: 27, column: 67 } }], line: 27 }, "6": { loc: { start: { line: 33, column: 17 }, end: { line: 33, column: 40 } }, type: "default-arg", locations: [{ start: { line: 33, column: 25 }, end: { line: 33, column: 40 } }], line: 33 }, "7": { loc: { start: { line: 34, column: 2 }, end: { line: 59, column: 3 } }, type: "switch", locations: [{ start: { line: 38, column: 4 }, end: { line: 57, column: 8 } }, { start: { line: 57, column: 8 }, end: { line: 58, column: 19 } }], line: 34 }, "8": { loc: { start: { line: 66, column: 20 }, end: { line: 66, column: 46 } }, type: "default-arg", locations: [{ start: { line: 66, column: 28 }, end: { line: 66, column: 46 } }], line: 66 }, "9": { loc: { start: { line: 67, column: 2 }, end: { line: 90, column: 3 } }, type: "switch", locations: [{ start: { line: 71, column: 4 }, end: { line: 83, column: 8 } }, { start: { line: 88, column: 4 }, end: { line: 89, column: 19 } }], line: 67 }, "10": { loc: { start: { line: 98, column: 23 }, end: { line: 98, column: 32 } }, type: "default-arg", locations: [{ start: { line: 98, column: 31 }, end: { line: 98, column: 32 } }], line: 98 }, "11": { loc: { start: { line: 99, column: 2 }, end: { line: 104, column: 3 } }, type: "if", locations: [{ start: { line: 99, column: 2 }, end: { line: 104, column: 3 } }, { start: { line: 99, column: 2 }, end: { line: 104, column: 3 } }], line: 99 }, "12": { loc: { start: { line: 108, column: 2 }, end: { line: 114, column: 3 } }, type: "if", locations: [{ start: { line: 108, column: 2 }, end: { line: 114, column: 3 } }, { start: { line: 108, column: 2 }, end: { line: 114, column: 3 } }], line: 108 }, "13": { loc: { start: { line: 110, column: 9 }, end: { line: 114, column: 3 } }, type: "if", locations: [{ start: { line: 110, column: 9 }, end: { line: 114, column: 3 } }, { start: { line: 110, column: 9 }, end: { line: 114, column: 3 } }], line: 110 } }, s: { "0": 0, "1": 0, "2": 0, "3": 0, "4": 0, "5": 0, "6": 0, "7": 0, "8": 0, "9": 0, "10": 0, "11": 0, "12": 0, "13": 0, "14": 0, "15": 0, "16": 0, "17": 0, "18": 0, "19": 0, "20": 0, "21": 0, "22": 0, "23": 0, "24": 0, "25": 0, "26": 0, "27": 0, "28": 0, "29": 0, "30": 0, "31": 0, "32": 0, "33": 0, "34": 0, "35": 0, "36": 0, "37": 0, "38": 0, "39": 0, "40": 0, "41": 0, "42": 0, "43": 0, "44": 0 }, f: { "0": 0, "1": 0, "2": 0, "3": 0, "4": 0, "5": 0 }, b: { "0": [0, 0], "1": [0, 0], "2": [0, 0], "3": [0, 0], "4": [0, 0], "5": [0, 0], "6": [0], "7": [0, 0], "8": [0], "9": [0, 0], "10": [0], "11": [0, 0], "12": [0, 0], "13": [0, 0] }, inputSourceMap: { version: 3, sources: ["lib/solidity/reducers.js"], names: ["functionDepth", "actions", "DEFAULT_SOURCES", "byId", "sources", "state", "action", "type", "ADD_SOURCE", "ast", "source", "sourcePath", "id", "length", "DEFAULT_SOURCEMAPS", "byContext", "sourceMaps", "ADD_SOURCEMAP", "binary", "sourceMap", "context", "info", "JUMP", "delta", "spelunk", "jumpDirection", "jump", "proc", "reducer"], mappings: ";;;;;;;;;;;;;;QA+EgBA,a,GAAAA,a;;AA/EhB;;AAEA;;AAEA;;IAAYC,O;;;;;;AAEZ,MAAMC,kBAAkB;AACtBC,QAAM;AADgB,CAAxB;;AAIA,SAASC,OAAT,CAAiBC,QAAQH,eAAzB,EAA0CI,MAA1C,EAAkD;AAChD,UAAQA,OAAOC,IAAf;AACE;;;AAGA,SAAKN,QAAQO,UAAb;AACE,UAAI,EAAEC,GAAF,EAAOC,MAAP,EAAeC,UAAf,KAA8BL,MAAlC;;AAEA,UAAIM,KAAK,oBAAYP,MAAMF,IAAlB,EAAwBU,MAAjC;;AAEA,aAAO;AACLV,yCACKE,MAAMF,IADX;;AAGE,WAACS,EAAD,GAAM;AACJA,cADI;AAEJH,eAFI;AAGJC,kBAHI;AAIJC;AAJI;AAHR;;AAYJ;;;AAbS,OAAP,CAgBF;AACE,aAAON,KAAP;AA1BJ;AA4BD;;AAGD,MAAMS,qBAAqB;AACzBC,aAAW;AADc,CAA3B;;AAIA,SAASC,UAAT,CAAoBX,QAAQS,kBAA5B,EAAgDR,MAAhD,EAAwD;AACtD,UAAQA,OAAOC,IAAf;AACE;;;AAGA,SAAKN,QAAQgB,aAAb;AACE,UAAI,EAAEC,MAAF,EAAUC,SAAV,KAAwBb,MAA5B;AACA,UAAIc,UAAU,wBAAUF,MAAV,CAAd;;AAEA,aAAO;AACLH,8CACKV,MAAMU,SADX;;AAGE,WAACK,OAAD,GAAW;AACTA,mBADS;AAETD;AAFS;AAHb;AADK,OAAP;;AAWF;;;AAGA;AACE,aAAOd,KAAP;AAvBJ;AAyBD;;AAED,MAAMgB,OAAO,4BAAgB;AAC3BjB,SAD2B;AAE3BY;AAF2B,CAAhB,CAAb;;AAKO,SAAShB,aAAT,CAAuBK,QAAQ,CAA/B,EAAkCC,MAAlC,EAA0C;AAC/C,MAAIA,OAAOC,IAAP,KAAgBN,QAAQqB,IAA5B,EAAkC;AAChC,UAAMC,QAAQC,QAAQlB,OAAOmB,aAAf,CAAd;AACA,WAAOpB,QAAQkB,KAAf;AACD,GAHD,MAGO;AACL,WAAOlB,KAAP;AACD;AACF;;AAED,SAASmB,OAAT,CAAiBE,IAAjB,EAAuB;AACrB,MAAIA,QAAQ,GAAZ,EAAiB;AACf,WAAO,CAAP;AACD,GAFD,MAEO,IAAIA,QAAQ,GAAZ,EAAiB;AACtB,WAAO,CAAC,CAAR;AACD,GAFM,MAEA;AACL,WAAO,CAAP;AACD;AACF;;AAED,MAAMC,OAAO,4BAAgB;AAC3B3B;AAD2B,CAAhB,CAAb;;AAIA,MAAM4B,UAAU,4BAAgB;AAC9BP,MAD8B;AAE9BM;AAF8B,CAAhB,CAAhB;;kBAKeC,O", file: "reducers.js", sourceRoot: "/Users/gnidan/src/work/truffle/packages/truffle-debugger", sourcesContent: ["import { combineReducers } from \"redux\";\n\nimport { keccak256 } from \"lib/helpers\";\n\nimport * as actions from \"./actions\";\n\nconst DEFAULT_SOURCES = {\n  byId: {}\n};\n\nfunction sources(state = DEFAULT_SOURCES, action) {\n  switch (action.type) {\n    /*\n     * Adding a new source\n     */\n    case actions.ADD_SOURCE:\n      let { ast, source, sourcePath } = action;\n\n      let id = Object.keys(state.byId).length;\n\n      return {\n        byId: {\n          ...state.byId,\n\n          [id]: {\n            id,\n            ast,\n            source,\n            sourcePath\n          }\n        }\n      }\n\n    /*\n     * Default case\n     */\n    default:\n      return state;\n  }\n}\n\n\nconst DEFAULT_SOURCEMAPS = {\n  byContext: {}\n};\n\nfunction sourceMaps(state = DEFAULT_SOURCEMAPS, action) {\n  switch (action.type) {\n    /*\n     * Adding a new sourceMap\n     */\n    case actions.ADD_SOURCEMAP:\n      let { binary, sourceMap } = action;\n      let context = keccak256(binary);\n\n      return {\n        byContext: {\n          ...state.byContext,\n\n          [context]: {\n            context,\n            sourceMap\n          }\n        }\n      };\n\n    /*\n     * Default Case\n     */\n    default:\n      return state;\n  }\n}\n\nconst info = combineReducers({\n  sources,\n  sourceMaps\n});\n\nexport function functionDepth(state = 1, action) {\n  if (action.type === actions.JUMP) {\n    const delta = spelunk(action.jumpDirection)\n    return state + delta;\n  } else {\n    return state;\n  }\n}\n\nfunction spelunk(jump) {\n  if (jump == \"i\") {\n    return 1;\n  } else if (jump == \"o\") {\n    return -1;\n  } else {\n    return 0;\n  }\n}\n\nconst proc = combineReducers({\n  functionDepth\n});\n\nconst reducer = combineReducers({\n  info,\n  proc\n});\n\nexport default reducer;\n"] }, _coverageSchema: "332fd63041d2c1bcb487cc26dd0d5f7d97098a6c" },
      coverage = global[gcv] || (global[gcv] = {});if (coverage[path] && coverage[path].hash === hash) {
    return coverage[path];
  }coverageData.hash = hash;return coverage[path] = coverageData;
}();cov_iu6ku0aar.s[0]++;Object.defineProperty(exports, "__esModule", { value: true });var _extends2 = (cov_iu6ku0aar.s[1]++, __webpack_require__(2));var _extends3 = (cov_iu6ku0aar.s[2]++, _interopRequireDefault(_extends2));var _keys = (cov_iu6ku0aar.s[3]++, __webpack_require__(17));var _keys2 = (cov_iu6ku0aar.s[4]++, _interopRequireDefault(_keys));cov_iu6ku0aar.s[5]++;exports.functionDepth = functionDepth;var _redux = (cov_iu6ku0aar.s[6]++, __webpack_require__(15));var _helpers = (cov_iu6ku0aar.s[7]++, __webpack_require__(4));var _actions = (cov_iu6ku0aar.s[8]++, __webpack_require__(34));var actions = (cov_iu6ku0aar.s[9]++, _interopRequireWildcard(_actions));function _interopRequireWildcard(obj) {
  cov_iu6ku0aar.f[0]++;cov_iu6ku0aar.s[10]++;if ((cov_iu6ku0aar.b[1][0]++, obj) && (cov_iu6ku0aar.b[1][1]++, obj.__esModule)) {
    cov_iu6ku0aar.b[0][0]++;cov_iu6ku0aar.s[11]++;return obj;
  } else {
    cov_iu6ku0aar.b[0][1]++;var newObj = (cov_iu6ku0aar.s[12]++, {});cov_iu6ku0aar.s[13]++;if (obj != null) {
      cov_iu6ku0aar.b[2][0]++;cov_iu6ku0aar.s[14]++;for (var key in obj) {
        cov_iu6ku0aar.s[15]++;if (Object.prototype.hasOwnProperty.call(obj, key)) {
          cov_iu6ku0aar.b[3][0]++;cov_iu6ku0aar.s[16]++;newObj[key] = obj[key];
        } else {
          cov_iu6ku0aar.b[3][1]++;
        }
      }
    } else {
      cov_iu6ku0aar.b[2][1]++;
    }cov_iu6ku0aar.s[17]++;newObj.default = obj;cov_iu6ku0aar.s[18]++;return newObj;
  }
}function _interopRequireDefault(obj) {
  cov_iu6ku0aar.f[1]++;cov_iu6ku0aar.s[19]++;return (cov_iu6ku0aar.b[5][0]++, obj) && (cov_iu6ku0aar.b[5][1]++, obj.__esModule) ? (cov_iu6ku0aar.b[4][0]++, obj) : (cov_iu6ku0aar.b[4][1]++, { default: obj });
}const DEFAULT_SOURCES = (cov_iu6ku0aar.s[20]++, { byId: {} });function sources(state = (cov_iu6ku0aar.b[6][0]++, DEFAULT_SOURCES), action) {
  cov_iu6ku0aar.f[2]++;cov_iu6ku0aar.s[21]++;switch (action.type) {case actions.ADD_SOURCE:
      cov_iu6ku0aar.b[7][0]++;let { ast, source, sourcePath } = (cov_iu6ku0aar.s[22]++, action);let id = (cov_iu6ku0aar.s[23]++, (0, _keys2.default)(state.byId).length);cov_iu6ku0aar.s[24]++;return { byId: (0, _extends3.default)({}, state.byId, { [id]: { id, ast, source, sourcePath } }) };default:
      cov_iu6ku0aar.b[7][1]++;cov_iu6ku0aar.s[25]++;return state;}
}const DEFAULT_SOURCEMAPS = (cov_iu6ku0aar.s[26]++, { byContext: {} });function sourceMaps(state = (cov_iu6ku0aar.b[8][0]++, DEFAULT_SOURCEMAPS), action) {
  cov_iu6ku0aar.f[3]++;cov_iu6ku0aar.s[27]++;switch (action.type) {case actions.ADD_SOURCEMAP:
      cov_iu6ku0aar.b[9][0]++;let { binary, sourceMap } = (cov_iu6ku0aar.s[28]++, action);let context = (cov_iu6ku0aar.s[29]++, (0, _helpers.keccak256)(binary));cov_iu6ku0aar.s[30]++;return { byContext: (0, _extends3.default)({}, state.byContext, { [context]: { context, sourceMap } }) };default:
      cov_iu6ku0aar.b[9][1]++;cov_iu6ku0aar.s[31]++;return state;}
}const info = (cov_iu6ku0aar.s[32]++, (0, _redux.combineReducers)({ sources, sourceMaps }));function functionDepth(state = (cov_iu6ku0aar.b[10][0]++, 1), action) {
  cov_iu6ku0aar.f[4]++;cov_iu6ku0aar.s[33]++;if (action.type === actions.JUMP) {
    cov_iu6ku0aar.b[11][0]++;const delta = (cov_iu6ku0aar.s[34]++, spelunk(action.jumpDirection));cov_iu6ku0aar.s[35]++;return state + delta;
  } else {
    cov_iu6ku0aar.b[11][1]++;cov_iu6ku0aar.s[36]++;return state;
  }
}function spelunk(jump) {
  cov_iu6ku0aar.f[5]++;cov_iu6ku0aar.s[37]++;if (jump == "i") {
    cov_iu6ku0aar.b[12][0]++;cov_iu6ku0aar.s[38]++;return 1;
  } else {
    cov_iu6ku0aar.b[12][1]++;cov_iu6ku0aar.s[39]++;if (jump == "o") {
      cov_iu6ku0aar.b[13][0]++;cov_iu6ku0aar.s[40]++;return -1;
    } else {
      cov_iu6ku0aar.b[13][1]++;cov_iu6ku0aar.s[41]++;return 0;
    }
  }
}const proc = (cov_iu6ku0aar.s[42]++, (0, _redux.combineReducers)({ functionDepth }));const reducer = (cov_iu6ku0aar.s[43]++, (0, _redux.combineReducers)({ info, proc }));cov_iu6ku0aar.s[44]++;exports.default = reducer;

/***/ }),
/* 78 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var cov_2qc9du3ah0 = function () {
  var path = "/Users/gnidan/src/work/truffle/packages/truffle-debugger/lib/trace/reducers.js",
      hash = "bb5879d4f7b5d0319955dc649083729adf219e06",
      Function = function () {}.constructor,
      global = new Function('return this')(),
      gcv = "__coverage__",
      coverageData = { path: "/Users/gnidan/src/work/truffle/packages/truffle-debugger/lib/trace/reducers.js", statementMap: { "0": { start: { line: 3, column: 0 }, end: { line: 5, column: 3 } }, "1": { start: { line: 6, column: 0 }, end: { line: 6, column: 22 } }, "2": { start: { line: 7, column: 0 }, end: { line: 7, column: 22 } }, "3": { start: { line: 9, column: 13 }, end: { line: 9, column: 29 } }, "4": { start: { line: 11, column: 15 }, end: { line: 11, column: 35 } }, "5": { start: { line: 13, column: 14 }, end: { line: 13, column: 47 } }, "6": { start: { line: 15, column: 40 }, end: { line: 15, column: 267 } }, "7": { start: { line: 15, column: 69 }, end: { line: 15, column: 80 } }, "8": { start: { line: 15, column: 103 }, end: { line: 15, column: 105 } }, "9": { start: { line: 15, column: 107 }, end: { line: 15, column: 228 } }, "10": { start: { line: 15, column: 126 }, end: { line: 15, column: 226 } }, "11": { start: { line: 15, column: 149 }, end: { line: 15, column: 224 } }, "12": { start: { line: 15, column: 201 }, end: { line: 15, column: 224 } }, "13": { start: { line: 15, column: 229 }, end: { line: 15, column: 250 } }, "14": { start: { line: 15, column: 251 }, end: { line: 15, column: 265 } }, "15": { start: { line: 18, column: 2 }, end: { line: 22, column: 3 } }, "16": { start: { line: 19, column: 4 }, end: { line: 19, column: 21 } }, "17": { start: { line: 21, column: 4 }, end: { line: 21, column: 17 } }, "18": { start: { line: 26, column: 2 }, end: { line: 30, column: 3 } }, "19": { start: { line: 27, column: 4 }, end: { line: 27, column: 24 } }, "20": { start: { line: 29, column: 4 }, end: { line: 29, column: 17 } }, "21": { start: { line: 33, column: 13 }, end: { line: 35, column: 2 } }, "22": { start: { line: 37, column: 13 }, end: { line: 39, column: 2 } }, "23": { start: { line: 41, column: 16 }, end: { line: 44, column: 2 } }, "24": { start: { line: 46, column: 0 }, end: { line: 46, column: 26 } } }, fnMap: { "0": { name: "_interopRequireWildcard", decl: { start: { line: 15, column: 9 }, end: { line: 15, column: 32 } }, loc: { start: { line: 15, column: 38 }, end: { line: 15, column: 269 } }, line: 15 }, "1": { name: "index", decl: { start: { line: 17, column: 9 }, end: { line: 17, column: 14 } }, loc: { start: { line: 17, column: 34 }, end: { line: 23, column: 1 } }, line: 17 }, "2": { name: "steps", decl: { start: { line: 25, column: 9 }, end: { line: 25, column: 14 } }, loc: { start: { line: 25, column: 37 }, end: { line: 31, column: 1 } }, line: 25 } }, branchMap: { "0": { loc: { start: { line: 15, column: 40 }, end: { line: 15, column: 267 } }, type: "if", locations: [{ start: { line: 15, column: 40 }, end: { line: 15, column: 267 } }, { start: { line: 15, column: 40 }, end: { line: 15, column: 267 } }], line: 15 }, "1": { loc: { start: { line: 15, column: 44 }, end: { line: 15, column: 65 } }, type: "binary-expr", locations: [{ start: { line: 15, column: 44 }, end: { line: 15, column: 47 } }, { start: { line: 15, column: 51 }, end: { line: 15, column: 65 } }], line: 15 }, "2": { loc: { start: { line: 15, column: 107 }, end: { line: 15, column: 228 } }, type: "if", locations: [{ start: { line: 15, column: 107 }, end: { line: 15, column: 228 } }, { start: { line: 15, column: 107 }, end: { line: 15, column: 228 } }], line: 15 }, "3": { loc: { start: { line: 15, column: 149 }, end: { line: 15, column: 224 } }, type: "if", locations: [{ start: { line: 15, column: 149 }, end: { line: 15, column: 224 } }, { start: { line: 15, column: 149 }, end: { line: 15, column: 224 } }], line: 15 }, "4": { loc: { start: { line: 17, column: 15 }, end: { line: 17, column: 24 } }, type: "default-arg", locations: [{ start: { line: 17, column: 23 }, end: { line: 17, column: 24 } }], line: 17 }, "5": { loc: { start: { line: 18, column: 2 }, end: { line: 22, column: 3 } }, type: "if", locations: [{ start: { line: 18, column: 2 }, end: { line: 22, column: 3 } }, { start: { line: 18, column: 2 }, end: { line: 22, column: 3 } }], line: 18 }, "6": { loc: { start: { line: 18, column: 6 }, end: { line: 18, column: 72 } }, type: "binary-expr", locations: [{ start: { line: 18, column: 6 }, end: { line: 18, column: 33 } }, { start: { line: 18, column: 37 }, end: { line: 18, column: 72 } }], line: 18 }, "7": { loc: { start: { line: 25, column: 15 }, end: { line: 25, column: 27 } }, type: "default-arg", locations: [{ start: { line: 25, column: 23 }, end: { line: 25, column: 27 } }], line: 25 }, "8": { loc: { start: { line: 26, column: 2 }, end: { line: 30, column: 3 } }, type: "if", locations: [{ start: { line: 26, column: 2 }, end: { line: 30, column: 3 } }, { start: { line: 26, column: 2 }, end: { line: 30, column: 3 } }], line: 26 } }, s: { "0": 0, "1": 0, "2": 0, "3": 0, "4": 0, "5": 0, "6": 0, "7": 0, "8": 0, "9": 0, "10": 0, "11": 0, "12": 0, "13": 0, "14": 0, "15": 0, "16": 0, "17": 0, "18": 0, "19": 0, "20": 0, "21": 0, "22": 0, "23": 0, "24": 0 }, f: { "0": 0, "1": 0, "2": 0 }, b: { "0": [0, 0], "1": [0, 0], "2": [0, 0], "3": [0, 0], "4": [0], "5": [0, 0], "6": [0, 0], "7": [0], "8": [0, 0] }, inputSourceMap: { version: 3, sources: ["lib/trace/reducers.js"], names: ["index", "steps", "actions", "state", "action", "type", "TOCK", "END_OF_TRACE", "SAVE_STEPS", "info", "proc", "reducer"], mappings: ";;;;;QAIgBA,K,GAAAA,K;QAQAC,K,GAAAA,K;;AAZhB;;AAEA;;IAAYC,O;;;;AAEL,SAASF,KAAT,CAAeG,QAAQ,CAAvB,EAA0BC,MAA1B,EAAkC;AACvC,MAAIA,OAAOC,IAAP,IAAeH,QAAQI,IAAvB,IAA+BF,OAAOC,IAAP,IAAeH,QAAQK,YAA1D,EAAwE;AACtE,WAAOJ,QAAQ,CAAf;AACD,GAFD,MAEO;AACL,WAAOA,KAAP;AACD;AACF;;AAEM,SAASF,KAAT,CAAeE,QAAQ,IAAvB,EAA6BC,MAA7B,EAAqC;AAC1C,MAAIA,OAAOC,IAAP,IAAeH,QAAQM,UAA3B,EAAuC;AACrC,WAAOJ,OAAOH,KAAd;AACD,GAFD,MAEO;AACL,WAAOE,KAAP;AACD;AACF;;AAED,MAAMM,OAAO,4BAAgB;AAC3BR;AAD2B,CAAhB,CAAb;;AAIA,MAAMS,OAAO,4BAAgB;AAC3BV;AAD2B,CAAhB,CAAb;;AAIA,MAAMW,UAAU,4BAAgB;AAC9BF,MAD8B;AAE9BC;AAF8B,CAAhB,CAAhB;;kBAKeC,O", file: "reducers.js", sourceRoot: "/Users/gnidan/src/work/truffle/packages/truffle-debugger", sourcesContent: ["import { combineReducers } from \"redux\";\n\nimport * as actions from \"./actions\";\n\nexport function index(state = 0, action) {\n  if (action.type == actions.TOCK || action.type == actions.END_OF_TRACE) {\n    return state + 1;\n  } else {\n    return state;\n  }\n}\n\nexport function steps(state = null, action) {\n  if (action.type == actions.SAVE_STEPS) {\n    return action.steps;\n  } else {\n    return state;\n  }\n}\n\nconst info = combineReducers({\n  steps\n})\n\nconst proc = combineReducers({\n  index\n})\n\nconst reducer = combineReducers({\n  info,\n  proc\n});\n\nexport default reducer;\n"] }, _coverageSchema: "332fd63041d2c1bcb487cc26dd0d5f7d97098a6c" },
      coverage = global[gcv] || (global[gcv] = {});if (coverage[path] && coverage[path].hash === hash) {
    return coverage[path];
  }coverageData.hash = hash;return coverage[path] = coverageData;
}();cov_2qc9du3ah0.s[0]++;Object.defineProperty(exports, "__esModule", { value: true });cov_2qc9du3ah0.s[1]++;exports.index = index;cov_2qc9du3ah0.s[2]++;exports.steps = steps;var _redux = (cov_2qc9du3ah0.s[3]++, __webpack_require__(15));var _actions = (cov_2qc9du3ah0.s[4]++, __webpack_require__(21));var actions = (cov_2qc9du3ah0.s[5]++, _interopRequireWildcard(_actions));function _interopRequireWildcard(obj) {
  cov_2qc9du3ah0.f[0]++;cov_2qc9du3ah0.s[6]++;if ((cov_2qc9du3ah0.b[1][0]++, obj) && (cov_2qc9du3ah0.b[1][1]++, obj.__esModule)) {
    cov_2qc9du3ah0.b[0][0]++;cov_2qc9du3ah0.s[7]++;return obj;
  } else {
    cov_2qc9du3ah0.b[0][1]++;var newObj = (cov_2qc9du3ah0.s[8]++, {});cov_2qc9du3ah0.s[9]++;if (obj != null) {
      cov_2qc9du3ah0.b[2][0]++;cov_2qc9du3ah0.s[10]++;for (var key in obj) {
        cov_2qc9du3ah0.s[11]++;if (Object.prototype.hasOwnProperty.call(obj, key)) {
          cov_2qc9du3ah0.b[3][0]++;cov_2qc9du3ah0.s[12]++;newObj[key] = obj[key];
        } else {
          cov_2qc9du3ah0.b[3][1]++;
        }
      }
    } else {
      cov_2qc9du3ah0.b[2][1]++;
    }cov_2qc9du3ah0.s[13]++;newObj.default = obj;cov_2qc9du3ah0.s[14]++;return newObj;
  }
}function index(state = (cov_2qc9du3ah0.b[4][0]++, 0), action) {
  cov_2qc9du3ah0.f[1]++;cov_2qc9du3ah0.s[15]++;if ((cov_2qc9du3ah0.b[6][0]++, action.type == actions.TOCK) || (cov_2qc9du3ah0.b[6][1]++, action.type == actions.END_OF_TRACE)) {
    cov_2qc9du3ah0.b[5][0]++;cov_2qc9du3ah0.s[16]++;return state + 1;
  } else {
    cov_2qc9du3ah0.b[5][1]++;cov_2qc9du3ah0.s[17]++;return state;
  }
}function steps(state = (cov_2qc9du3ah0.b[7][0]++, null), action) {
  cov_2qc9du3ah0.f[2]++;cov_2qc9du3ah0.s[18]++;if (action.type == actions.SAVE_STEPS) {
    cov_2qc9du3ah0.b[8][0]++;cov_2qc9du3ah0.s[19]++;return action.steps;
  } else {
    cov_2qc9du3ah0.b[8][1]++;cov_2qc9du3ah0.s[20]++;return state;
  }
}const info = (cov_2qc9du3ah0.s[21]++, (0, _redux.combineReducers)({ steps }));const proc = (cov_2qc9du3ah0.s[22]++, (0, _redux.combineReducers)({ index }));const reducer = (cov_2qc9du3ah0.s[23]++, (0, _redux.combineReducers)({ info, proc }));cov_2qc9du3ah0.s[24]++;exports.default = reducer;

/***/ }),
/* 79 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var cov_2putb0r3d4=function(){var path="/Users/gnidan/src/work/truffle/packages/truffle-debugger/test/context.js",hash="97cebfffc330c6794397a3b292647ad7aa200269",Function=function(){}.constructor,global=new Function('return this')(),gcv="__coverage__",coverageData={path:"/Users/gnidan/src/work/truffle/packages/truffle-debugger/test/context.js",statementMap:{"0":{start:{line:3,column:12},end:{line:3,column:56}},"1":{start:{line:5,column:13},end:{line:5,column:42}},"2":{start:{line:7,column:25},end:{line:7,column:74}},"3":{start:{line:9,column:25},end:{line:9,column:67}},"4":{start:{line:11,column:13},end:{line:11,column:29}},"5":{start:{line:13,column:14},end:{line:13,column:44}},"6":{start:{line:15,column:12},end:{line:15,column:27}},"7":{start:{line:17,column:18},end:{line:17,column:40}},"8":{start:{line:19,column:19},end:{line:19,column:54}},"9":{start:{line:21,column:11},end:{line:21,column:26}},"10":{start:{line:23,column:12},end:{line:23,column:40}},"11":{start:{line:25,column:15},end:{line:25,column:35}},"12":{start:{line:27,column:16},end:{line:27,column:39}},"13":{start:{line:29,column:17},end:{line:29,column:50}},"14":{start:{line:31,column:17},end:{line:31,column:49}},"15":{start:{line:33,column:18},end:{line:33,column:52}},"16":{start:{line:35,column:18},end:{line:35,column:48}},"17":{start:{line:37,column:18},end:{line:37,column:53}},"18":{start:{line:39,column:39},end:{line:39,column:93}},"19":{start:{line:41,column:14},end:{line:41,column:50}},"20":{start:{line:43,column:16},end:{line:63,column:1}},"21":{start:{line:65,column:16},end:{line:75,column:1}},"22":{start:{line:77,column:20},end:{line:93,column:1}},"23":{start:{line:95,column:17},end:{line:97,column:1}},"24":{start:{line:99,column:14},end:{line:102,column:1}},"25":{start:{line:104,column:0},end:{line:156,column:3}},"26":{start:{line:111,column:2},end:{line:114,column:6}},"27":{start:{line:112,column:4},end:{line:112,column:86}},"28":{start:{line:113,column:4},end:{line:113,column:39}},"29":{start:{line:116,column:2},end:{line:122,column:6}},"30":{start:{line:117,column:4},end:{line:117,column:24}},"31":{start:{line:119,column:19},end:{line:119,column:86}},"32":{start:{line:120,column:4},end:{line:120,column:41}},"33":{start:{line:121,column:4},end:{line:121,column:35}},"34":{start:{line:124,column:2},end:{line:155,column:6}},"35":{start:{line:125,column:16},end:{line:125,column:59}},"36":{start:{line:126,column:16},end:{line:126,column:59}},"37":{start:{line:129,column:17},end:{line:129,column:34}},"38":{start:{line:131,column:4},end:{line:131,column:82}},"39":{start:{line:133,column:17},end:{line:133,column:26}},"40":{start:{line:135,column:17},end:{line:138,column:6}},"41":{start:{line:139,column:4},end:{line:139,column:28}},"42":{start:{line:141,column:18},end:{line:141,column:34}},"43":{start:{line:143,column:28},end:{line:143,column:84}},"44":{start:{line:144,column:4},end:{line:144,column:54}},"45":{start:{line:146,column:28},end:{line:148,column:6}},"46":{start:{line:147,column:6},end:{line:147,column:35}},"47":{start:{line:150,column:4},end:{line:150,column:52}},"48":{start:{line:152,column:4},end:{line:152,column:120}},"49":{start:{line:154,column:4},end:{line:154,column:120}}},fnMap:{"0":{name:"_interopRequireDefault",decl:{start:{line:39,column:9},end:{line:39,column:31}},loc:{start:{line:39,column:37},end:{line:39,column:95}},line:39},"1":{name:"(anonymous_1)",decl:{start:{line:104,column:21},end:{line:104,column:22}},loc:{start:{line:104,column:33},end:{line:156,column:1}},line:104},"2":{name:"(anonymous_2)",decl:{start:{line:111,column:60},end:{line:111,column:61}},loc:{start:{line:111,column:73},end:{line:114,column:3}},line:111},"3":{name:"(anonymous_3)",decl:{start:{line:116,column:76},end:{line:116,column:77}},loc:{start:{line:116,column:89},end:{line:122,column:3}},line:116},"4":{name:"(anonymous_4)",decl:{start:{line:124,column:75},end:{line:124,column:76}},loc:{start:{line:124,column:88},end:{line:155,column:3}},line:124},"5":{name:"(anonymous_5)",decl:{start:{line:146,column:71},end:{line:146,column:72}},loc:{start:{line:146,column:90},end:{line:148,column:5}},line:146}},branchMap:{"0":{loc:{start:{line:39,column:46},end:{line:39,column:92}},type:"cond-expr",locations:[{start:{line:39,column:70},end:{line:39,column:73}},{start:{line:39,column:76},end:{line:39,column:92}}],line:39},"1":{loc:{start:{line:39,column:46},end:{line:39,column:67}},type:"binary-expr",locations:[{start:{line:39,column:46},end:{line:39,column:49}},{start:{line:39,column:53},end:{line:39,column:67}}],line:39}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0},f:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0},b:{"0":[0,0],"1":[0,0]},inputSourceMap:{version:3,sources:["test/context.js"],names:["debug","__OUTER","__INNER","__MIGRATION","migrations","sources","describe","provider","web3","abstractions","artifacts","before","Ganache","seed","gasLimit","Web3","timeout","prepared","it","outer","OuterContract","deployed","inner","InnerContract","result","run","assert","equal","receipt","logs","length","txHash","tx","bugger","Debugger","forTx","contracts","session","connect","affectedInstances","view","sessionSelector","info","affectedAddresses","map","address","toLowerCase","include"],mappings:";;;;;;;;;;AAAA;;;;AAGA;;AAEA;;;;AACA;;;;AAEA;;AACA;;;;AAEA;;;;AACA;;;;;;AAXA,MAAMA,QAAQ,qBAAY,cAAZ,CAAd;;AAaA,MAAMC,UAAW;;;;;;;;;;;;;;;;;;;;CAAjB;;AAsBA,MAAMC,UAAW;;;;;;;;;;CAAjB;;AAYA,MAAMC,cAAe;;;;;;;;;;;;;;;;CAArB;;AAkBA,IAAIC,aAAa;AACf,2BAAyBD;AADV,CAAjB;;AAIA,IAAIE,UAAU;AACZ,sBAAoBJ,OADR;AAEZ,uBAAqBC;AAFT,CAAd;;AAMAI,SAAS,UAAT,EAAqB,YAAY;AAC/B,MAAIC,QAAJ;AACA,MAAIC,IAAJ;;AAEA,MAAIC,YAAJ;AACA,MAAIC,SAAJ;;AAEAC,SAAO,iBAAP,kCAA0B,aAAiB;AACzCJ,eAAWK,qBAAQL,QAAR,CAAiB,EAACM,MAAM,UAAP,EAAmBC,UAAU,OAA7B,EAAjB,CAAX;AACAN,WAAO,IAAIO,aAAJ,CAASR,QAAT,CAAP;AACD,GAHD;;AAKAI,SAAO,iCAAP,kCAA0C,aAAiB;AACzD,SAAKK,OAAL,CAAa,KAAb;;AAEA,QAAIC,WAAW,MAAM,+BAAiBV,QAAjB,EAA2BF,OAA3B,EAAoCD,UAApC,CAArB;AACAK,mBAAeQ,SAASR,YAAxB;AACAC,gBAAYO,SAASP,SAArB;AACD,GAND;;AAQAQ,KAAG,oCAAH,kCAAyC,aAAkB;AACzD,QAAIC,QAAQ,MAAMV,aAAaW,aAAb,CAA2BC,QAA3B,EAAlB;AACA,QAAIC,QAAQ,MAAMb,aAAac,aAAb,CAA2BF,QAA3B,EAAlB;;AAEA;AACA,QAAIG,SAAS,MAAML,MAAMM,GAAN,EAAnB;;AAEAC,iBAAOC,KAAP,CAAa,CAAb,EAAgBH,OAAOI,OAAP,CAAeC,IAAf,CAAoBC,MAApC,EAA4C,0BAA5C;;AAEA,QAAIC,SAASP,OAAOQ,EAApB;;AAEA,QAAIC,SAAS,MAAMC,mBAASC,KAAT,CAAeJ,MAAf,EAAuB;AACxCxB,cADwC;AAExC6B,iBAAW1B;AAF6B,KAAvB,CAAnB;AAIAV,UAAM,gBAAN;;AAEA,QAAIqC,UAAUJ,OAAOK,OAAP,EAAd;;AAEA,QAAIC,oBAAoBF,QAAQG,IAAR,CAAaC,oBAAgBC,IAAhB,CAAqBH,iBAAlC,CAAxB;AACAvC,UAAM,uBAAN,EAA+BuC,iBAA/B;;AAEA,QAAII,oBAAoB,oBAAYJ,iBAAZ,EAA+BK,GAA/B,CAAmC;AAAA,aAAWC,QAAQC,WAAR,EAAX;AAAA,KAAnC,CAAxB;;AAEApB,iBAAOC,KAAP,CAAa,CAAb,EAAgBgB,kBAAkBb,MAAlC;;AAEAJ,iBAAOqB,OAAP,CACEJ,iBADF,EACqBxB,MAAM0B,OAAN,CAAcC,WAAd,EADrB,EAEE,6CAFF;;AAKApB,iBAAOqB,OAAP,CACEJ,iBADF,EACqBrB,MAAMuB,OAAN,CAAcC,WAAd,EADrB,EAEE,6CAFF;AAID,GAnCD;AAoCD,CAxDD",file:"context.js",sourceRoot:"/Users/gnidan/src/work/truffle/packages/truffle-debugger",sourcesContent:["import debugModule from \"debug\";\nconst debug = debugModule(\"test:context\");\n\nimport { assert } from \"chai\";\n\nimport Ganache from \"ganache-cli\";\nimport Web3 from \"web3\";\n\nimport { prepareContracts } from \"./helpers\";\nimport Debugger from \"lib/debugger\";\n\nimport sessionSelector from \"lib/session/selectors\";\nimport trace from \"lib/trace/selectors\";\n\nconst __OUTER = `\npragma solidity ^0.4.18;\n\nimport \"./InnerContract.sol\";\n\ncontract OuterContract {\n  event Outer();\n\n  InnerContract inner;\n\n  constructor(address _inner) public {\n    inner = InnerContract(_inner);\n  }\n\n  function run() public {\n    inner.run();\n\n    emit Outer();\n  }\n}\n`;\n\nconst __INNER = `\npragma solidity ^0.4.18;\n\ncontract InnerContract {\n  event Inner();\n\n  function run() public {\n    emit Inner();\n  }\n}\n`;\n\nconst __MIGRATION = `\nlet OuterContract = artifacts.require(\"OuterContract\");\nlet InnerContract = artifacts.require(\"InnerContract\");\n\nmodule.exports = function(deployer) {\n  return deployer\n    .then(function() {\n      return deployer.deploy(InnerContract);\n    })\n    .then(function() {\n      return InnerContract.deployed();\n    })\n    .then(function(inner) {\n      return deployer.deploy(OuterContract, inner.address);\n    });\n};\n`;\n\nlet migrations = {\n  \"2_deploy_contracts.js\": __MIGRATION,\n};\n\nlet sources = {\n  \"OuterLibrary.sol\": __OUTER,\n  \"InnerContract.sol\": __INNER,\n};\n\n\ndescribe(\"Contexts\", function () {\n  var provider;\n  var web3;\n\n  var abstractions;\n  var artifacts;\n\n  before(\"Create Provider\", async function() {\n    provider = Ganache.provider({seed: \"debugger\", gasLimit: 7000000});\n    web3 = new Web3(provider);\n  });\n\n  before(\"Prepare contracts and artifacts\", async function() {\n    this.timeout(30000);\n\n    let prepared = await prepareContracts(provider, sources, migrations);\n    abstractions = prepared.abstractions;\n    artifacts = prepared.artifacts;\n  });\n\n  it(\"returns view of addresses affected\", async function () {\n    let outer = await abstractions.OuterContract.deployed();\n    let inner = await abstractions.InnerContract.deployed();\n\n    // run outer contract method\n    let result = await outer.run();\n\n    assert.equal(2, result.receipt.logs.length, \"There should be two logs\");\n\n    let txHash = result.tx;\n\n    let bugger = await Debugger.forTx(txHash, {\n      provider,\n      contracts: artifacts\n    });\n    debug(\"debugger ready\");\n\n    let session = bugger.connect();\n\n    let affectedInstances = session.view(sessionSelector.info.affectedInstances);\n    debug(\"affectedInstances: %o\", affectedInstances);\n\n    let affectedAddresses = Object.keys(affectedInstances).map(address => address.toLowerCase());\n\n    assert.equal(2, affectedAddresses.length);\n\n    assert.include(\n      affectedAddresses, outer.address.toLowerCase(),\n      \"OuterContract should be an affected address\"\n    );\n\n    assert.include(\n      affectedAddresses, inner.address.toLowerCase(),\n      \"InnerContract should be an affected address\"\n    );\n  });\n});\n"]},_coverageSchema:"332fd63041d2c1bcb487cc26dd0d5f7d97098a6c"},coverage=global[gcv]||(global[gcv]={});if(coverage[path]&&coverage[path].hash===hash){return coverage[path];}coverageData.hash=hash;return coverage[path]=coverageData;}();var _keys=(cov_2putb0r3d4.s[0]++,__webpack_require__(17));var _keys2=(cov_2putb0r3d4.s[1]++,_interopRequireDefault(_keys));var _asyncToGenerator2=(cov_2putb0r3d4.s[2]++,__webpack_require__(7));var _asyncToGenerator3=(cov_2putb0r3d4.s[3]++,_interopRequireDefault(_asyncToGenerator2));var _debug=(cov_2putb0r3d4.s[4]++,__webpack_require__(0));var _debug2=(cov_2putb0r3d4.s[5]++,_interopRequireDefault(_debug));var _chai=(cov_2putb0r3d4.s[6]++,__webpack_require__(12));var _ganacheCli=(cov_2putb0r3d4.s[7]++,__webpack_require__(16));var _ganacheCli2=(cov_2putb0r3d4.s[8]++,_interopRequireDefault(_ganacheCli));var _web=(cov_2putb0r3d4.s[9]++,__webpack_require__(8));var _web2=(cov_2putb0r3d4.s[10]++,_interopRequireDefault(_web));var _helpers=(cov_2putb0r3d4.s[11]++,__webpack_require__(13));var _debugger=(cov_2putb0r3d4.s[12]++,__webpack_require__(18));var _debugger2=(cov_2putb0r3d4.s[13]++,_interopRequireDefault(_debugger));var _selectors=(cov_2putb0r3d4.s[14]++,__webpack_require__(36));var _selectors2=(cov_2putb0r3d4.s[15]++,_interopRequireDefault(_selectors));var _selectors3=(cov_2putb0r3d4.s[16]++,__webpack_require__(19));var _selectors4=(cov_2putb0r3d4.s[17]++,_interopRequireDefault(_selectors3));function _interopRequireDefault(obj){cov_2putb0r3d4.f[0]++;cov_2putb0r3d4.s[18]++;return(cov_2putb0r3d4.b[1][0]++,obj)&&(cov_2putb0r3d4.b[1][1]++,obj.__esModule)?(cov_2putb0r3d4.b[0][0]++,obj):(cov_2putb0r3d4.b[0][1]++,{default:obj});}const debug=(cov_2putb0r3d4.s[19]++,(0,_debug2.default)("test:context"));const __OUTER=(cov_2putb0r3d4.s[20]++,`
pragma solidity ^0.4.18;

import "./InnerContract.sol";

contract OuterContract {
  event Outer();

  InnerContract inner;

  constructor(address _inner) public {
    inner = InnerContract(_inner);
  }

  function run() public {
    inner.run();

    emit Outer();
  }
}
`);const __INNER=(cov_2putb0r3d4.s[21]++,`
pragma solidity ^0.4.18;

contract InnerContract {
  event Inner();

  function run() public {
    emit Inner();
  }
}
`);const __MIGRATION=(cov_2putb0r3d4.s[22]++,`
let OuterContract = artifacts.require("OuterContract");
let InnerContract = artifacts.require("InnerContract");

module.exports = function(deployer) {
  return deployer
    .then(function() {
      return deployer.deploy(InnerContract);
    })
    .then(function() {
      return InnerContract.deployed();
    })
    .then(function(inner) {
      return deployer.deploy(OuterContract, inner.address);
    });
};
`);let migrations=(cov_2putb0r3d4.s[23]++,{"2_deploy_contracts.js":__MIGRATION});let sources=(cov_2putb0r3d4.s[24]++,{"OuterLibrary.sol":__OUTER,"InnerContract.sol":__INNER});cov_2putb0r3d4.s[25]++;describe("Contexts",function(){cov_2putb0r3d4.f[1]++;var provider;var web3;var abstractions;var artifacts;cov_2putb0r3d4.s[26]++;before("Create Provider",(0,_asyncToGenerator3.default)(function*(){cov_2putb0r3d4.f[2]++;cov_2putb0r3d4.s[27]++;provider=_ganacheCli2.default.provider({seed:"debugger",gasLimit:7000000});cov_2putb0r3d4.s[28]++;web3=new _web2.default(provider);}));cov_2putb0r3d4.s[29]++;before("Prepare contracts and artifacts",(0,_asyncToGenerator3.default)(function*(){cov_2putb0r3d4.f[3]++;cov_2putb0r3d4.s[30]++;this.timeout(30000);let prepared=(cov_2putb0r3d4.s[31]++,yield(0,_helpers.prepareContracts)(provider,sources,migrations));cov_2putb0r3d4.s[32]++;abstractions=prepared.abstractions;cov_2putb0r3d4.s[33]++;artifacts=prepared.artifacts;}));cov_2putb0r3d4.s[34]++;it("returns view of addresses affected",(0,_asyncToGenerator3.default)(function*(){cov_2putb0r3d4.f[4]++;let outer=(cov_2putb0r3d4.s[35]++,yield abstractions.OuterContract.deployed());let inner=(cov_2putb0r3d4.s[36]++,yield abstractions.InnerContract.deployed());let result=(cov_2putb0r3d4.s[37]++,yield outer.run());cov_2putb0r3d4.s[38]++;_chai.assert.equal(2,result.receipt.logs.length,"There should be two logs");let txHash=(cov_2putb0r3d4.s[39]++,result.tx);let bugger=(cov_2putb0r3d4.s[40]++,yield _debugger2.default.forTx(txHash,{provider,contracts:artifacts}));cov_2putb0r3d4.s[41]++;debug("debugger ready");let session=(cov_2putb0r3d4.s[42]++,bugger.connect());let affectedInstances=(cov_2putb0r3d4.s[43]++,session.view(_selectors2.default.info.affectedInstances));cov_2putb0r3d4.s[44]++;debug("affectedInstances: %o",affectedInstances);let affectedAddresses=(cov_2putb0r3d4.s[45]++,(0,_keys2.default)(affectedInstances).map(function(address){cov_2putb0r3d4.f[5]++;cov_2putb0r3d4.s[46]++;return address.toLowerCase();}));cov_2putb0r3d4.s[47]++;_chai.assert.equal(2,affectedAddresses.length);cov_2putb0r3d4.s[48]++;_chai.assert.include(affectedAddresses,outer.address.toLowerCase(),"OuterContract should be an affected address");cov_2putb0r3d4.s[49]++;_chai.assert.include(affectedAddresses,inner.address.toLowerCase(),"InnerContract should be an affected address");}));});

/***/ }),
/* 80 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var cov_kwfh10ztw=function(){var path="/Users/gnidan/src/work/truffle/packages/truffle-debugger/test/data/decode/decoding.js",hash="8f78126de00aa0bec54686f20d58fa8c50d2e487",Function=function(){}.constructor,global=new Function('return this')(),gcv="__coverage__",coverageData={path:"/Users/gnidan/src/work/truffle/packages/truffle-debugger/test/data/decode/decoding.js",statementMap:{"0":{start:{line:3,column:15},end:{line:3,column:62}},"1":{start:{line:5,column:16},end:{line:5,column:48}},"2":{start:{line:7,column:17},end:{line:7,column:64}},"3":{start:{line:9,column:18},end:{line:9,column:52}},"4":{start:{line:11,column:14},end:{line:11,column:60}},"5":{start:{line:13,column:15},end:{line:13,column:46}},"6":{start:{line:15,column:16},end:{line:15,column:56}},"7":{start:{line:17,column:16},end:{line:17,column:49}},"8":{start:{line:19,column:13},end:{line:19,column:29}},"9":{start:{line:21,column:14},end:{line:21,column:44}},"10":{start:{line:23,column:13},end:{line:23,column:29}},"11":{start:{line:25,column:14},end:{line:25,column:44}},"12":{start:{line:27,column:17},end:{line:27,column:45}},"13":{start:{line:29,column:18},end:{line:29,column:52}},"14":{start:{line:31,column:15},end:{line:31,column:35}},"15":{start:{line:33,column:39},end:{line:33,column:93}},"16":{start:{line:35,column:14},end:{line:35,column:54}},"17":{start:{line:37,column:14},end:{line:37,column:43}},"18":{start:{line:40,column:2},end:{line:40,column:58}},"19":{start:{line:40,column:38},end:{line:40,column:56}},"20":{start:{line:43,column:23},end:{line:67,column:2}},"21":{start:{line:69,column:24},end:{line:90,column:2}},"22":{start:{line:75,column:103},end:{line:75,column:119}},"23":{start:{line:82,column:103},end:{line:82,column:147}},"24":{start:{line:89,column:93},end:{line:89,column:163}},"25":{start:{line:92,column:0},end:{line:92,column:45}},"26":{start:{line:94,column:0},end:{line:169,column:3}},"27":{start:{line:99,column:2},end:{line:116,column:5}},"28":{start:{line:100,column:4},end:{line:115,column:2}},"29":{start:{line:107,column:37},end:{line:107,column:55}},"30":{start:{line:110,column:40},end:{line:110,column:87}},"31":{start:{line:118,column:2},end:{line:134,column:5}},"32":{start:{line:119,column:4},end:{line:133,column:2}},"33":{start:{line:125,column:51},end:{line:125,column:88}},"34":{start:{line:128,column:56},end:{line:128,column:241}},"35":{start:{line:128,column:102},end:{line:128,column:225}},"36":{start:{line:139,column:2},end:{line:168,column:5}},"37":{start:{line:140,column:22},end:{line:140,column:31}},"38":{start:{line:143,column:6},end:{line:150,column:7}},"39":{start:{line:145,column:22},end:{line:145,column:77}},"40":{start:{line:146,column:22},end:{line:146,column:65}},"41":{start:{line:146,column:42},end:{line:146,column:64}},"42":{start:{line:147,column:8},end:{line:147,column:66}},"43":{start:{line:149,column:8},end:{line:149,column:77}},"44":{start:{line:153,column:4},end:{line:167,column:2}}},fnMap:{"0":{name:"_interopRequireDefault",decl:{start:{line:33,column:9},end:{line:33,column:31}},loc:{start:{line:33,column:37},end:{line:33,column:95}},line:33},"1":{name:"generateArray",decl:{start:{line:39,column:9},end:{line:39,column:22}},loc:{start:{line:39,column:31},end:{line:41,column:1}},line:39},"2":{name:"(anonymous_2)",decl:{start:{line:40,column:32},end:{line:40,column:33}},loc:{start:{line:40,column:38},end:{line:40,column:56}},line:40},"3":{name:"(anonymous_3)",decl:{start:{line:75,column:86},end:{line:75,column:87}},loc:{start:{line:75,column:103},end:{line:75,column:119}},line:75},"4":{name:"(anonymous_4)",decl:{start:{line:82,column:86},end:{line:82,column:87}},loc:{start:{line:82,column:103},end:{line:82,column:147}},line:82},"5":{name:"(anonymous_5)",decl:{start:{line:89,column:85},end:{line:89,column:86}},loc:{start:{line:89,column:93},end:{line:89,column:163}},line:89},"6":{name:"(anonymous_6)",decl:{start:{line:94,column:21},end:{line:94,column:22}},loc:{start:{line:94,column:33},end:{line:169,column:1}},line:94},"7":{name:"(anonymous_7)",decl:{start:{line:99,column:113},end:{line:99,column:114}},loc:{start:{line:99,column:141},end:{line:116,column:3}},line:99},"8":{name:"(anonymous_8)",decl:{start:{line:107,column:17},end:{line:107,column:18}},loc:{start:{line:107,column:37},end:{line:107,column:55}},line:107},"9":{name:"(anonymous_9)",decl:{start:{line:110,column:19},end:{line:110,column:20}},loc:{start:{line:110,column:40},end:{line:110,column:87}},line:110},"10":{name:"(anonymous_10)",decl:{start:{line:118,column:114},end:{line:118,column:115}},loc:{start:{line:118,column:142},end:{line:134,column:3}},line:118},"11":{name:"(anonymous_11)",decl:{start:{line:125,column:17},end:{line:125,column:18}},loc:{start:{line:125,column:51},end:{line:125,column:88}},line:125},"12":{name:"(anonymous_12)",decl:{start:{line:128,column:19},end:{line:128,column:20}},loc:{start:{line:128,column:56},end:{line:128,column:241}},line:128},"13":{name:"(anonymous_13)",decl:{start:{line:128,column:90},end:{line:128,column:91}},loc:{start:{line:128,column:102},end:{line:128,column:225}},line:128},"14":{name:"(anonymous_14)",decl:{start:{line:139,column:111},end:{line:139,column:112}},loc:{start:{line:139,column:139},end:{line:168,column:3}},line:139},"15":{name:"declareAssign",decl:{start:{line:142,column:13},end:{line:142,column:26}},loc:{start:{line:142,column:50},end:{line:151,column:5}},line:142},"16":{name:"(anonymous_16)",decl:{start:{line:146,column:32},end:{line:146,column:33}},loc:{start:{line:146,column:42},end:{line:146,column:64}},line:146}},branchMap:{"0":{loc:{start:{line:33,column:46},end:{line:33,column:92}},type:"cond-expr",locations:[{start:{line:33,column:70},end:{line:33,column:73}},{start:{line:33,column:76},end:{line:33,column:92}}],line:33},"1":{loc:{start:{line:33,column:46},end:{line:33,column:67}},type:"binary-expr",locations:[{start:{line:33,column:46},end:{line:33,column:49}},{start:{line:33,column:53},end:{line:33,column:67}}],line:33},"2":{loc:{start:{line:128,column:102},end:{line:128,column:225}},type:"cond-expr",locations:[{start:{line:128,column:122},end:{line:128,column:173}},{start:{line:128,column:176},end:{line:128,column:225}}],line:128},"3":{loc:{start:{line:143,column:6},end:{line:150,column:7}},type:"if",locations:[{start:{line:143,column:6},end:{line:150,column:7}},{start:{line:143,column:6},end:{line:150,column:7}}],line:143}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0},f:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0},b:{"0":[0,0],"1":[0,0],"2":[0,0],"3":[0,0]},inputSourceMap:{version:3,sources:["test/data/decode/decoding.js"],names:["debug","uints","generateArray","length","Array","map","next","value","commonFixtures","name","type","mappingFixtures","from","to","idx","faker","lorem","slug","describe","evm","current","state","storage","contractName","fixtures","join","k","v","memory","separator","declareAssign","indexOf","declare","assigns","i"],mappings:"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",file:"decoding.js",sourceRoot:"/Users/gnidan/src/work/truffle/packages/truffle-debugger",sourcesContent:["import debugModule from \"debug\";\nconst debug = debugModule(\"test:data:decode\");\n\nimport faker from \"faker\";\n\nimport evm from \"lib/evm/selectors\";\n\nimport {\n  generateUints, describeDecoding\n} from \"./helpers\";\n\n\nconst uints = generateUints();\n\nfunction generateArray(length) {\n  return [...Array(length)]\n    .map(() => uints.next().value)\n}\n\nconst commonFixtures = [{\n  name: \"multipleFullWordArray\",\n  type: \"uint[]\",\n  value: generateArray(3)  // takes up 3 whole words\n}, {\n  name: \"withinWordArray\",\n  type: \"uint16[]\",\n  value: generateArray(10)  // takes up >1/2 word\n}, {\n  name: \"multiplePartWordArray\",\n  type: \"uint64[]\",\n  value: generateArray(9)  // takes up 2.25 words\n}, {\n  name: \"inconvenientlyWordOffsetArray\",\n  type: \"uint240[]\",\n  value: generateArray(3)  // takes up ~2.8 words\n}, {\n  name: \"shortString\",\n  type: \"string\",\n  value: \"hello world\"\n}, {\n  name: \"longString\",\n  type: \"string\",\n  value: \"solidity allocation is a fun lesson in endianness\"\n}];\n\nconst mappingFixtures = [{\n  name: \"simpleMapping\",\n  type: {\n    from: \"uint256\",\n    to: \"uint256\"\n  },\n  value: {\n    ...Object.assign({}, ...generateArray(5).map(\n      (value, idx) => ({ [idx]: value })\n    ))\n  }\n}, {\n  name: \"numberedStrings\",\n  type: {\n    from: \"uint256\",\n    to: \"string\"\n  },\n  value: {\n    ...Object.assign({}, ...generateArray(7).map(\n      (value, idx) => ({ [value]: faker.lorem.slug(idx) })\n    ))\n  }\n}, {\n  name: \"stringsToStrings\",\n  type: {\n    from: \"string\",\n    to: \"string\"\n  },\n  value: {\n    ...Object.assign({}, ...[0,1,2,3,4].map(\n      (idx) => ({ [faker.lorem.slug(idx)]: faker.lorem.slug(idx) })\n    ))\n  }\n}];\n\ndebug(\"mappingFixtures %O\", mappingFixtures);\n\ndescribe(\"Decoding\", function() {\n\n  /*\n   * Storage Tests\n   */\n  describeDecoding(\n    \"Storage Variables\", commonFixtures, evm.current.state.storage,\n\n    (contractName, fixtures) => {\n      return `pragma solidity ^0.4.23;\n\ncontract ${contractName} {\n\n  event Done();\n\n  // declarations\n  ${fixtures\n    .map( ({type, name}) => `${type} ${name};` )\n    .join(\"\\n  \")}\n\n  function run() public {\n    ${fixtures\n      .map( ({name, value}) => `${name} = ${JSON.stringify(value)};` )\n      .join(\"\\n    \")}\n\n    emit Done();\n  }\n}\n`   }\n  );\n\n  describeDecoding(\n    \"Mapping Variables\", mappingFixtures, evm.current.state.storage,\n\n    (contractName, fixtures) => {\n      return `pragma solidity ^0.4.24;\n\ncontract ${contractName} {\n  event Done();\n\n  // declarations\n  ${fixtures\n    .map( ({name, type: {from, to}}) => `mapping (${from} => ${to}) ${name};` )\n    .join(\"\\n  \")}\n\n  function run() public {\n    ${fixtures\n      .map(\n        ({name, type: {from}, value}) =>\n          Object.entries(value)\n            .map( ([k, v]) => (from === \"string\")\n              ? `${name}[\"${k}\"] = ${JSON.stringify(v)};`\n              : `${name}[${k}] = ${JSON.stringify(v)};`\n            )\n            .join(\"\\n    \")\n      )\n      .join(\"\\n\\n    \")}\n\n    emit Done();\n  }\n}\n`\n    }\n  );\n\n  /*\n   * Memory Tests\n   */\n  describeDecoding(\n    \"Memory Variables\", commonFixtures, evm.current.state.memory,\n\n    (contractName, fixtures) => {\n      const separator = \";\\n    \";\n\n      function declareAssign({name, type, value}) {\n        if (type.indexOf(\"[]\") != -1) {\n          // array, must `new`\n          let declare = `${type} memory ${name} = new ${type}(${value.length})`\n          let assigns = value.map((k, i) => `${name}[${i}] = ${k}`);\n          return `${declare}${separator}${assigns.join(separator)}`\n        } else {\n          return `${type} memory ${name} = ${JSON.stringify(value)}`\n        }\n      }\n\n      return `pragma solidity ^0.4.23;\n\ncontract ${contractName} {\n\n  event Done();\n\n  function run() public {\n    uint i;\n    // declarations\n    ${fixtures.map(declareAssign).join(separator)};\n\n    emit Done();\n  }\n}\n`\n    }\n  );\n});\n"]},_coverageSchema:"332fd63041d2c1bcb487cc26dd0d5f7d97098a6c"},coverage=global[gcv]||(global[gcv]={});if(coverage[path]&&coverage[path].hash===hash){return coverage[path];}coverageData.hash=hash;return coverage[path]=coverageData;}();var _entries=(cov_kwfh10ztw.s[0]++,__webpack_require__(1));var _entries2=(cov_kwfh10ztw.s[1]++,_interopRequireDefault(_entries));var _stringify=(cov_kwfh10ztw.s[2]++,__webpack_require__(81));var _stringify2=(cov_kwfh10ztw.s[3]++,_interopRequireDefault(_stringify));var _assign=(cov_kwfh10ztw.s[4]++,__webpack_require__(3));var _assign2=(cov_kwfh10ztw.s[5]++,_interopRequireDefault(_assign));var _extends2=(cov_kwfh10ztw.s[6]++,__webpack_require__(2));var _extends3=(cov_kwfh10ztw.s[7]++,_interopRequireDefault(_extends2));var _debug=(cov_kwfh10ztw.s[8]++,__webpack_require__(0));var _debug2=(cov_kwfh10ztw.s[9]++,_interopRequireDefault(_debug));var _faker=(cov_kwfh10ztw.s[10]++,__webpack_require__(82));var _faker2=(cov_kwfh10ztw.s[11]++,_interopRequireDefault(_faker));var _selectors=(cov_kwfh10ztw.s[12]++,__webpack_require__(5));var _selectors2=(cov_kwfh10ztw.s[13]++,_interopRequireDefault(_selectors));var _helpers=(cov_kwfh10ztw.s[14]++,__webpack_require__(37));function _interopRequireDefault(obj){cov_kwfh10ztw.f[0]++;cov_kwfh10ztw.s[15]++;return(cov_kwfh10ztw.b[1][0]++,obj)&&(cov_kwfh10ztw.b[1][1]++,obj.__esModule)?(cov_kwfh10ztw.b[0][0]++,obj):(cov_kwfh10ztw.b[0][1]++,{default:obj});}const debug=(cov_kwfh10ztw.s[16]++,(0,_debug2.default)("test:data:decode"));const uints=(cov_kwfh10ztw.s[17]++,(0,_helpers.generateUints)());function generateArray(length){cov_kwfh10ztw.f[1]++;cov_kwfh10ztw.s[18]++;return[...Array(length)].map(()=>{cov_kwfh10ztw.f[2]++;cov_kwfh10ztw.s[19]++;return uints.next().value;});}const commonFixtures=(cov_kwfh10ztw.s[20]++,[{name:"multipleFullWordArray",type:"uint[]",value:generateArray(3)},{name:"withinWordArray",type:"uint16[]",value:generateArray(10)},{name:"multiplePartWordArray",type:"uint64[]",value:generateArray(9)},{name:"inconvenientlyWordOffsetArray",type:"uint240[]",value:generateArray(3)},{name:"shortString",type:"string",value:"hello world"},{name:"longString",type:"string",value:"solidity allocation is a fun lesson in endianness"}]);const mappingFixtures=(cov_kwfh10ztw.s[21]++,[{name:"simpleMapping",type:{from:"uint256",to:"uint256"},value:(0,_extends3.default)({},(0,_assign2.default)({},...generateArray(5).map((value,idx)=>{cov_kwfh10ztw.f[3]++;cov_kwfh10ztw.s[22]++;return{[idx]:value};})))},{name:"numberedStrings",type:{from:"uint256",to:"string"},value:(0,_extends3.default)({},(0,_assign2.default)({},...generateArray(7).map((value,idx)=>{cov_kwfh10ztw.f[4]++;cov_kwfh10ztw.s[23]++;return{[value]:_faker2.default.lorem.slug(idx)};})))},{name:"stringsToStrings",type:{from:"string",to:"string"},value:(0,_extends3.default)({},(0,_assign2.default)({},...[0,1,2,3,4].map(idx=>{cov_kwfh10ztw.f[5]++;cov_kwfh10ztw.s[24]++;return{[_faker2.default.lorem.slug(idx)]:_faker2.default.lorem.slug(idx)};})))}]);cov_kwfh10ztw.s[25]++;debug("mappingFixtures %O",mappingFixtures);cov_kwfh10ztw.s[26]++;describe("Decoding",function(){cov_kwfh10ztw.f[6]++;cov_kwfh10ztw.s[27]++;(0,_helpers.describeDecoding)("Storage Variables",commonFixtures,_selectors2.default.current.state.storage,(contractName,fixtures)=>{cov_kwfh10ztw.f[7]++;cov_kwfh10ztw.s[28]++;return`pragma solidity ^0.4.23;

contract ${contractName} {

  event Done();

  // declarations
  ${fixtures.map(({type,name})=>{cov_kwfh10ztw.f[8]++;cov_kwfh10ztw.s[29]++;return`${type} ${name};`;}).join("\n  ")}

  function run() public {
    ${fixtures.map(({name,value})=>{cov_kwfh10ztw.f[9]++;cov_kwfh10ztw.s[30]++;return`${name} = ${(0,_stringify2.default)(value)};`;}).join("\n    ")}

    emit Done();
  }
}
`;});cov_kwfh10ztw.s[31]++;(0,_helpers.describeDecoding)("Mapping Variables",mappingFixtures,_selectors2.default.current.state.storage,(contractName,fixtures)=>{cov_kwfh10ztw.f[10]++;cov_kwfh10ztw.s[32]++;return`pragma solidity ^0.4.24;

contract ${contractName} {
  event Done();

  // declarations
  ${fixtures.map(({name,type:{from,to}})=>{cov_kwfh10ztw.f[11]++;cov_kwfh10ztw.s[33]++;return`mapping (${from} => ${to}) ${name};`;}).join("\n  ")}

  function run() public {
    ${fixtures.map(({name,type:{from},value})=>{cov_kwfh10ztw.f[12]++;cov_kwfh10ztw.s[34]++;return(0,_entries2.default)(value).map(([k,v])=>{cov_kwfh10ztw.f[13]++;cov_kwfh10ztw.s[35]++;return from==="string"?(cov_kwfh10ztw.b[2][0]++,`${name}["${k}"] = ${(0,_stringify2.default)(v)};`):(cov_kwfh10ztw.b[2][1]++,`${name}[${k}] = ${(0,_stringify2.default)(v)};`);}).join("\n    ");}).join("\n\n    ")}

    emit Done();
  }
}
`;});cov_kwfh10ztw.s[36]++;(0,_helpers.describeDecoding)("Memory Variables",commonFixtures,_selectors2.default.current.state.memory,(contractName,fixtures)=>{cov_kwfh10ztw.f[14]++;const separator=(cov_kwfh10ztw.s[37]++,";\n    ");function declareAssign({name,type,value}){cov_kwfh10ztw.f[15]++;cov_kwfh10ztw.s[38]++;if(type.indexOf("[]")!=-1){cov_kwfh10ztw.b[3][0]++;let declare=(cov_kwfh10ztw.s[39]++,`${type} memory ${name} = new ${type}(${value.length})`);let assigns=(cov_kwfh10ztw.s[40]++,value.map((k,i)=>{cov_kwfh10ztw.f[16]++;cov_kwfh10ztw.s[41]++;return`${name}[${i}] = ${k}`;}));cov_kwfh10ztw.s[42]++;return`${declare}${separator}${assigns.join(separator)}`;}else{cov_kwfh10ztw.b[3][1]++;cov_kwfh10ztw.s[43]++;return`${type} memory ${name} = ${(0,_stringify2.default)(value)}`;}}cov_kwfh10ztw.s[44]++;return`pragma solidity ^0.4.23;

contract ${contractName} {

  event Done();

  function run() public {
    uint i;
    // declarations
    ${fixtures.map(declareAssign).join(separator)};

    emit Done();
  }
}
`;});});

/***/ }),
/* 81 */
/***/ (function(module, exports) {

module.exports = require("babel-runtime/core-js/json/stringify");

/***/ }),
/* 82 */
/***/ (function(module, exports) {

module.exports = require("faker");

/***/ }),
/* 83 */
/***/ (function(module, exports) {

module.exports = require("change-case");

/***/ }),
/* 84 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var cov_2lfohzyb3j=function(){var path="/Users/gnidan/src/work/truffle/packages/truffle-debugger/test/data/decode/utils.js",hash="194aeed07278ef0b202918f67ddbc85c22fb0b77",Function=function(){}.constructor,global=new Function('return this')(),gcv="__coverage__",coverageData={path:"/Users/gnidan/src/work/truffle/packages/truffle-debugger/test/data/decode/utils.js",statementMap:{"0":{start:{line:3,column:13},end:{line:3,column:29}},"1":{start:{line:5,column:14},end:{line:5,column:44}},"2":{start:{line:7,column:12},end:{line:7,column:27}},"3":{start:{line:9,column:17},end:{line:9,column:40}},"4":{start:{line:11,column:13},end:{line:11,column:45}},"5":{start:{line:13,column:12},end:{line:13,column:43}},"6":{start:{line:15,column:40},end:{line:15,column:267}},"7":{start:{line:15,column:69},end:{line:15,column:80}},"8":{start:{line:15,column:103},end:{line:15,column:105}},"9":{start:{line:15,column:107},end:{line:15,column:228}},"10":{start:{line:15,column:126},end:{line:15,column:226}},"11":{start:{line:15,column:149},end:{line:15,column:224}},"12":{start:{line:15,column:201},end:{line:15,column:224}},"13":{start:{line:15,column:229},end:{line:15,column:250}},"14":{start:{line:15,column:251},end:{line:15,column:265}},"15":{start:{line:17,column:39},end:{line:17,column:93}},"16":{start:{line:19,column:14},end:{line:19,column:60}},"17":{start:{line:21,column:0},end:{line:80,column:3}},"18":{start:{line:22,column:2},end:{line:32,column:5}},"19":{start:{line:23,column:4},end:{line:31,column:7}},"20":{start:{line:24,column:23},end:{line:28,column:7}},"21":{start:{line:30,column:6},end:{line:30,column:65}},"22":{start:{line:34,column:2},end:{line:43,column:5}},"23":{start:{line:35,column:4},end:{line:42,column:7}},"24":{start:{line:36,column:18},end:{line:36,column:42}},"25":{start:{line:37,column:26},end:{line:37,column:66}},"26":{start:{line:39,column:19},end:{line:39,column:43}},"27":{start:{line:41,column:6},end:{line:41,column:70}},"28":{start:{line:45,column:2},end:{line:67,column:5}},"29":{start:{line:46,column:4},end:{line:56,column:7}},"30":{start:{line:47,column:18},end:{line:47,column:42}},"31":{start:{line:48,column:16},end:{line:48,column:56}},"32":{start:{line:49,column:22},end:{line:49,column:123}},"33":{start:{line:51,column:26},end:{line:51,column:53}},"34":{start:{line:53,column:19},end:{line:53,column:49}},"35":{start:{line:55,column:6},end:{line:55,column:70}},"36":{start:{line:58,column:4},end:{line:66,column:7}},"37":{start:{line:59,column:18},end:{line:59,column:42}},"38":{start:{line:60,column:16},end:{line:60,column:56}},"39":{start:{line:61,column:26},end:{line:61,column:29}},"40":{start:{line:63,column:19},end:{line:63,column:49}},"41":{start:{line:65,column:6},end:{line:65,column:70}},"42":{start:{line:69,column:2},end:{line:79,column:5}},"43":{start:{line:70,column:4},end:{line:74,column:7}},"44":{start:{line:72,column:6},end:{line:72,column:68}},"45":{start:{line:73,column:6},end:{line:73,column:76}},"46":{start:{line:76,column:4},end:{line:78,column:7}},"47":{start:{line:77,column:6},end:{line:77,column:78}}},fnMap:{"0":{name:"_interopRequireWildcard",decl:{start:{line:15,column:9},end:{line:15,column:32}},loc:{start:{line:15,column:38},end:{line:15,column:269}},line:15},"1":{name:"_interopRequireDefault",decl:{start:{line:17,column:9},end:{line:17,column:31}},loc:{start:{line:17,column:37},end:{line:17,column:95}},line:17},"2":{name:"(anonymous_2)",decl:{start:{line:21,column:18},end:{line:21,column:19}},loc:{start:{line:21,column:30},end:{line:80,column:1}},line:21},"3":{name:"(anonymous_3)",decl:{start:{line:22,column:26},end:{line:22,column:27}},loc:{start:{line:22,column:38},end:{line:32,column:3}},line:22},"4":{name:"(anonymous_4)",decl:{start:{line:23,column:27},end:{line:23,column:28}},loc:{start:{line:23,column:39},end:{line:31,column:5}},line:23},"5":{name:"(anonymous_5)",decl:{start:{line:34,column:28},end:{line:34,column:29}},loc:{start:{line:34,column:40},end:{line:43,column:3}},line:34},"6":{name:"(anonymous_6)",decl:{start:{line:35,column:32},end:{line:35,column:33}},loc:{start:{line:35,column:44},end:{line:42,column:5}},line:35},"7":{name:"(anonymous_7)",decl:{start:{line:45,column:34},end:{line:45,column:35}},loc:{start:{line:45,column:46},end:{line:67,column:3}},line:45},"8":{name:"(anonymous_8)",decl:{start:{line:46,column:41},end:{line:46,column:42}},loc:{start:{line:46,column:53},end:{line:56,column:5}},line:46},"9":{name:"(anonymous_9)",decl:{start:{line:58,column:41},end:{line:58,column:42}},loc:{start:{line:58,column:53},end:{line:66,column:5}},line:58},"10":{name:"(anonymous_10)",decl:{start:{line:69,column:28},end:{line:69,column:29}},loc:{start:{line:69,column:40},end:{line:79,column:3}},line:69},"11":{name:"(anonymous_11)",decl:{start:{line:70,column:57},end:{line:70,column:58}},loc:{start:{line:70,column:69},end:{line:74,column:5}},line:70},"12":{name:"(anonymous_12)",decl:{start:{line:76,column:41},end:{line:76,column:42}},loc:{start:{line:76,column:53},end:{line:78,column:5}},line:76}},branchMap:{"0":{loc:{start:{line:15,column:40},end:{line:15,column:267}},type:"if",locations:[{start:{line:15,column:40},end:{line:15,column:267}},{start:{line:15,column:40},end:{line:15,column:267}}],line:15},"1":{loc:{start:{line:15,column:44},end:{line:15,column:65}},type:"binary-expr",locations:[{start:{line:15,column:44},end:{line:15,column:47}},{start:{line:15,column:51},end:{line:15,column:65}}],line:15},"2":{loc:{start:{line:15,column:107},end:{line:15,column:228}},type:"if",locations:[{start:{line:15,column:107},end:{line:15,column:228}},{start:{line:15,column:107},end:{line:15,column:228}}],line:15},"3":{loc:{start:{line:15,column:149},end:{line:15,column:224}},type:"if",locations:[{start:{line:15,column:149},end:{line:15,column:224}},{start:{line:15,column:149},end:{line:15,column:224}}],line:15},"4":{loc:{start:{line:17,column:46},end:{line:17,column:92}},type:"cond-expr",locations:[{start:{line:17,column:70},end:{line:17,column:73}},{start:{line:17,column:76},end:{line:17,column:92}}],line:17},"5":{loc:{start:{line:17,column:46},end:{line:17,column:67}},type:"binary-expr",locations:[{start:{line:17,column:46},end:{line:17,column:49}},{start:{line:17,column:53},end:{line:17,column:67}}],line:17}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0},f:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0},b:{"0":[0,0],"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0]},inputSourceMap:{version:3,sources:["test/data/decode/utils.js"],names:["utils","debug","describe","it","definition","typeDescriptions","typeIdentifier","assert","equal","typeClass","bytes","expectedValue","BigNumber","result","toBigNumber","toString","raw","bitfipped","replace","plus","negated","toSignedBigNumber","toHexString"],mappings:";;AAAA;;;;AAGA;;AAEA;;AACA;;IAAYA,K;;;;;;AALZ,MAAMC,QAAQ,qBAAY,wBAAZ,CAAd;;AAOAC,SAAS,OAAT,EAAkB,YAAW;AAC3BA,WAAS,aAAT,EAAwB,YAAW;AACjCC,OAAG,kBAAH,EAAuB,YAAW;AAChC,UAAIC,aAAa;AACfC,0BAAkB;AAChBC,0BAAgB;AADA;AADH,OAAjB;;AAMAC,mBAAOC,KAAP,CAAaR,MAAMS,SAAN,CAAgBL,UAAhB,CAAb,EAA0C,SAA1C;AACD,KARD;AASD,GAVD;;AAYAF,WAAS,eAAT,EAA0B,YAAW;AACnCC,OAAG,uBAAH,EAA4B,YAAW;AACrC,UAAIO,QAAQ,CAAC,IAAD,EAAO,IAAP,EAAa,IAAb,EAAmB,IAAnB,CAAZ;AACA,UAAIC,gBAAgB,IAAIC,oBAAJ,CAAc,UAAd,EAA0B,EAA1B,CAApB;;AAEA,UAAIC,SAASb,MAAMc,WAAN,CAAkBJ,KAAlB,CAAb;;AAEAH,mBAAOC,KAAP,CAAaK,OAAOE,QAAP,EAAb,EAAgCJ,cAAcI,QAAd,EAAhC;AACD,KAPD;AAQD,GATD;;AAWAb,WAAS,qBAAT,EAAgC,YAAW;AACzCC,OAAG,gCAAH,EAAqC,YAAW;AAC9C,UAAIO,QAAQ,CAAC,IAAD,EAAO,IAAP,EAAa,IAAb,EAAmB,IAAnB,CAAZ,CAD8C,CACP;AACvC,UAAIM,MAAM,IAAIJ,oBAAJ,CAAc,UAAd,EAA0B,EAA1B,CAAV;AACA,UAAIK,YAAY,IAAIL,oBAAJ,CACdI,IAAID,QAAJ,CAAa,CAAb,EACGG,OADH,CACW,IADX,EACiB,GADjB,EAEGA,OAFH,CAEW,IAFX,EAEiB,GAFjB,EAGGA,OAHH,CAGW,IAHX,EAGiB,GAHjB,CADc,EAKd,CALc,CAAhB;;AAQA,UAAIP,gBAAgBM,UAAUE,IAAV,CAAe,CAAf,EAAkBC,OAAlB,EAApB;;AAEA,UAAIP,SAASb,MAAMqB,iBAAN,CAAwBX,KAAxB,CAAb;;AAEAH,mBAAOC,KAAP,CAAaK,OAAOE,QAAP,EAAb,EAAgCJ,cAAcI,QAAd,EAAhC;AACD,KAhBD;;AAkBAZ,OAAG,gCAAH,EAAqC,YAAW;AAC9C,UAAIO,QAAQ,CAAC,IAAD,EAAO,IAAP,EAAa,IAAb,EAAmB,IAAnB,CAAZ,CAD8C,CACR;AACtC,UAAIM,MAAM,IAAIJ,oBAAJ,CAAc,UAAd,EAA0B,EAA1B,CAAV;AACA,UAAID,gBAAgBK,GAApB;;AAEA,UAAIH,SAASb,MAAMqB,iBAAN,CAAwBX,KAAxB,CAAb;;AAEAH,mBAAOC,KAAP,CAAaK,OAAOE,QAAP,EAAb,EAAgCJ,cAAcI,QAAd,EAAhC;AACD,KARD;AASD,GA5BD;;AA8BAb,WAAS,eAAT,EAA0B,YAAW;AACnCC,OAAG,gDAAH,EAAqD,YAAW;AAC9D;AACAI,mBAAOC,KAAP,CAAaR,MAAMsB,WAAN,CAAkB,CAAC,IAAD,EAAO,IAAP,CAAlB,CAAb,EAA8C,QAA9C;AACAf,mBAAOC,KAAP,CAAaR,MAAMsB,WAAN,CAAkB,CAAC,IAAD,EAAO,IAAP,EAAa,IAAb,CAAlB,CAAb,EAAoD,UAApD;AACD,KAJD;;AAMAnB,OAAG,gCAAH,EAAqC,YAAW;AAC9CI,mBAAOC,KAAP,CAAaR,MAAMsB,WAAN,CAAkB,CAAC,IAAD,EAAO,IAAP,EAAa,IAAb,CAAlB,EAAsC,IAAtC,CAAb,EAA0D,MAA1D;AACD,KAFD;AAGD,GAVD;AAWD,CAjED",file:"utils.js",sourceRoot:"/Users/gnidan/src/work/truffle/packages/truffle-debugger",sourcesContent:["import debugModule from \"debug\";\nconst debug = debugModule(\"test:data:decode:utils\");\n\nimport { assert } from \"chai\";\n\nimport { BigNumber } from \"bignumber.js\";\nimport * as utils from \"lib/data/decode/utils\";\n\ndescribe(\"Utils\", function() {\n  describe(\"typeClass()\", function() {\n    it(\"handles mappings\", function() {\n      let definition = {\n        typeDescriptions: {\n          typeIdentifier: \"t_mapping$_t_uint256_$_t_uint256_$\"\n        }\n      };\n\n      assert.equal(utils.typeClass(definition), \"mapping\");\n    });\n  });\n\n  describe(\"toBigNumber()\", function() {\n    it(\"returns correct value\", function() {\n      let bytes = [0xf5, 0xe2, 0xc5, 0x17];\n      let expectedValue = new BigNumber(\"f5e2c517\", 16);\n\n      let result = utils.toBigNumber(bytes);\n\n      assert.equal(result.toString(), expectedValue.toString());\n    })\n  });\n\n  describe(\"toSignedBigNumber()\", function() {\n    it(\"returns correct negative value\", function() {\n      let bytes = [0xf5, 0xe2, 0xc5, 0x17];  // starts with 0b1\n      let raw = new BigNumber(\"f5e2c517\", 16);\n      let bitfipped = new BigNumber(\n        raw.toString(2)\n          .replace(/0/g, \"x\")\n          .replace(/1/g, \"0\")\n          .replace(/x/g, \"1\"),\n        2\n      );\n\n      let expectedValue = bitfipped.plus(1).negated();\n\n      let result = utils.toSignedBigNumber(bytes);\n\n      assert.equal(result.toString(), expectedValue.toString());\n    });\n\n    it(\"returns correct positive value\", function() {\n      let bytes = [0x05, 0xe2, 0xc5, 0x17]; // starts with 0b0\n      let raw = new BigNumber(\"05e2c517\", 16);\n      let expectedValue = raw;\n\n      let result = utils.toSignedBigNumber(bytes);\n\n      assert.equal(result.toString(), expectedValue.toString());\n    })\n  });\n\n  describe(\"toHexString()\", function() {\n    it(\"returns correct representation with full bytes\", function() {\n      // ie, 0x00 instead of 0x0\n      assert.equal(utils.toHexString([0x05, 0x11]), \"0x0511\");\n      assert.equal(utils.toHexString([0xff, 0x00, 0xff]), \"0xff00ff\");\n    });\n\n    it(\"allows removing leading zeroes\", function() {\n      assert.equal(utils.toHexString([0x00, 0x00, 0xcc], true), \"0xcc\");\n    });\n  });\n});\n"]},_coverageSchema:"332fd63041d2c1bcb487cc26dd0d5f7d97098a6c"},coverage=global[gcv]||(global[gcv]={});if(coverage[path]&&coverage[path].hash===hash){return coverage[path];}coverageData.hash=hash;return coverage[path]=coverageData;}();var _debug=(cov_2lfohzyb3j.s[0]++,__webpack_require__(0));var _debug2=(cov_2lfohzyb3j.s[1]++,_interopRequireDefault(_debug));var _chai=(cov_2lfohzyb3j.s[2]++,__webpack_require__(12));var _bignumber=(cov_2lfohzyb3j.s[3]++,__webpack_require__(20));var _utils=(cov_2lfohzyb3j.s[4]++,__webpack_require__(11));var utils=(cov_2lfohzyb3j.s[5]++,_interopRequireWildcard(_utils));function _interopRequireWildcard(obj){cov_2lfohzyb3j.f[0]++;cov_2lfohzyb3j.s[6]++;if((cov_2lfohzyb3j.b[1][0]++,obj)&&(cov_2lfohzyb3j.b[1][1]++,obj.__esModule)){cov_2lfohzyb3j.b[0][0]++;cov_2lfohzyb3j.s[7]++;return obj;}else{cov_2lfohzyb3j.b[0][1]++;var newObj=(cov_2lfohzyb3j.s[8]++,{});cov_2lfohzyb3j.s[9]++;if(obj!=null){cov_2lfohzyb3j.b[2][0]++;cov_2lfohzyb3j.s[10]++;for(var key in obj){cov_2lfohzyb3j.s[11]++;if(Object.prototype.hasOwnProperty.call(obj,key)){cov_2lfohzyb3j.b[3][0]++;cov_2lfohzyb3j.s[12]++;newObj[key]=obj[key];}else{cov_2lfohzyb3j.b[3][1]++;}}}else{cov_2lfohzyb3j.b[2][1]++;}cov_2lfohzyb3j.s[13]++;newObj.default=obj;cov_2lfohzyb3j.s[14]++;return newObj;}}function _interopRequireDefault(obj){cov_2lfohzyb3j.f[1]++;cov_2lfohzyb3j.s[15]++;return(cov_2lfohzyb3j.b[5][0]++,obj)&&(cov_2lfohzyb3j.b[5][1]++,obj.__esModule)?(cov_2lfohzyb3j.b[4][0]++,obj):(cov_2lfohzyb3j.b[4][1]++,{default:obj});}const debug=(cov_2lfohzyb3j.s[16]++,(0,_debug2.default)("test:data:decode:utils"));cov_2lfohzyb3j.s[17]++;describe("Utils",function(){cov_2lfohzyb3j.f[2]++;cov_2lfohzyb3j.s[18]++;describe("typeClass()",function(){cov_2lfohzyb3j.f[3]++;cov_2lfohzyb3j.s[19]++;it("handles mappings",function(){cov_2lfohzyb3j.f[4]++;let definition=(cov_2lfohzyb3j.s[20]++,{typeDescriptions:{typeIdentifier:"t_mapping$_t_uint256_$_t_uint256_$"}});cov_2lfohzyb3j.s[21]++;_chai.assert.equal(utils.typeClass(definition),"mapping");});});cov_2lfohzyb3j.s[22]++;describe("toBigNumber()",function(){cov_2lfohzyb3j.f[5]++;cov_2lfohzyb3j.s[23]++;it("returns correct value",function(){cov_2lfohzyb3j.f[6]++;let bytes=(cov_2lfohzyb3j.s[24]++,[0xf5,0xe2,0xc5,0x17]);let expectedValue=(cov_2lfohzyb3j.s[25]++,new _bignumber.BigNumber("f5e2c517",16));let result=(cov_2lfohzyb3j.s[26]++,utils.toBigNumber(bytes));cov_2lfohzyb3j.s[27]++;_chai.assert.equal(result.toString(),expectedValue.toString());});});cov_2lfohzyb3j.s[28]++;describe("toSignedBigNumber()",function(){cov_2lfohzyb3j.f[7]++;cov_2lfohzyb3j.s[29]++;it("returns correct negative value",function(){cov_2lfohzyb3j.f[8]++;let bytes=(cov_2lfohzyb3j.s[30]++,[0xf5,0xe2,0xc5,0x17]);let raw=(cov_2lfohzyb3j.s[31]++,new _bignumber.BigNumber("f5e2c517",16));let bitfipped=(cov_2lfohzyb3j.s[32]++,new _bignumber.BigNumber(raw.toString(2).replace(/0/g,"x").replace(/1/g,"0").replace(/x/g,"1"),2));let expectedValue=(cov_2lfohzyb3j.s[33]++,bitfipped.plus(1).negated());let result=(cov_2lfohzyb3j.s[34]++,utils.toSignedBigNumber(bytes));cov_2lfohzyb3j.s[35]++;_chai.assert.equal(result.toString(),expectedValue.toString());});cov_2lfohzyb3j.s[36]++;it("returns correct positive value",function(){cov_2lfohzyb3j.f[9]++;let bytes=(cov_2lfohzyb3j.s[37]++,[0x05,0xe2,0xc5,0x17]);let raw=(cov_2lfohzyb3j.s[38]++,new _bignumber.BigNumber("05e2c517",16));let expectedValue=(cov_2lfohzyb3j.s[39]++,raw);let result=(cov_2lfohzyb3j.s[40]++,utils.toSignedBigNumber(bytes));cov_2lfohzyb3j.s[41]++;_chai.assert.equal(result.toString(),expectedValue.toString());});});cov_2lfohzyb3j.s[42]++;describe("toHexString()",function(){cov_2lfohzyb3j.f[10]++;cov_2lfohzyb3j.s[43]++;it("returns correct representation with full bytes",function(){cov_2lfohzyb3j.f[11]++;cov_2lfohzyb3j.s[44]++;_chai.assert.equal(utils.toHexString([0x05,0x11]),"0x0511");cov_2lfohzyb3j.s[45]++;_chai.assert.equal(utils.toHexString([0xff,0x00,0xff]),"0xff00ff");});cov_2lfohzyb3j.s[46]++;it("allows removing leading zeroes",function(){cov_2lfohzyb3j.f[12]++;cov_2lfohzyb3j.s[47]++;_chai.assert.equal(utils.toHexString([0x00,0x00,0xcc],true),"0xcc");});});});

/***/ }),
/* 85 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var cov_rwl3jg8ck=function(){var path="/Users/gnidan/src/work/truffle/packages/truffle-debugger/test/evm.js",hash="459a895bf30d3a8aee5ef52005d560b5396833a1",Function=function(){}.constructor,global=new Function('return this')(),gcv="__coverage__",coverageData={path:"/Users/gnidan/src/work/truffle/packages/truffle-debugger/test/evm.js",statementMap:{"0":{start:{line:3,column:25},end:{line:3,column:74}},"1":{start:{line:5,column:25},end:{line:5,column:67}},"2":{start:{line:7,column:13},end:{line:7,column:29}},"3":{start:{line:9,column:14},end:{line:9,column:44}},"4":{start:{line:11,column:12},end:{line:11,column:27}},"5":{start:{line:13,column:18},end:{line:13,column:40}},"6":{start:{line:15,column:19},end:{line:15,column:54}},"7":{start:{line:17,column:11},end:{line:17,column:26}},"8":{start:{line:19,column:12},end:{line:19,column:40}},"9":{start:{line:21,column:15},end:{line:21,column:35}},"10":{start:{line:23,column:16},end:{line:23,column:39}},"11":{start:{line:25,column:17},end:{line:25,column:50}},"12":{start:{line:27,column:17},end:{line:27,column:45}},"13":{start:{line:29,column:18},end:{line:29,column:52}},"14":{start:{line:31,column:39},end:{line:31,column:93}},"15":{start:{line:33,column:14},end:{line:33,column:51}},"16":{start:{line:35,column:16},end:{line:56,column:1}},"17":{start:{line:58,column:16},end:{line:65,column:1}},"18":{start:{line:67,column:20},end:{line:83,column:1}},"19":{start:{line:85,column:14},end:{line:88,column:1}},"20":{start:{line:90,column:17},end:{line:92,column:1}},"21":{start:{line:94,column:0},end:{line:177,column:3}},"22":{start:{line:102,column:2},end:{line:105,column:6}},"23":{start:{line:103,column:4},end:{line:103,column:86}},"24":{start:{line:104,column:4},end:{line:104,column:39}},"25":{start:{line:107,column:2},end:{line:114,column:6}},"26":{start:{line:108,column:4},end:{line:108,column:24}},"27":{start:{line:110,column:19},end:{line:110,column:86}},"28":{start:{line:111,column:4},end:{line:111,column:41}},"29":{start:{line:112,column:4},end:{line:112,column:35}},"30":{start:{line:113,column:4},end:{line:113,column:27}},"31":{start:{line:116,column:2},end:{line:176,column:5}},"32":{start:{line:117,column:4},end:{line:140,column:8}},"33":{start:{line:118,column:26},end:{line:118,column:27}},"34":{start:{line:120,column:21},end:{line:120,column:56}},"35":{start:{line:121,column:20},end:{line:121,column:40}},"36":{start:{line:122,column:19},end:{line:122,column:29}},"37":{start:{line:124,column:19},end:{line:128,column:8}},"38":{start:{line:130,column:20},end:{line:130,column:36}},"39":{start:{line:133,column:6},end:{line:139,column:24}},"40":{start:{line:134,column:8},end:{line:134,column:37}},"41":{start:{line:136,column:21},end:{line:136,column:79}},"42":{start:{line:138,column:8},end:{line:138,column:51}},"43":{start:{line:142,column:4},end:{line:175,column:8}},"44":{start:{line:144,column:21},end:{line:144,column:56}},"45":{start:{line:145,column:20},end:{line:145,column:40}},"46":{start:{line:146,column:19},end:{line:146,column:29}},"47":{start:{line:148,column:19},end:{line:152,column:8}},"48":{start:{line:154,column:20},end:{line:154,column:36}},"49":{start:{line:158,column:34},end:{line:158,column:46}},"50":{start:{line:159,column:27},end:{line:159,column:87}},"51":{start:{line:163,column:6},end:{line:172,column:24}},"52":{start:{line:164,column:8},end:{line:164,column:37}},"53":{start:{line:166,column:27},end:{line:166,column:85}},"54":{start:{line:167,column:24},end:{line:167,column:65}},"55":{start:{line:169,column:8},end:{line:171,column:9}},"56":{start:{line:170,column:10},end:{line:170,column:44}},"57":{start:{line:174,column:6},end:{line:174,column:68}}},fnMap:{"0":{name:"_interopRequireDefault",decl:{start:{line:31,column:9},end:{line:31,column:31}},loc:{start:{line:31,column:37},end:{line:31,column:95}},line:31},"1":{name:"(anonymous_1)",decl:{start:{line:94,column:26},end:{line:94,column:27}},loc:{start:{line:94,column:38},end:{line:177,column:1}},line:94},"2":{name:"(anonymous_2)",decl:{start:{line:102,column:60},end:{line:102,column:61}},loc:{start:{line:102,column:73},end:{line:105,column:3}},line:102},"3":{name:"(anonymous_3)",decl:{start:{line:107,column:76},end:{line:107,column:77}},loc:{start:{line:107,column:89},end:{line:114,column:3}},line:107},"4":{name:"(anonymous_4)",decl:{start:{line:116,column:29},end:{line:116,column:30}},loc:{start:{line:116,column:41},end:{line:176,column:3}},line:116},"5":{name:"(anonymous_5)",decl:{start:{line:117,column:90},end:{line:117,column:91}},loc:{start:{line:117,column:103},end:{line:140,column:5}},line:117},"6":{name:"(anonymous_6)",decl:{start:{line:142,column:69},end:{line:142,column:70}},loc:{start:{line:142,column:82},end:{line:175,column:5}},line:142}},branchMap:{"0":{loc:{start:{line:31,column:46},end:{line:31,column:92}},type:"cond-expr",locations:[{start:{line:31,column:70},end:{line:31,column:73}},{start:{line:31,column:76},end:{line:31,column:92}}],line:31},"1":{loc:{start:{line:31,column:46},end:{line:31,column:67}},type:"binary-expr",locations:[{start:{line:31,column:46},end:{line:31,column:49}},{start:{line:31,column:53},end:{line:31,column:67}}],line:31},"2":{loc:{start:{line:169,column:8},end:{line:171,column:9}},type:"if",locations:[{start:{line:169,column:8},end:{line:171,column:9}},{start:{line:169,column:8},end:{line:171,column:9}}],line:169}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0},f:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0},b:{"0":[0,0],"1":[0,0],"2":[0,0]},inputSourceMap:{version:3,sources:["test/evm.js"],names:["debug","__OUTER","__INNER","__MIGRATION","sources","migrations","describe","provider","web3","abstractions","artifacts","files","before","Ganache","seed","gasLimit","Web3","timeout","prepared","it","maxExpected","instance","Inner","deployed","receipt","run","txHash","tx","bugger","Debugger","forTx","contracts","session","connect","stepped","stepNext","actual","view","evm","current","callstack","length","assert","isAtMost","Outer","expectedDepthSequence","actualSequence","currentDepth","lastKnown","push","deepEqual"],mappings:"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",file:"evm.js",sourceRoot:"/Users/gnidan/src/work/truffle/packages/truffle-debugger",sourcesContent:["import debugModule from \"debug\";\nconst debug = debugModule(\"test:solidity\");\n\nimport { assert } from \"chai\";\n\nimport Ganache from \"ganache-cli\";\nimport Web3 from \"web3\";\n\nimport { prepareContracts } from \"./helpers\";\nimport Debugger from \"lib/debugger\";\n\nimport evm from \"lib/evm/selectors\";\n\n\nconst __OUTER = `\npragma solidity ^0.4.18;\n\nimport \"./Inner.sol\";\n\ncontract Outer {\n  event Called();\n\n  Inner inner;\n\n  constructor(address _inner) public {\n    inner = Inner(_inner);\n  }\n\n  function runSingle() public {\n  }\n\n  function run() public {\n    inner.run();\n  }\n}\n`;\n\n\nconst __INNER = `\npragma solidity ^0.4.18;\n\ncontract Inner {\n  function run() public {\n  }\n}\n`;\n\nconst __MIGRATION = `\nlet Outer = artifacts.require(\"Outer\");\nlet Inner = artifacts.require(\"Inner\");\n\nmodule.exports = function(deployer) {\n  return deployer\n    .then(function() {\n      return deployer.deploy(Inner);\n    })\n    .then(function() {\n      return Inner.deployed();\n    })\n    .then(function(inner) {\n      return deployer.deploy(Outer, inner.address);\n    });\n};\n`;\n\nlet sources = {\n  \"Inner.sol\": __INNER,\n  \"Outer.sol\": __OUTER,\n}\n\nlet migrations = {\n  \"2_deploy_contracts.js\": __MIGRATION,\n};\n\ndescribe(\"EVM Debugging\", function() {\n  var provider;\n  var web3;\n\n  var abstractions;\n  var artifacts;\n  var files;\n\n  before(\"Create Provider\", async function() {\n    provider = Ganache.provider({seed: \"debugger\", gasLimit: 7000000});\n    web3 = new Web3(provider);\n  });\n\n  before(\"Prepare contracts and artifacts\", async function() {\n    this.timeout(30000);\n\n    let prepared = await prepareContracts(provider, sources, migrations)\n    abstractions = prepared.abstractions;\n    artifacts = prepared.artifacts;\n    files = prepared.files;\n  });\n\n  describe(\"Function Depth\", function() {\n    it(\"remains at 1 in absence of cross-contract calls\", async function() {\n      const maxExpected = 1;\n\n      let instance = await abstractions.Inner.deployed();\n      let receipt = await instance.run();\n      let txHash = receipt.tx;\n\n      let bugger = await Debugger.forTx(txHash, {\n        provider,\n        files,\n        contracts: artifacts\n      });\n\n      let session = bugger.connect();\n      var stepped;  // session steppers return false when done\n\n      do {\n        stepped = session.stepNext();\n\n        let actual = session.view(evm.current.callstack).length;\n\n        assert.isAtMost(actual, maxExpected);\n\n      } while(stepped);\n\n    });\n\n    it(\"tracks callstack correctly\", async function() {\n      // prepare\n      let instance = await abstractions.Outer.deployed();\n      let receipt = await instance.run();\n      let txHash = receipt.tx;\n\n      let bugger = await Debugger.forTx(txHash, {\n        provider,\n        files,\n        contracts: artifacts\n      });\n\n      let session = bugger.connect();\n\n      // follow callstack length values in list\n      // see source above\n      let expectedDepthSequence = [1,2,1,0];\n      let actualSequence = [session.view(evm.current.callstack).length];\n\n      var stepped;\n\n      do {\n        stepped = session.stepNext();\n\n        let currentDepth = session.view(evm.current.callstack).length;\n        let lastKnown = actualSequence[actualSequence.length - 1];\n\n        if (currentDepth !== lastKnown) {\n          actualSequence.push(currentDepth);\n        }\n      } while(stepped);\n\n      assert.deepEqual(actualSequence, expectedDepthSequence);\n    });\n  });\n});\n"]},_coverageSchema:"332fd63041d2c1bcb487cc26dd0d5f7d97098a6c"},coverage=global[gcv]||(global[gcv]={});if(coverage[path]&&coverage[path].hash===hash){return coverage[path];}coverageData.hash=hash;return coverage[path]=coverageData;}();var _asyncToGenerator2=(cov_rwl3jg8ck.s[0]++,__webpack_require__(7));var _asyncToGenerator3=(cov_rwl3jg8ck.s[1]++,_interopRequireDefault(_asyncToGenerator2));var _debug=(cov_rwl3jg8ck.s[2]++,__webpack_require__(0));var _debug2=(cov_rwl3jg8ck.s[3]++,_interopRequireDefault(_debug));var _chai=(cov_rwl3jg8ck.s[4]++,__webpack_require__(12));var _ganacheCli=(cov_rwl3jg8ck.s[5]++,__webpack_require__(16));var _ganacheCli2=(cov_rwl3jg8ck.s[6]++,_interopRequireDefault(_ganacheCli));var _web=(cov_rwl3jg8ck.s[7]++,__webpack_require__(8));var _web2=(cov_rwl3jg8ck.s[8]++,_interopRequireDefault(_web));var _helpers=(cov_rwl3jg8ck.s[9]++,__webpack_require__(13));var _debugger=(cov_rwl3jg8ck.s[10]++,__webpack_require__(18));var _debugger2=(cov_rwl3jg8ck.s[11]++,_interopRequireDefault(_debugger));var _selectors=(cov_rwl3jg8ck.s[12]++,__webpack_require__(5));var _selectors2=(cov_rwl3jg8ck.s[13]++,_interopRequireDefault(_selectors));function _interopRequireDefault(obj){cov_rwl3jg8ck.f[0]++;cov_rwl3jg8ck.s[14]++;return(cov_rwl3jg8ck.b[1][0]++,obj)&&(cov_rwl3jg8ck.b[1][1]++,obj.__esModule)?(cov_rwl3jg8ck.b[0][0]++,obj):(cov_rwl3jg8ck.b[0][1]++,{default:obj});}const debug=(cov_rwl3jg8ck.s[15]++,(0,_debug2.default)("test:solidity"));const __OUTER=(cov_rwl3jg8ck.s[16]++,`
pragma solidity ^0.4.18;

import "./Inner.sol";

contract Outer {
  event Called();

  Inner inner;

  constructor(address _inner) public {
    inner = Inner(_inner);
  }

  function runSingle() public {
  }

  function run() public {
    inner.run();
  }
}
`);const __INNER=(cov_rwl3jg8ck.s[17]++,`
pragma solidity ^0.4.18;

contract Inner {
  function run() public {
  }
}
`);const __MIGRATION=(cov_rwl3jg8ck.s[18]++,`
let Outer = artifacts.require("Outer");
let Inner = artifacts.require("Inner");

module.exports = function(deployer) {
  return deployer
    .then(function() {
      return deployer.deploy(Inner);
    })
    .then(function() {
      return Inner.deployed();
    })
    .then(function(inner) {
      return deployer.deploy(Outer, inner.address);
    });
};
`);let sources=(cov_rwl3jg8ck.s[19]++,{"Inner.sol":__INNER,"Outer.sol":__OUTER});let migrations=(cov_rwl3jg8ck.s[20]++,{"2_deploy_contracts.js":__MIGRATION});cov_rwl3jg8ck.s[21]++;describe("EVM Debugging",function(){cov_rwl3jg8ck.f[1]++;var provider;var web3;var abstractions;var artifacts;var files;cov_rwl3jg8ck.s[22]++;before("Create Provider",(0,_asyncToGenerator3.default)(function*(){cov_rwl3jg8ck.f[2]++;cov_rwl3jg8ck.s[23]++;provider=_ganacheCli2.default.provider({seed:"debugger",gasLimit:7000000});cov_rwl3jg8ck.s[24]++;web3=new _web2.default(provider);}));cov_rwl3jg8ck.s[25]++;before("Prepare contracts and artifacts",(0,_asyncToGenerator3.default)(function*(){cov_rwl3jg8ck.f[3]++;cov_rwl3jg8ck.s[26]++;this.timeout(30000);let prepared=(cov_rwl3jg8ck.s[27]++,yield(0,_helpers.prepareContracts)(provider,sources,migrations));cov_rwl3jg8ck.s[28]++;abstractions=prepared.abstractions;cov_rwl3jg8ck.s[29]++;artifacts=prepared.artifacts;cov_rwl3jg8ck.s[30]++;files=prepared.files;}));cov_rwl3jg8ck.s[31]++;describe("Function Depth",function(){cov_rwl3jg8ck.f[4]++;cov_rwl3jg8ck.s[32]++;it("remains at 1 in absence of cross-contract calls",(0,_asyncToGenerator3.default)(function*(){cov_rwl3jg8ck.f[5]++;const maxExpected=(cov_rwl3jg8ck.s[33]++,1);let instance=(cov_rwl3jg8ck.s[34]++,yield abstractions.Inner.deployed());let receipt=(cov_rwl3jg8ck.s[35]++,yield instance.run());let txHash=(cov_rwl3jg8ck.s[36]++,receipt.tx);let bugger=(cov_rwl3jg8ck.s[37]++,yield _debugger2.default.forTx(txHash,{provider,files,contracts:artifacts}));let session=(cov_rwl3jg8ck.s[38]++,bugger.connect());var stepped;cov_rwl3jg8ck.s[39]++;do{cov_rwl3jg8ck.s[40]++;stepped=session.stepNext();let actual=(cov_rwl3jg8ck.s[41]++,session.view(_selectors2.default.current.callstack).length);cov_rwl3jg8ck.s[42]++;_chai.assert.isAtMost(actual,maxExpected);}while(stepped);}));cov_rwl3jg8ck.s[43]++;it("tracks callstack correctly",(0,_asyncToGenerator3.default)(function*(){cov_rwl3jg8ck.f[6]++;let instance=(cov_rwl3jg8ck.s[44]++,yield abstractions.Outer.deployed());let receipt=(cov_rwl3jg8ck.s[45]++,yield instance.run());let txHash=(cov_rwl3jg8ck.s[46]++,receipt.tx);let bugger=(cov_rwl3jg8ck.s[47]++,yield _debugger2.default.forTx(txHash,{provider,files,contracts:artifacts}));let session=(cov_rwl3jg8ck.s[48]++,bugger.connect());let expectedDepthSequence=(cov_rwl3jg8ck.s[49]++,[1,2,1,0]);let actualSequence=(cov_rwl3jg8ck.s[50]++,[session.view(_selectors2.default.current.callstack).length]);var stepped;cov_rwl3jg8ck.s[51]++;do{cov_rwl3jg8ck.s[52]++;stepped=session.stepNext();let currentDepth=(cov_rwl3jg8ck.s[53]++,session.view(_selectors2.default.current.callstack).length);let lastKnown=(cov_rwl3jg8ck.s[54]++,actualSequence[actualSequence.length-1]);cov_rwl3jg8ck.s[55]++;if(currentDepth!==lastKnown){cov_rwl3jg8ck.b[2][0]++;cov_rwl3jg8ck.s[56]++;actualSequence.push(currentDepth);}else{cov_rwl3jg8ck.b[2][1]++;}}while(stepped);cov_rwl3jg8ck.s[57]++;_chai.assert.deepEqual(actualSequence,expectedDepthSequence);}));});});

/***/ }),
/* 86 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var cov_274zv51kg=function(){var path="/Users/gnidan/src/work/truffle/packages/truffle-debugger/test/solidity.js",hash="540d11b5c098bdbc5c61cbc080a73bb2674c847f",Function=function(){}.constructor,global=new Function('return this')(),gcv="__coverage__",coverageData={path:"/Users/gnidan/src/work/truffle/packages/truffle-debugger/test/solidity.js",statementMap:{"0":{start:{line:3,column:25},end:{line:3,column:74}},"1":{start:{line:5,column:25},end:{line:5,column:67}},"2":{start:{line:7,column:13},end:{line:7,column:29}},"3":{start:{line:9,column:14},end:{line:9,column:44}},"4":{start:{line:11,column:12},end:{line:11,column:27}},"5":{start:{line:13,column:18},end:{line:13,column:40}},"6":{start:{line:15,column:19},end:{line:15,column:54}},"7":{start:{line:17,column:11},end:{line:17,column:26}},"8":{start:{line:19,column:12},end:{line:19,column:40}},"9":{start:{line:21,column:15},end:{line:21,column:35}},"10":{start:{line:23,column:16},end:{line:23,column:39}},"11":{start:{line:25,column:17},end:{line:25,column:50}},"12":{start:{line:27,column:17},end:{line:27,column:50}},"13":{start:{line:29,column:18},end:{line:29,column:52}},"14":{start:{line:31,column:39},end:{line:31,column:93}},"15":{start:{line:33,column:14},end:{line:33,column:51}},"16":{start:{line:35,column:22},end:{line:45,column:1}},"17":{start:{line:47,column:22},end:{line:79,column:1}},"18":{start:{line:81,column:14},end:{line:84,column:1}},"19":{start:{line:86,column:0},end:{line:199,column:3}},"20":{start:{line:94,column:2},end:{line:97,column:6}},"21":{start:{line:95,column:4},end:{line:95,column:86}},"22":{start:{line:96,column:4},end:{line:96,column:39}},"23":{start:{line:99,column:2},end:{line:106,column:6}},"24":{start:{line:100,column:4},end:{line:100,column:24}},"25":{start:{line:102,column:19},end:{line:102,column:74}},"26":{start:{line:103,column:4},end:{line:103,column:41}},"27":{start:{line:104,column:4},end:{line:104,column:35}},"28":{start:{line:105,column:4},end:{line:105,column:27}},"29":{start:{line:108,column:2},end:{line:136,column:6}},"30":{start:{line:110,column:19},end:{line:110,column:59}},"31":{start:{line:111,column:18},end:{line:111,column:38}},"32":{start:{line:112,column:17},end:{line:112,column:27}},"33":{start:{line:114,column:17},end:{line:118,column:6}},"34":{start:{line:120,column:18},end:{line:120,column:34}},"35":{start:{line:123,column:21},end:{line:123,column:62}},"36":{start:{line:124,column:28},end:{line:124,column:33}},"37":{start:{line:126,column:4},end:{line:135,column:32}},"38":{start:{line:127,column:6},end:{line:127,column:40}},"39":{start:{line:129,column:6},end:{line:134,column:7}},"40":{start:{line:130,column:20},end:{line:130,column:79}},"41":{start:{line:131,column:8},end:{line:131,column:55}},"42":{start:{line:133,column:8},end:{line:133,column:33}},"43":{start:{line:138,column:2},end:{line:198,column:5}},"44":{start:{line:139,column:4},end:{line:162,column:8}},"45":{start:{line:140,column:26},end:{line:140,column:27}},"46":{start:{line:142,column:21},end:{line:142,column:61}},"47":{start:{line:143,column:20},end:{line:143,column:40}},"48":{start:{line:144,column:19},end:{line:144,column:29}},"49":{start:{line:146,column:19},end:{line:150,column:8}},"50":{start:{line:152,column:20},end:{line:152,column:36}},"51":{start:{line:155,column:6},end:{line:161,column:24}},"52":{start:{line:156,column:8},end:{line:156,column:37}},"53":{start:{line:158,column:21},end:{line:158,column:76}},"54":{start:{line:160,column:8},end:{line:160,column:51}},"55":{start:{line:164,column:4},end:{line:197,column:8}},"56":{start:{line:166,column:21},end:{line:166,column:61}},"57":{start:{line:167,column:20},end:{line:167,column:40}},"58":{start:{line:168,column:19},end:{line:168,column:29}},"59":{start:{line:170,column:19},end:{line:174,column:8}},"60":{start:{line:176,column:20},end:{line:176,column:36}},"61":{start:{line:180,column:34},end:{line:180,column:58}},"62":{start:{line:181,column:27},end:{line:181,column:84}},"63":{start:{line:185,column:6},end:{line:194,column:24}},"64":{start:{line:186,column:8},end:{line:186,column:37}},"65":{start:{line:188,column:27},end:{line:188,column:82}},"66":{start:{line:189,column:24},end:{line:189,column:65}},"67":{start:{line:191,column:8},end:{line:193,column:9}},"68":{start:{line:192,column:10},end:{line:192,column:44}},"69":{start:{line:196,column:6},end:{line:196,column:68}}},fnMap:{"0":{name:"_interopRequireDefault",decl:{start:{line:31,column:9},end:{line:31,column:31}},loc:{start:{line:31,column:37},end:{line:31,column:95}},line:31},"1":{name:"(anonymous_1)",decl:{start:{line:86,column:31},end:{line:86,column:32}},loc:{start:{line:86,column:43},end:{line:199,column:1}},line:86},"2":{name:"(anonymous_2)",decl:{start:{line:94,column:60},end:{line:94,column:61}},loc:{start:{line:94,column:73},end:{line:97,column:3}},line:94},"3":{name:"(anonymous_3)",decl:{start:{line:99,column:76},end:{line:99,column:77}},loc:{start:{line:99,column:89},end:{line:106,column:3}},line:99},"4":{name:"(anonymous_4)",decl:{start:{line:108,column:85},end:{line:108,column:86}},loc:{start:{line:108,column:98},end:{line:136,column:3}},line:108},"5":{name:"(anonymous_5)",decl:{start:{line:138,column:29},end:{line:138,column:30}},loc:{start:{line:138,column:41},end:{line:198,column:3}},line:138},"6":{name:"(anonymous_6)",decl:{start:{line:139,column:90},end:{line:139,column:91}},loc:{start:{line:139,column:103},end:{line:162,column:5}},line:139},"7":{name:"(anonymous_7)",decl:{start:{line:164,column:61},end:{line:164,column:62}},loc:{start:{line:164,column:74},end:{line:197,column:5}},line:164}},branchMap:{"0":{loc:{start:{line:31,column:46},end:{line:31,column:92}},type:"cond-expr",locations:[{start:{line:31,column:70},end:{line:31,column:73}},{start:{line:31,column:76},end:{line:31,column:92}}],line:31},"1":{loc:{start:{line:31,column:46},end:{line:31,column:67}},type:"binary-expr",locations:[{start:{line:31,column:46},end:{line:31,column:49}},{start:{line:31,column:53},end:{line:31,column:67}}],line:31},"2":{loc:{start:{line:129,column:6},end:{line:134,column:7}},type:"if",locations:[{start:{line:129,column:6},end:{line:134,column:7}},{start:{line:129,column:6},end:{line:134,column:7}}],line:129},"3":{loc:{start:{line:191,column:8},end:{line:193,column:9}},type:"if",locations:[{start:{line:191,column:8},end:{line:193,column:9}},{start:{line:191,column:8},end:{line:193,column:9}}],line:191}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0},f:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0},b:{"0":[0,0],"1":[0,0],"2":[0,0],"3":[0,0]},inputSourceMap:{version:3,sources:["test/solidity.js"],names:["debug","__SINGLE_CALL","__NESTED_CALL","sources","describe","provider","web3","abstractions","artifacts","files","before","Ganache","seed","gasLimit","Web3","timeout","prepared","it","instance","NestedCall","deployed","receipt","run","txHash","tx","bugger","Debugger","forTx","contracts","session","connect","breakpoint","address","line","breakpointStopped","continueUntil","finished","range","view","solidity","current","sourceRange","assert","equal","lines","start","maxExpected","SingleCall","stepped","stepNext","actual","functionDepth","isAtMost","expectedDepthSequence","actualSequence","currentDepth","lastKnown","length","push","deepEqual"],mappings:";;;;;;AAAA;;;;AAGA;;AAEA;;;;AACA;;;;AAEA;;AACA;;;;AAEA;;;;;;AAVA,MAAMA,QAAQ,qBAAY,eAAZ,CAAd;;AAaA,MAAMC,gBAAiB;;;;;;;;;;CAAvB;;AAaA,MAAMC,gBAAiB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAAvB;;AAmCA,IAAIC,UAAU;AACZ,oBAAkBF,aADN;AAEZ,oBAAkBC;AAFN,CAAd;;AAMAE,SAAS,oBAAT,EAA+B,YAAW;AACxC,MAAIC,QAAJ;AACA,MAAIC,IAAJ;;AAEA,MAAIC,YAAJ;AACA,MAAIC,SAAJ;AACA,MAAIC,KAAJ;;AAEAC,SAAO,iBAAP,kCAA0B,aAAiB;AACzCL,eAAWM,qBAAQN,QAAR,CAAiB,EAACO,MAAM,UAAP,EAAmBC,UAAU,OAA7B,EAAjB,CAAX;AACAP,WAAO,IAAIQ,aAAJ,CAAST,QAAT,CAAP;AACD,GAHD;;AAKAK,SAAO,iCAAP,kCAA0C,aAAiB;AACzD,SAAKK,OAAL,CAAa,KAAb;;AAEA,QAAIC,WAAW,MAAM,+BAAiBX,QAAjB,EAA2BF,OAA3B,CAArB;AACAI,mBAAeS,SAAST,YAAxB;AACAC,gBAAYQ,SAASR,SAArB;AACAC,YAAQO,SAASP,KAAjB;AACD,GAPD;;AASAQ,KAAG,8CAAH,kCAAmD,aAAiB;AAClE;AACA,QAAIC,WAAW,MAAMX,aAAaY,UAAb,CAAwBC,QAAxB,EAArB;AACA,QAAIC,UAAU,MAAMH,SAASI,GAAT,EAApB;AACA,QAAIC,SAASF,QAAQG,EAArB;;AAEA,QAAIC,SAAS,MAAMC,mBAASC,KAAT,CAAeJ,MAAf,EAAuB;AACxClB,cADwC;AAExCI,WAFwC;AAGxCmB,iBAAWpB;AAH6B,KAAvB,CAAnB;;AAMA,QAAIqB,UAAUJ,OAAOK,OAAP,EAAd;;AAEA;AACA,QAAIC,aAAa,EAAE,WAAWb,SAASc,OAAtB,EAA+BC,MAAM,EAArC,EAAjB;AACA,QAAIC,oBAAoB,KAAxB;;AAEA,OAAG;AACDL,cAAQM,aAAR,CAAsBJ,UAAtB;;AAEA,UAAI,CAACF,QAAQO,QAAb,EAAuB;AACrB,YAAIC,QAAQ,MAAMR,QAAQS,IAAR,CAAaC,oBAASC,OAAT,CAAiBC,WAA9B,CAAlB;AACAC,qBAAOC,KAAP,CAAaN,MAAMO,KAAN,CAAYC,KAAZ,CAAkBZ,IAA/B,EAAqC,EAArC;;AAEAC,4BAAoB,IAApB;AACD;AAEF,KAVD,QAUQ,CAACL,QAAQO,QAVjB;AAWD,GA7BD;;AA+BAhC,WAAS,gBAAT,EAA2B,YAAW;AACpCa,OAAG,iDAAH,kCAAsD,aAAiB;AACrE,YAAM6B,cAAc,CAApB;;AAEA,UAAI5B,WAAW,MAAMX,aAAawC,UAAb,CAAwB3B,QAAxB,EAArB;AACA,UAAIC,UAAU,MAAMH,SAASI,GAAT,EAApB;AACA,UAAIC,SAASF,QAAQG,EAArB;;AAEA,UAAIC,SAAS,MAAMC,mBAASC,KAAT,CAAeJ,MAAf,EAAuB;AACxClB,gBADwC;AAExCI,aAFwC;AAGxCmB,mBAAWpB;AAH6B,OAAvB,CAAnB;;AAMA,UAAIqB,UAAUJ,OAAOK,OAAP,EAAd;AACA,UAAIkB,OAAJ,CAdqE,CAcvD;;AAEd,SAAG;AACDA,kBAAUnB,QAAQoB,QAAR,EAAV;;AAEA,YAAIC,SAASrB,QAAQS,IAAR,CAAaC,oBAASC,OAAT,CAAiBW,aAA9B,CAAb;;AAEAT,qBAAOU,QAAP,CAAgBF,MAAhB,EAAwBJ,WAAxB;AAED,OAPD,QAOQE,OAPR;AASD,KAzBD;;AA2BA/B,OAAG,oBAAH,kCAAyB,aAAiB;AACxC;AACA,UAAIC,WAAW,MAAMX,aAAaY,UAAb,CAAwBC,QAAxB,EAArB;AACA,UAAIC,UAAU,MAAMH,SAASI,GAAT,EAApB;AACA,UAAIC,SAASF,QAAQG,EAArB;;AAEA,UAAIC,SAAS,MAAMC,mBAASC,KAAT,CAAeJ,MAAf,EAAuB;AACxClB,gBADwC;AAExCI,aAFwC;AAGxCmB,mBAAWpB;AAH6B,OAAvB,CAAnB;;AAMA,UAAIqB,UAAUJ,OAAOK,OAAP,EAAd;;AAEA;AACA;AACA,UAAIuB,wBAAwB,CAAC,CAAD,EAAG,CAAH,EAAK,CAAL,EAAO,CAAP,EAAS,CAAT,EAAW,CAAX,EAAa,CAAb,EAAe,CAAf,CAA5B;AACA,UAAIC,iBAAiB,CAACzB,QAAQS,IAAR,CAAaC,oBAASC,OAAT,CAAiBW,aAA9B,CAAD,CAArB;;AAEA,UAAIH,OAAJ;;AAEA,SAAG;AACDA,kBAAUnB,QAAQoB,QAAR,EAAV;;AAEA,YAAIM,eAAe1B,QAAQS,IAAR,CAAaC,oBAASC,OAAT,CAAiBW,aAA9B,CAAnB;AACA,YAAIK,YAAYF,eAAeA,eAAeG,MAAf,GAAwB,CAAvC,CAAhB;;AAEA,YAAIF,iBAAiBC,SAArB,EAAgC;AAC9BF,yBAAeI,IAAf,CAAoBH,YAApB;AACD;AACF,OATD,QASQP,OATR;;AAWAN,mBAAOiB,SAAP,CAAiBL,cAAjB,EAAiCD,qBAAjC;AACD,KAjCD;AAkCD,GA9DD;AA+DD,CApHD",file:"solidity.js",sourceRoot:"/Users/gnidan/src/work/truffle/packages/truffle-debugger",sourcesContent:["import debugModule from \"debug\";\nconst debug = debugModule(\"test:solidity\");\n\nimport { assert } from \"chai\";\n\nimport Ganache from \"ganache-cli\";\nimport Web3 from \"web3\";\n\nimport { prepareContracts } from \"./helpers\";\nimport Debugger from \"lib/debugger\";\n\nimport solidity from \"lib/solidity/selectors\";\n\n\nconst __SINGLE_CALL = `\npragma solidity ^0.4.18;\n\ncontract SingleCall {\n  event Called();\n\n  function run() public {\n    emit Called();\n  }\n}\n`;\n\n\nconst __NESTED_CALL = `pragma solidity ^0.4.18;\n\ncontract NestedCall {\n  event First();\n  event Second();\n\n  // run()\n  //   first()    1\n  //     inner()  2\n  //       event  3\n  //              2\n  //   second     1\n  //     event    2\n  //              1\n  function run() public {\n    first();\n    second();\n  }\n\n  function first() public {\n    inner();\n  }\n\n  function inner() public {\n    emit First();\n  }\n\n  function second() public {\n    emit Second();\n  }\n\n}\n`;\n\n\nlet sources = {\n  \"SingleCall.sol\": __SINGLE_CALL,\n  \"NestedCall.sol\": __NESTED_CALL,\n}\n\n\ndescribe(\"Solidity Debugging\", function() {\n  var provider;\n  var web3;\n\n  var abstractions;\n  var artifacts;\n  var files;\n\n  before(\"Create Provider\", async function() {\n    provider = Ganache.provider({seed: \"debugger\", gasLimit: 7000000});\n    web3 = new Web3(provider);\n  });\n\n  before(\"Prepare contracts and artifacts\", async function() {\n    this.timeout(30000);\n\n    let prepared = await prepareContracts(provider, sources)\n    abstractions = prepared.abstractions;\n    artifacts = prepared.artifacts;\n    files = prepared.files;\n  });\n\n  it(\"exposes functionality to stop at breakpoints\", async function() {\n    // prepare\n    let instance = await abstractions.NestedCall.deployed();\n    let receipt = await instance.run();\n    let txHash = receipt.tx;\n\n    let bugger = await Debugger.forTx(txHash, {\n      provider,\n      files,\n      contracts: artifacts\n    });\n\n    let session = bugger.connect();\n\n    // at `second();`\n    let breakpoint = { \"address\": instance.address, line: 16 }\n    let breakpointStopped = false;\n\n    do {\n      session.continueUntil(breakpoint);\n\n      if (!session.finished) {\n        let range = await session.view(solidity.current.sourceRange);\n        assert.equal(range.lines.start.line, 16);\n\n        breakpointStopped = true;\n      }\n\n    } while(!session.finished);\n  });\n\n  describe(\"Function Depth\", function() {\n    it(\"remains at 1 in absence of inner function calls\", async function() {\n      const maxExpected = 1;\n\n      let instance = await abstractions.SingleCall.deployed();\n      let receipt = await instance.run();\n      let txHash = receipt.tx;\n\n      let bugger = await Debugger.forTx(txHash, {\n        provider,\n        files,\n        contracts: artifacts\n      });\n\n      let session = bugger.connect();\n      var stepped;  // session steppers return false when done\n\n      do {\n        stepped = session.stepNext();\n\n        let actual = session.view(solidity.current.functionDepth);\n\n        assert.isAtMost(actual, maxExpected);\n\n      } while(stepped);\n\n    });\n\n    it(\"spelunks correctly\", async function() {\n      // prepare\n      let instance = await abstractions.NestedCall.deployed();\n      let receipt = await instance.run();\n      let txHash = receipt.tx;\n\n      let bugger = await Debugger.forTx(txHash, {\n        provider,\n        files,\n        contracts: artifacts\n      });\n\n      let session = bugger.connect();\n\n      // follow functionDepth values in list\n      // see source above\n      let expectedDepthSequence = [1,2,3,2,1,2,1,0];\n      let actualSequence = [session.view(solidity.current.functionDepth)];\n\n      var stepped;\n\n      do {\n        stepped = session.stepNext();\n\n        let currentDepth = session.view(solidity.current.functionDepth);\n        let lastKnown = actualSequence[actualSequence.length - 1];\n\n        if (currentDepth !== lastKnown) {\n          actualSequence.push(currentDepth);\n        }\n      } while(stepped);\n\n      assert.deepEqual(actualSequence, expectedDepthSequence);\n    });\n  });\n});\n"]},_coverageSchema:"332fd63041d2c1bcb487cc26dd0d5f7d97098a6c"},coverage=global[gcv]||(global[gcv]={});if(coverage[path]&&coverage[path].hash===hash){return coverage[path];}coverageData.hash=hash;return coverage[path]=coverageData;}();var _asyncToGenerator2=(cov_274zv51kg.s[0]++,__webpack_require__(7));var _asyncToGenerator3=(cov_274zv51kg.s[1]++,_interopRequireDefault(_asyncToGenerator2));var _debug=(cov_274zv51kg.s[2]++,__webpack_require__(0));var _debug2=(cov_274zv51kg.s[3]++,_interopRequireDefault(_debug));var _chai=(cov_274zv51kg.s[4]++,__webpack_require__(12));var _ganacheCli=(cov_274zv51kg.s[5]++,__webpack_require__(16));var _ganacheCli2=(cov_274zv51kg.s[6]++,_interopRequireDefault(_ganacheCli));var _web=(cov_274zv51kg.s[7]++,__webpack_require__(8));var _web2=(cov_274zv51kg.s[8]++,_interopRequireDefault(_web));var _helpers=(cov_274zv51kg.s[9]++,__webpack_require__(13));var _debugger=(cov_274zv51kg.s[10]++,__webpack_require__(18));var _debugger2=(cov_274zv51kg.s[11]++,_interopRequireDefault(_debugger));var _selectors=(cov_274zv51kg.s[12]++,__webpack_require__(6));var _selectors2=(cov_274zv51kg.s[13]++,_interopRequireDefault(_selectors));function _interopRequireDefault(obj){cov_274zv51kg.f[0]++;cov_274zv51kg.s[14]++;return(cov_274zv51kg.b[1][0]++,obj)&&(cov_274zv51kg.b[1][1]++,obj.__esModule)?(cov_274zv51kg.b[0][0]++,obj):(cov_274zv51kg.b[0][1]++,{default:obj});}const debug=(cov_274zv51kg.s[15]++,(0,_debug2.default)("test:solidity"));const __SINGLE_CALL=(cov_274zv51kg.s[16]++,`
pragma solidity ^0.4.18;

contract SingleCall {
  event Called();

  function run() public {
    emit Called();
  }
}
`);const __NESTED_CALL=(cov_274zv51kg.s[17]++,`pragma solidity ^0.4.18;

contract NestedCall {
  event First();
  event Second();

  // run()
  //   first()    1
  //     inner()  2
  //       event  3
  //              2
  //   second     1
  //     event    2
  //              1
  function run() public {
    first();
    second();
  }

  function first() public {
    inner();
  }

  function inner() public {
    emit First();
  }

  function second() public {
    emit Second();
  }

}
`);let sources=(cov_274zv51kg.s[18]++,{"SingleCall.sol":__SINGLE_CALL,"NestedCall.sol":__NESTED_CALL});cov_274zv51kg.s[19]++;describe("Solidity Debugging",function(){cov_274zv51kg.f[1]++;var provider;var web3;var abstractions;var artifacts;var files;cov_274zv51kg.s[20]++;before("Create Provider",(0,_asyncToGenerator3.default)(function*(){cov_274zv51kg.f[2]++;cov_274zv51kg.s[21]++;provider=_ganacheCli2.default.provider({seed:"debugger",gasLimit:7000000});cov_274zv51kg.s[22]++;web3=new _web2.default(provider);}));cov_274zv51kg.s[23]++;before("Prepare contracts and artifacts",(0,_asyncToGenerator3.default)(function*(){cov_274zv51kg.f[3]++;cov_274zv51kg.s[24]++;this.timeout(30000);let prepared=(cov_274zv51kg.s[25]++,yield(0,_helpers.prepareContracts)(provider,sources));cov_274zv51kg.s[26]++;abstractions=prepared.abstractions;cov_274zv51kg.s[27]++;artifacts=prepared.artifacts;cov_274zv51kg.s[28]++;files=prepared.files;}));cov_274zv51kg.s[29]++;it("exposes functionality to stop at breakpoints",(0,_asyncToGenerator3.default)(function*(){cov_274zv51kg.f[4]++;let instance=(cov_274zv51kg.s[30]++,yield abstractions.NestedCall.deployed());let receipt=(cov_274zv51kg.s[31]++,yield instance.run());let txHash=(cov_274zv51kg.s[32]++,receipt.tx);let bugger=(cov_274zv51kg.s[33]++,yield _debugger2.default.forTx(txHash,{provider,files,contracts:artifacts}));let session=(cov_274zv51kg.s[34]++,bugger.connect());let breakpoint=(cov_274zv51kg.s[35]++,{"address":instance.address,line:16});let breakpointStopped=(cov_274zv51kg.s[36]++,false);cov_274zv51kg.s[37]++;do{cov_274zv51kg.s[38]++;session.continueUntil(breakpoint);cov_274zv51kg.s[39]++;if(!session.finished){cov_274zv51kg.b[2][0]++;let range=(cov_274zv51kg.s[40]++,yield session.view(_selectors2.default.current.sourceRange));cov_274zv51kg.s[41]++;_chai.assert.equal(range.lines.start.line,16);cov_274zv51kg.s[42]++;breakpointStopped=true;}else{cov_274zv51kg.b[2][1]++;}}while(!session.finished);}));cov_274zv51kg.s[43]++;describe("Function Depth",function(){cov_274zv51kg.f[5]++;cov_274zv51kg.s[44]++;it("remains at 1 in absence of inner function calls",(0,_asyncToGenerator3.default)(function*(){cov_274zv51kg.f[6]++;const maxExpected=(cov_274zv51kg.s[45]++,1);let instance=(cov_274zv51kg.s[46]++,yield abstractions.SingleCall.deployed());let receipt=(cov_274zv51kg.s[47]++,yield instance.run());let txHash=(cov_274zv51kg.s[48]++,receipt.tx);let bugger=(cov_274zv51kg.s[49]++,yield _debugger2.default.forTx(txHash,{provider,files,contracts:artifacts}));let session=(cov_274zv51kg.s[50]++,bugger.connect());var stepped;cov_274zv51kg.s[51]++;do{cov_274zv51kg.s[52]++;stepped=session.stepNext();let actual=(cov_274zv51kg.s[53]++,session.view(_selectors2.default.current.functionDepth));cov_274zv51kg.s[54]++;_chai.assert.isAtMost(actual,maxExpected);}while(stepped);}));cov_274zv51kg.s[55]++;it("spelunks correctly",(0,_asyncToGenerator3.default)(function*(){cov_274zv51kg.f[7]++;let instance=(cov_274zv51kg.s[56]++,yield abstractions.NestedCall.deployed());let receipt=(cov_274zv51kg.s[57]++,yield instance.run());let txHash=(cov_274zv51kg.s[58]++,receipt.tx);let bugger=(cov_274zv51kg.s[59]++,yield _debugger2.default.forTx(txHash,{provider,files,contracts:artifacts}));let session=(cov_274zv51kg.s[60]++,bugger.connect());let expectedDepthSequence=(cov_274zv51kg.s[61]++,[1,2,3,2,1,2,1,0]);let actualSequence=(cov_274zv51kg.s[62]++,[session.view(_selectors2.default.current.functionDepth)]);var stepped;cov_274zv51kg.s[63]++;do{cov_274zv51kg.s[64]++;stepped=session.stepNext();let currentDepth=(cov_274zv51kg.s[65]++,session.view(_selectors2.default.current.functionDepth));let lastKnown=(cov_274zv51kg.s[66]++,actualSequence[actualSequence.length-1]);cov_274zv51kg.s[67]++;if(currentDepth!==lastKnown){cov_274zv51kg.b[3][0]++;cov_274zv51kg.s[68]++;actualSequence.push(currentDepth);}else{cov_274zv51kg.b[3][1]++;}}while(stepped);cov_274zv51kg.s[69]++;_chai.assert.deepEqual(actualSequence,expectedDepthSequence);}));});});

/***/ })
/******/ ]);
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnVuZGxlLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrL3VuaXZlcnNhbE1vZHVsZURlZmluaXRpb24iLCJ3ZWJwYWNrL2Jvb3RzdHJhcCBlNDlhNGJkMTU5ZTlhYWMzOTM2NyIsImV4dGVybmFsIFwiZGVidWdcIiIsImV4dGVybmFsIFwiYmFiZWwtcnVudGltZS9jb3JlLWpzL29iamVjdC9lbnRyaWVzXCIiLCJleHRlcm5hbCBcImJhYmVsLXJ1bnRpbWUvaGVscGVycy9leHRlbmRzXCIiLCJleHRlcm5hbCBcImJhYmVsLXJ1bnRpbWUvY29yZS1qcy9vYmplY3QvYXNzaWduXCIiLCIvVXNlcnMvZ25pZGFuL3NyYy93b3JrL3RydWZmbGUvcGFja2FnZXMvdHJ1ZmZsZS1kZWJ1Z2dlci9saWIvaGVscGVycy9pbmRleC5qcyIsIi9Vc2Vycy9nbmlkYW4vc3JjL3dvcmsvdHJ1ZmZsZS9wYWNrYWdlcy90cnVmZmxlLWRlYnVnZ2VyL2xpYi9ldm0vc2VsZWN0b3JzL2luZGV4LmpzIiwiL1VzZXJzL2duaWRhbi9zcmMvd29yay90cnVmZmxlL3BhY2thZ2VzL3RydWZmbGUtZGVidWdnZXIvbGliL3NvbGlkaXR5L3NlbGVjdG9ycy9pbmRleC5qcyIsImV4dGVybmFsIFwiYmFiZWwtcnVudGltZS9oZWxwZXJzL2FzeW5jVG9HZW5lcmF0b3JcIiIsImV4dGVybmFsIFwid2ViM1wiIiwiZXh0ZXJuYWwgXCJyZXNlbGVjdC10cmVlXCIiLCJleHRlcm5hbCBcInJlZHV4LXNhZ2EvZWZmZWN0c1wiIiwiL1VzZXJzL2duaWRhbi9zcmMvd29yay90cnVmZmxlL3BhY2thZ2VzL3RydWZmbGUtZGVidWdnZXIvbGliL2RhdGEvZGVjb2RlL3V0aWxzLmpzIiwiZXh0ZXJuYWwgXCJjaGFpXCIiLCIvVXNlcnMvZ25pZGFuL3NyYy93b3JrL3RydWZmbGUvcGFja2FnZXMvdHJ1ZmZsZS1kZWJ1Z2dlci90ZXN0L2hlbHBlcnMuanMiLCIvVXNlcnMvZ25pZGFuL3NyYy93b3JrL3RydWZmbGUvcGFja2FnZXMvdHJ1ZmZsZS1kZWJ1Z2dlci9saWIvYXN0L3NlbGVjdG9ycy9pbmRleC5qcyIsImV4dGVybmFsIFwicmVkdXhcIiIsImV4dGVybmFsIFwiZ2FuYWNoZS1jbGlcIiIsImV4dGVybmFsIFwiYmFiZWwtcnVudGltZS9jb3JlLWpzL29iamVjdC9rZXlzXCIiLCIvVXNlcnMvZ25pZGFuL3NyYy93b3JrL3RydWZmbGUvcGFja2FnZXMvdHJ1ZmZsZS1kZWJ1Z2dlci9saWIvZGVidWdnZXIuanMiLCIvVXNlcnMvZ25pZGFuL3NyYy93b3JrL3RydWZmbGUvcGFja2FnZXMvdHJ1ZmZsZS1kZWJ1Z2dlci9saWIvdHJhY2Uvc2VsZWN0b3JzL2luZGV4LmpzIiwiZXh0ZXJuYWwgXCJiaWdudW1iZXIuanNcIiIsIi9Vc2Vycy9nbmlkYW4vc3JjL3dvcmsvdHJ1ZmZsZS9wYWNrYWdlcy90cnVmZmxlLWRlYnVnZ2VyL2xpYi90cmFjZS9hY3Rpb25zL2luZGV4LmpzIiwiZXh0ZXJuYWwgXCJiYWJlbC1ydW50aW1lL2NvcmUtanMvc2V0XCIiLCJleHRlcm5hbCBcImJhYmVsLXJ1bnRpbWUvY29yZS1qcy9wcm9taXNlXCIiLCJleHRlcm5hbCBcImpzb24tcG9pbnRlclwiIiwiL1VzZXJzL2duaWRhbi9zcmMvd29yay90cnVmZmxlL3BhY2thZ2VzL3RydWZmbGUtZGVidWdnZXIvbGliL3Nlc3Npb24vYWN0aW9ucy9pbmRleC5qcyIsIi9Vc2Vycy9nbmlkYW4vc3JjL3dvcmsvdHJ1ZmZsZS9wYWNrYWdlcy90cnVmZmxlLWRlYnVnZ2VyL2xpYi9kYXRhL3NlbGVjdG9ycy9pbmRleC5qcyIsImV4dGVybmFsIFwidHJ1ZmZsZS1leHBlY3RcIiIsImV4dGVybmFsIFwiYmFiZWwtcnVudGltZS9jb3JlLWpzL29iamVjdC92YWx1ZXNcIiIsIi9Vc2Vycy9nbmlkYW4vc3JjL3dvcmsvdHJ1ZmZsZS9wYWNrYWdlcy90cnVmZmxlLWRlYnVnZ2VyL2xpYi9hc3QvbWFwLmpzIiwiL1VzZXJzL2duaWRhbi9zcmMvd29yay90cnVmZmxlL3BhY2thZ2VzL3RydWZmbGUtZGVidWdnZXIvbGliL2NvbnRyb2xsZXIvYWN0aW9ucy9pbmRleC5qcyIsIi9Vc2Vycy9nbmlkYW4vc3JjL3dvcmsvdHJ1ZmZsZS9wYWNrYWdlcy90cnVmZmxlLWRlYnVnZ2VyL2xpYi9kYXRhL3NhZ2FzL2luZGV4LmpzIiwiL1VzZXJzL2duaWRhbi9zcmMvd29yay90cnVmZmxlL3BhY2thZ2VzL3RydWZmbGUtZGVidWdnZXIvbGliL2RhdGEvYWN0aW9ucy9pbmRleC5qcyIsIi9Vc2Vycy9nbmlkYW4vc3JjL3dvcmsvdHJ1ZmZsZS9wYWNrYWdlcy90cnVmZmxlLWRlYnVnZ2VyL2xpYi90cmFjZS9zYWdhcy9pbmRleC5qcyIsIi9Vc2Vycy9nbmlkYW4vc3JjL3dvcmsvdHJ1ZmZsZS9wYWNrYWdlcy90cnVmZmxlLWRlYnVnZ2VyL2xpYi9zb2xpZGl0eS9hY3Rpb25zL2luZGV4LmpzIiwiL1VzZXJzL2duaWRhbi9zcmMvd29yay90cnVmZmxlL3BhY2thZ2VzL3RydWZmbGUtZGVidWdnZXIvbGliL2V2bS9hY3Rpb25zL2luZGV4LmpzIiwiL1VzZXJzL2duaWRhbi9zcmMvd29yay90cnVmZmxlL3BhY2thZ2VzL3RydWZmbGUtZGVidWdnZXIvbGliL3Nlc3Npb24vc2VsZWN0b3JzL2luZGV4LmpzIiwiL1VzZXJzL2duaWRhbi9zcmMvd29yay90cnVmZmxlL3BhY2thZ2VzL3RydWZmbGUtZGVidWdnZXIvdGVzdC9kYXRhL2RlY29kZS9oZWxwZXJzLmpzIiwiL1VzZXJzL2duaWRhbi9zcmMvd29yay90cnVmZmxlL25vZGVfbW9kdWxlcy9tb2NoYS13ZWJwYWNrL2xpYi9lbnRyeS5qcyIsIi9Vc2Vycy9nbmlkYW4vc3JjL3dvcmsvdHJ1ZmZsZS9wYWNrYWdlcy90cnVmZmxlLWRlYnVnZ2VyL3Rlc3QvYXN0LmpzIiwiZXh0ZXJuYWwgXCJwYXRoXCIiLCJleHRlcm5hbCBcImZzLWV4dHJhXCIiLCJleHRlcm5hbCBcImFzeW5jXCIiLCJleHRlcm5hbCBcInRydWZmbGUtd29ya2Zsb3ctY29tcGlsZVwiIiwiZXh0ZXJuYWwgXCJ0cnVmZmxlLWRlYnVnLXV0aWxzXCIiLCJleHRlcm5hbCBcInRydWZmbGUtYXJ0aWZhY3RvclwiIiwiZXh0ZXJuYWwgXCJ0cnVmZmxlLW1pZ3JhdGVcIiIsImV4dGVybmFsIFwidHJ1ZmZsZS1ib3hcIiIsImV4dGVybmFsIFwidHJ1ZmZsZS1yZXNvbHZlclwiIiwiL1VzZXJzL2duaWRhbi9zcmMvd29yay90cnVmZmxlL3BhY2thZ2VzL3RydWZmbGUtZGVidWdnZXIvbGliL3Nlc3Npb24vaW5kZXguanMiLCJleHRlcm5hbCBcImZhc3QtbGV2ZW5zaHRlaW5cIiIsImV4dGVybmFsIFwidHJ1ZmZsZS1zb2xpZGl0eS11dGlsc1wiIiwiZXh0ZXJuYWwgXCJ0cnVmZmxlLWNvZGUtdXRpbHNcIiIsIi9Vc2Vycy9nbmlkYW4vc3JjL3dvcmsvdHJ1ZmZsZS9ub2RlX21vZHVsZXMvbm9kZS1pbnRlcnZhbC10cmVlL2xpYi9pbmRleC5qcyIsIi9Vc2Vycy9nbmlkYW4vc3JjL3dvcmsvdHJ1ZmZsZS9ub2RlX21vZHVsZXMvc2hhbGxvd2VxdWFsL2luZGV4LmpzIiwiL1VzZXJzL2duaWRhbi9zcmMvd29yay90cnVmZmxlL3BhY2thZ2VzL3RydWZmbGUtZGVidWdnZXIvbGliL3N0b3JlL2luZGV4LmpzIiwiL1VzZXJzL2duaWRhbi9zcmMvd29yay90cnVmZmxlL3BhY2thZ2VzL3RydWZmbGUtZGVidWdnZXIvbGliL3N0b3JlL3Rlc3QuanMiLCIvVXNlcnMvZ25pZGFuL3NyYy93b3JrL3RydWZmbGUvcGFja2FnZXMvdHJ1ZmZsZS1kZWJ1Z2dlci9saWIvc3RvcmUvY29tbW9uLmpzIiwiZXh0ZXJuYWwgXCJyZWR1eC1zYWdhXCIiLCJleHRlcm5hbCBcInJlZHV4LWNsaS1sb2dnZXJcIiIsIi9Vc2Vycy9nbmlkYW4vc3JjL3dvcmsvdHJ1ZmZsZS9wYWNrYWdlcy90cnVmZmxlLWRlYnVnZ2VyL2xpYi9zZXNzaW9uL3NhZ2FzL2luZGV4LmpzIiwiL1VzZXJzL2duaWRhbi9zcmMvd29yay90cnVmZmxlL3BhY2thZ2VzL3RydWZmbGUtZGVidWdnZXIvbGliL2FzdC9zYWdhcy9pbmRleC5qcyIsIi9Vc2Vycy9nbmlkYW4vc3JjL3dvcmsvdHJ1ZmZsZS9wYWNrYWdlcy90cnVmZmxlLWRlYnVnZ2VyL2xpYi9kYXRhL2RlY29kZS9pbmRleC5qcyIsIi9Vc2Vycy9nbmlkYW4vc3JjL3dvcmsvdHJ1ZmZsZS9wYWNrYWdlcy90cnVmZmxlLWRlYnVnZ2VyL2xpYi9kYXRhL2RlY29kZS9tZW1vcnkuanMiLCIvVXNlcnMvZ25pZGFuL3NyYy93b3JrL3RydWZmbGUvcGFja2FnZXMvdHJ1ZmZsZS1kZWJ1Z2dlci9saWIvZGF0YS9kZWNvZGUvc3RvcmFnZS5qcyIsIi9Vc2Vycy9nbmlkYW4vc3JjL3dvcmsvdHJ1ZmZsZS9wYWNrYWdlcy90cnVmZmxlLWRlYnVnZ2VyL2xpYi9hc3QvYWN0aW9ucy9pbmRleC5qcyIsIi9Vc2Vycy9nbmlkYW4vc3JjL3dvcmsvdHJ1ZmZsZS9wYWNrYWdlcy90cnVmZmxlLWRlYnVnZ2VyL2xpYi9jb250cm9sbGVyL3NhZ2FzL2luZGV4LmpzIiwiL1VzZXJzL2duaWRhbi9zcmMvd29yay90cnVmZmxlL3BhY2thZ2VzL3RydWZmbGUtZGVidWdnZXIvbGliL2NvbnRyb2xsZXIvc2VsZWN0b3JzL2luZGV4LmpzIiwiL1VzZXJzL2duaWRhbi9zcmMvd29yay90cnVmZmxlL3BhY2thZ2VzL3RydWZmbGUtZGVidWdnZXIvbGliL3NvbGlkaXR5L3NhZ2FzL2luZGV4LmpzIiwiL1VzZXJzL2duaWRhbi9zcmMvd29yay90cnVmZmxlL3BhY2thZ2VzL3RydWZmbGUtZGVidWdnZXIvbGliL2V2bS9zYWdhcy9pbmRleC5qcyIsIi9Vc2Vycy9nbmlkYW4vc3JjL3dvcmsvdHJ1ZmZsZS9wYWNrYWdlcy90cnVmZmxlLWRlYnVnZ2VyL2xpYi93ZWIzL3NhZ2FzL2luZGV4LmpzIiwiL1VzZXJzL2duaWRhbi9zcmMvd29yay90cnVmZmxlL3BhY2thZ2VzL3RydWZmbGUtZGVidWdnZXIvbGliL3dlYjMvYWN0aW9ucy9pbmRleC5qcyIsIi9Vc2Vycy9nbmlkYW4vc3JjL3dvcmsvdHJ1ZmZsZS9wYWNrYWdlcy90cnVmZmxlLWRlYnVnZ2VyL2xpYi93ZWIzL2FkYXB0ZXIuanMiLCIvVXNlcnMvZ25pZGFuL3NyYy93b3JrL3RydWZmbGUvcGFja2FnZXMvdHJ1ZmZsZS1kZWJ1Z2dlci9saWIvc2Vzc2lvbi9yZWR1Y2Vycy5qcyIsIi9Vc2Vycy9nbmlkYW4vc3JjL3dvcmsvdHJ1ZmZsZS9wYWNrYWdlcy90cnVmZmxlLWRlYnVnZ2VyL2xpYi9kYXRhL3JlZHVjZXJzLmpzIiwiL1VzZXJzL2duaWRhbi9zcmMvd29yay90cnVmZmxlL3BhY2thZ2VzL3RydWZmbGUtZGVidWdnZXIvbGliL2V2bS9yZWR1Y2Vycy5qcyIsImV4dGVybmFsIFwiYmFiZWwtcnVudGltZS9jb3JlLWpzL2FycmF5L2Zyb21cIiIsIi9Vc2Vycy9nbmlkYW4vc3JjL3dvcmsvdHJ1ZmZsZS9wYWNrYWdlcy90cnVmZmxlLWRlYnVnZ2VyL2xpYi9zb2xpZGl0eS9yZWR1Y2Vycy5qcyIsIi9Vc2Vycy9nbmlkYW4vc3JjL3dvcmsvdHJ1ZmZsZS9wYWNrYWdlcy90cnVmZmxlLWRlYnVnZ2VyL2xpYi90cmFjZS9yZWR1Y2Vycy5qcyIsIi9Vc2Vycy9nbmlkYW4vc3JjL3dvcmsvdHJ1ZmZsZS9wYWNrYWdlcy90cnVmZmxlLWRlYnVnZ2VyL3Rlc3QvY29udGV4dC5qcyIsIi9Vc2Vycy9nbmlkYW4vc3JjL3dvcmsvdHJ1ZmZsZS9wYWNrYWdlcy90cnVmZmxlLWRlYnVnZ2VyL3Rlc3QvZGF0YS9kZWNvZGUvZGVjb2RpbmcuanMiLCJleHRlcm5hbCBcImJhYmVsLXJ1bnRpbWUvY29yZS1qcy9qc29uL3N0cmluZ2lmeVwiIiwiZXh0ZXJuYWwgXCJmYWtlclwiIiwiZXh0ZXJuYWwgXCJjaGFuZ2UtY2FzZVwiIiwiL1VzZXJzL2duaWRhbi9zcmMvd29yay90cnVmZmxlL3BhY2thZ2VzL3RydWZmbGUtZGVidWdnZXIvdGVzdC9kYXRhL2RlY29kZS91dGlscy5qcyIsIi9Vc2Vycy9nbmlkYW4vc3JjL3dvcmsvdHJ1ZmZsZS9wYWNrYWdlcy90cnVmZmxlLWRlYnVnZ2VyL3Rlc3QvZXZtLmpzIiwiL1VzZXJzL2duaWRhbi9zcmMvd29yay90cnVmZmxlL3BhY2thZ2VzL3RydWZmbGUtZGVidWdnZXIvdGVzdC9zb2xpZGl0eS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24gd2VicGFja1VuaXZlcnNhbE1vZHVsZURlZmluaXRpb24ocm9vdCwgZmFjdG9yeSkge1xuXHRpZih0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSA9PT0gJ29iamVjdCcpXG5cdFx0bW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KCk7XG5cdGVsc2UgaWYodHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kKVxuXHRcdGRlZmluZShcIkRlYnVnZ2VyXCIsIFtdLCBmYWN0b3J5KTtcblx0ZWxzZSBpZih0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcpXG5cdFx0ZXhwb3J0c1tcIkRlYnVnZ2VyXCJdID0gZmFjdG9yeSgpO1xuXHRlbHNlXG5cdFx0cm9vdFtcIkRlYnVnZ2VyXCJdID0gZmFjdG9yeSgpO1xufSkodHlwZW9mIHNlbGYgIT09ICd1bmRlZmluZWQnID8gc2VsZiA6IHRoaXMsIGZ1bmN0aW9uKCkge1xucmV0dXJuIFxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyB3ZWJwYWNrL3VuaXZlcnNhbE1vZHVsZURlZmluaXRpb24iLCIgXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuXG4gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXG4gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuIFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSkge1xuIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuIFx0XHR9XG4gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbiBcdFx0XHRpOiBtb2R1bGVJZCxcbiBcdFx0XHRsOiBmYWxzZSxcbiBcdFx0XHRleHBvcnRzOiB7fVxuIFx0XHR9O1xuXG4gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4gXHRcdG1vZHVsZS5sID0gdHJ1ZTtcblxuIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4gXHR9XG5cblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuXG4gXHQvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9uIGZvciBoYXJtb255IGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uZCA9IGZ1bmN0aW9uKGV4cG9ydHMsIG5hbWUsIGdldHRlcikge1xuIFx0XHRpZighX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIG5hbWUpKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIG5hbWUsIHtcbiBcdFx0XHRcdGNvbmZpZ3VyYWJsZTogZmFsc2UsXG4gXHRcdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxuIFx0XHRcdFx0Z2V0OiBnZXR0ZXJcbiBcdFx0XHR9KTtcbiBcdFx0fVxuIFx0fTtcblxuIFx0Ly8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubiA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuIFx0XHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cbiBcdFx0XHRmdW5jdGlvbiBnZXREZWZhdWx0KCkgeyByZXR1cm4gbW9kdWxlWydkZWZhdWx0J107IH0gOlxuIFx0XHRcdGZ1bmN0aW9uIGdldE1vZHVsZUV4cG9ydHMoKSB7IHJldHVybiBtb2R1bGU7IH07XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsICdhJywgZ2V0dGVyKTtcbiBcdFx0cmV0dXJuIGdldHRlcjtcbiBcdH07XG5cbiBcdC8vIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbFxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5vID0gZnVuY3Rpb24ob2JqZWN0LCBwcm9wZXJ0eSkgeyByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHkpOyB9O1xuXG4gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCJcIjtcblxuIFx0Ly8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4gXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyhfX3dlYnBhY2tfcmVxdWlyZV9fLnMgPSAzOCk7XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gd2VicGFjay9ib290c3RyYXAgZTQ5YTRiZDE1OWU5YWFjMzkzNjciLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCJkZWJ1Z1wiKTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyBleHRlcm5hbCBcImRlYnVnXCJcbi8vIG1vZHVsZSBpZCA9IDBcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiYmFiZWwtcnVudGltZS9jb3JlLWpzL29iamVjdC9lbnRyaWVzXCIpO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIGV4dGVybmFsIFwiYmFiZWwtcnVudGltZS9jb3JlLWpzL29iamVjdC9lbnRyaWVzXCJcbi8vIG1vZHVsZSBpZCA9IDFcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiYmFiZWwtcnVudGltZS9oZWxwZXJzL2V4dGVuZHNcIik7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gZXh0ZXJuYWwgXCJiYWJlbC1ydW50aW1lL2hlbHBlcnMvZXh0ZW5kc1wiXG4vLyBtb2R1bGUgaWQgPSAyXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcImJhYmVsLXJ1bnRpbWUvY29yZS1qcy9vYmplY3QvYXNzaWduXCIpO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIGV4dGVybmFsIFwiYmFiZWwtcnVudGltZS9jb3JlLWpzL29iamVjdC9hc3NpZ25cIlxuLy8gbW9kdWxlIGlkID0gM1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMucHJlZml4TmFtZSA9IHByZWZpeE5hbWU7XG5leHBvcnRzLmtlY2NhazI1NiA9IGtlY2NhazI1NjtcblxudmFyIF91dGlscyA9IHJlcXVpcmUoXCJsaWIvZGF0YS9kZWNvZGUvdXRpbHNcIik7XG5cbmZ1bmN0aW9uIHByZWZpeE5hbWUocHJlZml4LCBmbikge1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZm4sICduYW1lJywge1xuICAgIHZhbHVlOiBgJHtwcmVmaXh9LiR7Zm4ubmFtZX1gLFxuICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICB9KTtcblxuICByZXR1cm4gZm47XG59XG5cbi8qKlxuICogQHJldHVybiAweC1wcmVmaXggc3RyaW5nIG9mIGtlY2NhazI1NiBoYXNoXG4gKi9cbmZ1bmN0aW9uIGtlY2NhazI1NiguLi5hcmdzKSB7XG4gIHJldHVybiAoMCwgX3V0aWxzLnRvSGV4U3RyaW5nKSgoMCwgX3V0aWxzLmtlY2NhazI1NikoLi4uYXJncykpO1xufVxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL2xpYi9oZWxwZXJzL2luZGV4LmpzIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5cbnZhciBfZXh0ZW5kczIgPSByZXF1aXJlKFwiYmFiZWwtcnVudGltZS9oZWxwZXJzL2V4dGVuZHNcIik7XG5cbnZhciBfZXh0ZW5kczMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9leHRlbmRzMik7XG5cbnZhciBfZW50cmllcyA9IHJlcXVpcmUoXCJiYWJlbC1ydW50aW1lL2NvcmUtanMvb2JqZWN0L2VudHJpZXNcIik7XG5cbnZhciBfZW50cmllczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9lbnRyaWVzKTtcblxudmFyIF9hc3NpZ24gPSByZXF1aXJlKFwiYmFiZWwtcnVudGltZS9jb3JlLWpzL29iamVjdC9hc3NpZ25cIik7XG5cbnZhciBfYXNzaWduMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2Fzc2lnbik7XG5cbnZhciBfZGVidWcgPSByZXF1aXJlKFwiZGVidWdcIik7XG5cbnZhciBfZGVidWcyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZGVidWcpO1xuXG52YXIgX3Jlc2VsZWN0VHJlZSA9IHJlcXVpcmUoXCJyZXNlbGVjdC10cmVlXCIpO1xuXG52YXIgX2Zhc3RMZXZlbnNodGVpbiA9IHJlcXVpcmUoXCJmYXN0LWxldmVuc2h0ZWluXCIpO1xuXG52YXIgX2Zhc3RMZXZlbnNodGVpbjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9mYXN0TGV2ZW5zaHRlaW4pO1xuXG52YXIgX3NlbGVjdG9ycyA9IHJlcXVpcmUoXCJsaWIvdHJhY2Uvc2VsZWN0b3JzXCIpO1xuXG52YXIgX3NlbGVjdG9yczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9zZWxlY3RvcnMpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5jb25zdCBkZWJ1ZyA9ICgwLCBfZGVidWcyLmRlZmF1bHQpKFwiZGVidWdnZXI6ZXZtOnNlbGVjdG9yc1wiKTtcblxuY29uc3QgV09SRF9TSVpFID0gMHgyMDtcblxuLyoqXG4gKiBjcmVhdGUgRVZNLWxldmVsIHNlbGVjdG9ycyBmb3IgYSBnaXZlbiB0cmFjZSBzdGVwIHNlbGVjdG9yXG4gKiBtYXkgc3BlY2lmeSBhZGRpdGlvbmFsIHNlbGVjdG9ycyB0byBpbmNsdWRlXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZVN0ZXBTZWxlY3RvcnMoc3RlcCwgc3RhdGUgPSBudWxsKSB7XG4gIGxldCBiYXNlID0ge1xuICAgIC8qKlxuICAgICAqIC50cmFjZVxuICAgICAqXG4gICAgICogdHJhY2Ugc3RlcCBpbmZvIHJlbGF0ZWQgdG8gb3BlcmF0aW9uXG4gICAgICovXG4gICAgdHJhY2U6ICgwLCBfcmVzZWxlY3RUcmVlLmNyZWF0ZUxlYWYpKFtzdGVwXSwgKHsgZ2FzQ29zdCwgb3AsIHBjIH0pID0+ICh7IGdhc0Nvc3QsIG9wLCBwYyB9KSksXG5cbiAgICAvKipcbiAgICAgKiAucHJvZ3JhbUNvdW50ZXJcbiAgICAgKi9cbiAgICBwcm9ncmFtQ291bnRlcjogKDAsIF9yZXNlbGVjdFRyZWUuY3JlYXRlTGVhZikoW1wiLi90cmFjZVwiXSwgc3RlcCA9PiBzdGVwLnBjKSxcblxuICAgIC8qKlxuICAgICAqIC5pc0p1bXBcbiAgICAgKi9cbiAgICBpc0p1bXA6ICgwLCBfcmVzZWxlY3RUcmVlLmNyZWF0ZUxlYWYpKFtcIi4vdHJhY2VcIl0sIHN0ZXAgPT4gc3RlcC5vcCAhPSBcIkpVTVBERVNUXCIgJiYgc3RlcC5vcC5pbmRleE9mKFwiSlVNUFwiKSA9PSAwKSxcblxuICAgIC8qKlxuICAgICAqIC5pc0NhbGxcbiAgICAgKlxuICAgICAqIHdoZXRoZXIgdGhlIG9wY29kZSB3aWxsIHN3aXRjaCB0byBhbm90aGVyIGNhbGxpbmcgY29udGV4dFxuICAgICAqL1xuICAgIGlzQ2FsbDogKDAsIF9yZXNlbGVjdFRyZWUuY3JlYXRlTGVhZikoW1wiLi90cmFjZVwiXSwgc3RlcCA9PiBzdGVwLm9wID09IFwiQ0FMTFwiIHx8IHN0ZXAub3AgPT0gXCJERUxFR0FURUNBTExcIiksXG5cbiAgICAvKipcbiAgICAgKiAuaXNDcmVhdGVcbiAgICAgKi9cbiAgICBpc0NyZWF0ZTogKDAsIF9yZXNlbGVjdFRyZWUuY3JlYXRlTGVhZikoW1wiLi90cmFjZVwiXSwgc3RlcCA9PiBzdGVwLm9wID09IFwiQ1JFQVRFXCIpLFxuXG4gICAgLyoqXG4gICAgICogLmlzSGFsdGluZ1xuICAgICAqXG4gICAgICogd2hldGhlciB0aGUgaW5zdHJ1Y3Rpb24gaGFsdHMgb3IgcmV0dXJucyBmcm9tIGEgY2FsbGluZyBjb250ZXh0XG4gICAgICovXG4gICAgaXNIYWx0aW5nOiAoMCwgX3Jlc2VsZWN0VHJlZS5jcmVhdGVMZWFmKShbXCIuL3RyYWNlXCJdLCBzdGVwID0+IHN0ZXAub3AgPT0gXCJTVE9QXCIgfHwgc3RlcC5vcCA9PSBcIlJFVFVSTlwiKVxuICB9O1xuXG4gIGlmIChzdGF0ZSkge1xuICAgIGNvbnN0IGlzUmVsYXRpdmUgPSBwYXRoID0+IHR5cGVvZiBwYXRoID09IFwic3RyaW5nXCIgJiYgKHBhdGguc3RhcnRzV2l0aChcIi4vXCIpIHx8IHBhdGguc3RhcnRzV2l0aChcIi4uL1wiKSk7XG5cbiAgICBpZiAoaXNSZWxhdGl2ZShzdGF0ZSkpIHtcbiAgICAgIHN0YXRlID0gYC4uLyR7c3RhdGV9YDtcbiAgICB9XG5cbiAgICAoMCwgX2Fzc2lnbjIuZGVmYXVsdCkoYmFzZSwge1xuICAgICAgLyoqXG4gICAgICAgKiAuY2FsbEFkZHJlc3NcbiAgICAgICAqXG4gICAgICAgKiBhZGRyZXNzIHRyYW5zZmVycmVkIHRvIGJ5IGNhbGwgb3BlcmF0aW9uXG4gICAgICAgKi9cbiAgICAgIGNhbGxBZGRyZXNzOiAoMCwgX3Jlc2VsZWN0VHJlZS5jcmVhdGVMZWFmKShbXCIuL2lzQ2FsbFwiLCBcIi4vdHJhY2VcIiwgc3RhdGVdLCAobWF0Y2hlcywgc3RlcCwgeyBzdGFjayB9KSA9PiB7XG4gICAgICAgIGlmICghbWF0Y2hlcykgcmV0dXJuIG51bGw7XG5cbiAgICAgICAgbGV0IGFkZHJlc3MgPSBzdGFja1tzdGFjay5sZW5ndGggLSAyXTtcbiAgICAgICAgYWRkcmVzcyA9IFwiMHhcIiArIGFkZHJlc3Muc3Vic3RyaW5nKDI0KTtcbiAgICAgICAgcmV0dXJuIGFkZHJlc3M7XG4gICAgICB9KSxcblxuICAgICAgLyoqXG4gICAgICAgKiAuY3JlYXRlQmluYXJ5XG4gICAgICAgKlxuICAgICAgICogYmluYXJ5IGNvZGUgdG8gZXhlY3V0ZSB2aWEgY3JlYXRlIG9wZXJhdGlvblxuICAgICAgICovXG4gICAgICBjcmVhdGVCaW5hcnk6ICgwLCBfcmVzZWxlY3RUcmVlLmNyZWF0ZUxlYWYpKFtcIi4vaXNDcmVhdGVcIiwgXCIuL3RyYWNlXCIsIHN0YXRlXSwgKG1hdGNoZXMsIHN0ZXAsIHsgc3RhY2ssIG1lbW9yeSB9KSA9PiB7XG4gICAgICAgIGlmICghbWF0Y2hlcykgcmV0dXJuIG51bGw7XG5cbiAgICAgICAgLy8gR2V0IHRoZSBjb2RlIHRoYXQncyBnb2luZyB0byBiZSBjcmVhdGVkIGZyb20gbWVtb3J5LlxuICAgICAgICAvLyBOb3RlIHdlIG11bHRpcGx5IGJ5IDIgYmVjYXVzZSB0aGVzZSBvZmZzZXRzIGFyZSBpbiBieXRlcy5cbiAgICAgICAgY29uc3Qgb2Zmc2V0ID0gcGFyc2VJbnQoc3RhY2tbc3RhY2subGVuZ3RoIC0gMl0sIDE2KSAqIDI7XG4gICAgICAgIGNvbnN0IGxlbmd0aCA9IHBhcnNlSW50KHN0YWNrW3N0YWNrLmxlbmd0aCAtIDNdLCAxNikgKiAyO1xuXG4gICAgICAgIHJldHVybiBcIjB4XCIgKyBtZW1vcnkuam9pbihcIlwiKS5zdWJzdHJpbmcob2Zmc2V0LCBvZmZzZXQgKyBsZW5ndGgpO1xuICAgICAgfSlcbiAgICB9KTtcbiAgfVxuXG4gIHJldHVybiBiYXNlO1xufVxuXG5jb25zdCBldm0gPSAoMCwgX3Jlc2VsZWN0VHJlZS5jcmVhdGVTZWxlY3RvclRyZWUpKHtcbiAgLyoqXG4gICAqIGV2bS5zdGF0ZVxuICAgKi9cbiAgc3RhdGU6IHN0YXRlID0+IHN0YXRlLmV2bSxcblxuICAvKipcbiAgICogZXZtLmluZm9cbiAgICovXG4gIGluZm86IHtcbiAgICAvKipcbiAgICAgKiBldm0uaW5mby5jb250ZXh0c1xuICAgICAqL1xuICAgIGNvbnRleHRzOiAoMCwgX3Jlc2VsZWN0VHJlZS5jcmVhdGVMZWFmKShbJy9zdGF0ZSddLCBzdGF0ZSA9PiBzdGF0ZS5pbmZvLmNvbnRleHRzLmJ5Q29udGV4dCksXG5cbiAgICAvKipcbiAgICAgKiBldm0uaW5mby5pbnN0YW5jZXNcbiAgICAgKi9cbiAgICBpbnN0YW5jZXM6ICgwLCBfcmVzZWxlY3RUcmVlLmNyZWF0ZUxlYWYpKFsnL3N0YXRlJ10sIHN0YXRlID0+IHN0YXRlLmluZm8uaW5zdGFuY2VzLmJ5QWRkcmVzcyksXG5cbiAgICAvKipcbiAgICAgKiBldm0uaW5mby5iaW5hcmllc1xuICAgICAqL1xuICAgIGJpbmFyaWVzOiB7XG4gICAgICBfOiAoMCwgX3Jlc2VsZWN0VHJlZS5jcmVhdGVMZWFmKShbJy9zdGF0ZSddLCBzdGF0ZSA9PiBzdGF0ZS5pbmZvLmNvbnRleHRzLmJ5QmluYXJ5KSxcblxuICAgICAgLyoqXG4gICAgICAgKiBldm0uaW5mby5iaW5hcmllcy5zZWFyY2hcbiAgICAgICAqXG4gICAgICAgKiByZXR1cm5zIGZ1bmN0aW9uIChiaW5hcnkpID0+IGNvbnRleHRcbiAgICAgICAqL1xuICAgICAgc2VhcmNoOiAoMCwgX3Jlc2VsZWN0VHJlZS5jcmVhdGVMZWFmKShbJy4vXyddLCBiaW5hcmllcyA9PiBiaW5hcnkgPT4ge1xuICAgICAgICAvLyBzZWFyY2ggZm9yIGEgZ2l2ZW4gYmluYXJ5IGJhc2VkIG9uIGxldmVuc2h0ZWluIGRpc3RhbmNlcyB0b1xuICAgICAgICAvLyBleGlzdGluZyAoa25vd24pIGNvbnRleHQgYmluYXJpZXMuXG4gICAgICAgIC8vXG4gICAgICAgIC8vIGxldmVuc2h0ZWluIGRpc3RhbmNlIGlzIHRoZSBudW1iZXIgb2YgdGV4dHVhbCBtb2RpZmljYXRpb25zXG4gICAgICAgIC8vIChpbnNlcnQsIGNoYW5nZSwgZGVsZXRlKSByZXF1aXJlZCB0byBjb252ZXJ0IHN0cmluZyBhIHRvIGJcbiAgICAgICAgLy9cbiAgICAgICAgLy8gZmlsdGVyIGJ5IGEgcGVyY2VudGFnZSB0aHJlc2hvbGRcbiAgICAgICAgY29uc3QgdGhyZXNob2xkID0gMC4yNTtcblxuICAgICAgICBjb25zdCByZXN1bHRzID0gKDAsIF9lbnRyaWVzMi5kZWZhdWx0KShiaW5hcmllcykubWFwKChba25vd25CaW5hcnksIHsgY29udGV4dCB9XSkgPT4gKHtcbiAgICAgICAgICBjb250ZXh0LFxuICAgICAgICAgIGRpc3RhbmNlOiBfZmFzdExldmVuc2h0ZWluMi5kZWZhdWx0LmdldChrbm93bkJpbmFyeSwgYmluYXJ5KVxuICAgICAgICB9KSkuZmlsdGVyKCh7IGRpc3RhbmNlIH0pID0+IGRpc3RhbmNlIDw9IGJpbmFyeS5sZW5ndGggKiB0aHJlc2hvbGQpLnNvcnQoKHsgZGlzdGFuY2U6IGEgfSwgeyBkaXN0YW5jZTogYiB9KSA9PiBhIC0gYik7XG5cbiAgICAgICAgaWYgKHJlc3VsdHNbMF0pIHtcbiAgICAgICAgICBjb25zdCB7IGNvbnRleHQgfSA9IHJlc3VsdHNbMF07XG4gICAgICAgICAgcmV0dXJuIHsgY29udGV4dCB9O1xuICAgICAgICB9XG4gICAgICB9KVxuICAgIH1cbiAgfSxcblxuICAvKipcbiAgICogZXZtLmN1cnJlbnRcbiAgICovXG4gIGN1cnJlbnQ6IHtcblxuICAgIC8qKlxuICAgICAqIGV2bS5jdXJyZW50LmNhbGxzdGFja1xuICAgICAqL1xuICAgIGNhbGxzdGFjazogc3RhdGUgPT4gc3RhdGUuZXZtLnByb2MuY2FsbHN0YWNrLFxuXG4gICAgLyoqXG4gICAgICogZXZtLmN1cnJlbnQuY2FsbFxuICAgICAqL1xuICAgIGNhbGw6ICgwLCBfcmVzZWxlY3RUcmVlLmNyZWF0ZUxlYWYpKFtcIi4vY2FsbHN0YWNrXCJdLCBzdGFjayA9PiBzdGFjay5sZW5ndGggPyBzdGFja1tzdGFjay5sZW5ndGggLSAxXSA6IHt9KSxcblxuICAgIC8qKlxuICAgICAqIGV2bS5jdXJyZW50LmNvbnRleHRcbiAgICAgKi9cbiAgICBjb250ZXh0OiAoMCwgX3Jlc2VsZWN0VHJlZS5jcmVhdGVMZWFmKShbXCIuL2NhbGxcIiwgXCIvaW5mby9pbnN0YW5jZXNcIiwgXCIvaW5mby9iaW5hcmllcy9zZWFyY2hcIiwgXCIvaW5mby9jb250ZXh0c1wiXSwgKHsgYWRkcmVzcywgYmluYXJ5IH0sIGluc3RhbmNlcywgc2VhcmNoLCBjb250ZXh0cykgPT4ge1xuICAgICAgbGV0IHJlY29yZDtcbiAgICAgIGlmIChhZGRyZXNzKSB7XG4gICAgICAgIHJlY29yZCA9IGluc3RhbmNlc1thZGRyZXNzXTtcbiAgICAgICAgaWYgKCFyZWNvcmQpIHtcbiAgICAgICAgICByZXR1cm4geyBhZGRyZXNzIH07XG4gICAgICAgIH1cbiAgICAgICAgYmluYXJ5ID0gcmVjb3JkLmJpbmFyeTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJlY29yZCA9IHNlYXJjaChiaW5hcnkpO1xuICAgICAgfVxuXG4gICAgICBsZXQgY29udGV4dCA9IGNvbnRleHRzWyhyZWNvcmQgfHwge30pLmNvbnRleHRdO1xuXG4gICAgICByZXR1cm4gKDAsIF9leHRlbmRzMy5kZWZhdWx0KSh7fSwgY29udGV4dCwge1xuICAgICAgICBiaW5hcnlcbiAgICAgIH0pO1xuICAgIH0pLFxuXG4gICAgLyoqXG4gICAgICogZXZtLmN1cnJlbnQuc3RhdGVcbiAgICAgKlxuICAgICAqIGV2bSBzdGF0ZSBpbmZvOiBhcyBvZiBsYXN0IG9wZXJhdGlvbiwgYmVmb3JlIG9wIGRlZmluZWQgaW4gc3RlcFxuICAgICAqL1xuICAgIHN0YXRlOiAoMCwgX2Fzc2lnbjIuZGVmYXVsdCkoe30sIC4uLltcImRlcHRoXCIsIFwiZXJyb3JcIiwgXCJnYXNcIiwgXCJtZW1vcnlcIiwgXCJzdGFja1wiLCBcInN0b3JhZ2VcIl0ubWFwKHBhcmFtID0+ICh7XG4gICAgICBbcGFyYW1dOiAoMCwgX3Jlc2VsZWN0VHJlZS5jcmVhdGVMZWFmKShbX3NlbGVjdG9yczIuZGVmYXVsdC5zdGVwXSwgc3RlcCA9PiBzdGVwW3BhcmFtXSlcbiAgICB9KSkpLFxuXG4gICAgLyoqXG4gICAgICogZXZtLmN1cnJlbnQuc3RlcFxuICAgICAqL1xuICAgIHN0ZXA6IGNyZWF0ZVN0ZXBTZWxlY3RvcnMoX3NlbGVjdG9yczIuZGVmYXVsdC5zdGVwLCBcIi4vc3RhdGVcIilcbiAgfSxcblxuICAvKipcbiAgICogZXZtLm5leHRcbiAgICovXG4gIG5leHQ6IHtcblxuICAgIC8qKlxuICAgICAqIGV2bS5uZXh0LnN0YXRlXG4gICAgICpcbiAgICAgKiBldm0gc3RhdGUgYXMgYSByZXN1bHQgb2YgbmV4dCBzdGVwIG9wZXJhdGlvblxuICAgICAqL1xuICAgIHN0YXRlOiAoMCwgX2Fzc2lnbjIuZGVmYXVsdCkoe30sIC4uLltcImRlcHRoXCIsIFwiZXJyb3JcIiwgXCJnYXNcIiwgXCJtZW1vcnlcIiwgXCJzdGFja1wiLCBcInN0b3JhZ2VcIl0ubWFwKHBhcmFtID0+ICh7XG4gICAgICBbcGFyYW1dOiAoMCwgX3Jlc2VsZWN0VHJlZS5jcmVhdGVMZWFmKShbX3NlbGVjdG9yczIuZGVmYXVsdC5uZXh0XSwgc3RlcCA9PiBzdGVwW3BhcmFtXSlcbiAgICB9KSkpLFxuXG4gICAgc3RlcDogY3JlYXRlU3RlcFNlbGVjdG9ycyhfc2VsZWN0b3JzMi5kZWZhdWx0Lm5leHQsIFwiLi9zdGF0ZVwiKVxuICB9XG59KTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gZXZtO1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL2xpYi9ldm0vc2VsZWN0b3JzL2luZGV4LmpzIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5cbnZhciBfZXh0ZW5kczIgPSByZXF1aXJlKFwiYmFiZWwtcnVudGltZS9oZWxwZXJzL2V4dGVuZHNcIik7XG5cbnZhciBfZXh0ZW5kczMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9leHRlbmRzMik7XG5cbnZhciBfZW50cmllcyA9IHJlcXVpcmUoXCJiYWJlbC1ydW50aW1lL2NvcmUtanMvb2JqZWN0L2VudHJpZXNcIik7XG5cbnZhciBfZW50cmllczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9lbnRyaWVzKTtcblxudmFyIF9hc3NpZ24gPSByZXF1aXJlKFwiYmFiZWwtcnVudGltZS9jb3JlLWpzL29iamVjdC9hc3NpZ25cIik7XG5cbnZhciBfYXNzaWduMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2Fzc2lnbik7XG5cbnZhciBfZGVidWcgPSByZXF1aXJlKFwiZGVidWdcIik7XG5cbnZhciBfZGVidWcyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZGVidWcpO1xuXG52YXIgX3Jlc2VsZWN0VHJlZSA9IHJlcXVpcmUoXCJyZXNlbGVjdC10cmVlXCIpO1xuXG52YXIgX3RydWZmbGVTb2xpZGl0eVV0aWxzID0gcmVxdWlyZShcInRydWZmbGUtc29saWRpdHktdXRpbHNcIik7XG5cbnZhciBfdHJ1ZmZsZVNvbGlkaXR5VXRpbHMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfdHJ1ZmZsZVNvbGlkaXR5VXRpbHMpO1xuXG52YXIgX3RydWZmbGVDb2RlVXRpbHMgPSByZXF1aXJlKFwidHJ1ZmZsZS1jb2RlLXV0aWxzXCIpO1xuXG52YXIgX3RydWZmbGVDb2RlVXRpbHMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfdHJ1ZmZsZUNvZGVVdGlscyk7XG5cbnZhciBfc2VsZWN0b3JzID0gcmVxdWlyZShcImxpYi9ldm0vc2VsZWN0b3JzXCIpO1xuXG52YXIgX3NlbGVjdG9yczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9zZWxlY3RvcnMpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5jb25zdCBkZWJ1ZyA9ICgwLCBfZGVidWcyLmRlZmF1bHQpKFwiZGVidWdnZXI6c29saWRpdHk6c2VsZWN0b3JzXCIpO1xuXG5mdW5jdGlvbiBnZXRTb3VyY2VSYW5nZShpbnN0cnVjdGlvbiA9IHt9KSB7XG4gIHJldHVybiB7XG4gICAgc3RhcnQ6IGluc3RydWN0aW9uLnN0YXJ0IHx8IDAsXG4gICAgbGVuZ3RoOiBpbnN0cnVjdGlvbi5sZW5ndGggfHwgMCxcbiAgICBsaW5lczogaW5zdHJ1Y3Rpb24ucmFuZ2UgfHwge1xuICAgICAgc3RhcnQ6IHtcbiAgICAgICAgbGluZTogMCwgY29sdW1uOiAwXG4gICAgICB9LFxuICAgICAgZW5kOiB7XG4gICAgICAgIGxpbmU6IDAsIGNvbHVtbjogMFxuICAgICAgfVxuICAgIH1cbiAgfTtcbn1cblxubGV0IHNvbGlkaXR5ID0gKDAsIF9yZXNlbGVjdFRyZWUuY3JlYXRlU2VsZWN0b3JUcmVlKSh7XG4gIC8qKlxuICAgKiBzb2xpZGl0eS5zdGF0ZVxuICAgKi9cbiAgc3RhdGU6IHN0YXRlID0+IHN0YXRlLnNvbGlkaXR5LFxuXG4gIC8qKlxuICAgKiBzb2xpZGl0eS5pbmZvXG4gICAqL1xuICBpbmZvOiB7XG4gICAgLyoqXG4gICAgICogc29saWRpdHkuaW5mby5zb3VyY2VzXG4gICAgICovXG4gICAgc291cmNlczogKDAsIF9yZXNlbGVjdFRyZWUuY3JlYXRlTGVhZikoWycvc3RhdGUnXSwgc3RhdGUgPT4gc3RhdGUuaW5mby5zb3VyY2VzLmJ5SWQpLFxuXG4gICAgLyoqXG4gICAgICogc29saWRpdHkuaW5mby5zb3VyY2VNYXBzXG4gICAgICovXG4gICAgc291cmNlTWFwczogKDAsIF9yZXNlbGVjdFRyZWUuY3JlYXRlTGVhZikoWycvc3RhdGUnXSwgc3RhdGUgPT4gc3RhdGUuaW5mby5zb3VyY2VNYXBzLmJ5Q29udGV4dClcbiAgfSxcblxuICAvKipcbiAgICogc29saWRpdHkuY3VycmVudFxuICAgKi9cbiAgY3VycmVudDoge1xuXG4gICAgLyoqXG4gICAgICogc29saWRpdHkuY3VycmVudC5zb3VyY2VNYXBcbiAgICAgKi9cbiAgICBzb3VyY2VNYXA6ICgwLCBfcmVzZWxlY3RUcmVlLmNyZWF0ZUxlYWYpKFtfc2VsZWN0b3JzMi5kZWZhdWx0LmN1cnJlbnQuY29udGV4dCwgXCIvaW5mby9zb3VyY2VNYXBzXCJdLCAoeyBjb250ZXh0IH0sIHNvdXJjZU1hcHMpID0+IHNvdXJjZU1hcHNbY29udGV4dF0gfHwge30pLFxuXG4gICAgLyoqXG4gICAgICogc29saWRpdHkuY3VycmVudC5mdW5jdGlvbkRlcHRoXG4gICAgICovXG4gICAgZnVuY3Rpb25EZXB0aDogc3RhdGUgPT4gc3RhdGUuc29saWRpdHkucHJvYy5mdW5jdGlvbkRlcHRoLFxuXG4gICAgLyoqXG4gICAgICogc29saWRpdHkuY3VycmVudC5pbnN0cnVjdGlvbnNcbiAgICAgKi9cbiAgICBpbnN0cnVjdGlvbnM6ICgwLCBfcmVzZWxlY3RUcmVlLmNyZWF0ZUxlYWYpKFtcIi9pbmZvL3NvdXJjZXNcIiwgX3NlbGVjdG9yczIuZGVmYXVsdC5jdXJyZW50LmNvbnRleHQsIFwiLi9zb3VyY2VNYXBcIl0sIChzb3VyY2VzLCB7IGJpbmFyeSB9LCB7IHNvdXJjZU1hcCB9KSA9PiB7XG4gICAgICBpZiAoIWJpbmFyeSkge1xuICAgICAgICByZXR1cm4gW107XG4gICAgICB9XG5cbiAgICAgIGxldCBpbnN0cnVjdGlvbnMgPSBfdHJ1ZmZsZUNvZGVVdGlsczIuZGVmYXVsdC5wYXJzZUNvZGUoYmluYXJ5KTtcblxuICAgICAgaWYgKCFzb3VyY2VNYXApIHtcbiAgICAgICAgLy8gTGV0J3MgY3JlYXRlIGEgc291cmNlIG1hcCB0byB1c2Ugc2luY2Ugbm9uZSBleGlzdHMuIFRoaXMgc291cmNlIG1hcFxuICAgICAgICAvLyBtYXBzIGp1c3QgYXMgbWFueSByYW5nZXMgYXMgdGhlcmUgYXJlIGluc3RydWN0aW9ucywgYW5kIGVuc3VyZXMgZXZlcnlcbiAgICAgICAgLy8gaW5zdHJ1Y3Rpb24gaXMgbWFya2VkIGFzIFwianVtcGluZyBvdXRcIi4gVGhpcyB3aWxsIGVuc3VyZSBhbGxcbiAgICAgICAgLy8gYXZhaWxhYmxlIGRlYnVnZ2VyIGNvbW1hbmRzIHN0ZXAgb25lIGluc3RydWN0aW9uIGF0IGEgdGltZS5cbiAgICAgICAgLy9cbiAgICAgICAgLy8gVGhpcyBpcyBraW5kb2YgYSBoYWNrOyBwZXJoYXBzIHRoaXMgc2hvdWxkIGJlIGJyb2tlbiBvdXQgaW50byBzZXBhcmF0ZVxuICAgICAgICAvLyBjb250ZXh0IHR5cGVzLiBUT0RPXG4gICAgICAgIHNvdXJjZU1hcCA9IFwiXCI7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgaW5zdHJ1Y3Rpb25zLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgc291cmNlTWFwICs9IGkgKyBcIjpcIiArIGkgKyBcIjoxOi0xO1wiO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHZhciBsaW5lQW5kQ29sdW1uTWFwcGluZ3MgPSAoMCwgX2Fzc2lnbjIuZGVmYXVsdCkoe30sIC4uLigwLCBfZW50cmllczIuZGVmYXVsdCkoc291cmNlcykubWFwKChbaWQsIHsgc291cmNlIH1dKSA9PiAoe1xuICAgICAgICBbaWRdOiBfdHJ1ZmZsZVNvbGlkaXR5VXRpbHMyLmRlZmF1bHQuZ2V0Q2hhcmFjdGVyT2Zmc2V0VG9MaW5lQW5kQ29sdW1uTWFwcGluZyhzb3VyY2UgfHwgXCJcIilcbiAgICAgIH0pKSk7XG4gICAgICB2YXIgaHVtYW5SZWFkYWJsZVNvdXJjZU1hcCA9IF90cnVmZmxlU29saWRpdHlVdGlsczIuZGVmYXVsdC5nZXRIdW1hblJlYWRhYmxlU291cmNlTWFwKHNvdXJjZU1hcCk7XG5cbiAgICAgIGxldCBwcmltYXJ5RmlsZSA9IGh1bWFuUmVhZGFibGVTb3VyY2VNYXBbMF0uZmlsZTtcbiAgICAgIGRlYnVnKFwicHJpbWFyeUZpbGUgJW9cIiwgcHJpbWFyeUZpbGUpO1xuXG4gICAgICByZXR1cm4gaW5zdHJ1Y3Rpb25zLm1hcCgoaW5zdHJ1Y3Rpb24sIGluZGV4KSA9PiB7XG4gICAgICAgIC8vIGxvb2t1cCBzb3VyY2UgbWFwIGJ5IGluZGV4IGFuZCBhZGQgYGluZGV4YCBwcm9wZXJ0eSB0b1xuICAgICAgICAvLyBpbnN0cnVjdGlvblxuICAgICAgICAvL1xuXG4gICAgICAgIGNvbnN0IHNvdXJjZU1hcCA9IGh1bWFuUmVhZGFibGVTb3VyY2VNYXBbaW5kZXhdIHx8IHt9O1xuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgaW5zdHJ1Y3Rpb246ICgwLCBfZXh0ZW5kczMuZGVmYXVsdCkoe30sIGluc3RydWN0aW9uLCB7IGluZGV4IH0pLFxuICAgICAgICAgIHNvdXJjZU1hcFxuICAgICAgICB9O1xuICAgICAgfSkubWFwKCh7IGluc3RydWN0aW9uLCBzb3VyY2VNYXAgfSkgPT4ge1xuICAgICAgICAvLyBhZGQgc291cmNlIG1hcCBpbmZvcm1hdGlvbiB0byBpbnN0cnVjdGlvbiwgb3IgZGVmYXVsdHNcbiAgICAgICAgLy9cblxuICAgICAgICBjb25zdCB7IGp1bXAsIHN0YXJ0ID0gMCwgbGVuZ3RoID0gMCwgZmlsZSA9IHByaW1hcnlGaWxlIH0gPSBzb3VyY2VNYXA7XG4gICAgICAgIGNvbnN0IGxpbmVBbmRDb2x1bW5NYXBwaW5nID0gbGluZUFuZENvbHVtbk1hcHBpbmdzW2ZpbGVdIHx8IHt9O1xuICAgICAgICBjb25zdCByYW5nZSA9IHtcbiAgICAgICAgICBzdGFydDogbGluZUFuZENvbHVtbk1hcHBpbmdbc3RhcnRdIHx8IHsgbGluZTogbnVsbCwgY29sdW1uOiBudWxsIH0sXG4gICAgICAgICAgZW5kOiBsaW5lQW5kQ29sdW1uTWFwcGluZ1tzdGFydCArIGxlbmd0aF0gfHwgeyBsaW5lOiBudWxsLCBjb2x1bW46IG51bGwgfVxuICAgICAgICB9O1xuXG4gICAgICAgIGlmIChyYW5nZS5zdGFydC5saW5lID09PSBudWxsKSB7XG4gICAgICAgICAgZGVidWcoXCJzb3VyY2VNYXAgJW9cIiwgc291cmNlTWFwKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiAoMCwgX2V4dGVuZHMzLmRlZmF1bHQpKHt9LCBpbnN0cnVjdGlvbiwge1xuXG4gICAgICAgICAganVtcCxcbiAgICAgICAgICBzdGFydCxcbiAgICAgICAgICBsZW5ndGgsXG4gICAgICAgICAgZmlsZSxcbiAgICAgICAgICByYW5nZVxuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH0pLFxuXG4gICAgLyoqXG4gICAgICogc29saWRpdHkuY3VycmVudC5pbnN0cnVjdGlvbkF0UHJvZ3JhbUNvdW50ZXJcbiAgICAgKi9cbiAgICBpbnN0cnVjdGlvbkF0UHJvZ3JhbUNvdW50ZXI6ICgwLCBfcmVzZWxlY3RUcmVlLmNyZWF0ZUxlYWYpKFtcIi4vaW5zdHJ1Y3Rpb25zXCJdLCBpbnN0cnVjdGlvbnMgPT4ge1xuICAgICAgbGV0IG1hcCA9IFtdO1xuICAgICAgaW5zdHJ1Y3Rpb25zLmZvckVhY2goZnVuY3Rpb24gKGluc3RydWN0aW9uKSB7XG4gICAgICAgIG1hcFtpbnN0cnVjdGlvbi5wY10gPSBpbnN0cnVjdGlvbjtcbiAgICAgIH0pO1xuXG4gICAgICAvLyBmaWxsIGluIGdhcHMgaW4gbWFwIGJ5IGRlZmF1bHRpbmcgdG8gdGhlIGxhc3Qga25vd24gaW5zdHJ1Y3Rpb25cbiAgICAgIGxldCBsYXN0U2VlbiA9IG51bGw7XG4gICAgICBmb3IgKGxldCBbcGMsIGluc3RydWN0aW9uXSBvZiBtYXAuZW50cmllcygpKSB7XG4gICAgICAgIGlmIChpbnN0cnVjdGlvbikge1xuICAgICAgICAgIGxhc3RTZWVuID0gaW5zdHJ1Y3Rpb247XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgbWFwW3BjXSA9IGxhc3RTZWVuO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gbWFwO1xuICAgIH0pLFxuXG4gICAgLyoqXG4gICAgICogc29saWRpdHkuY3VycmVudC5pbnN0cnVjdGlvblxuICAgICAqL1xuICAgIGluc3RydWN0aW9uOiAoMCwgX3Jlc2VsZWN0VHJlZS5jcmVhdGVMZWFmKShbXCIuL2luc3RydWN0aW9uQXRQcm9ncmFtQ291bnRlclwiLCBfc2VsZWN0b3JzMi5kZWZhdWx0LmN1cnJlbnQuc3RlcC5wcm9ncmFtQ291bnRlcl0sIChtYXAsIHBjKSA9PiBtYXBbcGNdIHx8IHt9KSxcblxuICAgIC8qKlxuICAgICAqIHNvbGlkaXR5LmN1cnJlbnQuc291cmNlXG4gICAgICovXG4gICAgc291cmNlOiAoMCwgX3Jlc2VsZWN0VHJlZS5jcmVhdGVMZWFmKShbXCIvaW5mby9zb3VyY2VzXCIsIFwiLi9pbnN0cnVjdGlvblwiXSwgKHNvdXJjZXMsIHsgZmlsZTogaWQgfSkgPT4gc291cmNlc1tpZF0gfHwge30pLFxuXG4gICAgLyoqXG4gICAgICogc29saWRpdHkuY3VycmVudC5zb3VyY2VSYW5nZVxuICAgICAqL1xuICAgIHNvdXJjZVJhbmdlOiAoMCwgX3Jlc2VsZWN0VHJlZS5jcmVhdGVMZWFmKShbXCIuL2luc3RydWN0aW9uXCJdLCBnZXRTb3VyY2VSYW5nZSksXG5cbiAgICAvKipcbiAgICAgKiBzb2xpZGl0eS5jdXJyZW50LmlzU291cmNlUmFuZ2VGaW5hbFxuICAgICAqL1xuICAgIGlzU291cmNlUmFuZ2VGaW5hbDogKDAsIF9yZXNlbGVjdFRyZWUuY3JlYXRlTGVhZikoW1wiLi9pbnN0cnVjdGlvbkF0UHJvZ3JhbUNvdW50ZXJcIiwgX3NlbGVjdG9yczIuZGVmYXVsdC5jdXJyZW50LnN0ZXAucHJvZ3JhbUNvdW50ZXIsIF9zZWxlY3RvcnMyLmRlZmF1bHQubmV4dC5zdGVwLnByb2dyYW1Db3VudGVyXSwgKG1hcCwgY3VycmVudCwgbmV4dCkgPT4ge1xuICAgICAgaWYgKCFtYXBbbmV4dF0pIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG5cbiAgICAgIGN1cnJlbnQgPSBtYXBbY3VycmVudF07XG4gICAgICBuZXh0ID0gbWFwW25leHRdO1xuXG4gICAgICByZXR1cm4gY3VycmVudC5zdGFydCAhPSBuZXh0LnN0YXJ0IHx8IGN1cnJlbnQubGVuZ3RoICE9IG5leHQubGVuZ3RoIHx8IGN1cnJlbnQuZmlsZSAhPSBuZXh0LmZpbGU7XG4gICAgfSksXG5cbiAgICAvKipcbiAgICAgKiBzb2xpZGl0eS5jdXJyZW50LmlzTXVsdGlsaW5lXG4gICAgICovXG4gICAgaXNNdWx0aWxpbmU6ICgwLCBfcmVzZWxlY3RUcmVlLmNyZWF0ZUxlYWYpKFtcIi4vc291cmNlUmFuZ2VcIl0sICh7IGxpbmVzIH0pID0+IGxpbmVzLnN0YXJ0LmxpbmUgIT0gbGluZXMuZW5kLmxpbmUpLFxuXG4gICAgLyoqXG4gICAgICogc29saWRpdHkuY3VycmVudC53aWxsSnVtcFxuICAgICAqL1xuICAgIHdpbGxKdW1wOiAoMCwgX3Jlc2VsZWN0VHJlZS5jcmVhdGVMZWFmKShbX3NlbGVjdG9yczIuZGVmYXVsdC5jdXJyZW50LnN0ZXAuaXNKdW1wXSwgaXNKdW1wID0+IGlzSnVtcCksXG5cbiAgICAvKipcbiAgICAgKiBzb2xpZGl0eS5jdXJyZW50Lmp1bXBEaXJlY3Rpb25cbiAgICAgKi9cbiAgICBqdW1wRGlyZWN0aW9uOiAoMCwgX3Jlc2VsZWN0VHJlZS5jcmVhdGVMZWFmKShbXCIuL2luc3RydWN0aW9uXCJdLCAoaSA9IHt9KSA9PiBpLmp1bXAgfHwgXCItXCIpXG4gIH1cbn0pO1xuXG5leHBvcnRzLmRlZmF1bHQgPSBzb2xpZGl0eTtcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9saWIvc29saWRpdHkvc2VsZWN0b3JzL2luZGV4LmpzIiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiYmFiZWwtcnVudGltZS9oZWxwZXJzL2FzeW5jVG9HZW5lcmF0b3JcIik7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gZXh0ZXJuYWwgXCJiYWJlbC1ydW50aW1lL2hlbHBlcnMvYXN5bmNUb0dlbmVyYXRvclwiXG4vLyBtb2R1bGUgaWQgPSA3XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcIndlYjNcIik7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gZXh0ZXJuYWwgXCJ3ZWIzXCJcbi8vIG1vZHVsZSBpZCA9IDhcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwicmVzZWxlY3QtdHJlZVwiKTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyBleHRlcm5hbCBcInJlc2VsZWN0LXRyZWVcIlxuLy8gbW9kdWxlIGlkID0gOVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCJyZWR1eC1zYWdhL2VmZmVjdHNcIik7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gZXh0ZXJuYWwgXCJyZWR1eC1zYWdhL2VmZmVjdHNcIlxuLy8gbW9kdWxlIGlkID0gMTBcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLk1BWF9XT1JEID0gZXhwb3J0cy5XT1JEX1NJWkUgPSB1bmRlZmluZWQ7XG5cbnZhciBfZW50cmllcyA9IHJlcXVpcmUoXCJiYWJlbC1ydW50aW1lL2NvcmUtanMvb2JqZWN0L2VudHJpZXNcIik7XG5cbnZhciBfZW50cmllczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9lbnRyaWVzKTtcblxudmFyIF9hc3NpZ24gPSByZXF1aXJlKFwiYmFiZWwtcnVudGltZS9jb3JlLWpzL29iamVjdC9hc3NpZ25cIik7XG5cbnZhciBfYXNzaWduMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2Fzc2lnbik7XG5cbmV4cG9ydHMuY2xlYW5CaWdOdW1iZXJzID0gY2xlYW5CaWdOdW1iZXJzO1xuZXhwb3J0cy50eXBlSWRlbnRpZmllciA9IHR5cGVJZGVudGlmaWVyO1xuZXhwb3J0cy50eXBlQ2xhc3MgPSB0eXBlQ2xhc3M7XG5leHBvcnRzLmFsbG9jYXRlRGVjbGFyYXRpb25zID0gYWxsb2NhdGVEZWNsYXJhdGlvbnM7XG5leHBvcnRzLm5vcm1hbGl6ZVNsb3QgPSBub3JtYWxpemVTbG90O1xuZXhwb3J0cy5zcGVjaWZpZWRTaXplID0gc3BlY2lmaWVkU2l6ZTtcbmV4cG9ydHMuc3RvcmFnZVNpemUgPSBzdG9yYWdlU2l6ZTtcbmV4cG9ydHMuaXNNYXBwaW5nID0gaXNNYXBwaW5nO1xuZXhwb3J0cy5pc1JlZmVyZW5jZSA9IGlzUmVmZXJlbmNlO1xuZXhwb3J0cy5yZWZlcmVuY2VUeXBlID0gcmVmZXJlbmNlVHlwZTtcbmV4cG9ydHMuYmFzZURlZmluaXRpb24gPSBiYXNlRGVmaW5pdGlvbjtcbmV4cG9ydHMudG9CaWdOdW1iZXIgPSB0b0JpZ051bWJlcjtcbmV4cG9ydHMudG9TaWduZWRCaWdOdW1iZXIgPSB0b1NpZ25lZEJpZ051bWJlcjtcbmV4cG9ydHMudG9IZXhTdHJpbmcgPSB0b0hleFN0cmluZztcbmV4cG9ydHMudG9CeXRlcyA9IHRvQnl0ZXM7XG5leHBvcnRzLmtlY2NhazI1NiA9IGtlY2NhazI1NjtcblxudmFyIF9kZWJ1ZyA9IHJlcXVpcmUoXCJkZWJ1Z1wiKTtcblxudmFyIF9kZWJ1ZzIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9kZWJ1Zyk7XG5cbnZhciBfYmlnbnVtYmVyID0gcmVxdWlyZShcImJpZ251bWJlci5qc1wiKTtcblxudmFyIF93ZWIgPSByZXF1aXJlKFwid2ViM1wiKTtcblxudmFyIF93ZWIyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfd2ViKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuY29uc3QgZGVidWcgPSAoMCwgX2RlYnVnMi5kZWZhdWx0KShcImRlYnVnZ2VyOmRhdGE6ZGVjb2RlOnV0aWxzXCIpO1xuXG5jb25zdCBXT1JEX1NJWkUgPSBleHBvcnRzLldPUkRfU0laRSA9IDB4MjA7XG5jb25zdCBNQVhfV09SRCA9IGV4cG9ydHMuTUFYX1dPUkQgPSBuZXcgX2JpZ251bWJlci5CaWdOdW1iZXIoMikucG93KDI1NikubWludXMoMSk7XG5cbi8qKlxuICogcmVjdXJzaXZlbHkgY29udmVydHMgYmlnIG51bWJlcnMgaW50byBzb21ldGhpbmcgbmljZXIgdG8gbG9vayBhdFxuICovXG5mdW5jdGlvbiBjbGVhbkJpZ051bWJlcnModmFsdWUpIHtcbiAgaWYgKF9iaWdudW1iZXIuQmlnTnVtYmVyLmlzQmlnTnVtYmVyKHZhbHVlKSkge1xuICAgIHJldHVybiB2YWx1ZS50b051bWJlcigpO1xuICB9IGVsc2UgaWYgKHZhbHVlICYmIHZhbHVlLm1hcCAhPSB1bmRlZmluZWQpIHtcbiAgICByZXR1cm4gdmFsdWUubWFwKGlubmVyID0+IGNsZWFuQmlnTnVtYmVycyhpbm5lcikpO1xuICB9IGVsc2UgaWYgKHZhbHVlICYmIHR5cGVvZiB2YWx1ZSA9PSBcIm9iamVjdFwiKSB7XG4gICAgcmV0dXJuICgwLCBfYXNzaWduMi5kZWZhdWx0KSh7fSwgLi4uKDAsIF9lbnRyaWVzMi5kZWZhdWx0KSh2YWx1ZSkubWFwKChba2V5LCBpbm5lcl0pID0+ICh7IFtrZXldOiBjbGVhbkJpZ051bWJlcnMoaW5uZXIpIH0pKSk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9XG59XG5cbmZ1bmN0aW9uIHR5cGVJZGVudGlmaWVyKGRlZmluaXRpb24pIHtcbiAgcmV0dXJuIGRlZmluaXRpb24udHlwZURlc2NyaXB0aW9ucy50eXBlSWRlbnRpZmllcjtcbn1cblxuLyoqXG4gKiByZXR1cm5zIGJhc2ljIHR5cGUgY2xhc3MgZm9yIGEgdmFyaWFibGUgZGVmaW5pdGlvbiBub2RlXG4gKiBlLmcuOlxuICogIGB0X3VpbnQyNTZgIGJlY29tZXMgYHVpbnRgXG4gKiAgYHRfc3RydWN0JF9UaGluZ18kMjBfbWVtb3J5X3B0cmAgYmVjb21lcyBgc3RydWN0YFxuICovXG5mdW5jdGlvbiB0eXBlQ2xhc3MoZGVmaW5pdGlvbikge1xuICByZXR1cm4gdHlwZUlkZW50aWZpZXIoZGVmaW5pdGlvbikubWF0Y2goL3RfKFteJF8wLTldKykvKVsxXTtcbn1cblxuLyoqXG4gKiBBbGxvY2F0ZSBzdG9yYWdlIGZvciBnaXZlbiB2YXJpYWJsZSBkZWNsYXJhdGlvbnNcbiAqXG4gKiBQb3N0Y29uZGl0aW9uOiBzdGFydHMgYSBuZXcgc2xvdCBhbmQgb2NjdXBpZXMgd2hvbGUgc2xvdHNcbiAqL1xuZnVuY3Rpb24gYWxsb2NhdGVEZWNsYXJhdGlvbnMoZGVjbGFyYXRpb25zLCByZWZzLCBzbG90ID0gMCwgaW5kZXggPSBXT1JEX1NJWkUgLSAxKSB7XG4gIHNsb3QgPSBub3JtYWxpemVTbG90KHNsb3QpO1xuXG4gIGlmIChpbmRleCA8IFdPUkRfU0laRSAtIDEpIHtcbiAgICAvLyBzdGFydHMgYSBuZXcgc2xvdFxuICAgIHNsb3QgPSB7XG4gICAgICBwYXRoOiBzbG90LFxuICAgICAgb2Zmc2V0OiAxXG4gICAgfTtcbiAgICBpbmRleCA9IFdPUkRfU0laRSAtIDE7XG4gIH1cblxuICBsZXQgcGFyZW50RnJvbSA9IHsgc2xvdCwgaW5kZXg6IDAgfTtcbiAgdmFyIHBhcmVudFRvID0geyBzbG90LCBpbmRleDogV09SRF9TSVpFIC0gMSB9O1xuICBsZXQgbWFwcGluZyA9IHt9O1xuXG4gIGZvciAobGV0IGRlY2xhcmF0aW9uIG9mIGRlY2xhcmF0aW9ucykge1xuICAgIGxldCB7IGZyb20sIHRvLCBuZXh0LCBjaGlsZHJlbiB9ID0gYWxsb2NhdGVEZWNsYXJhdGlvbihkZWNsYXJhdGlvbiwgcmVmcywgc2xvdCwgaW5kZXgpO1xuXG4gICAgbWFwcGluZ1tkZWNsYXJhdGlvbi5pZF0gPSB7IGZyb20sIHRvLCBuYW1lOiBkZWNsYXJhdGlvbi5uYW1lIH07XG4gICAgaWYgKGNoaWxkcmVuICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIG1hcHBpbmdbZGVjbGFyYXRpb24uaWRdLmNoaWxkcmVuID0gY2hpbGRyZW47XG4gICAgfVxuXG4gICAgc2xvdCA9IG5leHQuc2xvdDtcbiAgICBpbmRleCA9IG5leHQuaW5kZXg7XG5cbiAgICBwYXJlbnRUbyA9IHsgc2xvdDogdG8uc2xvdCwgaW5kZXg6IFdPUkRfU0laRSAtIDEgfTtcbiAgfVxuXG4gIGlmIChpbmRleCA8IFdPUkRfU0laRSAtIDEpIHtcbiAgICBzbG90ID0ge1xuICAgICAgcGF0aDogc2xvdCxcbiAgICAgIG9mZnNldDogMVxuICAgIH07XG4gICAgaW5kZXggPSBXT1JEX1NJWkUgLSAxO1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBmcm9tOiBwYXJlbnRGcm9tLFxuICAgIHRvOiBwYXJlbnRUbyxcbiAgICBuZXh0OiB7IHNsb3QsIGluZGV4IH0sXG4gICAgY2hpbGRyZW46IG1hcHBpbmdcbiAgfTtcbn1cblxuZnVuY3Rpb24gYWxsb2NhdGVWYWx1ZShzbG90LCBpbmRleCwgYnl0ZXMpIHtcbiAgbGV0IGZyb20gPSBpbmRleCAtIGJ5dGVzICsgMSA+PSAwID8geyBzbG90LCBpbmRleDogaW5kZXggLSBieXRlcyArIDEgfSA6IHtcbiAgICBzbG90OiB7XG4gICAgICBwYXRoOiBzbG90LnBhdGgsXG4gICAgICBvZmZzZXQ6IHNsb3Qub2Zmc2V0ICsgMVxuICAgIH0sXG4gICAgaW5kZXg6IFdPUkRfU0laRSAtIGJ5dGVzXG4gIH07XG5cbiAgbGV0IHRvID0geyBzbG90OiBmcm9tLnNsb3QsIGluZGV4OiBmcm9tLmluZGV4ICsgYnl0ZXMgLSAxIH07XG5cbiAgbGV0IG5leHQgPSBmcm9tLmluZGV4ID09IDAgPyB7XG4gICAgc2xvdDoge1xuICAgICAgcGF0aDogZnJvbS5zbG90LnBhdGgsXG4gICAgICBvZmZzZXQ6IGZyb20uc2xvdC5vZmZzZXQgKyAxXG4gICAgfSxcbiAgICBpbmRleDogV09SRF9TSVpFIC0gMVxuICB9IDogeyBzbG90OiBmcm9tLnNsb3QsIGluZGV4OiBmcm9tLmluZGV4IC0gMSB9O1xuXG4gIHJldHVybiB7IGZyb20sIHRvLCBuZXh0IH07XG59XG5cbmZ1bmN0aW9uIGFsbG9jYXRlRGVjbGFyYXRpb24oZGVjbGFyYXRpb24sIHJlZnMsIHNsb3QsIGluZGV4KSB7XG4gIGxldCBkZWZpbml0aW9uID0gcmVmc1tkZWNsYXJhdGlvbi5pZF0uZGVmaW5pdGlvbjtcbiAgdmFyIGJ5dGVTaXplID0gc3RvcmFnZVNpemUoZGVmaW5pdGlvbik7IC8vIHl1bVxuXG4gIGlmICh0eXBlQ2xhc3MoZGVmaW5pdGlvbikgIT0gXCJzdHJ1Y3RcIikge1xuICAgIHJldHVybiBhbGxvY2F0ZVZhbHVlKHNsb3QsIGluZGV4LCBieXRlU2l6ZSk7XG4gIH1cblxuICBsZXQgc3RydWN0ID0gcmVmc1tkZWZpbml0aW9uLnR5cGVOYW1lLnJlZmVyZW5jZWREZWNsYXJhdGlvbl07XG4gIGRlYnVnKFwic3RydWN0OiAlT1wiLCBzdHJ1Y3QpO1xuXG4gIGxldCByZXN1bHQgPSBhbGxvY2F0ZURlY2xhcmF0aW9ucyhzdHJ1Y3QudmFyaWFibGVzIHx8IFtdLCByZWZzLCBzbG90LCBpbmRleCk7XG4gIGRlYnVnKFwic3RydWN0IHJlc3VsdCAlb1wiLCByZXN1bHQpO1xuICByZXR1cm4gcmVzdWx0O1xufVxuXG4vKipcbiAqIENvbnZlcnQgcG9seW1vcnBoaWMgc2xvdCB2YWx1ZSBpbnRvIGNhbm9uaWNhbCB7IHBhdGgsIG9mZnNldCB9IHBhaXIuXG4gKi9cbmZ1bmN0aW9uIG5vcm1hbGl6ZVNsb3Qoc2xvdCkge1xuICBpZiAodHlwZW9mIHNsb3QgPT0gXCJvYmplY3RcIiAmJiBzbG90LnBhdGggIT0gdW5kZWZpbmVkKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHBhdGg6IHNsb3QucGF0aCxcbiAgICAgIG9mZnNldDogc2xvdC5vZmZzZXQgfHwgMFxuICAgIH07XG4gIH1cblxuICByZXR1cm4ge1xuICAgIHBhdGg6IHNsb3QsXG4gICAgb2Zmc2V0OiAwXG4gIH07XG59XG5cbi8qKlxuICogZS5nLiB1aW50NDggLT4gNlxuICogQHJldHVybiBzaXplIGluIGJ5dGVzIGZvciBleHBsaWNpdCB0eXBlIHNpemUsIG9yIGBudWxsYCBpZiBub3Qgc3RhdGVkXG4gKi9cbmZ1bmN0aW9uIHNwZWNpZmllZFNpemUoZGVmaW5pdGlvbikge1xuICBsZXQgc3BlY2lmaWVkID0gdHlwZUlkZW50aWZpZXIoZGVmaW5pdGlvbikubWF0Y2goL3RfW2Etel0rKFswLTldKykvKTtcblxuICBpZiAoIXNwZWNpZmllZCkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgbGV0IG51bSA9IHNwZWNpZmllZFsxXTtcblxuICBzd2l0Y2ggKHR5cGVDbGFzcyhkZWZpbml0aW9uKSkge1xuICAgIGNhc2UgXCJpbnRcIjpcbiAgICBjYXNlIFwidWludFwiOlxuICAgICAgcmV0dXJuIG51bSAvIDg7XG5cbiAgICBjYXNlIFwiYnl0ZXNcIjpcbiAgICAgIHJldHVybiBudW07XG5cbiAgICBkZWZhdWx0OlxuICAgICAgZGVidWcoXCJVbmtub3duIHR5cGUgZm9yIHNpemUgc3BlY2lmaWNhdGlvbjogJXNcIiwgdHlwZUlkZW50aWZpZXIoZGVmaW5pdGlvbikpO1xuICB9XG59XG5cbmZ1bmN0aW9uIHN0b3JhZ2VTaXplKGRlZmluaXRpb24pIHtcbiAgc3dpdGNoICh0eXBlQ2xhc3MoZGVmaW5pdGlvbikpIHtcbiAgICBjYXNlIFwiYm9vbFwiOlxuICAgICAgcmV0dXJuIDE7XG5cbiAgICBjYXNlIFwiYWRkcmVzc1wiOlxuICAgICAgcmV0dXJuIDIwO1xuXG4gICAgY2FzZSBcImludFwiOlxuICAgIGNhc2UgXCJ1aW50XCI6XG4gICAgICAvLyBpcyB0aGlzIGEgSEFDSz8gKFwiMjU2XCIgLyA4KVxuICAgICAgcmV0dXJuIHR5cGVJZGVudGlmaWVyKGRlZmluaXRpb24pLm1hdGNoKC90X1thLXpdKyhbMC05XSspLylbMV0gLyA4O1xuXG4gICAgY2FzZSBcInN0cmluZ1wiOlxuICAgIGNhc2UgXCJieXRlc1wiOlxuICAgIGNhc2UgXCJhcnJheVwiOlxuICAgICAgcmV0dXJuIFdPUkRfU0laRTtcblxuICAgIGNhc2UgXCJtYXBwaW5nXCI6XG4gICAgICAvLyBIQUNLIGp1c3QgdG8gcmVzZXJ2ZSBzbG90LiBtYXBwaW5ncyBoYXZlIG5vIHNpemUgYXMgc3VjaFxuICAgICAgcmV0dXJuIFdPUkRfU0laRTtcbiAgfVxufVxuXG5mdW5jdGlvbiBpc01hcHBpbmcoZGVmaW5pdGlvbikge1xuICByZXR1cm4gdHlwZUlkZW50aWZpZXIoZGVmaW5pdGlvbikubWF0Y2goL150X21hcHBpbmcvKSAhPSBudWxsO1xufVxuXG5mdW5jdGlvbiBpc1JlZmVyZW5jZShkZWZpbml0aW9uKSB7XG4gIHJldHVybiB0eXBlSWRlbnRpZmllcihkZWZpbml0aW9uKS5tYXRjaCgvXyhtZW1vcnl8c3RvcmFnZSkoX3B0cik/JC8pICE9IG51bGw7XG59XG5cbmZ1bmN0aW9uIHJlZmVyZW5jZVR5cGUoZGVmaW5pdGlvbikge1xuICByZXR1cm4gdHlwZUlkZW50aWZpZXIoZGVmaW5pdGlvbikubWF0Y2goL18oW15fXSspKF9wdHIpPyQvKVsxXTtcbn1cblxuZnVuY3Rpb24gYmFzZURlZmluaXRpb24oZGVmaW5pdGlvbikge1xuICBsZXQgYmFzZUlkZW50aWZpZXIgPSB0eXBlSWRlbnRpZmllcihkZWZpbml0aW9uKVxuICAvLyBmaXJzdCBkb2xsYXIgc2lnbiAgICAgbGFzdCBkb2xsYXIgc2lnblxuICAvLyAgIGAtLS0tLS0tLS0uICAgICAgICwtLS0nXG4gIC5tYXRjaCgvXlteJF0rXFwkXyguKylfXFwkW14kXSskLylbMV07XG4gIC8vICAgICAgICAgICAgICBgLS0tLScgZ3JlZWR5IG1hdGNoXG5cbiAgLy8gSEFDSyAtIGludGVybmFsIHR5cGVzIGZvciBtZW1vcnkgb3Igc3RvcmFnZSBhbHNvIHNlZW0gdG8gYmUgcG9pbnRlcnNcbiAgaWYgKGJhc2VJZGVudGlmaWVyLm1hdGNoKC9fKG1lbW9yeXxzdG9yYWdlKSQvKSAhPSBudWxsKSB7XG4gICAgYmFzZUlkZW50aWZpZXIgPSBgJHtiYXNlSWRlbnRpZmllcn1fcHRyYDtcbiAgfVxuXG4gIC8vIGFub3RoZXIgSEFDSyAtIHdlIGdldCBhd2F5IHdpdGggaXQgYmVjYXVzZXdlJ3JlIG9ubHkgdXNpbmcgdGhhdCBvbmUgcHJvcGVydHlcbiAgcmV0dXJuIHtcbiAgICB0eXBlRGVzY3JpcHRpb25zOiB7XG4gICAgICB0eXBlSWRlbnRpZmllcjogYmFzZUlkZW50aWZpZXJcbiAgICB9XG4gIH07XG59XG5cbmZ1bmN0aW9uIHRvQmlnTnVtYmVyKGJ5dGVzKSB7XG4gIGlmIChieXRlcyA9PSB1bmRlZmluZWQpIHtcbiAgICByZXR1cm4gdW5kZWZpbmVkO1xuICB9IGVsc2UgaWYgKHR5cGVvZiBieXRlcyA9PSBcInN0cmluZ1wiKSB7XG4gICAgcmV0dXJuIG5ldyBfYmlnbnVtYmVyLkJpZ051bWJlcihieXRlcywgMTYpO1xuICB9IGVsc2UgaWYgKHR5cGVvZiBieXRlcyA9PSBcIm51bWJlclwiIHx8IF9iaWdudW1iZXIuQmlnTnVtYmVyLmlzQmlnTnVtYmVyKGJ5dGVzKSkge1xuICAgIHJldHVybiBuZXcgX2JpZ251bWJlci5CaWdOdW1iZXIoYnl0ZXMpO1xuICB9IGVsc2UgaWYgKGJ5dGVzLnJlZHVjZSkge1xuICAgIHJldHVybiBieXRlcy5yZWR1Y2UoKG51bSwgYnl0ZSkgPT4gbnVtLnRpbWVzKDB4MTAwKS5wbHVzKGJ5dGUpLCBuZXcgX2JpZ251bWJlci5CaWdOdW1iZXIoMCkpO1xuICB9XG59XG5cbmZ1bmN0aW9uIHRvU2lnbmVkQmlnTnVtYmVyKGJ5dGVzKSB7XG4gIGlmIChieXRlc1swXSA8IDBiMTAwMDAwMDApIHtcbiAgICAvLyBmaXJzdCBiaXQgaXMgMFxuICAgIHJldHVybiB0b0JpZ051bWJlcihieXRlcyk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHRvQmlnTnVtYmVyKGJ5dGVzLm1hcChiID0+IDB4ZmYgLSBiKSkucGx1cygxKS5uZWdhdGVkKCk7XG4gIH1cbn1cblxuLyoqXG4gKiBAcGFyYW0gYnl0ZXMgLSBVaW50OEFycmF5XG4gKiBAcGFyYW0gbGVuZ3RoIC0gZGVzaXJlZCBieXRlIGxlbmd0aCAocGFkIHdpdGggemVyb2VzKVxuICogQHBhcmFtIHRyaW0gLSBvbWl0IGxlYWRpbmcgemVyb2VzXG4gKi9cbmZ1bmN0aW9uIHRvSGV4U3RyaW5nKGJ5dGVzLCBsZW5ndGggPSAwLCB0cmltID0gZmFsc2UpIHtcbiAgaWYgKHR5cGVvZiBsZW5ndGggPT0gXCJib29sZWFuXCIpIHtcbiAgICB0cmltID0gbGVuZ3RoO1xuICAgIGxlbmd0aCA9IDA7XG4gIH1cblxuICBpZiAoX2JpZ251bWJlci5CaWdOdW1iZXIuaXNCaWdOdW1iZXIoYnl0ZXMpKSB7XG4gICAgYnl0ZXMgPSB0b0J5dGVzKGJ5dGVzKTtcbiAgfVxuXG4gIGNvbnN0IHBhZCA9IHMgPT4gYCR7XCIwMFwiLnNsaWNlKDAsIDIgLSBzLmxlbmd0aCl9JHtzfWA7XG5cbiAgLy8gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAwICAxICAyICAzICA0XG4gIC8vICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgMCAgMSAgMiAgMyAgNCAgNSAgNiAgN1xuICAvLyBieXRlcy5sZW5ndGg6ICAgICAgICA1ICAtICAweCggICAgICAgICAgZTUgYzIgYWEgMDkgMTEgKVxuICAvLyBsZW5ndGggKHByZWZlcnJlZCk6ICA4ICAtICAweCggMDAgMDAgMDAgZTUgYzIgYWEgMDkgMTEgKVxuICAvLyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYC0tLi0tLSdcbiAgLy8gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb2Zmc2V0IDNcbiAgaWYgKGJ5dGVzLmxlbmd0aCA8IGxlbmd0aCkge1xuICAgIGxldCBwcmlvciA9IGJ5dGVzO1xuICAgIGJ5dGVzID0gbmV3IFVpbnQ4QXJyYXkobGVuZ3RoKTtcblxuICAgIGJ5dGVzLnNldChwcmlvciwgbGVuZ3RoIC0gcHJpb3IubGVuZ3RoKTtcbiAgfVxuXG4gIGRlYnVnKFwiYnl0ZXM6ICVvXCIsIGJ5dGVzKTtcblxuICBsZXQgc3RyaW5nID0gYnl0ZXMucmVkdWNlKChzdHIsIGJ5dGUpID0+IGAke3N0cn0ke3BhZChieXRlLnRvU3RyaW5nKDE2KSl9YCwgXCJcIik7XG5cbiAgaWYgKHRyaW0pIHtcbiAgICBzdHJpbmcgPSBzdHJpbmcucmVwbGFjZSgvXigwMCkrLywgXCJcIik7XG4gIH1cblxuICBpZiAoc3RyaW5nLmxlbmd0aCA9PSAwKSB7XG4gICAgc3RyaW5nID0gXCIwMFwiO1xuICB9XG5cbiAgcmV0dXJuIGAweCR7c3RyaW5nfWA7XG59XG5cbmZ1bmN0aW9uIHRvQnl0ZXMobnVtYmVyLCBsZW5ndGggPSAwKSB7XG4gIGlmIChudW1iZXIgPCAwIHx8IG51bWJlciA9PT0gXCJcIikge1xuICAgIHJldHVybiBbXTtcbiAgfVxuXG4gIGxldCBoZXggPSBudW1iZXIudG9TdHJpbmcoMTYpO1xuICBpZiAoaGV4Lmxlbmd0aCAlIDIgPT0gMSkge1xuICAgIGhleCA9IGAwJHtoZXh9YDtcbiAgfVxuXG4gIGxldCBieXRlcyA9IG5ldyBVaW50OEFycmF5KGhleC5tYXRjaCgvLnsyfS9nKS5tYXAoYnl0ZSA9PiBwYXJzZUludChieXRlLCAxNikpKTtcblxuICBpZiAoYnl0ZXMubGVuZ3RoIDwgbGVuZ3RoKSB7XG4gICAgbGV0IHByaW9yID0gYnl0ZXM7XG4gICAgYnl0ZXMgPSBuZXcgVWludDhBcnJheShsZW5ndGgpO1xuICAgIGJ5dGVzLnNldChwcmlvciwgbGVuZ3RoIC0gcHJpb3IubGVuZ3RoKTtcbiAgfVxuXG4gIHJldHVybiBieXRlcztcbn1cblxuZnVuY3Rpb24ga2VjY2FrMjU2KC4uLmFyZ3MpIHtcbiAgbGV0IHdlYjMgPSBuZXcgX3dlYjIuZGVmYXVsdCgpO1xuXG4gIGRlYnVnKFwiYXJncyAlb1wiLCBhcmdzKTtcblxuICBsZXQgc2hhID0gd2ViMy51dGlscy5zb2xpZGl0eVNoYTMoLi4uYXJncyk7XG4gIGRlYnVnKFwic2hhICVvXCIsIHNoYSk7XG4gIHJldHVybiB0b0JpZ051bWJlcihzaGEpO1xufVxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL2xpYi9kYXRhL2RlY29kZS91dGlscy5qcyIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcImNoYWlcIik7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gZXh0ZXJuYWwgXCJjaGFpXCJcbi8vIG1vZHVsZSBpZCA9IDEyXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5nYXRoZXJBcnRpZmFjdHMgPSBleHBvcnRzLm1pZ3JhdGUgPSBleHBvcnRzLmNvbXBpbGUgPSBleHBvcnRzLmRlZmF1bHRNaWdyYXRpb25zID0gZXhwb3J0cy5hZGRNaWdyYXRpb25zID0gZXhwb3J0cy5hZGRDb250cmFjdHMgPSBleHBvcnRzLmNyZWF0ZVNhbmRib3ggPSBleHBvcnRzLnByZXBhcmVDb250cmFjdHMgPSB1bmRlZmluZWQ7XG5cbnZhciBfcHJvbWlzZSA9IHJlcXVpcmUoXCJiYWJlbC1ydW50aW1lL2NvcmUtanMvcHJvbWlzZVwiKTtcblxudmFyIF9wcm9taXNlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3Byb21pc2UpO1xuXG52YXIgX2tleXMgPSByZXF1aXJlKFwiYmFiZWwtcnVudGltZS9jb3JlLWpzL29iamVjdC9rZXlzXCIpO1xuXG52YXIgX2tleXMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfa2V5cyk7XG5cbnZhciBfYXN5bmNUb0dlbmVyYXRvcjIgPSByZXF1aXJlKFwiYmFiZWwtcnVudGltZS9oZWxwZXJzL2FzeW5jVG9HZW5lcmF0b3JcIik7XG5cbnZhciBfYXN5bmNUb0dlbmVyYXRvcjMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9hc3luY1RvR2VuZXJhdG9yMik7XG5cbmxldCBwcmVwYXJlQ29udHJhY3RzID0gZXhwb3J0cy5wcmVwYXJlQ29udHJhY3RzID0gKCgpID0+IHtcbiAgdmFyIF9yZWYgPSAoMCwgX2FzeW5jVG9HZW5lcmF0b3IzLmRlZmF1bHQpKGZ1bmN0aW9uKiAocHJvdmlkZXIsIHNvdXJjZXMgPSB7fSwgbWlncmF0aW9ucykge1xuICAgIGxldCBjb25maWcgPSB5aWVsZCBjcmVhdGVTYW5kYm94KCk7XG5cbiAgICBsZXQgYWNjb3VudHMgPSB5aWVsZCBnZXRBY2NvdW50cyhwcm92aWRlcik7XG5cbiAgICBjb25maWcubmV0d29ya3NbXCJkZWJ1Z2dlclwiXSA9IHtcbiAgICAgIHByb3ZpZGVyOiBwcm92aWRlcixcbiAgICAgIG5ldHdvcmtfaWQ6IFwiKlwiLFxuICAgICAgZnJvbTogYWNjb3VudHNbMF1cbiAgICB9O1xuICAgIGNvbmZpZy5uZXR3b3JrID0gXCJkZWJ1Z2dlclwiO1xuXG4gICAgeWllbGQgYWRkQ29udHJhY3RzKGNvbmZpZywgc291cmNlcyk7XG4gICAgbGV0IHsgY29udHJhY3RzLCBmaWxlcyB9ID0geWllbGQgY29tcGlsZShjb25maWcpO1xuICAgIGxldCBjb250cmFjdE5hbWVzID0gKDAsIF9rZXlzMi5kZWZhdWx0KShjb250cmFjdHMpO1xuXG4gICAgaWYgKCFtaWdyYXRpb25zKSB7XG4gICAgICBtaWdyYXRpb25zID0geWllbGQgZGVmYXVsdE1pZ3JhdGlvbnMoY29udHJhY3ROYW1lcyk7XG4gICAgfVxuXG4gICAgeWllbGQgYWRkTWlncmF0aW9ucyhjb25maWcsIG1pZ3JhdGlvbnMpO1xuICAgIHlpZWxkIG1pZ3JhdGUoY29uZmlnKTtcblxuICAgIGxldCBhcnRpZmFjdHMgPSB5aWVsZCBnYXRoZXJBcnRpZmFjdHMoY29uZmlnKTtcbiAgICBkZWJ1ZyhcImFydGlmYWN0czogJW9cIiwgYXJ0aWZhY3RzLm1hcChmdW5jdGlvbiAoYSkge1xuICAgICAgcmV0dXJuIGEuY29udHJhY3ROYW1lO1xuICAgIH0pKTtcblxuICAgIGxldCBhYnN0cmFjdGlvbnMgPSB7fTtcbiAgICBjb250cmFjdE5hbWVzLmZvckVhY2goZnVuY3Rpb24gKG5hbWUpIHtcbiAgICAgIGFic3RyYWN0aW9uc1tuYW1lXSA9IGNvbmZpZy5yZXNvbHZlci5yZXF1aXJlKG5hbWUpO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIHtcbiAgICAgIGZpbGVzLFxuICAgICAgYWJzdHJhY3Rpb25zLFxuICAgICAgYXJ0aWZhY3RzLFxuICAgICAgY29uZmlnXG4gICAgfTtcbiAgfSk7XG5cbiAgcmV0dXJuIGZ1bmN0aW9uIHByZXBhcmVDb250cmFjdHMoX3gpIHtcbiAgICByZXR1cm4gX3JlZi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICB9O1xufSkoKTtcblxubGV0IGNyZWF0ZVNhbmRib3ggPSBleHBvcnRzLmNyZWF0ZVNhbmRib3ggPSAoKCkgPT4ge1xuICB2YXIgX3JlZjIgPSAoMCwgX2FzeW5jVG9HZW5lcmF0b3IzLmRlZmF1bHQpKGZ1bmN0aW9uKiAoKSB7XG4gICAgbGV0IGNvbmZpZyA9IHlpZWxkIG5ldyBfcHJvbWlzZTIuZGVmYXVsdChmdW5jdGlvbiAoYWNjZXB0LCByZWplY3QpIHtcbiAgICAgIF90cnVmZmxlQm94Mi5kZWZhdWx0LnNhbmRib3goZnVuY3Rpb24gKGVyciwgcmVzdWx0KSB7XG4gICAgICAgIGlmIChlcnIpIHJldHVybiByZWplY3QoZXJyKTtcbiAgICAgICAgcmVzdWx0LnJlc29sdmVyID0gbmV3IF90cnVmZmxlUmVzb2x2ZXIyLmRlZmF1bHQocmVzdWx0KTtcbiAgICAgICAgcmVzdWx0LmFydGlmYWN0b3IgPSBuZXcgX3RydWZmbGVBcnRpZmFjdG9yMi5kZWZhdWx0KHJlc3VsdC5jb250cmFjdHNfYnVpbGRfZGlyZWN0b3J5KTtcbiAgICAgICAgcmVzdWx0Lm5ldHdvcmtzID0ge307XG5cbiAgICAgICAgYWNjZXB0KHJlc3VsdCk7XG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIHlpZWxkIF9mc0V4dHJhMi5kZWZhdWx0LnJlbW92ZShfcGF0aDIuZGVmYXVsdC5qb2luKGNvbmZpZy5jb250cmFjdHNfZGlyZWN0b3J5LCBcIk1ldGFDb2luLnNvbFwiKSk7XG4gICAgeWllbGQgX2ZzRXh0cmEyLmRlZmF1bHQucmVtb3ZlKF9wYXRoMi5kZWZhdWx0LmpvaW4oY29uZmlnLmNvbnRyYWN0c19kaXJlY3RvcnksIFwiQ29udmVydExpYi5zb2xcIikpO1xuICAgIHlpZWxkIF9mc0V4dHJhMi5kZWZhdWx0LnJlbW92ZShfcGF0aDIuZGVmYXVsdC5qb2luKGNvbmZpZy5taWdyYXRpb25zX2RpcmVjdG9yeSwgXCIyX2RlcGxveV9jb250cmFjdHMuanNcIikpO1xuXG4gICAgcmV0dXJuIGNvbmZpZztcbiAgfSk7XG5cbiAgcmV0dXJuIGZ1bmN0aW9uIGNyZWF0ZVNhbmRib3goKSB7XG4gICAgcmV0dXJuIF9yZWYyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gIH07XG59KSgpO1xuXG5sZXQgYWRkQ29udHJhY3RzID0gZXhwb3J0cy5hZGRDb250cmFjdHMgPSAoKCkgPT4ge1xuICB2YXIgX3JlZjMgPSAoMCwgX2FzeW5jVG9HZW5lcmF0b3IzLmRlZmF1bHQpKGZ1bmN0aW9uKiAoY29uZmlnLCBzb3VyY2VzID0ge30pIHtcbiAgICBsZXQgcHJvbWlzZXMgPSBbXTtcbiAgICBmb3IgKGxldCBmaWxlbmFtZSBvZiAoMCwgX2tleXMyLmRlZmF1bHQpKHNvdXJjZXMpKSB7XG4gICAgICBsZXQgc291cmNlID0gc291cmNlc1tmaWxlbmFtZV07XG4gICAgICBwcm9taXNlcy5wdXNoKF9mc0V4dHJhMi5kZWZhdWx0Lm91dHB1dEZpbGUoX3BhdGgyLmRlZmF1bHQuam9pbihjb25maWcuY29udHJhY3RzX2RpcmVjdG9yeSwgZmlsZW5hbWUpLCBzb3VyY2UpKTtcbiAgICB9XG5cbiAgICByZXR1cm4geWllbGQgX3Byb21pc2UyLmRlZmF1bHQuYWxsKHByb21pc2VzKTtcbiAgfSk7XG5cbiAgcmV0dXJuIGZ1bmN0aW9uIGFkZENvbnRyYWN0cyhfeDIpIHtcbiAgICByZXR1cm4gX3JlZjMuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgfTtcbn0pKCk7XG5cbmxldCBhZGRNaWdyYXRpb25zID0gZXhwb3J0cy5hZGRNaWdyYXRpb25zID0gKCgpID0+IHtcbiAgdmFyIF9yZWY0ID0gKDAsIF9hc3luY1RvR2VuZXJhdG9yMy5kZWZhdWx0KShmdW5jdGlvbiogKGNvbmZpZywgbWlncmF0aW9ucyA9IHt9KSB7XG4gICAgbGV0IHByb21pc2VzID0gW107XG4gICAgZm9yIChsZXQgZmlsZW5hbWUgb2YgKDAsIF9rZXlzMi5kZWZhdWx0KShtaWdyYXRpb25zKSkge1xuICAgICAgbGV0IHNvdXJjZSA9IG1pZ3JhdGlvbnNbZmlsZW5hbWVdO1xuICAgICAgcHJvbWlzZXMucHVzaChfZnNFeHRyYTIuZGVmYXVsdC5vdXRwdXRGaWxlKF9wYXRoMi5kZWZhdWx0LmpvaW4oY29uZmlnLm1pZ3JhdGlvbnNfZGlyZWN0b3J5LCBmaWxlbmFtZSksIHNvdXJjZSkpO1xuICAgIH1cblxuICAgIHJldHVybiB5aWVsZCBfcHJvbWlzZTIuZGVmYXVsdC5hbGwocHJvbWlzZXMpO1xuICB9KTtcblxuICByZXR1cm4gZnVuY3Rpb24gYWRkTWlncmF0aW9ucyhfeDMpIHtcbiAgICByZXR1cm4gX3JlZjQuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgfTtcbn0pKCk7XG5cbmxldCBkZWZhdWx0TWlncmF0aW9ucyA9IGV4cG9ydHMuZGVmYXVsdE1pZ3JhdGlvbnMgPSAoKCkgPT4ge1xuICB2YXIgX3JlZjUgPSAoMCwgX2FzeW5jVG9HZW5lcmF0b3IzLmRlZmF1bHQpKGZ1bmN0aW9uKiAoY29udHJhY3ROYW1lcykge1xuICAgIGNvbnRyYWN0TmFtZXMgPSBjb250cmFjdE5hbWVzLmZpbHRlcihmdW5jdGlvbiAobmFtZSkge1xuICAgICAgcmV0dXJuIG5hbWUgIT0gXCJNaWdyYXRpb25zXCI7XG4gICAgfSk7XG5cbiAgICBsZXQgbWlncmF0aW9ucyA9IHt9O1xuXG4gICAgY29udHJhY3ROYW1lcy5mb3JFYWNoKGZ1bmN0aW9uIChjb250cmFjdE5hbWUsIGkpIHtcbiAgICAgIGxldCBpbmRleCA9IGkgKyAyOyAvLyBzdGFydCBhdCAyIGNhdXNlIE1pZ3JhdGlvbnMgbWlncmF0aW9uXG4gICAgICBsZXQgZmlsZW5hbWUgPSBgJHtpbmRleH1fbWlncmF0ZV8ke2NvbnRyYWN0TmFtZX0uanNgO1xuICAgICAgbGV0IHNvdXJjZSA9IGBcbiAgICAgIHZhciAke2NvbnRyYWN0TmFtZX0gPSBhcnRpZmFjdHMucmVxdWlyZShcIiR7Y29udHJhY3ROYW1lfVwiKTtcblxuICAgICAgbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihkZXBsb3llcikge1xuICAgICAgICBkZXBsb3llci5kZXBsb3koJHtjb250cmFjdE5hbWV9KTtcbiAgICAgIH07XG4gICAgYDtcblxuICAgICAgbWlncmF0aW9uc1tmaWxlbmFtZV0gPSBzb3VyY2U7XG4gICAgfSk7XG5cbiAgICByZXR1cm4gbWlncmF0aW9ucztcbiAgfSk7XG5cbiAgcmV0dXJuIGZ1bmN0aW9uIGRlZmF1bHRNaWdyYXRpb25zKF94NCkge1xuICAgIHJldHVybiBfcmVmNS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICB9O1xufSkoKTtcblxubGV0IGNvbXBpbGUgPSBleHBvcnRzLmNvbXBpbGUgPSAoKCkgPT4ge1xuICB2YXIgX3JlZjYgPSAoMCwgX2FzeW5jVG9HZW5lcmF0b3IzLmRlZmF1bHQpKGZ1bmN0aW9uKiAoY29uZmlnKSB7XG4gICAgcmV0dXJuIG5ldyBfcHJvbWlzZTIuZGVmYXVsdChmdW5jdGlvbiAoYWNjZXB0LCByZWplY3QpIHtcbiAgICAgIF90cnVmZmxlV29ya2Zsb3dDb21waWxlMi5kZWZhdWx0LmNvbXBpbGUoY29uZmlnLndpdGgoe1xuICAgICAgICBhbGw6IHRydWUsXG4gICAgICAgIHF1aWV0OiB0cnVlXG4gICAgICB9KSwgZnVuY3Rpb24gKGVyciwgcmVzdWx0KSB7XG4gICAgICAgIGlmIChlcnIpIHJldHVybiByZWplY3QoZXJyKTtcbiAgICAgICAgY29uc3QgeyBjb250cmFjdHMsIG91dHB1dHMgfSA9IHJlc3VsdDtcbiAgICAgICAgZGVidWcoXCJyZXN1bHQgJU9cIiwgcmVzdWx0KTtcbiAgICAgICAgcmV0dXJuIGFjY2VwdCh7IGNvbnRyYWN0cywgZmlsZXM6IG91dHB1dHMuc29sYyB9KTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9KTtcblxuICByZXR1cm4gZnVuY3Rpb24gY29tcGlsZShfeDUpIHtcbiAgICByZXR1cm4gX3JlZjYuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgfTtcbn0pKCk7XG5cbmxldCBtaWdyYXRlID0gZXhwb3J0cy5taWdyYXRlID0gKCgpID0+IHtcbiAgdmFyIF9yZWY3ID0gKDAsIF9hc3luY1RvR2VuZXJhdG9yMy5kZWZhdWx0KShmdW5jdGlvbiogKGNvbmZpZykge1xuICAgIHJldHVybiBuZXcgX3Byb21pc2UyLmRlZmF1bHQoZnVuY3Rpb24gKGFjY2VwdCwgcmVqZWN0KSB7XG4gICAgICBfdHJ1ZmZsZU1pZ3JhdGUyLmRlZmF1bHQucnVuKGNvbmZpZy53aXRoKHtcbiAgICAgICAgcXVpZXQ6IHRydWVcbiAgICAgIH0pLCBmdW5jdGlvbiAoZXJyLCBjb250cmFjdHMpIHtcbiAgICAgICAgaWYgKGVycikgcmV0dXJuIHJlamVjdChlcnIpO1xuICAgICAgICBhY2NlcHQoY29udHJhY3RzKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9KTtcblxuICByZXR1cm4gZnVuY3Rpb24gbWlncmF0ZShfeDYpIHtcbiAgICByZXR1cm4gX3JlZjcuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgfTtcbn0pKCk7XG5cbmxldCBnYXRoZXJBcnRpZmFjdHMgPSBleHBvcnRzLmdhdGhlckFydGlmYWN0cyA9ICgoKSA9PiB7XG4gIHZhciBfcmVmOCA9ICgwLCBfYXN5bmNUb0dlbmVyYXRvcjMuZGVmYXVsdCkoZnVuY3Rpb24qIChjb25maWcpIHtcbiAgICByZXR1cm4gX3RydWZmbGVEZWJ1Z1V0aWxzMi5kZWZhdWx0LmdhdGhlckFydGlmYWN0cyhjb25maWcpO1xuICB9KTtcblxuICByZXR1cm4gZnVuY3Rpb24gZ2F0aGVyQXJ0aWZhY3RzKF94Nykge1xuICAgIHJldHVybiBfcmVmOC5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICB9O1xufSkoKTtcblxuZXhwb3J0cy5nZXRBY2NvdW50cyA9IGdldEFjY291bnRzO1xuXG52YXIgX2RlYnVnID0gcmVxdWlyZShcImRlYnVnXCIpO1xuXG52YXIgX2RlYnVnMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2RlYnVnKTtcblxudmFyIF9wYXRoID0gcmVxdWlyZShcInBhdGhcIik7XG5cbnZhciBfcGF0aDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9wYXRoKTtcblxudmFyIF9mc0V4dHJhID0gcmVxdWlyZShcImZzLWV4dHJhXCIpO1xuXG52YXIgX2ZzRXh0cmEyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZnNFeHRyYSk7XG5cbnZhciBfYXN5bmMgPSByZXF1aXJlKFwiYXN5bmNcIik7XG5cbnZhciBfYXN5bmMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfYXN5bmMpO1xuXG52YXIgX3RydWZmbGVXb3JrZmxvd0NvbXBpbGUgPSByZXF1aXJlKFwidHJ1ZmZsZS13b3JrZmxvdy1jb21waWxlXCIpO1xuXG52YXIgX3RydWZmbGVXb3JrZmxvd0NvbXBpbGUyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfdHJ1ZmZsZVdvcmtmbG93Q29tcGlsZSk7XG5cbnZhciBfdHJ1ZmZsZURlYnVnVXRpbHMgPSByZXF1aXJlKFwidHJ1ZmZsZS1kZWJ1Zy11dGlsc1wiKTtcblxudmFyIF90cnVmZmxlRGVidWdVdGlsczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF90cnVmZmxlRGVidWdVdGlscyk7XG5cbnZhciBfdHJ1ZmZsZUFydGlmYWN0b3IgPSByZXF1aXJlKFwidHJ1ZmZsZS1hcnRpZmFjdG9yXCIpO1xuXG52YXIgX3RydWZmbGVBcnRpZmFjdG9yMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3RydWZmbGVBcnRpZmFjdG9yKTtcblxudmFyIF93ZWIgPSByZXF1aXJlKFwid2ViM1wiKTtcblxudmFyIF93ZWIyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfd2ViKTtcblxudmFyIF90cnVmZmxlTWlncmF0ZSA9IHJlcXVpcmUoXCJ0cnVmZmxlLW1pZ3JhdGVcIik7XG5cbnZhciBfdHJ1ZmZsZU1pZ3JhdGUyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfdHJ1ZmZsZU1pZ3JhdGUpO1xuXG52YXIgX3RydWZmbGVCb3ggPSByZXF1aXJlKFwidHJ1ZmZsZS1ib3hcIik7XG5cbnZhciBfdHJ1ZmZsZUJveDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF90cnVmZmxlQm94KTtcblxudmFyIF90cnVmZmxlUmVzb2x2ZXIgPSByZXF1aXJlKFwidHJ1ZmZsZS1yZXNvbHZlclwiKTtcblxudmFyIF90cnVmZmxlUmVzb2x2ZXIyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfdHJ1ZmZsZVJlc29sdmVyKTtcblxudmFyIF90cnVmZmxlRXhwZWN0ID0gcmVxdWlyZShcInRydWZmbGUtZXhwZWN0XCIpO1xuXG52YXIgX3RydWZmbGVFeHBlY3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfdHJ1ZmZsZUV4cGVjdCk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmNvbnN0IGRlYnVnID0gKDAsIF9kZWJ1ZzIuZGVmYXVsdCkoXCJ0ZXN0OmhlbHBlcnNcIik7XG5cbmZ1bmN0aW9uIGdldEFjY291bnRzKHByb3ZpZGVyKSB7XG4gIGxldCB3ZWIzID0gbmV3IF93ZWIyLmRlZmF1bHQocHJvdmlkZXIpO1xuICByZXR1cm4gbmV3IF9wcm9taXNlMi5kZWZhdWx0KGZ1bmN0aW9uIChhY2NlcHQsIHJlamVjdCkge1xuICAgIHdlYjMuZXRoLmdldEFjY291bnRzKGZ1bmN0aW9uIChlcnIsIGFjY291bnRzKSB7XG4gICAgICBpZiAoZXJyKSByZXR1cm4gcmVqZWN0KGVycik7XG4gICAgICBhY2NlcHQoYWNjb3VudHMpO1xuICAgIH0pO1xuICB9KTtcbn1cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi90ZXN0L2hlbHBlcnMuanMiLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcblxudmFyIF9kZWJ1ZyA9IHJlcXVpcmUoXCJkZWJ1Z1wiKTtcblxudmFyIF9kZWJ1ZzIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9kZWJ1Zyk7XG5cbnZhciBfcmVzZWxlY3RUcmVlID0gcmVxdWlyZShcInJlc2VsZWN0LXRyZWVcIik7XG5cbnZhciBfanNvblBvaW50ZXIgPSByZXF1aXJlKFwianNvbi1wb2ludGVyXCIpO1xuXG52YXIgX2pzb25Qb2ludGVyMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2pzb25Qb2ludGVyKTtcblxudmFyIF9zZWxlY3RvcnMgPSByZXF1aXJlKFwibGliL3NvbGlkaXR5L3NlbGVjdG9yc1wiKTtcblxudmFyIF9zZWxlY3RvcnMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfc2VsZWN0b3JzKTtcblxudmFyIF9tYXAgPSByZXF1aXJlKFwiLi4vbWFwXCIpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5jb25zdCBkZWJ1ZyA9ICgwLCBfZGVidWcyLmRlZmF1bHQpKFwiZGVidWdnZXI6YXN0OnNlbGVjdG9yc1wiKTtcblxuLyoqXG4gKiBhc3RcbiAqL1xuY29uc3QgYXN0ID0gKDAsIF9yZXNlbGVjdFRyZWUuY3JlYXRlU2VsZWN0b3JUcmVlKSh7XG4gIC8qKlxuICAgKiBhc3Qudmlld3NcbiAgICovXG4gIHZpZXdzOiB7XG4gICAgLyoqXG4gICAgICogYXN0LnZpZXdzLnNvdXJjZXNcbiAgICAgKi9cbiAgICBzb3VyY2VzOiAoMCwgX3Jlc2VsZWN0VHJlZS5jcmVhdGVMZWFmKShbX3NlbGVjdG9yczIuZGVmYXVsdC5pbmZvLnNvdXJjZXNdLCBzb3VyY2VzID0+IHNvdXJjZXMpXG4gIH0sXG5cbiAgLyoqXG4gICAqIGFzdC5jdXJyZW50XG4gICAqL1xuICBjdXJyZW50OiB7XG5cbiAgICAvKipcbiAgICAgKiBhc3QuY3VycmVudC50cmVlXG4gICAgICpcbiAgICAgKiBhc3QgZm9yIGN1cnJlbnQgc291cmNlXG4gICAgICovXG4gICAgdHJlZTogKDAsIF9yZXNlbGVjdFRyZWUuY3JlYXRlTGVhZikoW19zZWxlY3RvcnMyLmRlZmF1bHQuY3VycmVudC5zb3VyY2VdLCAoeyBhc3QgfSkgPT4gYXN0KSxcblxuICAgIC8qKlxuICAgICAqIGFzdC5jdXJyZW50LmluZGV4XG4gICAgICpcbiAgICAgKiBzb3VyY2UgSURcbiAgICAgKi9cbiAgICBpbmRleDogKDAsIF9yZXNlbGVjdFRyZWUuY3JlYXRlTGVhZikoW19zZWxlY3RvcnMyLmRlZmF1bHQuY3VycmVudC5zb3VyY2VdLCAoeyBpZCB9KSA9PiBpZCksXG5cbiAgICAvKipcbiAgICAgKiBhc3QuY3VycmVudC5wb2ludGVyXG4gICAgICpcbiAgICAgKiBqc29ucG9pbnRlciBmb3IgY3VycmVudCBhc3Qgbm9kZVxuICAgICAqL1xuICAgIHBvaW50ZXI6ICgwLCBfcmVzZWxlY3RUcmVlLmNyZWF0ZUxlYWYpKFtcIi4vdHJlZVwiLCBfc2VsZWN0b3JzMi5kZWZhdWx0LmN1cnJlbnQuc291cmNlUmFuZ2VdLCAoYXN0LCByYW5nZSkgPT4gKDAsIF9tYXAuZmluZFJhbmdlKShhc3QsIHJhbmdlLnN0YXJ0LCByYW5nZS5sZW5ndGgpKSxcblxuICAgIC8qKlxuICAgICAqIGFzdC5jdXJyZW50Lm5vZGVcbiAgICAgKlxuICAgICAqIGN1cnJlbnQgYXN0IG5vZGUgdG8gZXhlY3V0ZVxuICAgICAqL1xuICAgIG5vZGU6ICgwLCBfcmVzZWxlY3RUcmVlLmNyZWF0ZUxlYWYpKFtcIi4vdHJlZVwiLCBcIi4vcG9pbnRlclwiXSwgKGFzdCwgcG9pbnRlcikgPT4gcG9pbnRlciA/IF9qc29uUG9pbnRlcjIuZGVmYXVsdC5nZXQoYXN0LCBwb2ludGVyKSA6IF9qc29uUG9pbnRlcjIuZGVmYXVsdC5nZXQoYXN0LCBcIlwiKSlcblxuICB9XG59KTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gYXN0O1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL2xpYi9hc3Qvc2VsZWN0b3JzL2luZGV4LmpzIiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwicmVkdXhcIik7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gZXh0ZXJuYWwgXCJyZWR1eFwiXG4vLyBtb2R1bGUgaWQgPSAxNVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCJnYW5hY2hlLWNsaVwiKTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyBleHRlcm5hbCBcImdhbmFjaGUtY2xpXCJcbi8vIG1vZHVsZSBpZCA9IDE2XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcImJhYmVsLXJ1bnRpbWUvY29yZS1qcy9vYmplY3Qva2V5c1wiKTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyBleHRlcm5hbCBcImJhYmVsLXJ1bnRpbWUvY29yZS1qcy9vYmplY3Qva2V5c1wiXG4vLyBtb2R1bGUgaWQgPSAxN1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcblxudmFyIF9hc3luY1RvR2VuZXJhdG9yMiA9IHJlcXVpcmUoXCJiYWJlbC1ydW50aW1lL2hlbHBlcnMvYXN5bmNUb0dlbmVyYXRvclwiKTtcblxudmFyIF9hc3luY1RvR2VuZXJhdG9yMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2FzeW5jVG9HZW5lcmF0b3IyKTtcblxudmFyIF9kZWJ1ZyA9IHJlcXVpcmUoXCJkZWJ1Z1wiKTtcblxudmFyIF9kZWJ1ZzIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9kZWJ1Zyk7XG5cbnZhciBfdHJ1ZmZsZUV4cGVjdCA9IHJlcXVpcmUoXCJ0cnVmZmxlLWV4cGVjdFwiKTtcblxudmFyIF90cnVmZmxlRXhwZWN0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3RydWZmbGVFeHBlY3QpO1xuXG52YXIgX3Nlc3Npb24gPSByZXF1aXJlKFwiLi9zZXNzaW9uXCIpO1xuXG52YXIgX3Nlc3Npb24yID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfc2Vzc2lvbik7XG5cbnZhciBfcmVzZWxlY3RUcmVlID0gcmVxdWlyZShcInJlc2VsZWN0LXRyZWVcIik7XG5cbnZhciBfc2VsZWN0b3JzID0gcmVxdWlyZShcIi4vZGF0YS9zZWxlY3RvcnNcIik7XG5cbnZhciBfc2VsZWN0b3JzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3NlbGVjdG9ycyk7XG5cbnZhciBfc2VsZWN0b3JzMyA9IHJlcXVpcmUoXCIuL2FzdC9zZWxlY3RvcnNcIik7XG5cbnZhciBfc2VsZWN0b3JzNCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3NlbGVjdG9yczMpO1xuXG52YXIgX3NlbGVjdG9yczUgPSByZXF1aXJlKFwiLi90cmFjZS9zZWxlY3RvcnNcIik7XG5cbnZhciBfc2VsZWN0b3JzNiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3NlbGVjdG9yczUpO1xuXG52YXIgX3NlbGVjdG9yczcgPSByZXF1aXJlKFwiLi9ldm0vc2VsZWN0b3JzXCIpO1xuXG52YXIgX3NlbGVjdG9yczggPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9zZWxlY3RvcnM3KTtcblxudmFyIF9zZWxlY3RvcnM5ID0gcmVxdWlyZShcIi4vc29saWRpdHkvc2VsZWN0b3JzXCIpO1xuXG52YXIgX3NlbGVjdG9yczEwID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfc2VsZWN0b3JzOSk7XG5cbnZhciBfc2VsZWN0b3JzMTEgPSByZXF1aXJlKFwiLi9zZXNzaW9uL3NlbGVjdG9yc1wiKTtcblxudmFyIF9zZWxlY3RvcnMxMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3NlbGVjdG9yczExKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuY29uc3QgZGVidWcgPSAoMCwgX2RlYnVnMi5kZWZhdWx0KShcImRlYnVnZ2VyXCIpO1xuXG4vKipcbiAqIEBleGFtcGxlXG4gKiBsZXQgc2Vzc2lvbiA9IERlYnVnZ2VyXG4gKiAgIC5mb3JUeCg8dHhIYXNoPiwge1xuICogICAgIGNvbnRyYWN0czogWzxjb250cmFjdCBvYmo+LCAuLi5dLFxuICogICAgIHByb3ZpZGVyOiA8cHJvdmlkZXIgaW5zdGFuY2U+XG4gKiAgIH0pXG4gKiAgIC5jb25uZWN0KCk7XG4gKi9cbmNsYXNzIERlYnVnZ2VyIHtcbiAgLyoqXG4gICAqIEBwYXJhbSB7U2Vzc2lvbn0gc2Vzc2lvbiAtIGRlYnVnZ2VyIHNlc3Npb25cbiAgICogQHByaXZhdGVcbiAgICovXG4gIGNvbnN0cnVjdG9yKHNlc3Npb24pIHtcbiAgICAvKipcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIHRoaXMuX3Nlc3Npb24gPSBzZXNzaW9uO1xuICB9XG5cbiAgLyoqXG4gICAqIEluc3RhbnRpYXRlcyBhIERlYnVnZ2VyIGZvciBhIGdpdmVuIHRyYW5zYWN0aW9uIGhhc2guXG4gICAqXG4gICAqIEBwYXJhbSB7U3RyaW5nfSB0eEhhc2ggLSB0cmFuc2FjdGlvbiBoYXNoIHdpdGggbGVhZGluZyBcIjB4XCJcbiAgICogQHBhcmFtIHt7Y29udHJhY3RzOiBBcnJheTxDb250cmFjdD4sIGZpbGVzOiBBcnJheTxTdHJpbmc+LCBwcm92aWRlcjogV2ViM1Byb3ZpZGVyfX0gb3B0aW9ucyAtXG4gICAqIEByZXR1cm4ge0RlYnVnZ2VyfSBpbnN0YW5jZVxuICAgKi9cbiAgc3RhdGljIGZvclR4KHR4SGFzaCwgb3B0aW9ucyA9IHt9KSB7XG4gICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgIHJldHVybiAoMCwgX2FzeW5jVG9HZW5lcmF0b3IzLmRlZmF1bHQpKGZ1bmN0aW9uKiAoKSB7XG4gICAgICBfdHJ1ZmZsZUV4cGVjdDIuZGVmYXVsdC5vcHRpb25zKG9wdGlvbnMsIFtcImNvbnRyYWN0c1wiLCBcInByb3ZpZGVyXCJdKTtcblxuICAgICAgbGV0IHNlc3Npb24gPSBuZXcgX3Nlc3Npb24yLmRlZmF1bHQob3B0aW9ucy5jb250cmFjdHMsIG9wdGlvbnMuZmlsZXMsIHR4SGFzaCwgb3B0aW9ucy5wcm92aWRlcik7XG5cbiAgICAgIHRyeSB7XG4gICAgICAgIHlpZWxkIHNlc3Npb24ucmVhZHkoKTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgdGhyb3cgZTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIG5ldyBfdGhpcyhzZXNzaW9uKTtcbiAgICB9KSgpO1xuICB9XG5cbiAgLyoqXG4gICAqIENvbm5lY3RzIHRvIHRoZSBpbnN0YW50aWF0ZWQgRGVidWdnZXIuXG4gICAqXG4gICAqIEByZXR1cm4ge1Nlc3Npb259IHNlc3Npb24gaW5zdGFuY2VcbiAgICovXG4gIGNvbm5lY3QoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3Nlc3Npb247XG4gIH1cblxuICAvKipcbiAgICogRXhwb3J0ZWQgc2VsZWN0b3JzXG4gICAqXG4gICAqIFNlZSBpbmRpdmlkdWFsIHNlbGVjdG9yIGRvY3MgZm9yIGZ1bGwgbGlzdGluZ1xuICAgKlxuICAgKiBAZXhhbXBsZVxuICAgKiBEZWJ1Z2dlci5zZWxlY3RvcnMuYXN0LmN1cnJlbnQudHJlZVxuICAgKlxuICAgKiBAZXhhbXBsZVxuICAgKiBEZWJ1Z2dlci5zZWxlY3RvcnMuc29saWRpdHkuY3VycmVudC5pbnN0cnVjdGlvblxuICAgKlxuICAgKiBAZXhhbXBsZVxuICAgKiBEZWJ1Z2dlci5zZWxlY3RvcnMudHJhY2Uuc3RlcHNcbiAgICovXG4gIHN0YXRpYyBnZXQgc2VsZWN0b3JzKCkge1xuICAgIHJldHVybiAoMCwgX3Jlc2VsZWN0VHJlZS5jcmVhdGVOZXN0ZWRTZWxlY3Rvcikoe1xuICAgICAgYXN0OiBfc2VsZWN0b3JzNC5kZWZhdWx0LFxuICAgICAgZGF0YTogX3NlbGVjdG9yczIuZGVmYXVsdCxcbiAgICAgIHRyYWNlOiBfc2VsZWN0b3JzNi5kZWZhdWx0LFxuICAgICAgZXZtOiBfc2VsZWN0b3JzOC5kZWZhdWx0LFxuICAgICAgc29saWRpdHk6IF9zZWxlY3RvcnMxMC5kZWZhdWx0LFxuICAgICAgc2Vzc2lvbjogX3NlbGVjdG9yczEyLmRlZmF1bHRcbiAgICB9KTtcbiAgfVxufVxuXG5leHBvcnRzLmRlZmF1bHQgPSBEZWJ1Z2dlcjsgLyoqXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICogQHR5cGVkZWYge09iamVjdH0gQ29udHJhY3RcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKiBAcHJvcGVydHkge3N0cmluZ30gY29udHJhY3ROYW1lIGNvbnRyYWN0IG5hbWVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKiBAcHJvcGVydHkge3N0cmluZ30gc291cmNlIHNvbGlkaXR5IHNvdXJjZSBjb2RlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICogQHByb3BlcnR5IHtzdHJpbmd9IHNvdXJjZVBhdGggcGF0aCB0byBzb3VyY2UgZmlsZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBiaW5hcnkgMHgtcHJlZml4ZWQgaGV4IHN0cmluZyB3aXRoIGNyZWF0ZSBieXRlY29kZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBzb3VyY2VNYXAgc29saWRpdHkgc291cmNlIG1hcCBmb3IgY3JlYXRlIGJ5dGVjb2RlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICogQHByb3BlcnR5IHtPYmplY3R9IGFzdCBBYnN0cmFjdCBTeW50YXggVHJlZSBmcm9tIFNvbGlkaXR5XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICogQHByb3BlcnR5IHtzdHJpbmd9IGRlcGxveWVkQmluYXJ5IDB4LXByZWZpeGVkIGNvbXBpbGVkIGJpbmFyeSAob24gY2hhaW4pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICogQHByb3BlcnR5IHtzdHJpbmd9IGRlcGxveWVkU291cmNlTWFwIHNvbGlkaXR5IHNvdXJjZSBtYXAgZm9yIG9uLWNoYWluIGJ5dGVjb2RlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICovXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vbGliL2RlYnVnZ2VyLmpzIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5cbnZhciBfcmVzZWxlY3RUcmVlID0gcmVxdWlyZShcInJlc2VsZWN0LXRyZWVcIik7XG5cbmxldCB0cmFjZSA9ICgwLCBfcmVzZWxlY3RUcmVlLmNyZWF0ZVNlbGVjdG9yVHJlZSkoe1xuICAvKipcbiAgICogdHJhY2UuaW5kZXhcbiAgICpcbiAgICogY3VycmVudCBzdGVwIGluZGV4XG4gICAqL1xuICBpbmRleDogc3RhdGUgPT4gc3RhdGUudHJhY2UucHJvYy5pbmRleCxcblxuICAvKipcbiAgICogdHJhY2Uuc3RlcHNcbiAgICpcbiAgICogYWxsIHRyYWNlIHN0ZXBzXG4gICAqL1xuICBzdGVwczogc3RhdGUgPT4gc3RhdGUudHJhY2UuaW5mby5zdGVwcyxcblxuICAvKipcbiAgICogdHJhY2Uuc3RlcHNSZW1haW5pbmdcbiAgICpcbiAgICogbnVtYmVyIG9mIHN0ZXBzIHJlbWFpbmluZyBpbiB0cmFjZVxuICAgKi9cbiAgc3RlcHNSZW1haW5pbmc6ICgwLCBfcmVzZWxlY3RUcmVlLmNyZWF0ZUxlYWYpKFtcIi4vc3RlcHNcIiwgXCIuL2luZGV4XCJdLCAoc3RlcHMsIGluZGV4KSA9PiBzdGVwcy5sZW5ndGggLSBpbmRleCksXG5cbiAgLyoqXG4gICAqIHRyYWNlLnN0ZXBcbiAgICpcbiAgICogY3VycmVudCB0cmFjZSBzdGVwXG4gICAqL1xuICBzdGVwOiAoMCwgX3Jlc2VsZWN0VHJlZS5jcmVhdGVMZWFmKShbXCIuL3N0ZXBzXCIsIFwiLi9pbmRleFwiXSwgKHN0ZXBzLCBpbmRleCkgPT4gc3RlcHNbaW5kZXhdKSxcblxuICAvKipcbiAgICogdHJhY2UubmV4dFxuICAgKlxuICAgKiBuZXh0IHRyYWNlIHN0ZXAgb3Ige31cbiAgICovXG4gIG5leHQ6ICgwLCBfcmVzZWxlY3RUcmVlLmNyZWF0ZUxlYWYpKFtcIi4vc3RlcHNcIiwgXCIuL2luZGV4XCJdLCAoc3RlcHMsIGluZGV4KSA9PiBpbmRleCA8IHN0ZXBzLmxlbmd0aCAtIDEgPyBzdGVwc1tpbmRleCArIDFdIDoge30pXG59KTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gdHJhY2U7XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vbGliL3RyYWNlL3NlbGVjdG9ycy9pbmRleC5qcyIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcImJpZ251bWJlci5qc1wiKTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyBleHRlcm5hbCBcImJpZ251bWJlci5qc1wiXG4vLyBtb2R1bGUgaWQgPSAyMFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuc2F2ZVN0ZXBzID0gc2F2ZVN0ZXBzO1xuZXhwb3J0cy5yZWNlaXZlQWRkcmVzc2VzID0gcmVjZWl2ZUFkZHJlc3NlcztcbmV4cG9ydHMubmV4dCA9IG5leHQ7XG5leHBvcnRzLnRpY2sgPSB0aWNrO1xuZXhwb3J0cy50b2NrID0gdG9jaztcbmV4cG9ydHMuZW5kVHJhY2UgPSBlbmRUcmFjZTtcbmNvbnN0IFNBVkVfU1RFUFMgPSBleHBvcnRzLlNBVkVfU1RFUFMgPSBcIlNBVkVfU1RFUFNcIjtcbmZ1bmN0aW9uIHNhdmVTdGVwcyhzdGVwcykge1xuICByZXR1cm4ge1xuICAgIHR5cGU6IFNBVkVfU1RFUFMsXG4gICAgc3RlcHNcbiAgfTtcbn1cblxuY29uc3QgUkVDRUlWRV9BRERSRVNTRVMgPSBleHBvcnRzLlJFQ0VJVkVfQUREUkVTU0VTID0gXCJSRUNFSVZFX0FERFJFU1NFU1wiO1xuZnVuY3Rpb24gcmVjZWl2ZUFkZHJlc3NlcyhhZGRyZXNzZXMpIHtcbiAgcmV0dXJuIHtcbiAgICB0eXBlOiBSRUNFSVZFX0FERFJFU1NFUyxcbiAgICBhZGRyZXNzZXNcbiAgfTtcbn1cblxuY29uc3QgTkVYVCA9IGV4cG9ydHMuTkVYVCA9IFwiTkVYVFwiO1xuZnVuY3Rpb24gbmV4dCgpIHtcbiAgcmV0dXJuIHsgdHlwZTogTkVYVCB9O1xufVxuXG5jb25zdCBUSUNLID0gZXhwb3J0cy5USUNLID0gXCJUSUNLXCI7XG5mdW5jdGlvbiB0aWNrKCkge1xuICByZXR1cm4geyB0eXBlOiBUSUNLIH07XG59XG5cbmNvbnN0IFRPQ0sgPSBleHBvcnRzLlRPQ0sgPSBcIlRPQ0tcIjtcbmZ1bmN0aW9uIHRvY2soKSB7XG4gIHJldHVybiB7IHR5cGU6IFRPQ0sgfTtcbn1cblxuY29uc3QgRU5EX09GX1RSQUNFID0gZXhwb3J0cy5FTkRfT0ZfVFJBQ0UgPSBcIkVPVFwiO1xuZnVuY3Rpb24gZW5kVHJhY2UoKSB7XG4gIHJldHVybiB7IHR5cGU6IEVORF9PRl9UUkFDRSB9O1xufVxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL2xpYi90cmFjZS9hY3Rpb25zL2luZGV4LmpzIiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiYmFiZWwtcnVudGltZS9jb3JlLWpzL3NldFwiKTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyBleHRlcm5hbCBcImJhYmVsLXJ1bnRpbWUvY29yZS1qcy9zZXRcIlxuLy8gbW9kdWxlIGlkID0gMjJcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiYmFiZWwtcnVudGltZS9jb3JlLWpzL3Byb21pc2VcIik7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gZXh0ZXJuYWwgXCJiYWJlbC1ydW50aW1lL2NvcmUtanMvcHJvbWlzZVwiXG4vLyBtb2R1bGUgaWQgPSAyM1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCJqc29uLXBvaW50ZXJcIik7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gZXh0ZXJuYWwgXCJqc29uLXBvaW50ZXJcIlxuLy8gbW9kdWxlIGlkID0gMjRcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLnN0YXJ0ID0gc3RhcnQ7XG5leHBvcnRzLnJlYWR5ID0gcmVhZHk7XG5leHBvcnRzLmVycm9yID0gZXJyb3I7XG5leHBvcnRzLmZpbmlzaCA9IGZpbmlzaDtcbmV4cG9ydHMucmVjb3JkQ29udHJhY3RzID0gcmVjb3JkQ29udHJhY3RzO1xuY29uc3QgU1RBUlQgPSBleHBvcnRzLlNUQVJUID0gXCJTRVNTSU9OX1NUQVJUXCI7XG5mdW5jdGlvbiBzdGFydCh0eEhhc2gsIHByb3ZpZGVyKSB7XG4gIHJldHVybiB7XG4gICAgdHlwZTogU1RBUlQsXG4gICAgdHhIYXNoLCBwcm92aWRlclxuICB9O1xufVxuXG5jb25zdCBSRUFEWSA9IGV4cG9ydHMuUkVBRFkgPSBcIlNFU1NJT05fUkVBRFlcIjtcbmZ1bmN0aW9uIHJlYWR5KCkge1xuICByZXR1cm4ge1xuICAgIHR5cGU6IFJFQURZXG4gIH07XG59XG5cbmNvbnN0IEVSUk9SID0gZXhwb3J0cy5FUlJPUiA9IFwiU0VTU0lPTl9FUlJPUlwiO1xuZnVuY3Rpb24gZXJyb3IoZXJyb3IpIHtcbiAgcmV0dXJuIHtcbiAgICB0eXBlOiBFUlJPUixcbiAgICBlcnJvclxuICB9O1xufVxuXG5jb25zdCBGSU5JU0ggPSBleHBvcnRzLkZJTklTSCA9IFwiU0VTU0lPTl9GSU5JU0hcIjtcbmZ1bmN0aW9uIGZpbmlzaCgpIHtcbiAgcmV0dXJuIHtcbiAgICB0eXBlOiBGSU5JU0hcbiAgfTtcbn1cblxuY29uc3QgUkVDT1JEX0NPTlRSQUNUUyA9IGV4cG9ydHMuUkVDT1JEX0NPTlRSQUNUUyA9IFwiUkVDT1JEX0NPTlRSQUNUU1wiO1xuZnVuY3Rpb24gcmVjb3JkQ29udHJhY3RzKGNvbnRleHRzLCBzb3VyY2VzKSB7XG4gIHJldHVybiB7XG4gICAgdHlwZTogUkVDT1JEX0NPTlRSQUNUUyxcbiAgICBjb250ZXh0cywgc291cmNlc1xuICB9O1xufVxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL2xpYi9zZXNzaW9uL2FjdGlvbnMvaW5kZXguanMiLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcblxudmFyIF9leHRlbmRzMiA9IHJlcXVpcmUoXCJiYWJlbC1ydW50aW1lL2hlbHBlcnMvZXh0ZW5kc1wiKTtcblxudmFyIF9leHRlbmRzMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2V4dGVuZHMyKTtcblxudmFyIF9lbnRyaWVzID0gcmVxdWlyZShcImJhYmVsLXJ1bnRpbWUvY29yZS1qcy9vYmplY3QvZW50cmllc1wiKTtcblxudmFyIF9lbnRyaWVzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2VudHJpZXMpO1xuXG52YXIgX2Fzc2lnbiA9IHJlcXVpcmUoXCJiYWJlbC1ydW50aW1lL2NvcmUtanMvb2JqZWN0L2Fzc2lnblwiKTtcblxudmFyIF9hc3NpZ24yID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfYXNzaWduKTtcblxudmFyIF9kZWJ1ZyA9IHJlcXVpcmUoXCJkZWJ1Z1wiKTtcblxudmFyIF9kZWJ1ZzIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9kZWJ1Zyk7XG5cbnZhciBfcmVzZWxlY3RUcmVlID0gcmVxdWlyZShcInJlc2VsZWN0LXRyZWVcIik7XG5cbnZhciBfanNvblBvaW50ZXIgPSByZXF1aXJlKFwianNvbi1wb2ludGVyXCIpO1xuXG52YXIgX2pzb25Qb2ludGVyMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2pzb25Qb2ludGVyKTtcblxudmFyIF9zZWxlY3RvcnMgPSByZXF1aXJlKFwibGliL2FzdC9zZWxlY3RvcnNcIik7XG5cbnZhciBfc2VsZWN0b3JzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3NlbGVjdG9ycyk7XG5cbnZhciBfc2VsZWN0b3JzMyA9IHJlcXVpcmUoXCJsaWIvZXZtL3NlbGVjdG9yc1wiKTtcblxudmFyIF9zZWxlY3RvcnM0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfc2VsZWN0b3JzMyk7XG5cbnZhciBfc2VsZWN0b3JzNSA9IHJlcXVpcmUoXCJsaWIvc29saWRpdHkvc2VsZWN0b3JzXCIpO1xuXG52YXIgX3NlbGVjdG9yczYgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9zZWxlY3RvcnM1KTtcblxudmFyIF9kZWNvZGUgPSByZXF1aXJlKFwiLi4vZGVjb2RlXCIpO1xuXG52YXIgX2RlY29kZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9kZWNvZGUpO1xuXG52YXIgX3V0aWxzID0gcmVxdWlyZShcIi4uL2RlY29kZS91dGlsc1wiKTtcblxudmFyIGRlY29kZVV0aWxzID0gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQoX3V0aWxzKTtcblxudmFyIF9iaWdudW1iZXIgPSByZXF1aXJlKFwiYmlnbnVtYmVyLmpzXCIpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChvYmopIHsgaWYgKG9iaiAmJiBvYmouX19lc01vZHVsZSkgeyByZXR1cm4gb2JqOyB9IGVsc2UgeyB2YXIgbmV3T2JqID0ge307IGlmIChvYmogIT0gbnVsbCkgeyBmb3IgKHZhciBrZXkgaW4gb2JqKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBrZXkpKSBuZXdPYmpba2V5XSA9IG9ialtrZXldOyB9IH0gbmV3T2JqLmRlZmF1bHQgPSBvYmo7IHJldHVybiBuZXdPYmo7IH0gfVxuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5jb25zdCBkZWJ1ZyA9ICgwLCBfZGVidWcyLmRlZmF1bHQpKFwiZGVidWdnZXI6ZGF0YTpzZWxlY3RvcnNcIik7XG5cbmZ1bmN0aW9uIGNyZWF0ZVN0YXRlU2VsZWN0b3JzKHsgc3RhY2ssIG1lbW9yeSwgc3RvcmFnZSB9KSB7XG4gIHJldHVybiB7XG4gICAgLyoqXG4gICAgICogLnN0YWNrXG4gICAgICovXG4gICAgc3RhY2s6ICgwLCBfcmVzZWxlY3RUcmVlLmNyZWF0ZUxlYWYpKFtzdGFja10sIHdvcmRzID0+ICh3b3JkcyB8fCBbXSkubWFwKHdvcmQgPT4gZGVjb2RlVXRpbHMudG9CeXRlcyhkZWNvZGVVdGlscy50b0JpZ051bWJlcih3b3JkLCBkZWNvZGVVdGlscy5XT1JEX1NJWkUpKSkpLFxuXG4gICAgLyoqXG4gICAgICogLm1lbW9yeVxuICAgICAqL1xuICAgIG1lbW9yeTogKDAsIF9yZXNlbGVjdFRyZWUuY3JlYXRlTGVhZikoW21lbW9yeV0sIHdvcmRzID0+IG5ldyBVaW50OEFycmF5KCh3b3Jkcy5qb2luKFwiXCIpLm1hdGNoKC8uezEsMn0vZykgfHwgW10pLm1hcChieXRlID0+IHBhcnNlSW50KGJ5dGUsIDE2KSkpKSxcblxuICAgIC8qKlxuICAgICAqIC5zdG9yYWdlXG4gICAgICovXG4gICAgc3RvcmFnZTogKDAsIF9yZXNlbGVjdFRyZWUuY3JlYXRlTGVhZikoW3N0b3JhZ2VdLCBtYXBwaW5nID0+ICgwLCBfYXNzaWduMi5kZWZhdWx0KSh7fSwgLi4uKDAsIF9lbnRyaWVzMi5kZWZhdWx0KShtYXBwaW5nKS5tYXAoKFthZGRyZXNzLCB3b3JkXSkgPT4gKHtcbiAgICAgIFtgMHgke2FkZHJlc3N9YF06IG5ldyBVaW50OEFycmF5KCh3b3JkLm1hdGNoKC8uezEsMn0vZykgfHwgW10pLm1hcChieXRlID0+IHBhcnNlSW50KGJ5dGUsIDE2KSkpXG4gICAgfSkpKSlcbiAgfTtcbn1cblxuY29uc3QgZGF0YSA9ICgwLCBfcmVzZWxlY3RUcmVlLmNyZWF0ZVNlbGVjdG9yVHJlZSkoe1xuICBzdGF0ZTogc3RhdGUgPT4gc3RhdGUuZGF0YSxcblxuICAvKipcbiAgICogZGF0YS52aWV3c1xuICAgKi9cbiAgdmlld3M6IHtcbiAgICBhc3Q6ICgwLCBfcmVzZWxlY3RUcmVlLmNyZWF0ZUxlYWYpKFtfc2VsZWN0b3JzMi5kZWZhdWx0LmN1cnJlbnRdLCB0cmVlID0+IHRyZWUpLFxuXG4gICAgYXRMYXN0SW5zdHJ1Y3Rpb25Gb3JTb3VyY2VSYW5nZTogKDAsIF9yZXNlbGVjdFRyZWUuY3JlYXRlTGVhZikoW19zZWxlY3RvcnM2LmRlZmF1bHQuY3VycmVudC5pc1NvdXJjZVJhbmdlRmluYWxdLCBmaW5hbCA9PiBmaW5hbCksXG5cbiAgICAvKipcbiAgICAgKiBkYXRhLnZpZXdzLnNjb3Blc1xuICAgICAqL1xuICAgIHNjb3Blczoge1xuXG4gICAgICAvKipcbiAgICAgICAqIGRhdGEudmlld3Muc2NvcGVzLmlubGluZWRcbiAgICAgICAqL1xuICAgICAgaW5saW5lZDogKDAsIF9yZXNlbGVjdFRyZWUuY3JlYXRlTGVhZikoW1wiL2luZm8vc2NvcGVzXCIsIF9zZWxlY3RvcnM2LmRlZmF1bHQuaW5mby5zb3VyY2VzXSwgKHNjb3Blcywgc291cmNlcykgPT4gKDAsIF9hc3NpZ24yLmRlZmF1bHQpKHt9LCAuLi4oMCwgX2VudHJpZXMyLmRlZmF1bHQpKHNjb3BlcykubWFwKChbaWQsIGVudHJ5XSkgPT4gKHtcbiAgICAgICAgW2lkXTogKDAsIF9leHRlbmRzMy5kZWZhdWx0KSh7fSwgZW50cnksIHtcblxuICAgICAgICAgIGRlZmluaXRpb246IF9qc29uUG9pbnRlcjIuZGVmYXVsdC5nZXQoc291cmNlc1tlbnRyeS5zb3VyY2VJZF0uYXN0LCBlbnRyeS5wb2ludGVyKVxuICAgICAgICB9KVxuICAgICAgfSkpKSlcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogZGF0YS52aWV3cy5kZWNvZGVyXG4gICAgICpcbiAgICAgKiBzZWxlY3RvciByZXR1cm5zIChhc3Qgbm9kZSBkZWZpbml0aW9uLCBkYXRhIHJlZmVyZW5jZSkgPT4gdmFsdWVcbiAgICAgKi9cbiAgICBkZWNvZGVyOiAoMCwgX3Jlc2VsZWN0VHJlZS5jcmVhdGVMZWFmKShbXCIvdmlld3Mvc2NvcGVzL2lubGluZWRcIiwgXCIvbmV4dC9zdGF0ZVwiLCBcIi9wcm9jL21hcHBpbmdLZXlzXCJdLCAoc2NvcGVzLCBzdGF0ZSwgbWFwcGluZ0tleXMpID0+IChkZWZpbml0aW9uLCByZWYpID0+ICgwLCBfZGVjb2RlMi5kZWZhdWx0KShkZWZpbml0aW9uLCByZWYsIHtcbiAgICAgIHNjb3Blcywgc3RhdGUsIG1hcHBpbmdLZXlzXG4gICAgfSkpXG4gIH0sXG5cbiAgLyoqXG4gICAqIGRhdGEuaW5mb1xuICAgKi9cbiAgaW5mbzoge1xuXG4gICAgLyoqXG4gICAgICogZGF0YS5pbmZvLnNjb3Blc1xuICAgICAqL1xuICAgIHNjb3BlczogKDAsIF9yZXNlbGVjdFRyZWUuY3JlYXRlTGVhZikoW1wiL3N0YXRlXCJdLCBzdGF0ZSA9PiBzdGF0ZS5pbmZvLnNjb3Blcy5ieUlkKVxuICB9LFxuXG4gIC8qKlxuICAgKiBkYXRhLnByb2NcbiAgICovXG4gIHByb2M6IHtcblxuICAgIC8qKlxuICAgICAqIGRhdGEucHJvYy5hc3NpZ25tZW50c1xuICAgICAqL1xuICAgIGFzc2lnbm1lbnRzOiAoMCwgX3Jlc2VsZWN0VHJlZS5jcmVhdGVMZWFmKShbXCIvc3RhdGVcIl0sIHN0YXRlID0+IHN0YXRlLnByb2MuYXNzaWdubWVudHMuYnlJZCksXG5cbiAgICAvKipcbiAgICAgKiBkYXRhLnByb2MubWFwcGluZ0tleXNcbiAgICAgKlxuICAgICAqIGtub3duIGtleXMgZm9yIGVhY2ggbWFwcGluZyAoaWRlbnRpZmllZCBieSBub2RlIElEKVxuICAgICAqL1xuICAgIG1hcHBpbmdLZXlzOiAoMCwgX3Jlc2VsZWN0VHJlZS5jcmVhdGVMZWFmKShbXCIvc3RhdGVcIl0sIHN0YXRlID0+IHN0YXRlLnByb2MubWFwcGluZ0tleXMuYnlJZClcbiAgfSxcblxuICAvKipcbiAgICogZGF0YS5jdXJyZW50XG4gICAqL1xuICBjdXJyZW50OiB7XG4gICAgLyoqXG4gICAgICpcbiAgICAgKiBkYXRhLmN1cnJlbnQuc2NvcGVcbiAgICAgKi9cbiAgICBzY29wZToge1xuXG4gICAgICAvKipcbiAgICAgICAqIGRhdGEuY3VycmVudC5zY29wZS5pZFxuICAgICAgICovXG4gICAgICBpZDogKDAsIF9yZXNlbGVjdFRyZWUuY3JlYXRlTGVhZikoW19zZWxlY3RvcnMyLmRlZmF1bHQuY3VycmVudC5ub2RlXSwgbm9kZSA9PiBub2RlLmlkKVxuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBkYXRhLmN1cnJlbnQuc3RhdGVcbiAgICAgKi9cbiAgICBzdGF0ZTogY3JlYXRlU3RhdGVTZWxlY3RvcnMoX3NlbGVjdG9yczQuZGVmYXVsdC5jdXJyZW50LnN0YXRlKSxcblxuICAgIC8qKlxuICAgICAqIGRhdGEuY3VycmVudC5pZGVudGlmaWVycyAobmFtZXNwYWNlKVxuICAgICAqL1xuICAgIGlkZW50aWZpZXJzOiB7XG5cbiAgICAgIC8qKlxuICAgICAgICogZGF0YS5jdXJyZW50LmlkZW50aWZpZXJzIChzZWxlY3RvcilcbiAgICAgICAqXG4gICAgICAgKiByZXR1cm5zIGlkZW50aWZlcnMgYW5kIGNvcnJlc3BvbmRpbmcgZGVmaW5pdGlvbiBub2RlIElEXG4gICAgICAgKi9cbiAgICAgIF86ICgwLCBfcmVzZWxlY3RUcmVlLmNyZWF0ZUxlYWYpKFtcIi92aWV3cy9zY29wZXMvaW5saW5lZFwiLCBcIi9jdXJyZW50L3Njb3BlXCJdLCAoc2NvcGVzLCBzY29wZSkgPT4ge1xuICAgICAgICBsZXQgY3VyID0gc2NvcGUuaWQ7XG4gICAgICAgIGxldCB2YXJpYWJsZXMgPSB7fTtcblxuICAgICAgICBkbyB7XG4gICAgICAgICAgdmFyaWFibGVzID0gKDAsIF9hc3NpZ24yLmRlZmF1bHQpKHZhcmlhYmxlcywgLi4uKHNjb3Blc1tjdXJdLnZhcmlhYmxlcyB8fCBbXSkuZmlsdGVyKHYgPT4gdmFyaWFibGVzW3YubmFtZV0gPT0gdW5kZWZpbmVkKS5tYXAodiA9PiAoeyBbdi5uYW1lXTogdi5pZCB9KSkpO1xuXG4gICAgICAgICAgY3VyID0gc2NvcGVzW2N1cl0ucGFyZW50SWQ7XG4gICAgICAgIH0gd2hpbGUgKGN1ciAhPSBudWxsKTtcblxuICAgICAgICByZXR1cm4gdmFyaWFibGVzO1xuICAgICAgfSksXG5cbiAgICAgIC8qKlxuICAgICAgICogZGF0YS5jdXJyZW50LmlkZW50aWZpZXJzLmRlZmluaXRpb25zXG4gICAgICAgKlxuICAgICAgICogY3VycmVudCB2YXJpYWJsZSBkZWZpbml0aW9uc1xuICAgICAgICovXG4gICAgICBkZWZpbml0aW9uczogKDAsIF9yZXNlbGVjdFRyZWUuY3JlYXRlTGVhZikoW1wiL3ZpZXdzL3Njb3Blcy9pbmxpbmVkXCIsIFwiLi9fXCJdLCAoc2NvcGVzLCBpZGVudGlmaWVycykgPT4gKDAsIF9hc3NpZ24yLmRlZmF1bHQpKHt9LCAuLi4oMCwgX2VudHJpZXMyLmRlZmF1bHQpKGlkZW50aWZpZXJzKS5tYXAoKFtpZGVudGlmaWVyLCBpZF0pID0+IHtcbiAgICAgICAgbGV0IHsgZGVmaW5pdGlvbiB9ID0gc2NvcGVzW2lkXTtcblxuICAgICAgICByZXR1cm4geyBbaWRlbnRpZmllcl06IGRlZmluaXRpb24gfTtcbiAgICAgIH0pKSksXG5cbiAgICAgIC8qKlxuICAgICAgICogZGF0YS5jdXJyZW50LmlkZW50aWZpZXJzLnJlZnNcbiAgICAgICAqXG4gICAgICAgKiBjdXJyZW50IHZhcmlhYmxlcycgdmFsdWUgcmVmc1xuICAgICAgICovXG4gICAgICByZWZzOiAoMCwgX3Jlc2VsZWN0VHJlZS5jcmVhdGVMZWFmKShbXCIvcHJvYy9hc3NpZ25tZW50c1wiLCBcIi4vX1wiXSwgKGFzc2lnbm1lbnRzLCBpZGVudGlmaWVycykgPT4gKDAsIF9hc3NpZ24yLmRlZmF1bHQpKHt9LCAuLi4oMCwgX2VudHJpZXMyLmRlZmF1bHQpKGlkZW50aWZpZXJzKS5tYXAoKFtpZGVudGlmaWVyLCBpZF0pID0+IHtcbiAgICAgICAgbGV0IHsgcmVmIH0gPSBhc3NpZ25tZW50c1tpZF0gfHwge307XG4gICAgICAgIGlmICghcmVmKSB7XG4gICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgICAgfTtcblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIFtpZGVudGlmaWVyXTogcmVmXG4gICAgICAgIH07XG4gICAgICB9KSkpLFxuXG4gICAgICBkZWNvZGVkOiAoMCwgX3Jlc2VsZWN0VHJlZS5jcmVhdGVMZWFmKShbXCIvdmlld3MvZGVjb2RlclwiLCBcIi4vZGVmaW5pdGlvbnNcIiwgXCIuL3JlZnNcIl0sIChkZWNvZGUsIGRlZmluaXRpb25zLCByZWZzKSA9PiAoMCwgX2Fzc2lnbjIuZGVmYXVsdCkoe30sIC4uLigwLCBfZW50cmllczIuZGVmYXVsdCkocmVmcykubWFwKChbaWRlbnRpZmllciwgcmVmXSkgPT4gKHtcbiAgICAgICAgW2lkZW50aWZpZXJdOiBkZWNvZGUoZGVmaW5pdGlvbnNbaWRlbnRpZmllcl0sIHJlZilcbiAgICAgIH0pKSkpLFxuXG4gICAgICBuYXRpdmU6ICgwLCBfcmVzZWxlY3RUcmVlLmNyZWF0ZUxlYWYpKFsnLi9kZWNvZGVkJ10sIGRlY29kZVV0aWxzLmNsZWFuQmlnTnVtYmVycylcbiAgICB9XG4gIH0sXG5cbiAgLyoqXG4gICAqIGRhdGEubmV4dFxuICAgKi9cbiAgbmV4dDoge1xuXG4gICAgLyoqXG4gICAgICogZGF0YS5uZXh0LnN0YXRlXG4gICAgICovXG4gICAgc3RhdGU6IGNyZWF0ZVN0YXRlU2VsZWN0b3JzKF9zZWxlY3RvcnM0LmRlZmF1bHQubmV4dC5zdGF0ZSlcbiAgfVxufSk7XG5cbmV4cG9ydHMuZGVmYXVsdCA9IGRhdGE7XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vbGliL2RhdGEvc2VsZWN0b3JzL2luZGV4LmpzIiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwidHJ1ZmZsZS1leHBlY3RcIik7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gZXh0ZXJuYWwgXCJ0cnVmZmxlLWV4cGVjdFwiXG4vLyBtb2R1bGUgaWQgPSAyN1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCJiYWJlbC1ydW50aW1lL2NvcmUtanMvb2JqZWN0L3ZhbHVlc1wiKTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyBleHRlcm5hbCBcImJhYmVsLXJ1bnRpbWUvY29yZS1qcy9vYmplY3QvdmFsdWVzXCJcbi8vIG1vZHVsZSBpZCA9IDI4XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuXG52YXIgX2tleXMgPSByZXF1aXJlKFwiYmFiZWwtcnVudGltZS9jb3JlLWpzL29iamVjdC9rZXlzXCIpO1xuXG52YXIgX2tleXMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfa2V5cyk7XG5cbmV4cG9ydHMuZ2V0UmFuZ2UgPSBnZXRSYW5nZTtcbmV4cG9ydHMucmFuZ2VOb2RlcyA9IHJhbmdlTm9kZXM7XG5leHBvcnRzLmZpbmRSYW5nZSA9IGZpbmRSYW5nZTtcblxudmFyIF9kZWJ1ZyA9IHJlcXVpcmUoXCJkZWJ1Z1wiKTtcblxudmFyIF9kZWJ1ZzIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9kZWJ1Zyk7XG5cbnZhciBfbm9kZUludGVydmFsVHJlZSA9IHJlcXVpcmUoXCJub2RlLWludGVydmFsLXRyZWVcIik7XG5cbnZhciBfbm9kZUludGVydmFsVHJlZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9ub2RlSW50ZXJ2YWxUcmVlKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuY29uc3QgZGVidWcgPSAoMCwgX2RlYnVnMi5kZWZhdWx0KShcImRlYnVnZ2VyOmFzdDptYXBcIik7XG5cbi8qKlxuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gZ2V0UmFuZ2Uobm9kZSkge1xuICAvLyBzcmM6IFwiPHN0YXJ0Pjo8bGVuZ3RoPjo8Xz5cIlxuICAvLyByZXR1cm5zIFtzdGFydCwgZW5kXVxuICBsZXQgW3N0YXJ0LCBsZW5ndGhdID0gbm9kZS5zcmMuc3BsaXQoXCI6XCIpLnNsaWNlKDAsIDIpLm1hcChpID0+IHBhcnNlSW50KGkpKTtcblxuICByZXR1cm4gW3N0YXJ0LCBzdGFydCArIGxlbmd0aF07XG59XG5cbi8qKlxuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gcmFuZ2VOb2Rlcyhub2RlLCBwb2ludGVyID0gXCJcIikge1xuICBpZiAobm9kZSBpbnN0YW5jZW9mIEFycmF5KSB7XG4gICAgcmV0dXJuIFtdLmNvbmNhdCguLi5ub2RlLm1hcCgoc3ViLCBpKSA9PiByYW5nZU5vZGVzKHN1YiwgYCR7cG9pbnRlcn0vJHtpfWApKSk7XG4gIH0gZWxzZSBpZiAobm9kZSBpbnN0YW5jZW9mIE9iamVjdCkge1xuICAgIGxldCByZXN1bHRzID0gW107XG5cbiAgICBpZiAobm9kZS5zcmMpIHtcbiAgICAgIHJlc3VsdHMucHVzaCh7IHBvaW50ZXIsIHJhbmdlOiBnZXRSYW5nZShub2RlKSB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gcmVzdWx0cy5jb25jYXQoLi4uKDAsIF9rZXlzMi5kZWZhdWx0KShub2RlKS5tYXAoa2V5ID0+IHJhbmdlTm9kZXMobm9kZVtrZXldLCBgJHtwb2ludGVyfS8ke2tleX1gKSkpO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBbXTtcbiAgfVxufVxuXG4vKipcbiAqIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIGZpbmRSYW5nZShub2RlLCBzb3VyY2VTdGFydCwgc291cmNlTGVuZ3RoKSB7XG4gIGxldCByYW5nZXMgPSByYW5nZU5vZGVzKG5vZGUpO1xuICBsZXQgdHJlZSA9IG5ldyBfbm9kZUludGVydmFsVHJlZTIuZGVmYXVsdCgpO1xuXG4gIHJhbmdlcy5mb3JFYWNoKCh7IHJhbmdlLCBwb2ludGVyIH0pID0+IHtcbiAgICBsZXQgW3N0YXJ0LCBlbmRdID0gcmFuZ2U7XG5cbiAgICB0cmVlLmluc2VydChzdGFydCwgZW5kLCB7IHJhbmdlLCBwb2ludGVyIH0pO1xuICB9KTtcblxuICBsZXQgc291cmNlRW5kID0gc291cmNlU3RhcnQgKyBzb3VyY2VMZW5ndGg7XG5cbiAgbGV0IG92ZXJsYXBwaW5nID0gdHJlZS5zZWFyY2goc291cmNlU3RhcnQsIHNvdXJjZUVuZCk7XG5cbiAgLy8gZmluZCBub2RlcyB0aGF0IGZ1bGx5IGNvbnRhaW4gcmVxdWVzdGVkIHJhbmdlLFxuICAvLyByZXR1cm4gbG9uZ2VzdCBwb2ludGVyXG4gIHJldHVybiBvdmVybGFwcGluZy5maWx0ZXIoKHsgcmFuZ2UgfSkgPT4gc291cmNlU3RhcnQgPj0gcmFuZ2VbMF0gJiYgc291cmNlRW5kIDw9IHJhbmdlWzFdKS5tYXAoKHsgcG9pbnRlciB9KSA9PiBwb2ludGVyKS5yZWR1Y2UoKGEsIGIpID0+IGEubGVuZ3RoID4gYi5sZW5ndGggPyBhIDogYiwgXCJcIik7XG59XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vbGliL2FzdC9tYXAuanMiLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuYmVnaW5TdGVwID0gYmVnaW5TdGVwO1xuZXhwb3J0cy5hZHZhbmNlID0gYWR2YW5jZTtcbmV4cG9ydHMuc3RlcE5leHQgPSBzdGVwTmV4dDtcbmV4cG9ydHMuc3RlcE92ZXIgPSBzdGVwT3ZlcjtcbmV4cG9ydHMuc3RlcEludG8gPSBzdGVwSW50bztcbmV4cG9ydHMuc3RlcE91dCA9IHN0ZXBPdXQ7XG5leHBvcnRzLmludGVycnVwdCA9IGludGVycnVwdDtcbmV4cG9ydHMuY29udGludWVVbnRpbCA9IGNvbnRpbnVlVW50aWw7XG5jb25zdCBCRUdJTl9TVEVQID0gZXhwb3J0cy5CRUdJTl9TVEVQID0gXCJCRUdJTl9TVEVQXCI7XG5mdW5jdGlvbiBiZWdpblN0ZXAodHlwZSkge1xuICByZXR1cm4ge1xuICAgIHR5cGU6IEJFR0lOX1NURVAsXG4gICAgc3RlcFR5cGU6IHR5cGVcbiAgfTtcbn1cblxuY29uc3QgQURWQU5DRSA9IGV4cG9ydHMuQURWQU5DRSA9IFwiQURWQU5DRVwiO1xuZnVuY3Rpb24gYWR2YW5jZSgpIHtcbiAgcmV0dXJuIHsgdHlwZTogQURWQU5DRSB9O1xufVxuXG5jb25zdCBTVEVQX05FWFQgPSBleHBvcnRzLlNURVBfTkVYVCA9IFwiU1RFUF9ORVhUXCI7XG5mdW5jdGlvbiBzdGVwTmV4dCgpIHtcbiAgcmV0dXJuIHsgdHlwZTogU1RFUF9ORVhUIH07XG59XG5cbmNvbnN0IFNURVBfT1ZFUiA9IGV4cG9ydHMuU1RFUF9PVkVSID0gXCJTVEVQX09WRVJcIjtcbmZ1bmN0aW9uIHN0ZXBPdmVyKCkge1xuICByZXR1cm4geyB0eXBlOiBTVEVQX09WRVIgfTtcbn1cblxuY29uc3QgU1RFUF9JTlRPID0gZXhwb3J0cy5TVEVQX0lOVE8gPSBcIlNURVBfSU5UT1wiO1xuZnVuY3Rpb24gc3RlcEludG8oKSB7XG4gIHJldHVybiB7IHR5cGU6IFNURVBfSU5UTyB9O1xufVxuXG5jb25zdCBTVEVQX09VVCA9IGV4cG9ydHMuU1RFUF9PVVQgPSBcIlNURVBfT1VUXCI7XG5mdW5jdGlvbiBzdGVwT3V0KCkge1xuICByZXR1cm4geyB0eXBlOiBTVEVQX09VVCB9O1xufVxuXG5jb25zdCBJTlRFUlJVUFQgPSBleHBvcnRzLklOVEVSUlVQVCA9IFwiSU5URVJSVVBUXCI7XG5mdW5jdGlvbiBpbnRlcnJ1cHQoKSB7XG4gIHJldHVybiB7IHR5cGU6IElOVEVSUlVQVCB9O1xufVxuXG5jb25zdCBDT05USU5VRV9VTlRJTCA9IGV4cG9ydHMuQ09OVElOVUVfVU5USUwgPSBcIkNPTlRJTlVFX1VOVElMXCI7XG5mdW5jdGlvbiBjb250aW51ZVVudGlsKC4uLmJyZWFrcG9pbnRzKSB7XG4gIHJldHVybiB7XG4gICAgdHlwZTogQ09OVElOVUVfVU5USUwsXG4gICAgYnJlYWtwb2ludHNcbiAgfTtcbn1cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9saWIvY29udHJvbGxlci9hY3Rpb25zL2luZGV4LmpzIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5cbnZhciBfZXh0ZW5kczIgPSByZXF1aXJlKFwiYmFiZWwtcnVudGltZS9oZWxwZXJzL2V4dGVuZHNcIik7XG5cbnZhciBfZXh0ZW5kczMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9leHRlbmRzMik7XG5cbnZhciBfZW50cmllcyA9IHJlcXVpcmUoXCJiYWJlbC1ydW50aW1lL2NvcmUtanMvb2JqZWN0L2VudHJpZXNcIik7XG5cbnZhciBfZW50cmllczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9lbnRyaWVzKTtcblxudmFyIF9hc3NpZ24gPSByZXF1aXJlKFwiYmFiZWwtcnVudGltZS9jb3JlLWpzL29iamVjdC9hc3NpZ25cIik7XG5cbnZhciBfYXNzaWduMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2Fzc2lnbik7XG5cbmV4cG9ydHMuc2NvcGUgPSBzY29wZTtcbmV4cG9ydHMuZGVjbGFyZSA9IGRlY2xhcmU7XG5leHBvcnRzLnNhZ2EgPSBzYWdhO1xuXG52YXIgX2RlYnVnID0gcmVxdWlyZShcImRlYnVnXCIpO1xuXG52YXIgX2RlYnVnMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2RlYnVnKTtcblxudmFyIF9lZmZlY3RzID0gcmVxdWlyZShcInJlZHV4LXNhZ2EvZWZmZWN0c1wiKTtcblxudmFyIF9qc29uUG9pbnRlciA9IHJlcXVpcmUoXCJqc29uLXBvaW50ZXJcIik7XG5cbnZhciBfanNvblBvaW50ZXIyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfanNvblBvaW50ZXIpO1xuXG52YXIgX2hlbHBlcnMgPSByZXF1aXJlKFwibGliL2hlbHBlcnNcIik7XG5cbnZhciBfYWN0aW9ucyA9IHJlcXVpcmUoXCJsaWIvdHJhY2UvYWN0aW9uc1wiKTtcblxudmFyIF9hY3Rpb25zMiA9IHJlcXVpcmUoXCIuLi9hY3Rpb25zXCIpO1xuXG52YXIgYWN0aW9ucyA9IF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKF9hY3Rpb25zMik7XG5cbnZhciBfc2VsZWN0b3JzID0gcmVxdWlyZShcIi4uL3NlbGVjdG9yc1wiKTtcblxudmFyIF9zZWxlY3RvcnMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfc2VsZWN0b3JzKTtcblxudmFyIF91dGlscyA9IHJlcXVpcmUoXCJsaWIvZGF0YS9kZWNvZGUvdXRpbHNcIik7XG5cbnZhciB1dGlscyA9IF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKF91dGlscyk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKG9iaikgeyBpZiAob2JqICYmIG9iai5fX2VzTW9kdWxlKSB7IHJldHVybiBvYmo7IH0gZWxzZSB7IHZhciBuZXdPYmogPSB7fTsgaWYgKG9iaiAhPSBudWxsKSB7IGZvciAodmFyIGtleSBpbiBvYmopIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGtleSkpIG5ld09ialtrZXldID0gb2JqW2tleV07IH0gfSBuZXdPYmouZGVmYXVsdCA9IG9iajsgcmV0dXJuIG5ld09iajsgfSB9XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmNvbnN0IGRlYnVnID0gKDAsIF9kZWJ1ZzIuZGVmYXVsdCkoXCJkZWJ1Z2dlcjpkYXRhOnNhZ2FzXCIpO1xuXG5mdW5jdGlvbiogc2NvcGUobm9kZUlkLCBwb2ludGVyLCBwYXJlbnRJZCwgc291cmNlSWQpIHtcbiAgeWllbGQgKDAsIF9lZmZlY3RzLnB1dCkoYWN0aW9ucy5zY29wZShub2RlSWQsIHBvaW50ZXIsIHBhcmVudElkLCBzb3VyY2VJZCkpO1xufVxuXG5mdW5jdGlvbiogZGVjbGFyZShub2RlKSB7XG4gIHlpZWxkICgwLCBfZWZmZWN0cy5wdXQpKGFjdGlvbnMuZGVjbGFyZShub2RlKSk7XG59XG5cbmZ1bmN0aW9uKiB0aWNrU2FnYSgpIHtcbiAgbGV0IHtcbiAgICB0cmVlLFxuICAgIGlkOiB0cmVlSWQsXG4gICAgbm9kZSxcbiAgICBwb2ludGVyXG4gIH0gPSB5aWVsZCAoMCwgX2VmZmVjdHMuc2VsZWN0KShfc2VsZWN0b3JzMi5kZWZhdWx0LnZpZXdzLmFzdCk7XG5cbiAgbGV0IGRlY29kZSA9IHlpZWxkICgwLCBfZWZmZWN0cy5zZWxlY3QpKF9zZWxlY3RvcnMyLmRlZmF1bHQudmlld3MuZGVjb2Rlcik7XG4gIGxldCBzY29wZXMgPSB5aWVsZCAoMCwgX2VmZmVjdHMuc2VsZWN0KShfc2VsZWN0b3JzMi5kZWZhdWx0LmluZm8uc2NvcGVzKTtcbiAgbGV0IGRlZmluaXRpb25zID0geWllbGQgKDAsIF9lZmZlY3RzLnNlbGVjdCkoX3NlbGVjdG9yczIuZGVmYXVsdC52aWV3cy5zY29wZXMuaW5saW5lZCk7XG4gIGxldCBjdXJyZW50QXNzaWdubWVudHMgPSB5aWVsZCAoMCwgX2VmZmVjdHMuc2VsZWN0KShfc2VsZWN0b3JzMi5kZWZhdWx0LnByb2MuYXNzaWdubWVudHMpO1xuXG4gIGxldCBzdGFjayA9IHlpZWxkICgwLCBfZWZmZWN0cy5zZWxlY3QpKF9zZWxlY3RvcnMyLmRlZmF1bHQubmV4dC5zdGF0ZS5zdGFjayk7XG4gIGlmICghc3RhY2spIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBsZXQgdG9wID0gc3RhY2subGVuZ3RoIC0gMTtcbiAgdmFyIHBhcmFtZXRlcnMsIHJldHVyblBhcmFtZXRlcnMsIGFzc2lnbm1lbnRzLCBzdG9yYWdlVmFycztcblxuICBpZiAoIW5vZGUpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvLyBzdGFjayBpcyBvbmx5IHJlYWR5IGZvciBpbnRlcnByZXRhdGlvbiBhZnRlciB0aGUgbGFzdCBzdGVwIG9mIGVhY2hcbiAgLy8gc291cmNlIHJhbmdlXG4gIC8vXG4gIC8vIHRoZSBkYXRhIG1vZHVsZSBhbHdheXMgbG9va3MgYXQgdGhlIHJlc3VsdCBvZiBhIHBhcnRpY3VsYXIgb3Bjb2RlXG4gIC8vIChpLmUuLCB0aGUgZm9sbG93aW5nIHRyYWNlIHN0ZXAncyBzdGFjay9tZW1vcnkvc3RvcmFnZSksIHNvIHRoaXNcbiAgLy8gYXNzZXJ0cyB0aGF0IHRoZSBfY3VycmVudF8gb3BlcmF0aW9uIGlzIHRoZSBmaW5hbCBvbmUgYmVmb3JlXG4gIC8vIHByb2NlZWRpbmdcbiAgaWYgKCEoeWllbGQgKDAsIF9lZmZlY3RzLnNlbGVjdCkoX3NlbGVjdG9yczIuZGVmYXVsdC52aWV3cy5hdExhc3RJbnN0cnVjdGlvbkZvclNvdXJjZVJhbmdlKSkpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBzd2l0Y2ggKG5vZGUubm9kZVR5cGUpIHtcblxuICAgIGNhc2UgXCJGdW5jdGlvbkRlZmluaXRpb25cIjpcbiAgICAgIHBhcmFtZXRlcnMgPSBub2RlLnBhcmFtZXRlcnMucGFyYW1ldGVycy5tYXAoKHAsIGkpID0+IGAke3BvaW50ZXJ9L3BhcmFtZXRlcnMvcGFyYW1ldGVycy8ke2l9YCk7XG5cbiAgICAgIHJldHVyblBhcmFtZXRlcnMgPSBub2RlLnJldHVyblBhcmFtZXRlcnMucGFyYW1ldGVycy5tYXAoKHAsIGkpID0+IGAke3BvaW50ZXJ9L3JldHVyblBhcmFtZXRlcnMvcGFyYW1ldGVycy8ke2l9YCk7XG5cbiAgICAgIGFzc2lnbm1lbnRzID0gcmV0dXJuUGFyYW1ldGVycy5jb25jYXQocGFyYW1ldGVycykucmV2ZXJzZSgpLm1hcChwb2ludGVyID0+IF9qc29uUG9pbnRlcjIuZGVmYXVsdC5nZXQodHJlZSwgcG9pbnRlcikuaWQpLm1hcCgoaWQsIGkpID0+ICh7IFtpZF06IHsgXCJzdGFja1wiOiB0b3AgLSBpIH0gfSkpLnJlZHVjZSgoYWNjLCBhc3NpZ25tZW50KSA9PiAoMCwgX2Fzc2lnbjIuZGVmYXVsdCkoYWNjLCBhc3NpZ25tZW50KSwge30pO1xuXG4gICAgICB5aWVsZCAoMCwgX2VmZmVjdHMucHV0KShhY3Rpb25zLmFzc2lnbih0cmVlSWQsIGFzc2lnbm1lbnRzKSk7XG4gICAgICBicmVhaztcblxuICAgIGNhc2UgXCJDb250cmFjdERlZmluaXRpb25cIjpcbiAgICAgIGxldCBzdG9yYWdlVmFycyA9IHNjb3Blc1tub2RlLmlkXS52YXJpYWJsZXMgfHwgW107XG4gICAgICBsZXQgc2xvdCA9IDA7XG4gICAgICBsZXQgaW5kZXggPSBfdXRpbHMuV09SRF9TSVpFIC0gMTsgLy8gY2F1c2UgbG93ZXItb3JkZXJcbiAgICAgIGRlYnVnKFwic3RvcmFnZSB2YXJzICVvXCIsIHN0b3JhZ2VWYXJzKTtcblxuICAgICAgbGV0IGFsbG9jYXRpb24gPSB1dGlscy5hbGxvY2F0ZURlY2xhcmF0aW9ucyhzdG9yYWdlVmFycywgZGVmaW5pdGlvbnMpO1xuICAgICAgYXNzaWdubWVudHMgPSAoMCwgX2Fzc2lnbjIuZGVmYXVsdCkoe30sIC4uLigwLCBfZW50cmllczIuZGVmYXVsdCkoYWxsb2NhdGlvbi5jaGlsZHJlbikubWFwKChbaWQsIHN0b3JhZ2VdKSA9PiAoe1xuICAgICAgICBbaWRdOiAoMCwgX2V4dGVuZHMzLmRlZmF1bHQpKHt9LCAoY3VycmVudEFzc2lnbm1lbnRzW2lkXSB8fCB7IHJlZjoge30gfSkucmVmLCB7XG4gICAgICAgICAgc3RvcmFnZVxuICAgICAgICB9KVxuICAgICAgfSkpKTtcbiAgICAgIGRlYnVnKFwiYXNzaWdubWVudHMgJU9cIiwgYXNzaWdubWVudHMpO1xuXG4gICAgICB5aWVsZCAoMCwgX2VmZmVjdHMucHV0KShhY3Rpb25zLmFzc2lnbih0cmVlSWQsIGFzc2lnbm1lbnRzKSk7XG4gICAgICBicmVhaztcblxuICAgIGNhc2UgXCJWYXJpYWJsZURlY2xhcmF0aW9uXCI6XG4gICAgICB5aWVsZCAoMCwgX2VmZmVjdHMucHV0KShhY3Rpb25zLmFzc2lnbih0cmVlSWQsIHtcbiAgICAgICAgW19qc29uUG9pbnRlcjIuZGVmYXVsdC5nZXQodHJlZSwgcG9pbnRlcikuaWRdOiB7IFwic3RhY2tcIjogdG9wIH1cbiAgICAgIH0pKTtcbiAgICAgIGJyZWFrO1xuXG4gICAgY2FzZSBcIkluZGV4QWNjZXNzXCI6XG4gICAgICAvLyB0byB0cmFjayBgbWFwcGluZ2AgdHlwZXMga25vd24gaW5kZXhlc1xuICAgICAgbGV0IHtcbiAgICAgICAgYmFzZUV4cHJlc3Npb246IHtcbiAgICAgICAgICBpZDogYmFzZUlkLFxuICAgICAgICAgIHJlZmVyZW5jZWREZWNsYXJhdGlvbjogYmFzZURlY2xhcmF0aW9uSWRcbiAgICAgICAgfSxcbiAgICAgICAgaW5kZXhFeHByZXNzaW9uOiB7XG4gICAgICAgICAgaWQ6IGluZGV4SWRcbiAgICAgICAgfVxuICAgICAgfSA9IG5vZGU7XG5cbiAgICAgIGxldCBiYXNlQXNzaWdubWVudCA9IChjdXJyZW50QXNzaWdubWVudHNbYmFzZURlY2xhcmF0aW9uSWRdIHx8IHtcbiAgICAgICAgcmVmOiB7fVxuICAgICAgfSkucmVmO1xuICAgICAgZGVidWcoXCJiYXNlQXNzaWdubWVudCAlT1wiLCBiYXNlQXNzaWdubWVudCk7XG5cbiAgICAgIGxldCBiYXNlRGVmaW5pdGlvbiA9IGRlZmluaXRpb25zW2Jhc2VEZWNsYXJhdGlvbklkXS5kZWZpbml0aW9uO1xuXG4gICAgICBjb25zdCBpbmRleEFzc2lnbm1lbnQgPSAoY3VycmVudEFzc2lnbm1lbnRzW2luZGV4SWRdIHx8IHt9KS5yZWY7XG4gICAgICBkZWJ1ZyhcImluZGV4QXNzaWdubWVudCAlT1wiLCBpbmRleEFzc2lnbm1lbnQpO1xuICAgICAgLy8gSEFDSyBiZWNhdXNlIHN0cmluZyBsaXRlcmFsIEFTVCBub2RlcyBhcmUgbm90IHNvdXJjZW1hcHBlZCB0byBkaXJlY3RseVxuICAgICAgLy8gdmFsdWUgYXBwZWFycyB0byBiZSBhdmFpbGFibGUgaW4gYG5vZGUuaW5kZXhFeHByZXNzaW9uLmhleFZhbHVlYFxuICAgICAgLy8gW29ic2VydmVkIHdpdGggc29sYyB2MC40LjI0XVxuICAgICAgbGV0IGluZGV4VmFsdWU7XG4gICAgICBpZiAoaW5kZXhBc3NpZ25tZW50KSB7XG4gICAgICAgIGluZGV4VmFsdWUgPSBkZWNvZGUobm9kZS5pbmRleEV4cHJlc3Npb24sIGluZGV4QXNzaWdubWVudCk7XG4gICAgICB9IGVsc2UgaWYgKHV0aWxzLnR5cGVDbGFzcyhub2RlLmluZGV4RXhwcmVzc2lvbikgPT0gXCJzdHJpbmdsaXRlcmFsXCIpIHtcbiAgICAgICAgaW5kZXhWYWx1ZSA9IGRlY29kZShub2RlLmluZGV4RXhwcmVzc2lvbiwge1xuICAgICAgICAgIFwibGl0ZXJhbFwiOiB1dGlscy50b0J5dGVzKG5vZGUuaW5kZXhFeHByZXNzaW9uLmhleFZhbHVlKVxuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgZGVidWcoXCJpbmRleCB2YWx1ZSAlT1wiLCBpbmRleFZhbHVlKTtcbiAgICAgIGlmIChpbmRleFZhbHVlICE9IHVuZGVmaW5lZCkge1xuICAgICAgICB5aWVsZCAoMCwgX2VmZmVjdHMucHV0KShhY3Rpb25zLm1hcEtleShiYXNlRGVjbGFyYXRpb25JZCwgaW5kZXhWYWx1ZSkpO1xuICAgICAgfVxuXG4gICAgICBicmVhaztcblxuICAgIGNhc2UgXCJBc3NpZ25tZW50XCI6XG4gICAgICBicmVhaztcblxuICAgIGRlZmF1bHQ6XG4gICAgICBpZiAobm9kZS50eXBlRGVzY3JpcHRpb25zID09IHVuZGVmaW5lZCkge1xuICAgICAgICBicmVhaztcbiAgICAgIH1cblxuICAgICAgZGVidWcoXCJkZWNvZGluZyBleHByZXNzaW9uIHZhbHVlICVPXCIsIG5vZGUudHlwZURlc2NyaXB0aW9ucyk7XG4gICAgICBsZXQgbGl0ZXJhbCA9IHN0YWNrW3RvcF07XG5cbiAgICAgIHlpZWxkICgwLCBfZWZmZWN0cy5wdXQpKGFjdGlvbnMuYXNzaWduKHRyZWVJZCwge1xuICAgICAgICBbbm9kZS5pZF06IHsgbGl0ZXJhbCB9XG4gICAgICB9KSk7XG4gICAgICBicmVhaztcbiAgfVxufVxuXG5mdW5jdGlvbiogc2FnYSgpIHtcbiAgeWllbGQgKDAsIF9lZmZlY3RzLnRha2VFdmVyeSkoX2FjdGlvbnMuVElDSywgZnVuY3Rpb24qICgpIHtcbiAgICB0cnkge1xuICAgICAgeWllbGQqIHRpY2tTYWdhKCk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgZGVidWcoZSk7XG4gICAgfVxuICB9KTtcbn1cblxuZXhwb3J0cy5kZWZhdWx0ID0gKDAsIF9oZWxwZXJzLnByZWZpeE5hbWUpKFwiZGF0YVwiLCBzYWdhKTtcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9saWIvZGF0YS9zYWdhcy9pbmRleC5qcyIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5zY29wZSA9IHNjb3BlO1xuZXhwb3J0cy5kZWNsYXJlID0gZGVjbGFyZTtcbmV4cG9ydHMuYXNzaWduID0gYXNzaWduO1xuZXhwb3J0cy5tYXBLZXkgPSBtYXBLZXk7XG5jb25zdCBTQ09QRSA9IGV4cG9ydHMuU0NPUEUgPSBcIlNDT1BFXCI7XG5mdW5jdGlvbiBzY29wZShpZCwgcG9pbnRlciwgcGFyZW50SWQsIHNvdXJjZUlkKSB7XG4gIHJldHVybiB7XG4gICAgdHlwZTogU0NPUEUsXG4gICAgaWQsIHBvaW50ZXIsIHBhcmVudElkLCBzb3VyY2VJZFxuICB9O1xufVxuXG5jb25zdCBERUNMQVJFID0gZXhwb3J0cy5ERUNMQVJFID0gXCJERUNMQVJFX1ZBUklBQkxFXCI7XG5mdW5jdGlvbiBkZWNsYXJlKG5vZGUpIHtcbiAgcmV0dXJuIHtcbiAgICB0eXBlOiBERUNMQVJFLFxuICAgIG5vZGVcbiAgfTtcbn1cblxuY29uc3QgQVNTSUdOID0gZXhwb3J0cy5BU1NJR04gPSBcIkFTU0lHTlwiO1xuZnVuY3Rpb24gYXNzaWduKGNvbnRleHQsIGFzc2lnbm1lbnRzKSB7XG4gIHJldHVybiB7XG4gICAgdHlwZTogQVNTSUdOLFxuICAgIGNvbnRleHQsIGFzc2lnbm1lbnRzXG4gIH07XG59XG5cbmNvbnN0IE1BUF9LRVkgPSBleHBvcnRzLk1BUF9LRVkgPSBcIk1BUF9LRVlcIjtcbmZ1bmN0aW9uIG1hcEtleShpZCwga2V5KSB7XG4gIHJldHVybiB7XG4gICAgdHlwZTogTUFQX0tFWSxcbiAgICBpZCwga2V5XG4gIH07XG59XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vbGliL2RhdGEvYWN0aW9ucy9pbmRleC5qcyIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuXG52YXIgX3NldCA9IHJlcXVpcmUoXCJiYWJlbC1ydW50aW1lL2NvcmUtanMvc2V0XCIpO1xuXG52YXIgX3NldDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9zZXQpO1xuXG5leHBvcnRzLmFkdmFuY2UgPSBhZHZhbmNlO1xuZXhwb3J0cy53YWl0ID0gd2FpdDtcbmV4cG9ydHMucHJvY2Vzc1RyYWNlID0gcHJvY2Vzc1RyYWNlO1xuZXhwb3J0cy5zYWdhID0gc2FnYTtcblxudmFyIF9kZWJ1ZyA9IHJlcXVpcmUoXCJkZWJ1Z1wiKTtcblxudmFyIF9kZWJ1ZzIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9kZWJ1Zyk7XG5cbnZhciBfZWZmZWN0cyA9IHJlcXVpcmUoXCJyZWR1eC1zYWdhL2VmZmVjdHNcIik7XG5cbnZhciBfaGVscGVycyA9IHJlcXVpcmUoXCJsaWIvaGVscGVyc1wiKTtcblxudmFyIF9hY3Rpb25zID0gcmVxdWlyZShcIi4uL2FjdGlvbnNcIik7XG5cbnZhciBhY3Rpb25zID0gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQoX2FjdGlvbnMpO1xuXG52YXIgX3NlbGVjdG9ycyA9IHJlcXVpcmUoXCIuLi9zZWxlY3RvcnNcIik7XG5cbnZhciBfc2VsZWN0b3JzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3NlbGVjdG9ycyk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKG9iaikgeyBpZiAob2JqICYmIG9iai5fX2VzTW9kdWxlKSB7IHJldHVybiBvYmo7IH0gZWxzZSB7IHZhciBuZXdPYmogPSB7fTsgaWYgKG9iaiAhPSBudWxsKSB7IGZvciAodmFyIGtleSBpbiBvYmopIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGtleSkpIG5ld09ialtrZXldID0gb2JqW2tleV07IH0gfSBuZXdPYmouZGVmYXVsdCA9IG9iajsgcmV0dXJuIG5ld09iajsgfSB9XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmNvbnN0IGRlYnVnID0gKDAsIF9kZWJ1ZzIuZGVmYXVsdCkoXCJkZWJ1Z2dlcjp0cmFjZTpzYWdhc1wiKTtcblxuZnVuY3Rpb24qIHdhaXRGb3JUcmFjZSgpIHtcbiAgbGV0IHsgc3RlcHMgfSA9IHlpZWxkICgwLCBfZWZmZWN0cy50YWtlKShhY3Rpb25zLlNBVkVfU1RFUFMpO1xuXG4gIGxldCBhZGRyZXNzZXMgPSBbLi4ubmV3IF9zZXQyLmRlZmF1bHQoc3RlcHMuZmlsdGVyKCh7IG9wIH0pID0+IG9wID09IFwiQ0FMTFwiIHx8IG9wID09IFwiREVMRUdBVEVDQUxMXCIpLm1hcCgoeyBzdGFjayB9KSA9PiBcIjB4XCIgKyBzdGFja1tzdGFjay5sZW5ndGggLSAyXS5zdWJzdHJpbmcoMjQpKSldO1xuXG4gIHlpZWxkICgwLCBfZWZmZWN0cy5wdXQpKGFjdGlvbnMucmVjZWl2ZUFkZHJlc3NlcyhhZGRyZXNzZXMpKTtcbn1cblxuZnVuY3Rpb24qIGFkdmFuY2UoKSB7XG4gIHlpZWxkICgwLCBfZWZmZWN0cy5wdXQpKGFjdGlvbnMubmV4dCgpKTtcblxuICB5aWVsZCAoMCwgX2VmZmVjdHMudGFrZSkoYWN0aW9ucy5UT0NLKTtcbn1cblxuZnVuY3Rpb24qIG5leHQoKSB7XG4gIGxldCByZW1haW5pbmcgPSB5aWVsZCAoMCwgX2VmZmVjdHMuc2VsZWN0KShfc2VsZWN0b3JzMi5kZWZhdWx0LnN0ZXBzUmVtYWluaW5nKTtcbiAgZGVidWcoXCJyZW1haW5pbmc6ICVvXCIsIHJlbWFpbmluZyk7XG4gIGxldCBzdGVwcyA9IHlpZWxkICgwLCBfZWZmZWN0cy5zZWxlY3QpKF9zZWxlY3RvcnMyLmRlZmF1bHQuc3RlcHMpO1xuICBkZWJ1ZyhcInRvdGFsIHN0ZXBzOiAlb1wiLCBzdGVwcy5sZW5ndGgpO1xuXG4gIGlmIChyZW1haW5pbmcgPiAwKSB7XG4gICAgZGVidWcoXCJwdXR0aW5nIFRJQ0tcIik7XG4gICAgLy8gdXBkYXRlcyBzdGF0ZSBmb3IgY3VycmVudCBzdGVwXG4gICAgeWllbGQgKDAsIF9lZmZlY3RzLnB1dCkoYWN0aW9ucy50aWNrKCkpO1xuICAgIGRlYnVnKFwicHV0IFRJQ0tcIik7XG5cbiAgICByZW1haW5pbmctLTsgLy8gbG9jYWwgdXBkYXRlLCBqdXN0IGZvciBjb252ZW5pZW5jZVxuICB9XG5cbiAgaWYgKHJlbWFpbmluZykge1xuICAgIGRlYnVnKFwicHV0dGluZyBUT0NLXCIpO1xuICAgIC8vIHVwZGF0ZXMgc3RlcCB0byBuZXh0IHN0ZXAgaW4gdHJhY2VcbiAgICB5aWVsZCAoMCwgX2VmZmVjdHMucHV0KShhY3Rpb25zLnRvY2soKSk7XG4gICAgZGVidWcoXCJwdXQgVE9DS1wiKTtcbiAgfSBlbHNlIHtcblxuICAgIHlpZWxkICgwLCBfZWZmZWN0cy5wdXQpKGFjdGlvbnMuZW5kVHJhY2UoKSk7XG4gIH1cbn1cblxuZnVuY3Rpb24qIHdhaXQoKSB7XG4gIHlpZWxkICgwLCBfZWZmZWN0cy50YWtlKShhY3Rpb25zLkVORF9PRl9UUkFDRSk7XG59XG5cbmZ1bmN0aW9uKiBwcm9jZXNzVHJhY2UodHJhY2UpIHtcbiAgeWllbGQgKDAsIF9lZmZlY3RzLnB1dCkoYWN0aW9ucy5zYXZlU3RlcHModHJhY2UpKTtcblxuICBsZXQgeyBhZGRyZXNzZXMgfSA9IHlpZWxkICgwLCBfZWZmZWN0cy50YWtlKShhY3Rpb25zLlJFQ0VJVkVfQUREUkVTU0VTKTtcbiAgZGVidWcoXCJyZWNlaXZlZCBhZGRyZXNzZXNcIik7XG5cbiAgcmV0dXJuIGFkZHJlc3Nlcztcbn1cblxuZnVuY3Rpb24qIHNhZ2EoKSB7XG4gIC8vIHdhaXQgZm9yIHRyYWNlIHRvIGJlIGRlZmluZWRcbiAgeWllbGQqIHdhaXRGb3JUcmFjZSgpO1xuXG4gIHlpZWxkICgwLCBfZWZmZWN0cy50YWtlRXZlcnkpKGFjdGlvbnMuTkVYVCwgbmV4dCk7XG59XG5cbmV4cG9ydHMuZGVmYXVsdCA9ICgwLCBfaGVscGVycy5wcmVmaXhOYW1lKShcInRyYWNlXCIsIHNhZ2EpO1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL2xpYi90cmFjZS9zYWdhcy9pbmRleC5qcyIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5hZGRTb3VyY2UgPSBhZGRTb3VyY2U7XG5leHBvcnRzLmFkZFNvdXJjZU1hcCA9IGFkZFNvdXJjZU1hcDtcbmV4cG9ydHMuanVtcCA9IGp1bXA7XG5jb25zdCBBRERfU09VUkNFID0gZXhwb3J0cy5BRERfU09VUkNFID0gXCJTT0xJRElUWV9BRERfU09VUkNFXCI7XG5mdW5jdGlvbiBhZGRTb3VyY2Uoc291cmNlLCBzb3VyY2VQYXRoLCBhc3QpIHtcbiAgcmV0dXJuIHtcbiAgICB0eXBlOiBBRERfU09VUkNFLFxuICAgIHNvdXJjZSwgc291cmNlUGF0aCwgYXN0XG4gIH07XG59XG5cbmNvbnN0IEFERF9TT1VSQ0VNQVAgPSBleHBvcnRzLkFERF9TT1VSQ0VNQVAgPSBcIlNPTElESVRZX0FERF9TT1VSQ0VNQVBcIjtcbmZ1bmN0aW9uIGFkZFNvdXJjZU1hcChiaW5hcnksIHNvdXJjZU1hcCkge1xuICByZXR1cm4ge1xuICAgIHR5cGU6IEFERF9TT1VSQ0VNQVAsXG4gICAgYmluYXJ5LCBzb3VyY2VNYXBcbiAgfTtcbn1cblxuY29uc3QgSlVNUCA9IGV4cG9ydHMuSlVNUCA9IFwiSlVNUFwiO1xuZnVuY3Rpb24ganVtcChqdW1wRGlyZWN0aW9uKSB7XG4gIHJldHVybiB7XG4gICAgdHlwZTogSlVNUCxcbiAgICBqdW1wRGlyZWN0aW9uXG4gIH07XG59XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vbGliL3NvbGlkaXR5L2FjdGlvbnMvaW5kZXguanMiLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuYWRkQ29udGV4dCA9IGFkZENvbnRleHQ7XG5leHBvcnRzLmFkZEluc3RhbmNlID0gYWRkSW5zdGFuY2U7XG5leHBvcnRzLmNhbGwgPSBjYWxsO1xuZXhwb3J0cy5jcmVhdGUgPSBjcmVhdGU7XG5leHBvcnRzLnJldHVybkNhbGwgPSByZXR1cm5DYWxsO1xuY29uc3QgQUREX0NPTlRFWFQgPSBleHBvcnRzLkFERF9DT05URVhUID0gXCJFVk1fQUREX0NPTlRFWFRcIjtcbmZ1bmN0aW9uIGFkZENvbnRleHQoY29udHJhY3ROYW1lLCBiaW5hcnkpIHtcbiAgcmV0dXJuIHtcbiAgICB0eXBlOiBBRERfQ09OVEVYVCxcbiAgICBjb250cmFjdE5hbWUsIGJpbmFyeVxuICB9O1xufVxuXG5jb25zdCBBRERfSU5TVEFOQ0UgPSBleHBvcnRzLkFERF9JTlNUQU5DRSA9IFwiRVZNX0FERF9JTlNUQU5DRVwiO1xuZnVuY3Rpb24gYWRkSW5zdGFuY2UoYWRkcmVzcywgY29udGV4dCwgYmluYXJ5KSB7XG4gIHJldHVybiB7XG4gICAgdHlwZTogQUREX0lOU1RBTkNFLFxuICAgIGFkZHJlc3MsIGNvbnRleHQsIGJpbmFyeVxuICB9O1xufVxuXG5jb25zdCBDQUxMID0gZXhwb3J0cy5DQUxMID0gXCJDQUxMXCI7XG5mdW5jdGlvbiBjYWxsKGFkZHJlc3MpIHtcbiAgcmV0dXJuIHtcbiAgICB0eXBlOiBDQUxMLFxuICAgIGFkZHJlc3NcbiAgfTtcbn1cblxuY29uc3QgQ1JFQVRFID0gZXhwb3J0cy5DUkVBVEUgPSBcIkNSRUFURVwiO1xuZnVuY3Rpb24gY3JlYXRlKGJpbmFyeSkge1xuICByZXR1cm4ge1xuICAgIHR5cGU6IENSRUFURSxcbiAgICBiaW5hcnlcbiAgfTtcbn1cblxuY29uc3QgUkVUVVJOID0gZXhwb3J0cy5SRVRVUk4gPSBcIlJFVFVSTlwiO1xuZnVuY3Rpb24gcmV0dXJuQ2FsbCgpIHtcbiAgcmV0dXJuIHtcbiAgICB0eXBlOiBSRVRVUk5cbiAgfTtcbn1cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9saWIvZXZtL2FjdGlvbnMvaW5kZXguanMiLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcblxudmFyIF9lbnRyaWVzID0gcmVxdWlyZShcImJhYmVsLXJ1bnRpbWUvY29yZS1qcy9vYmplY3QvZW50cmllc1wiKTtcblxudmFyIF9lbnRyaWVzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2VudHJpZXMpO1xuXG52YXIgX2Fzc2lnbiA9IHJlcXVpcmUoXCJiYWJlbC1ydW50aW1lL2NvcmUtanMvb2JqZWN0L2Fzc2lnblwiKTtcblxudmFyIF9hc3NpZ24yID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfYXNzaWduKTtcblxudmFyIF9kZWJ1ZyA9IHJlcXVpcmUoXCJkZWJ1Z1wiKTtcblxudmFyIF9kZWJ1ZzIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9kZWJ1Zyk7XG5cbnZhciBfcmVzZWxlY3RUcmVlID0gcmVxdWlyZShcInJlc2VsZWN0LXRyZWVcIik7XG5cbnZhciBfc2VsZWN0b3JzID0gcmVxdWlyZShcImxpYi9ldm0vc2VsZWN0b3JzXCIpO1xuXG52YXIgX3NlbGVjdG9yczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9zZWxlY3RvcnMpO1xuXG52YXIgX3NlbGVjdG9yczMgPSByZXF1aXJlKFwibGliL3NvbGlkaXR5L3NlbGVjdG9yc1wiKTtcblxudmFyIF9zZWxlY3RvcnM0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfc2VsZWN0b3JzMyk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmNvbnN0IGRlYnVnID0gKDAsIF9kZWJ1ZzIuZGVmYXVsdCkoXCJkZWJ1Z2dlcjpzZXNzaW9uOnNlbGVjdG9yc1wiKTtcblxuY29uc3Qgc2Vzc2lvbiA9ICgwLCBfcmVzZWxlY3RUcmVlLmNyZWF0ZVNlbGVjdG9yVHJlZSkoe1xuICAvKipcbiAgICogc2Vzc2lvbi5pbmZvXG4gICAqL1xuICBpbmZvOiB7XG5cbiAgICAvKipcbiAgICAgKiBzZXNzaW9uLmluZm8uYWZmZWN0ZWRJbnN0YW5jZXNcbiAgICAgKi9cbiAgICBhZmZlY3RlZEluc3RhbmNlczogKDAsIF9yZXNlbGVjdFRyZWUuY3JlYXRlTGVhZikoW19zZWxlY3RvcnMyLmRlZmF1bHQuaW5mby5pbnN0YW5jZXMsIF9zZWxlY3RvcnMyLmRlZmF1bHQuaW5mby5jb250ZXh0cywgX3NlbGVjdG9yczQuZGVmYXVsdC5pbmZvLnNvdXJjZXMsIF9zZWxlY3RvcnM0LmRlZmF1bHQuaW5mby5zb3VyY2VNYXBzXSwgKGluc3RhbmNlcywgY29udGV4dHMsIHNvdXJjZXMsIHNvdXJjZU1hcHMpID0+ICgwLCBfYXNzaWduMi5kZWZhdWx0KSh7fSwgLi4uKDAsIF9lbnRyaWVzMi5kZWZhdWx0KShpbnN0YW5jZXMpLm1hcCgoW2FkZHJlc3MsIHsgY29udGV4dCB9XSkgPT4ge1xuICAgICAgbGV0IHsgY29udHJhY3ROYW1lLCBiaW5hcnkgfSA9IGNvbnRleHRzW2NvbnRleHRdO1xuICAgICAgbGV0IHsgc291cmNlTWFwIH0gPSBzb3VyY2VNYXBzW2NvbnRleHRdO1xuXG4gICAgICBsZXQgeyBzb3VyY2UgfSA9IHNvdXJjZU1hcCA/XG4gICAgICAvLyBsb29rIGZvciBzb3VyY2UgSUQgYmV0d2VlbiBzZWNvbmQgYW5kIHRoaXJkIGNvbG9ucyAoSEFDSylcbiAgICAgIHNvdXJjZXNbc291cmNlTWFwLm1hdGNoKC9eW146XSs6W146XSs6KFteOl0rKTovKVsxXV0gOiB7fTtcblxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgW2FkZHJlc3NdOiB7XG4gICAgICAgICAgY29udHJhY3ROYW1lLCBzb3VyY2UsIGJpbmFyeVxuICAgICAgICB9XG4gICAgICB9O1xuICAgIH0pKSlcbiAgfVxufSk7XG5cbmV4cG9ydHMuZGVmYXVsdCA9IHNlc3Npb247XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vbGliL3Nlc3Npb24vc2VsZWN0b3JzL2luZGV4LmpzIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5cbnZhciBfdmFsdWVzID0gcmVxdWlyZShcImJhYmVsLXJ1bnRpbWUvY29yZS1qcy9vYmplY3QvdmFsdWVzXCIpO1xuXG52YXIgX3ZhbHVlczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF92YWx1ZXMpO1xuXG52YXIgX2FzeW5jVG9HZW5lcmF0b3IyID0gcmVxdWlyZShcImJhYmVsLXJ1bnRpbWUvaGVscGVycy9hc3luY1RvR2VuZXJhdG9yXCIpO1xuXG52YXIgX2FzeW5jVG9HZW5lcmF0b3IzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfYXN5bmNUb0dlbmVyYXRvcjIpO1xuXG5sZXQgcHJlcGFyZURlYnVnZ2VyID0gKCgpID0+IHtcbiAgdmFyIF9yZWYyID0gKDAsIF9hc3luY1RvR2VuZXJhdG9yMy5kZWZhdWx0KShmdW5jdGlvbiogKHRlc3ROYW1lLCBzb3VyY2VzKSB7XG4gICAgY29uc3QgcHJvdmlkZXIgPSBfZ2FuYWNoZUNsaTIuZGVmYXVsdC5wcm92aWRlcih7IHNlZWQ6IFwiZGVidWdnZXJcIiwgZ2FzTGltaXQ6IDcwMDAwMDAgfSk7XG4gICAgY29uc3Qgd2ViMyA9IG5ldyBfd2ViMi5kZWZhdWx0KHByb3ZpZGVyKTtcblxuICAgIGxldCB7IGFic3RyYWN0aW9ucywgYXJ0aWZhY3RzOiBjb250cmFjdHMsIGZpbGVzIH0gPSB5aWVsZCAoMCwgX2hlbHBlcnMucHJlcGFyZUNvbnRyYWN0cykocHJvdmlkZXIsIHNvdXJjZXMpO1xuXG4gICAgbGV0IGluc3RhbmNlID0geWllbGQgYWJzdHJhY3Rpb25zW2NvbnRyYWN0TmFtZSh0ZXN0TmFtZSldLmRlcGxveWVkKCk7XG4gICAgbGV0IHJlY2VpcHQgPSB5aWVsZCBpbnN0YW5jZS5ydW4oKTtcbiAgICBsZXQgdHhIYXNoID0gcmVjZWlwdC50eDtcblxuICAgIGxldCBidWdnZXIgPSB5aWVsZCBfZGVidWdnZXIyLmRlZmF1bHQuZm9yVHgodHhIYXNoLCB7IHByb3ZpZGVyLCBmaWxlcywgY29udHJhY3RzIH0pO1xuXG4gICAgbGV0IHNlc3Npb24gPSBidWdnZXIuY29ubmVjdCgpO1xuXG4gICAgbGV0IGJyZWFrcG9pbnQgPSB7XG4gICAgICBhZGRyZXNzOiBpbnN0YW5jZS5hZGRyZXNzLFxuICAgICAgbGluZTogbGFzdFN0YXRlbWVudExpbmUoc291cmNlc1tmaWxlTmFtZSh0ZXN0TmFtZSldKVxuICAgIH07XG5cbiAgICBzZXNzaW9uLmNvbnRpbnVlVW50aWwoYnJlYWtwb2ludCk7XG5cbiAgICByZXR1cm4gc2Vzc2lvbjtcbiAgfSk7XG5cbiAgcmV0dXJuIGZ1bmN0aW9uIHByZXBhcmVEZWJ1Z2dlcihfeCwgX3gyKSB7XG4gICAgcmV0dXJuIF9yZWYyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gIH07XG59KSgpO1xuXG5sZXQgZ2V0RGVjb2RlID0gKCgpID0+IHtcbiAgdmFyIF9yZWYzID0gKDAsIF9hc3luY1RvR2VuZXJhdG9yMy5kZWZhdWx0KShmdW5jdGlvbiogKHNlc3Npb24pIHtcbiAgICBjb25zdCBkZWZpbml0aW9ucyA9IHNlc3Npb24udmlldyhfc2VsZWN0b3JzMi5kZWZhdWx0LmN1cnJlbnQuaWRlbnRpZmllcnMuZGVmaW5pdGlvbnMpO1xuICAgIGNvbnN0IHJlZnMgPSBzZXNzaW9uLnZpZXcoX3NlbGVjdG9yczIuZGVmYXVsdC5jdXJyZW50LmlkZW50aWZpZXJzLnJlZnMpO1xuXG4gICAgY29uc3QgZGVjb2RlID0gc2Vzc2lvbi52aWV3KF9zZWxlY3RvcnMyLmRlZmF1bHQudmlld3MuZGVjb2Rlcik7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgICByZXR1cm4gKDAsIF91dGlscy5jbGVhbkJpZ051bWJlcnMpKGRlY29kZShkZWZpbml0aW9uc1tuYW1lXSwgcmVmc1tuYW1lXSkpO1xuICAgIH07XG4gIH0pO1xuXG4gIHJldHVybiBmdW5jdGlvbiBnZXREZWNvZGUoX3gzKSB7XG4gICAgcmV0dXJuIF9yZWYzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gIH07XG59KSgpO1xuXG5leHBvcnRzLmdlbmVyYXRlVWludHMgPSBnZW5lcmF0ZVVpbnRzO1xuZXhwb3J0cy5kZXNjcmliZURlY29kaW5nID0gZGVzY3JpYmVEZWNvZGluZztcblxudmFyIF9kZWJ1ZyA9IHJlcXVpcmUoXCJkZWJ1Z1wiKTtcblxudmFyIF9kZWJ1ZzIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9kZWJ1Zyk7XG5cbnZhciBfZ2FuYWNoZUNsaSA9IHJlcXVpcmUoXCJnYW5hY2hlLWNsaVwiKTtcblxudmFyIF9nYW5hY2hlQ2xpMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2dhbmFjaGVDbGkpO1xuXG52YXIgX3dlYiA9IHJlcXVpcmUoXCJ3ZWIzXCIpO1xuXG52YXIgX3dlYjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF93ZWIpO1xuXG52YXIgX2NoYWkgPSByZXF1aXJlKFwiY2hhaVwiKTtcblxudmFyIF9jaGFuZ2VDYXNlID0gcmVxdWlyZShcImNoYW5nZS1jYXNlXCIpO1xuXG52YXIgX2NoYW5nZUNhc2UyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY2hhbmdlQ2FzZSk7XG5cbnZhciBfaGVscGVycyA9IHJlcXVpcmUoXCJ0ZXN0L2hlbHBlcnNcIik7XG5cbnZhciBfZGVidWdnZXIgPSByZXF1aXJlKFwibGliL2RlYnVnZ2VyXCIpO1xuXG52YXIgX2RlYnVnZ2VyMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2RlYnVnZ2VyKTtcblxudmFyIF91dGlscyA9IHJlcXVpcmUoXCJsaWIvZGF0YS9kZWNvZGUvdXRpbHNcIik7XG5cbnZhciBfc2VsZWN0b3JzID0gcmVxdWlyZShcImxpYi9kYXRhL3NlbGVjdG9yc1wiKTtcblxudmFyIF9zZWxlY3RvcnMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfc2VsZWN0b3JzKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuY29uc3QgZGVidWcgPSAoMCwgX2RlYnVnMi5kZWZhdWx0KShcInRlc3Q6ZGF0YTpkZWNvZGVcIik7XG5cbmZ1bmN0aW9uKiBnZW5lcmF0ZVVpbnRzKCkge1xuICBsZXQgeCA9IDA7XG4gIHdoaWxlICh0cnVlKSB7XG4gICAgeWllbGQgeDtcbiAgICB4Kys7XG4gIH1cbn1cblxuZnVuY3Rpb24gY29udHJhY3ROYW1lKHRlc3ROYW1lKSB7XG4gIHJldHVybiB0ZXN0TmFtZS5yZXBsYWNlKC8gL2csIFwiXCIpO1xufVxuXG5mdW5jdGlvbiBmaWxlTmFtZSh0ZXN0TmFtZSkge1xuICByZXR1cm4gYCR7Y29udHJhY3ROYW1lKHRlc3ROYW1lKX0uc29sYDtcbn1cblxuZnVuY3Rpb24gZ2VuZXJhdGVUZXN0cyhmaXh0dXJlcykge1xuICBmb3IgKGxldCBfcmVmIG9mIGZpeHR1cmVzKSB7XG4gICAgbGV0IHsgbmFtZSwgdmFsdWU6IGV4cGVjdGVkIH0gPSBfcmVmO1xuXG4gICAgaXQoYGNvcnJlY3RseSBkZWNvZGVzICR7bmFtZX1gLCAoKSA9PiB7XG4gICAgICBfY2hhaS5hc3NlcnQuZGVlcEVxdWFsKHRoaXMuZGVjb2RlKG5hbWUpLCBleHBlY3RlZCk7XG4gICAgfSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gbGFzdFN0YXRlbWVudExpbmUoc291cmNlKSB7XG4gIGNvbnN0IGxpbmVzID0gc291cmNlLnNwbGl0KFwiXFxuXCIpO1xuICBmb3IgKGxldCBpID0gbGluZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICBsZXQgbGluZSA9IGxpbmVzW2ldO1xuICAgIGlmIChsaW5lLmluZGV4T2YoXCI7XCIpICE9IC0xKSB7XG4gICAgICByZXR1cm4gaTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gZGVzY3JpYmVEZWNvZGluZyh0ZXN0TmFtZSwgZml4dHVyZXMsIHNlbGVjdG9yLCBnZW5lcmF0ZVNvdXJjZSkge1xuICBjb25zdCBzb3VyY2VzID0ge1xuICAgIFtmaWxlTmFtZSh0ZXN0TmFtZSldOiBnZW5lcmF0ZVNvdXJjZShjb250cmFjdE5hbWUodGVzdE5hbWUpLCBmaXh0dXJlcylcbiAgfTtcblxuICBkZXNjcmliZSh0ZXN0TmFtZSwgZnVuY3Rpb24gKCkge1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICBjb25zdCB0ZXN0RGVidWcgPSAoMCwgX2RlYnVnMi5kZWZhdWx0KShgdGVzdDpkYXRhOmRlY29kZToke19jaGFuZ2VDYXNlMi5kZWZhdWx0LnBhcmFtQ2FzZSh0ZXN0TmFtZSl9YCk7XG5cbiAgICB0ZXN0RGVidWcoXCJzb3VyY2UgJXNcIiwgKDAsIF92YWx1ZXMyLmRlZmF1bHQpKHNvdXJjZXMpWzBdKTtcblxuICAgIHRoaXMudGltZW91dCgzMDAwMCk7XG5cbiAgICBiZWZvcmUoXCJydW5zIGFuZCBvYnNlcnZlcyBkZWJ1Z2dlclwiLCAoMCwgX2FzeW5jVG9HZW5lcmF0b3IzLmRlZmF1bHQpKGZ1bmN0aW9uKiAoKSB7XG4gICAgICBjb25zdCBzZXNzaW9uID0geWllbGQgcHJlcGFyZURlYnVnZ2VyKHRlc3ROYW1lLCBzb3VyY2VzKTtcbiAgICAgIF90aGlzLmRlY29kZSA9IHlpZWxkIGdldERlY29kZShzZXNzaW9uKTtcblxuICAgICAgaWYgKHNlbGVjdG9yKSB7XG4gICAgICAgIGRlYnVnKFwic2VsZWN0b3IgJU9cIiwgc2Vzc2lvbi52aWV3KHNlbGVjdG9yKSk7XG4gICAgICB9XG4gICAgfSkpO1xuXG4gICAgZ2VuZXJhdGVUZXN0cy5iaW5kKHRoaXMpKGZpeHR1cmVzKTtcbiAgfSk7XG59XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vdGVzdC9kYXRhL2RlY29kZS9oZWxwZXJzLmpzIiwiLy8gcnVudGltZSBoZWxwZXJcbmZ1bmN0aW9uIGluTWFuaWZlc3QoaWQpIHsgcmV0dXJuIGdsb2JhbC5fX3dlYnBhY2tNYW5pZmVzdF9fLmluZGV4T2YoaWQpID49IDA7fVxuZnVuY3Rpb24gcnVuKGlkKSB7IF9fd2VicGFja19yZXF1aXJlX18oaWQpO31cblxuLy8gbW9kdWxlcyB0byBleGVjdXRlIGdvZXMgaGVyZVxudmFyIGlkcyA9IFtcbnJlcXVpcmUucmVzb2x2ZShcIi4uLy4uLy4uL3BhY2thZ2VzL3RydWZmbGUtZGVidWdnZXIvdGVzdC9hc3QuanNcIikscmVxdWlyZS5yZXNvbHZlKFwiLi4vLi4vLi4vcGFja2FnZXMvdHJ1ZmZsZS1kZWJ1Z2dlci90ZXN0L2NvbnRleHQuanNcIikscmVxdWlyZS5yZXNvbHZlKFwiLi4vLi4vLi4vcGFja2FnZXMvdHJ1ZmZsZS1kZWJ1Z2dlci90ZXN0L2RhdGEvZGVjb2RlL2RlY29kaW5nLmpzXCIpLHJlcXVpcmUucmVzb2x2ZShcIi4uLy4uLy4uL3BhY2thZ2VzL3RydWZmbGUtZGVidWdnZXIvdGVzdC9kYXRhL2RlY29kZS9oZWxwZXJzLmpzXCIpLHJlcXVpcmUucmVzb2x2ZShcIi4uLy4uLy4uL3BhY2thZ2VzL3RydWZmbGUtZGVidWdnZXIvdGVzdC9kYXRhL2RlY29kZS91dGlscy5qc1wiKSxyZXF1aXJlLnJlc29sdmUoXCIuLi8uLi8uLi9wYWNrYWdlcy90cnVmZmxlLWRlYnVnZ2VyL3Rlc3QvZXZtLmpzXCIpLHJlcXVpcmUucmVzb2x2ZShcIi4uLy4uLy4uL3BhY2thZ2VzL3RydWZmbGUtZGVidWdnZXIvdGVzdC9oZWxwZXJzLmpzXCIpLHJlcXVpcmUucmVzb2x2ZShcIi4uLy4uLy4uL3BhY2thZ2VzL3RydWZmbGUtZGVidWdnZXIvdGVzdC9zb2xpZGl0eS5qc1wiKVxuXTtcblxuaWRzLmZpbHRlcihpbk1hbmlmZXN0KS5mb3JFYWNoKHJ1bilcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAvVXNlcnMvZ25pZGFuL3NyYy93b3JrL3RydWZmbGUvbm9kZV9tb2R1bGVzL21vY2hhLXdlYnBhY2svbGliL2VudHJ5LmpzXG4vLyBtb2R1bGUgaWQgPSAzOFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9hc3luY1RvR2VuZXJhdG9yMiA9IHJlcXVpcmUoXCJiYWJlbC1ydW50aW1lL2hlbHBlcnMvYXN5bmNUb0dlbmVyYXRvclwiKTtcblxudmFyIF9hc3luY1RvR2VuZXJhdG9yMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2FzeW5jVG9HZW5lcmF0b3IyKTtcblxudmFyIF9kZWJ1ZyA9IHJlcXVpcmUoXCJkZWJ1Z1wiKTtcblxudmFyIF9kZWJ1ZzIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9kZWJ1Zyk7XG5cbnZhciBfY2hhaSA9IHJlcXVpcmUoXCJjaGFpXCIpO1xuXG52YXIgX2dhbmFjaGVDbGkgPSByZXF1aXJlKFwiZ2FuYWNoZS1jbGlcIik7XG5cbnZhciBfZ2FuYWNoZUNsaTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9nYW5hY2hlQ2xpKTtcblxudmFyIF93ZWIgPSByZXF1aXJlKFwid2ViM1wiKTtcblxudmFyIF93ZWIyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfd2ViKTtcblxudmFyIF9oZWxwZXJzID0gcmVxdWlyZShcIi4vaGVscGVyc1wiKTtcblxudmFyIF9kZWJ1Z2dlciA9IHJlcXVpcmUoXCJsaWIvZGVidWdnZXJcIik7XG5cbnZhciBfZGVidWdnZXIyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZGVidWdnZXIpO1xuXG52YXIgX3NlbGVjdG9ycyA9IHJlcXVpcmUoXCJsaWIvYXN0L3NlbGVjdG9yc1wiKTtcblxudmFyIF9zZWxlY3RvcnMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfc2VsZWN0b3JzKTtcblxudmFyIF9zZWxlY3RvcnMzID0gcmVxdWlyZShcImxpYi9zb2xpZGl0eS9zZWxlY3RvcnNcIik7XG5cbnZhciBfc2VsZWN0b3JzNCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3NlbGVjdG9yczMpO1xuXG52YXIgX21hcCA9IHJlcXVpcmUoXCJsaWIvYXN0L21hcFwiKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuY29uc3QgZGVidWcgPSAoMCwgX2RlYnVnMi5kZWZhdWx0KShcInRlc3Q6YXN0XCIpO1xuXG5jb25zdCBfX1ZBUklBQkxFUyA9IGBcbnByYWdtYSBzb2xpZGl0eSBeMC40LjE4O1xuXG5jb250cmFjdCBWYXJpYWJsZXMge1xuICBldmVudCBSZXN1bHQodWludDI1NiByZXN1bHQpO1xuXG4gIHVpbnQyNTYgcXV4O1xuICBzdHJpbmcgcXV1eDtcblxuICBmdW5jdGlvbiBzdGFjayh1aW50MjU2IGZvbykgcHVibGljIHJldHVybnMgKHVpbnQyNTYpIHtcbiAgICB1aW50MjU2IGJhciA9IGZvbyArIDE7XG4gICAgdWludDI1NiBiYXogPSBpbm5lclN0YWNrKGJhcik7XG5cbiAgICBiYXogKz0gNDtcblxuICAgIHF1eCA9IGJhejtcblxuICAgIGVtaXQgUmVzdWx0KGJheik7XG5cbiAgICByZXR1cm4gYmF6O1xuICB9XG5cbiAgZnVuY3Rpb24gaW5uZXJTdGFjayh1aW50MjU2IGJheikgcHVibGljIHJldHVybnMgKHVpbnQyNTYpIHtcbiAgICB1aW50MjU2IGJhciA9IGJheiArIDI7XG4gICAgcmV0dXJuIGJhcjtcbiAgfVxufVxuYDtcblxubGV0IHNvdXJjZXMgPSB7XG4gIFwiVmFyaWFibGVzLnNvbFwiOiBfX1ZBUklBQkxFU1xufTtcblxuZGVzY3JpYmUoXCJBU1RcIiwgZnVuY3Rpb24gKCkge1xuICB2YXIgcHJvdmlkZXI7XG4gIHZhciB3ZWIzO1xuXG4gIHZhciBhYnN0cmFjdGlvbnM7XG4gIHZhciBhcnRpZmFjdHM7XG4gIHZhciBmaWxlcztcblxuICBiZWZvcmUoXCJDcmVhdGUgUHJvdmlkZXJcIiwgKDAsIF9hc3luY1RvR2VuZXJhdG9yMy5kZWZhdWx0KShmdW5jdGlvbiogKCkge1xuICAgIHByb3ZpZGVyID0gX2dhbmFjaGVDbGkyLmRlZmF1bHQucHJvdmlkZXIoeyBzZWVkOiBcImRlYnVnZ2VyXCIsIGdhc0xpbWl0OiA3MDAwMDAwIH0pO1xuICAgIHdlYjMgPSBuZXcgX3dlYjIuZGVmYXVsdChwcm92aWRlcik7XG4gIH0pKTtcblxuICBiZWZvcmUoXCJQcmVwYXJlIGNvbnRyYWN0cyBhbmQgYXJ0aWZhY3RzXCIsICgwLCBfYXN5bmNUb0dlbmVyYXRvcjMuZGVmYXVsdCkoZnVuY3Rpb24qICgpIHtcbiAgICB0aGlzLnRpbWVvdXQoMzAwMDApO1xuXG4gICAgbGV0IHByZXBhcmVkID0geWllbGQgKDAsIF9oZWxwZXJzLnByZXBhcmVDb250cmFjdHMpKHByb3ZpZGVyLCBzb3VyY2VzKTtcbiAgICBhYnN0cmFjdGlvbnMgPSBwcmVwYXJlZC5hYnN0cmFjdGlvbnM7XG4gICAgYXJ0aWZhY3RzID0gcHJlcGFyZWQuYXJ0aWZhY3RzO1xuICAgIGZpbGVzID0gcHJlcGFyZWQuZmlsZXM7XG4gIH0pKTtcblxuICBkZXNjcmliZShcIk5vZGUgcG9pbnRlclwiLCBmdW5jdGlvbiAoKSB7XG4gICAgaXQoXCJ0cmF2ZXJzZXNcIiwgKDAsIF9hc3luY1RvR2VuZXJhdG9yMy5kZWZhdWx0KShmdW5jdGlvbiogKCkge1xuICAgICAgdGhpcy50aW1lb3V0KDApO1xuICAgICAgbGV0IGluc3RhbmNlID0geWllbGQgYWJzdHJhY3Rpb25zLlZhcmlhYmxlcy5kZXBsb3llZCgpO1xuICAgICAgbGV0IHJlY2VpcHQgPSB5aWVsZCBpbnN0YW5jZS5zdGFjayg0KTtcbiAgICAgIGxldCB0eEhhc2ggPSByZWNlaXB0LnR4O1xuXG4gICAgICBsZXQgYnVnZ2VyID0geWllbGQgX2RlYnVnZ2VyMi5kZWZhdWx0LmZvclR4KHR4SGFzaCwge1xuICAgICAgICBwcm92aWRlcixcbiAgICAgICAgZmlsZXMsXG4gICAgICAgIGNvbnRyYWN0czogYXJ0aWZhY3RzXG4gICAgICB9KTtcblxuICAgICAgbGV0IHNlc3Npb24gPSBidWdnZXIuY29ubmVjdCgpO1xuICAgICAgZGVidWcoXCJhc3Q6ICVPXCIsIHNlc3Npb24udmlldyhfc2VsZWN0b3JzMi5kZWZhdWx0LmN1cnJlbnQudHJlZSkpO1xuXG4gICAgICBkbyB7XG4gICAgICAgIGxldCB7IHN0YXJ0LCBsZW5ndGggfSA9IHNlc3Npb24udmlldyhfc2VsZWN0b3JzNC5kZWZhdWx0LmN1cnJlbnQuc291cmNlUmFuZ2UpO1xuICAgICAgICBsZXQgZW5kID0gc3RhcnQgKyBsZW5ndGg7XG5cbiAgICAgICAgbGV0IG5vZGUgPSBzZXNzaW9uLnZpZXcoX3NlbGVjdG9yczIuZGVmYXVsdC5jdXJyZW50Lm5vZGUpO1xuXG4gICAgICAgIGxldCBbbm9kZVN0YXJ0LCBub2RlTGVuZ3RoXSA9ICgwLCBfbWFwLmdldFJhbmdlKShub2RlKTtcbiAgICAgICAgbGV0IG5vZGVFbmQgPSBub2RlU3RhcnQgKyBub2RlTGVuZ3RoO1xuXG4gICAgICAgIGxldCBwb2ludGVyID0gc2Vzc2lvbi52aWV3KF9zZWxlY3RvcnMyLmRlZmF1bHQuY3VycmVudC5wb2ludGVyKTtcblxuICAgICAgICBfY2hhaS5hc3NlcnQuaXNBdE1vc3Qobm9kZVN0YXJ0LCBzdGFydCwgYE5vZGUgJHtwb2ludGVyfSBhdCBzaG91bGQgbm90IGJlZ2luIGFmdGVyIGluc3RydWN0aW9uIHNvdXJjZSByYW5nZWApO1xuICAgICAgICBfY2hhaS5hc3NlcnQuaXNBdExlYXN0KG5vZGVFbmQsIGVuZCwgYE5vZGUgJHtwb2ludGVyfSBzaG91bGQgbm90IGVuZCBhZnRlciBzb3VyY2VgKTtcblxuICAgICAgICBzZXNzaW9uLnN0ZXBOZXh0KCk7XG4gICAgICB9IHdoaWxlICghc2Vzc2lvbi5maW5pc2hlZCk7XG4gICAgfSkpO1xuICB9KTtcbn0pO1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3Rlc3QvYXN0LmpzIiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwicGF0aFwiKTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyBleHRlcm5hbCBcInBhdGhcIlxuLy8gbW9kdWxlIGlkID0gNDBcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiZnMtZXh0cmFcIik7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gZXh0ZXJuYWwgXCJmcy1leHRyYVwiXG4vLyBtb2R1bGUgaWQgPSA0MVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCJhc3luY1wiKTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyBleHRlcm5hbCBcImFzeW5jXCJcbi8vIG1vZHVsZSBpZCA9IDQyXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcInRydWZmbGUtd29ya2Zsb3ctY29tcGlsZVwiKTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyBleHRlcm5hbCBcInRydWZmbGUtd29ya2Zsb3ctY29tcGlsZVwiXG4vLyBtb2R1bGUgaWQgPSA0M1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCJ0cnVmZmxlLWRlYnVnLXV0aWxzXCIpO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIGV4dGVybmFsIFwidHJ1ZmZsZS1kZWJ1Zy11dGlsc1wiXG4vLyBtb2R1bGUgaWQgPSA0NFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCJ0cnVmZmxlLWFydGlmYWN0b3JcIik7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gZXh0ZXJuYWwgXCJ0cnVmZmxlLWFydGlmYWN0b3JcIlxuLy8gbW9kdWxlIGlkID0gNDVcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwidHJ1ZmZsZS1taWdyYXRlXCIpO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIGV4dGVybmFsIFwidHJ1ZmZsZS1taWdyYXRlXCJcbi8vIG1vZHVsZSBpZCA9IDQ2XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcInRydWZmbGUtYm94XCIpO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIGV4dGVybmFsIFwidHJ1ZmZsZS1ib3hcIlxuLy8gbW9kdWxlIGlkID0gNDdcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwidHJ1ZmZsZS1yZXNvbHZlclwiKTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyBleHRlcm5hbCBcInRydWZmbGUtcmVzb2x2ZXJcIlxuLy8gbW9kdWxlIGlkID0gNDhcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5cbnZhciBfdmFsdWVzID0gcmVxdWlyZShcImJhYmVsLXJ1bnRpbWUvY29yZS1qcy9vYmplY3QvdmFsdWVzXCIpO1xuXG52YXIgX3ZhbHVlczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF92YWx1ZXMpO1xuXG52YXIgX3Byb21pc2UgPSByZXF1aXJlKFwiYmFiZWwtcnVudGltZS9jb3JlLWpzL3Byb21pc2VcIik7XG5cbnZhciBfcHJvbWlzZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9wcm9taXNlKTtcblxudmFyIF9kZWJ1ZyA9IHJlcXVpcmUoXCJkZWJ1Z1wiKTtcblxudmFyIF9kZWJ1ZzIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9kZWJ1Zyk7XG5cbnZhciBfc2VsZWN0b3JzID0gcmVxdWlyZShcImxpYi90cmFjZS9zZWxlY3RvcnNcIik7XG5cbnZhciBfc2VsZWN0b3JzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3NlbGVjdG9ycyk7XG5cbnZhciBfc2VsZWN0b3JzMyA9IHJlcXVpcmUoXCJsaWIvZXZtL3NlbGVjdG9yc1wiKTtcblxudmFyIF9zZWxlY3RvcnM0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfc2VsZWN0b3JzMyk7XG5cbnZhciBfc2VsZWN0b3JzNSA9IHJlcXVpcmUoXCJsaWIvYXN0L3NlbGVjdG9yc1wiKTtcblxudmFyIF9zZWxlY3RvcnM2ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfc2VsZWN0b3JzNSk7XG5cbnZhciBfc2VsZWN0b3JzNyA9IHJlcXVpcmUoXCJsaWIvc29saWRpdHkvc2VsZWN0b3JzXCIpO1xuXG52YXIgX3NlbGVjdG9yczggPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9zZWxlY3RvcnM3KTtcblxudmFyIF9zdG9yZSA9IHJlcXVpcmUoXCJsaWIvc3RvcmVcIik7XG5cbnZhciBfc3RvcmUyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfc3RvcmUpO1xuXG52YXIgX2FjdGlvbnMgPSByZXF1aXJlKFwibGliL2NvbnRyb2xsZXIvYWN0aW9uc1wiKTtcblxudmFyIGNvbnRyb2xsZXIgPSBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChfYWN0aW9ucyk7XG5cbnZhciBfYWN0aW9uczIgPSByZXF1aXJlKFwiLi9hY3Rpb25zXCIpO1xuXG52YXIgYWN0aW9ucyA9IF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKF9hY3Rpb25zMik7XG5cbnZhciBfc2FnYXMgPSByZXF1aXJlKFwiLi9zYWdhc1wiKTtcblxudmFyIF9zYWdhczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9zYWdhcyk7XG5cbnZhciBfcmVkdWNlcnMgPSByZXF1aXJlKFwiLi9yZWR1Y2Vyc1wiKTtcblxudmFyIF9yZWR1Y2VyczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWR1Y2Vycyk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKG9iaikgeyBpZiAob2JqICYmIG9iai5fX2VzTW9kdWxlKSB7IHJldHVybiBvYmo7IH0gZWxzZSB7IHZhciBuZXdPYmogPSB7fTsgaWYgKG9iaiAhPSBudWxsKSB7IGZvciAodmFyIGtleSBpbiBvYmopIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGtleSkpIG5ld09ialtrZXldID0gb2JqW2tleV07IH0gfSBuZXdPYmouZGVmYXVsdCA9IG9iajsgcmV0dXJuIG5ld09iajsgfSB9XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmNvbnN0IGRlYnVnID0gKDAsIF9kZWJ1ZzIuZGVmYXVsdCkoXCJkZWJ1Z2dlcjpzZXNzaW9uXCIpO1xuXG4vKipcbiAqIERlYnVnZ2VyIFNlc3Npb25cbiAqL1xuY2xhc3MgU2Vzc2lvbiB7XG4gIC8qKlxuICAgKiBAcGFyYW0ge0FycmF5PENvbnRyYWN0Pn0gY29udHJhY3RzIC0gY29udHJhY3QgZGVmaW5pdGlvbnNcbiAgICogQHBhcmFtIHtBcnJheTxTdHJpbmc+fSBmaWxlcyAtIGFycmF5IG9mIGZpbGVuYW1lcyBmb3Igc291cmNlTWFwIGluZGV4ZXNcbiAgICogQHBhcmFtIHtzdHJpbmd9IHR4SGFzaCAtIHRyYW5zYWN0aW9uIGhhc2hcbiAgICogQHBhcmFtIHtXZWIzUHJvdmlkZXJ9IHByb3ZpZGVyIC0gd2ViMyBwcm92aWRlclxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgY29uc3RydWN0b3IoY29udHJhY3RzLCBmaWxlcywgdHhIYXNoLCBwcm92aWRlcikge1xuICAgIC8qKlxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgdGhpcy5fc3RvcmUgPSAoMCwgX3N0b3JlMi5kZWZhdWx0KShfcmVkdWNlcnMyLmRlZmF1bHQsIF9zYWdhczIuZGVmYXVsdCk7XG5cbiAgICBsZXQgeyBjb250ZXh0cywgc291cmNlcyB9ID0gU2Vzc2lvbi5ub3JtYWxpemUoY29udHJhY3RzLCBmaWxlcyk7XG5cbiAgICAvLyByZWNvcmQgY29udHJhY3RzXG4gICAgdGhpcy5fc3RvcmUuZGlzcGF0Y2goYWN0aW9ucy5yZWNvcmRDb250cmFjdHMoY29udGV4dHMsIHNvdXJjZXMpKTtcblxuICAgIHRoaXMuX3N0b3JlLmRpc3BhdGNoKGFjdGlvbnMuc3RhcnQodHhIYXNoLCBwcm92aWRlcikpO1xuICB9XG5cbiAgcmVhZHkoKSB7XG4gICAgcmV0dXJuIG5ldyBfcHJvbWlzZTIuZGVmYXVsdCgoYWNjZXB0LCByZWplY3QpID0+IHtcbiAgICAgIHRoaXMuX3N0b3JlLnN1YnNjcmliZSgoKSA9PiB7XG4gICAgICAgIGlmICh0aGlzLnN0YXRlLnNlc3Npb24gPT0gXCJBQ1RJVkVcIikge1xuICAgICAgICAgIGFjY2VwdCgpO1xuICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiB0aGlzLnN0YXRlLnNlc3Npb24gPT0gXCJvYmplY3RcIikge1xuICAgICAgICAgIHJlamVjdCh0aGlzLnN0YXRlLnNlc3Npb24uZXJyb3IpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTcGxpdCB1cCBhcnRpZmFjdHMgaW50byBcImNvbnRleHRzXCIgYW5kIFwic291cmNlc1wiLCBkaXZpZGluZyBhcnRpZmFjdFxuICAgKiBkYXRhIGludG8gYXBwcm9wcmlhdGUgYnVja2V0cy5cbiAgICpcbiAgICogTXVsdGlwbGUgY29udHJhY3RzIGNhbiBiZSBkZWZpbmVkIGluIHRoZSBzYW1lIHNvdXJjZSBmaWxlLCBidXQgaGF2ZVxuICAgKiBkaWZmZXJlbnQgYnl0ZWNvZGVzLlxuICAgKlxuICAgKiBUaGlzIGl0ZXJhdGVzIG92ZXIgdGhlIGNvbnRyYWN0cyBhbmQgY29sbGVjdHMgYmluYXJpZXMgc2VwYXJhdGVseVxuICAgKiBmcm9tIHNvdXJjZXMsIHVzaW5nIHRoZSBvcHRpb25hbCBgZmlsZXNgIGFyZ3VtZW50IHRvIGZvcmNlXG4gICAqIHNvdXJjZSBvcmRlcmluZy5cbiAgICogQHByaXZhdGVcbiAgICovXG4gIHN0YXRpYyBub3JtYWxpemUoY29udHJhY3RzLCBmaWxlcyA9IG51bGwpIHtcbiAgICBsZXQgc291cmNlc0J5UGF0aCA9IHt9O1xuICAgIGxldCBjb250ZXh0cyA9IFtdO1xuICAgIGxldCBzb3VyY2VzO1xuXG4gICAgZm9yIChsZXQgY29udHJhY3Qgb2YgY29udHJhY3RzKSB7XG4gICAgICBsZXQge1xuICAgICAgICBjb250cmFjdE5hbWUsXG4gICAgICAgIGJpbmFyeSxcbiAgICAgICAgc291cmNlTWFwLFxuICAgICAgICBkZXBsb3llZEJpbmFyeSxcbiAgICAgICAgZGVwbG95ZWRTb3VyY2VNYXAsXG4gICAgICAgIHNvdXJjZVBhdGgsXG4gICAgICAgIHNvdXJjZSxcbiAgICAgICAgYXN0XG4gICAgICB9ID0gY29udHJhY3Q7XG5cbiAgICAgIHNvdXJjZXNCeVBhdGhbc291cmNlUGF0aF0gPSB7IHNvdXJjZVBhdGgsIHNvdXJjZSwgYXN0IH07XG5cbiAgICAgIGlmIChiaW5hcnkgJiYgYmluYXJ5ICE9IFwiMHhcIikge1xuICAgICAgICBjb250ZXh0cy5wdXNoKHtcbiAgICAgICAgICBjb250cmFjdE5hbWUsXG4gICAgICAgICAgYmluYXJ5LFxuICAgICAgICAgIHNvdXJjZU1hcFxuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgaWYgKGRlcGxveWVkQmluYXJ5ICYmIGRlcGxveWVkQmluYXJ5ICE9IFwiMHhcIikge1xuICAgICAgICBjb250ZXh0cy5wdXNoKHtcbiAgICAgICAgICBjb250cmFjdE5hbWUsXG4gICAgICAgICAgYmluYXJ5OiBkZXBsb3llZEJpbmFyeSxcbiAgICAgICAgICBzb3VyY2VNYXA6IGRlcGxveWVkU291cmNlTWFwXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmICghZmlsZXMpIHtcbiAgICAgIHNvdXJjZXMgPSAoMCwgX3ZhbHVlczIuZGVmYXVsdCkoc291cmNlc0J5UGF0aCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHNvdXJjZXMgPSBmaWxlcy5tYXAoZmlsZSA9PiBzb3VyY2VzQnlQYXRoW2ZpbGVdKTtcbiAgICB9XG5cbiAgICByZXR1cm4geyBjb250ZXh0cywgc291cmNlcyB9O1xuICB9XG5cbiAgZ2V0IHN0YXRlKCkge1xuICAgIHJldHVybiB0aGlzLl9zdG9yZS5nZXRTdGF0ZSgpO1xuICB9XG5cbiAgdmlldyhzZWxlY3Rvcikge1xuICAgIHJldHVybiBzZWxlY3Rvcih0aGlzLnN0YXRlKTtcbiAgfVxuXG4gIGdldCBmaW5pc2hlZCgpIHtcbiAgICByZXR1cm4gdGhpcy5zdGF0ZS5zZXNzaW9uID09IFwiRklOSVNIRURcIjtcbiAgfVxuXG4gIGdldCBmYWlsZWQoKSB7XG4gICAgcmV0dXJuIHRoaXMuZmluaXNoZWQgJiYgdGhpcy52aWV3KF9zZWxlY3RvcnM0LmRlZmF1bHQuY3VycmVudC5jYWxsc3RhY2spLmxlbmd0aDtcbiAgfVxuXG4gIGRpc3BhdGNoKGFjdGlvbikge1xuICAgIGlmICh0aGlzLmZpbmlzaGVkKSB7XG4gICAgICBkZWJ1ZyhcImZpbmlzaGVkOiBpbnRlcmNlcHRpbmcgYWN0aW9uICVvXCIsIGFjdGlvbik7XG5cbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICB0aGlzLl9zdG9yZS5kaXNwYXRjaChhY3Rpb24pO1xuXG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICBpbnRlcnJ1cHQoKSB7XG4gICAgcmV0dXJuIHRoaXMuZGlzcGF0Y2goY29udHJvbGxlci5pbnRlcnJ1cHQoKSk7XG4gIH1cblxuICBhZHZhbmNlKCkge1xuICAgIHJldHVybiB0aGlzLmRpc3BhdGNoKGNvbnRyb2xsZXIuYWR2YW5jZSgpKTtcbiAgfVxuXG4gIHN0ZXBOZXh0KCkge1xuICAgIHJldHVybiB0aGlzLmRpc3BhdGNoKGNvbnRyb2xsZXIuc3RlcE5leHQoKSk7XG4gIH1cblxuICBzdGVwT3ZlcigpIHtcbiAgICByZXR1cm4gdGhpcy5kaXNwYXRjaChjb250cm9sbGVyLnN0ZXBPdmVyKCkpO1xuICB9XG5cbiAgc3RlcEludG8oKSB7XG4gICAgcmV0dXJuIHRoaXMuZGlzcGF0Y2goY29udHJvbGxlci5zdGVwSW50bygpKTtcbiAgfVxuXG4gIHN0ZXBPdXQoKSB7XG4gICAgcmV0dXJuIHRoaXMuZGlzcGF0Y2goY29udHJvbGxlci5zdGVwT3V0KCkpO1xuICB9XG5cbiAgY29udGludWVVbnRpbCguLi5icmVha3BvaW50cykge1xuICAgIHJldHVybiB0aGlzLmRpc3BhdGNoKGNvbnRyb2xsZXIuY29udGludWVVbnRpbCguLi5icmVha3BvaW50cykpO1xuICB9XG59XG5leHBvcnRzLmRlZmF1bHQgPSBTZXNzaW9uO1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL2xpYi9zZXNzaW9uL2luZGV4LmpzIiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiZmFzdC1sZXZlbnNodGVpblwiKTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyBleHRlcm5hbCBcImZhc3QtbGV2ZW5zaHRlaW5cIlxuLy8gbW9kdWxlIGlkID0gNTBcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwidHJ1ZmZsZS1zb2xpZGl0eS11dGlsc1wiKTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyBleHRlcm5hbCBcInRydWZmbGUtc29saWRpdHktdXRpbHNcIlxuLy8gbW9kdWxlIGlkID0gNTFcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwidHJ1ZmZsZS1jb2RlLXV0aWxzXCIpO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIGV4dGVybmFsIFwidHJ1ZmZsZS1jb2RlLXV0aWxzXCJcbi8vIG1vZHVsZSBpZCA9IDUyXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIlwidXNlIHN0cmljdFwiO1xyXG4vLyBBbiBhdWdtZW50ZWQgQVZMIFRyZWUgd2hlcmUgZWFjaCBub2RlIG1haW50YWlucyBhIGxpc3Qgb2YgcmVjb3JkcyBhbmQgdGhlaXIgc2VhcmNoIGludGVydmFscy5cclxuLy8gUmVjb3JkIGlzIGNvbXBvc2VkIG9mIGFuIGludGVydmFsIGFuZCBpdHMgdW5kZXJseWluZyBkYXRhLCBzZW50IGJ5IGEgY2xpZW50LiBUaGlzIGFsbG93cyB0aGVcclxuLy8gaW50ZXJ2YWwgdHJlZSB0byBoYXZlIHRoZSBzYW1lIGludGVydmFsIGluc2VydGVkIG11bHRpcGxlIHRpbWVzLCBhcyBsb25nIGl0cyBkYXRhIGlzIGRpZmZlcmVudC5cclxuLy8gQm90aCBpbnNlcnRpb24gYW5kIGRlbGV0aW9uIHJlcXVpcmUgTyhsb2cgbikgdGltZS4gU2VhcmNoaW5nIHJlcXVpcmVzIE8oaypsb2duKSB0aW1lLCB3aGVyZSBga2BcclxuLy8gaXMgdGhlIG51bWJlciBvZiBpbnRlcnZhbHMgaW4gdGhlIG91dHB1dCBsaXN0LlxyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbnZhciBpc1NhbWUgPSByZXF1aXJlKFwic2hhbGxvd2VxdWFsXCIpO1xyXG5mdW5jdGlvbiBoZWlnaHQobm9kZSkge1xyXG4gICAgaWYgKG5vZGUgPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgIHJldHVybiAtMTtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICAgIHJldHVybiBub2RlLmhlaWdodDtcclxuICAgIH1cclxufVxyXG52YXIgTm9kZSA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIE5vZGUoaW50ZXJ2YWxUcmVlLCByZWNvcmQpIHtcclxuICAgICAgICB0aGlzLmludGVydmFsVHJlZSA9IGludGVydmFsVHJlZTtcclxuICAgICAgICB0aGlzLnJlY29yZHMgPSBbXTtcclxuICAgICAgICB0aGlzLmhlaWdodCA9IDA7XHJcbiAgICAgICAgdGhpcy5rZXkgPSByZWNvcmQubG93O1xyXG4gICAgICAgIHRoaXMubWF4ID0gcmVjb3JkLmhpZ2g7XHJcbiAgICAgICAgLy8gU2F2ZSB0aGUgYXJyYXkgb2YgYWxsIHJlY29yZHMgd2l0aCB0aGUgc2FtZSBrZXkgZm9yIHRoaXMgbm9kZVxyXG4gICAgICAgIHRoaXMucmVjb3Jkcy5wdXNoKHJlY29yZCk7XHJcbiAgICB9XHJcbiAgICAvLyBHZXRzIHRoZSBoaWdoZXN0IHJlY29yZC5oaWdoIHZhbHVlIGZvciB0aGlzIG5vZGVcclxuICAgIE5vZGUucHJvdG90eXBlLmdldE5vZGVIaWdoID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBoaWdoID0gdGhpcy5yZWNvcmRzWzBdLmhpZ2g7XHJcbiAgICAgICAgZm9yICh2YXIgaSA9IDE7IGkgPCB0aGlzLnJlY29yZHMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMucmVjb3Jkc1tpXS5oaWdoID4gaGlnaCkge1xyXG4gICAgICAgICAgICAgICAgaGlnaCA9IHRoaXMucmVjb3Jkc1tpXS5oaWdoO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBoaWdoO1xyXG4gICAgfTtcclxuICAgIC8vIFVwZGF0ZXMgaGVpZ2h0IHZhbHVlIG9mIHRoZSBub2RlLiBDYWxsZWQgZHVyaW5nIGluc2VydGlvbiwgcmViYWxhbmNlLCByZW1vdmFsXHJcbiAgICBOb2RlLnByb3RvdHlwZS51cGRhdGVIZWlnaHQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdGhpcy5oZWlnaHQgPSBNYXRoLm1heChoZWlnaHQodGhpcy5sZWZ0KSwgaGVpZ2h0KHRoaXMucmlnaHQpKSArIDE7XHJcbiAgICB9O1xyXG4gICAgLy8gVXBkYXRlcyB0aGUgbWF4IHZhbHVlIG9mIGFsbCB0aGUgcGFyZW50cyBhZnRlciBpbnNlcnRpbmcgaW50byBhbHJlYWR5IGV4aXN0aW5nIG5vZGUsIGFzIHdlbGwgYXNcclxuICAgIC8vIHJlbW92aW5nIHRoZSBub2RlIGNvbXBsZXRlbHkgb3IgcmVtb3ZpbmcgdGhlIHJlY29yZCBvZiBhbiBhbHJlYWR5IGV4aXN0aW5nIG5vZGUuIFN0YXJ0cyB3aXRoXHJcbiAgICAvLyB0aGUgcGFyZW50IG9mIGFuIGFmZmVjdGVkIG5vZGUgYW5kIGJ1YmJsZXMgdXAgdG8gcm9vdFxyXG4gICAgTm9kZS5wcm90b3R5cGUudXBkYXRlTWF4T2ZQYXJlbnRzID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIGlmICh0aGlzID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICB2YXIgdGhpc0hpZ2ggPSB0aGlzLmdldE5vZGVIaWdoKCk7XHJcbiAgICAgICAgaWYgKHRoaXMubGVmdCAhPT0gdW5kZWZpbmVkICYmIHRoaXMucmlnaHQgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICB0aGlzLm1heCA9IE1hdGgubWF4KE1hdGgubWF4KHRoaXMubGVmdC5tYXgsIHRoaXMucmlnaHQubWF4KSwgdGhpc0hpZ2gpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmICh0aGlzLmxlZnQgIT09IHVuZGVmaW5lZCAmJiB0aGlzLnJpZ2h0ID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgdGhpcy5tYXggPSBNYXRoLm1heCh0aGlzLmxlZnQubWF4LCB0aGlzSGlnaCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKHRoaXMubGVmdCA9PT0gdW5kZWZpbmVkICYmIHRoaXMucmlnaHQgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICB0aGlzLm1heCA9IE1hdGgubWF4KHRoaXMucmlnaHQubWF4LCB0aGlzSGlnaCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLm1heCA9IHRoaXNIaWdoO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodGhpcy5wYXJlbnQpIHtcclxuICAgICAgICAgICAgdGhpcy5wYXJlbnQudXBkYXRlTWF4T2ZQYXJlbnRzKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIC8qXHJcbiAgICBMZWZ0LUxlZnQgY2FzZTpcclxuICBcclxuICAgICAgICAgICB6ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB5XHJcbiAgICAgICAgICAvIFxcICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvICAgXFxcclxuICAgICAgICAgeSAgIFQ0ICAgICAgUmlnaHQgUm90YXRlICh6KSAgICAgICAgICB4ICAgICB6XHJcbiAgICAgICAgLyBcXCAgICAgICAgICAtIC0gLSAtIC0gLSAtIC0gLT4gICAgICAgLyBcXCAgIC8gXFxcclxuICAgICAgIHggICBUMyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgVDEgVDIgVDMgVDRcclxuICAgICAgLyBcXFxyXG4gICAgVDEgICBUMlxyXG4gIFxyXG4gICAgTGVmdC1SaWdodCBjYXNlOlxyXG4gIFxyXG4gICAgICAgICB6ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHogICAgICAgICAgICAgICAgICAgICAgICAgICB4XHJcbiAgICAgICAgLyBcXCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLyBcXCAgICAgICAgICAgICAgICAgICAgICAgIC8gICBcXFxyXG4gICAgICAgeSAgIFQ0ICBMZWZ0IFJvdGF0ZSAoeSkgICAgICAgICB4ICBUNCAgUmlnaHQgUm90YXRlKHopICAgICB5ICAgICB6XHJcbiAgICAgIC8gXFwgICAgICAtIC0gLSAtIC0gLSAtIC0gLT4gICAgIC8gXFwgICAgICAtIC0gLSAtIC0gLSAtIC0+ICAvIFxcICAgLyBcXFxyXG4gICAgVDEgICB4ICAgICAgICAgICAgICAgICAgICAgICAgICAgeSAgVDMgICAgICAgICAgICAgICAgICAgICAgVDEgVDIgVDMgVDRcclxuICAgICAgICAvIFxcICAgICAgICAgICAgICAgICAgICAgICAgIC8gXFxcclxuICAgICAgVDIgICBUMyAgICAgICAgICAgICAgICAgICAgICBUMSBUMlxyXG4gICAgKi9cclxuICAgIC8vIEhhbmRsZXMgTGVmdC1MZWZ0IGNhc2UgYW5kIExlZnQtUmlnaHQgY2FzZSBhZnRlciByZWJhbGFuY2luZyBBVkwgdHJlZVxyXG4gICAgTm9kZS5wcm90b3R5cGUuX3VwZGF0ZU1heEFmdGVyUmlnaHRSb3RhdGUgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIHBhcmVudCA9IHRoaXMucGFyZW50O1xyXG4gICAgICAgIHZhciBsZWZ0ID0gcGFyZW50LmxlZnQ7XHJcbiAgICAgICAgLy8gVXBkYXRlIG1heCBvZiBsZWZ0IHNpYmxpbmcgKHggaW4gZmlyc3QgY2FzZSwgeSBpbiBzZWNvbmQpXHJcbiAgICAgICAgdmFyIHRoaXNQYXJlbnRMZWZ0SGlnaCA9IGxlZnQuZ2V0Tm9kZUhpZ2goKTtcclxuICAgICAgICBpZiAobGVmdC5sZWZ0ID09PSB1bmRlZmluZWQgJiYgbGVmdC5yaWdodCAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIGxlZnQubWF4ID0gTWF0aC5tYXgodGhpc1BhcmVudExlZnRIaWdoLCBsZWZ0LnJpZ2h0Lm1heCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKGxlZnQubGVmdCAhPT0gdW5kZWZpbmVkICYmIGxlZnQucmlnaHQgPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICBsZWZ0Lm1heCA9IE1hdGgubWF4KHRoaXNQYXJlbnRMZWZ0SGlnaCwgbGVmdC5sZWZ0Lm1heCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKGxlZnQubGVmdCA9PT0gdW5kZWZpbmVkICYmIGxlZnQucmlnaHQgPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICBsZWZ0Lm1heCA9IHRoaXNQYXJlbnRMZWZ0SGlnaDtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIGxlZnQubWF4ID0gTWF0aC5tYXgoTWF0aC5tYXgobGVmdC5sZWZ0Lm1heCwgbGVmdC5yaWdodC5tYXgpLCB0aGlzUGFyZW50TGVmdEhpZ2gpO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBVcGRhdGUgbWF4IG9mIGl0c2VsZiAoeilcclxuICAgICAgICB2YXIgdGhpc0hpZ2ggPSB0aGlzLmdldE5vZGVIaWdoKCk7XHJcbiAgICAgICAgaWYgKHRoaXMubGVmdCA9PT0gdW5kZWZpbmVkICYmIHRoaXMucmlnaHQgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICB0aGlzLm1heCA9IE1hdGgubWF4KHRoaXNIaWdoLCB0aGlzLnJpZ2h0Lm1heCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKHRoaXMubGVmdCAhPT0gdW5kZWZpbmVkICYmIHRoaXMucmlnaHQgPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICB0aGlzLm1heCA9IE1hdGgubWF4KHRoaXNIaWdoLCB0aGlzLmxlZnQubWF4KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAodGhpcy5sZWZ0ID09PSB1bmRlZmluZWQgJiYgdGhpcy5yaWdodCA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIHRoaXMubWF4ID0gdGhpc0hpZ2g7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLm1heCA9IE1hdGgubWF4KE1hdGgubWF4KHRoaXMubGVmdC5tYXgsIHRoaXMucmlnaHQubWF4KSwgdGhpc0hpZ2gpO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBVcGRhdGUgbWF4IG9mIHBhcmVudCAoeSBpbiBmaXJzdCBjYXNlLCB4IGluIHNlY29uZClcclxuICAgICAgICBwYXJlbnQubWF4ID0gTWF0aC5tYXgoTWF0aC5tYXgocGFyZW50LmxlZnQubWF4LCBwYXJlbnQucmlnaHQubWF4KSwgcGFyZW50LmdldE5vZGVIaWdoKCkpO1xyXG4gICAgfTtcclxuICAgIC8qXHJcbiAgICBSaWdodC1SaWdodCBjYXNlOlxyXG4gIFxyXG4gICAgICB6ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHlcclxuICAgICAvIFxcICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8gICBcXFxyXG4gICAgVDEgIHkgICAgIExlZnQgUm90YXRlKHopICAgICAgIHogICAgIHhcclxuICAgICAgIC8gXFwgICAtIC0gLSAtIC0gLSAtIC0+ICAgICAvIFxcICAgLyBcXFxyXG4gICAgICBUMiAgeCAgICAgICAgICAgICAgICAgICAgICBUMSBUMiBUMyBUNFxyXG4gICAgICAgICAvIFxcXHJcbiAgICAgICAgVDMgVDRcclxuICBcclxuICAgIFJpZ2h0LUxlZnQgY2FzZTpcclxuICBcclxuICAgICAgIHogICAgICAgICAgICAgICAgICAgICAgICAgICAgeiAgICAgICAgICAgICAgICAgICAgICAgICAgICB4XHJcbiAgICAgIC8gXFwgICAgICAgICAgICAgICAgICAgICAgICAgIC8gXFwgICAgICAgICAgICAgICAgICAgICAgICAgLyAgIFxcXHJcbiAgICAgVDEgIHkgICBSaWdodCBSb3RhdGUgKHkpICAgICBUMSAgeCAgICAgIExlZnQgUm90YXRlKHopICAgeiAgICAgeVxyXG4gICAgICAgIC8gXFwgIC0gLSAtIC0gLSAtIC0gLSAtPiAgICAgIC8gXFwgICAtIC0gLSAtIC0gLSAtIC0+ICAvIFxcICAgLyBcXFxyXG4gICAgICAgeCAgVDQgICAgICAgICAgICAgICAgICAgICAgICBUMiAgeSAgICAgICAgICAgICAgICAgICBUMSBUMiBUMyBUNFxyXG4gICAgICAvIFxcICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLyBcXFxyXG4gICAgVDIgICBUMyAgICAgICAgICAgICAgICAgICAgICAgICAgIFQzIFQ0XHJcbiAgICAqL1xyXG4gICAgLy8gSGFuZGxlcyBSaWdodC1SaWdodCBjYXNlIGFuZCBSaWdodC1MZWZ0IGNhc2UgaW4gcmViYWxhbmNpbmcgQVZMIHRyZWVcclxuICAgIE5vZGUucHJvdG90eXBlLl91cGRhdGVNYXhBZnRlckxlZnRSb3RhdGUgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIHBhcmVudCA9IHRoaXMucGFyZW50O1xyXG4gICAgICAgIHZhciByaWdodCA9IHBhcmVudC5yaWdodDtcclxuICAgICAgICAvLyBVcGRhdGUgbWF4IG9mIHJpZ2h0IHNpYmxpbmcgKHggaW4gZmlyc3QgY2FzZSwgeSBpbiBzZWNvbmQpXHJcbiAgICAgICAgdmFyIHRoaXNQYXJlbnRSaWdodEhpZ2ggPSByaWdodC5nZXROb2RlSGlnaCgpO1xyXG4gICAgICAgIGlmIChyaWdodC5sZWZ0ID09PSB1bmRlZmluZWQgJiYgcmlnaHQucmlnaHQgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICByaWdodC5tYXggPSBNYXRoLm1heCh0aGlzUGFyZW50UmlnaHRIaWdoLCByaWdodC5yaWdodC5tYXgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmIChyaWdodC5sZWZ0ICE9PSB1bmRlZmluZWQgJiYgcmlnaHQucmlnaHQgPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICByaWdodC5tYXggPSBNYXRoLm1heCh0aGlzUGFyZW50UmlnaHRIaWdoLCByaWdodC5sZWZ0Lm1heCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKHJpZ2h0LmxlZnQgPT09IHVuZGVmaW5lZCAmJiByaWdodC5yaWdodCA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIHJpZ2h0Lm1heCA9IHRoaXNQYXJlbnRSaWdodEhpZ2g7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICByaWdodC5tYXggPSBNYXRoLm1heChNYXRoLm1heChyaWdodC5sZWZ0Lm1heCwgcmlnaHQucmlnaHQubWF4KSwgdGhpc1BhcmVudFJpZ2h0SGlnaCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIFVwZGF0ZSBtYXggb2YgaXRzZWxmICh6KVxyXG4gICAgICAgIHZhciB0aGlzSGlnaCA9IHRoaXMuZ2V0Tm9kZUhpZ2goKTtcclxuICAgICAgICBpZiAodGhpcy5sZWZ0ID09PSB1bmRlZmluZWQgJiYgdGhpcy5yaWdodCAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIHRoaXMubWF4ID0gTWF0aC5tYXgodGhpc0hpZ2gsIHRoaXMucmlnaHQubWF4KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAodGhpcy5sZWZ0ICE9PSB1bmRlZmluZWQgJiYgdGhpcy5yaWdodCA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIHRoaXMubWF4ID0gTWF0aC5tYXgodGhpc0hpZ2gsIHRoaXMubGVmdC5tYXgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmICh0aGlzLmxlZnQgPT09IHVuZGVmaW5lZCAmJiB0aGlzLnJpZ2h0ID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgdGhpcy5tYXggPSB0aGlzSGlnaDtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMubWF4ID0gTWF0aC5tYXgoTWF0aC5tYXgodGhpcy5sZWZ0Lm1heCwgdGhpcy5yaWdodC5tYXgpLCB0aGlzSGlnaCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIFVwZGF0ZSBtYXggb2YgcGFyZW50ICh5IGluIGZpcnN0IGNhc2UsIHggaW4gc2Vjb25kKVxyXG4gICAgICAgIHBhcmVudC5tYXggPSBNYXRoLm1heChNYXRoLm1heChwYXJlbnQubGVmdC5tYXgsIHJpZ2h0Lm1heCksIHBhcmVudC5nZXROb2RlSGlnaCgpKTtcclxuICAgIH07XHJcbiAgICBOb2RlLnByb3RvdHlwZS5fbGVmdFJvdGF0ZSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgcmlnaHRDaGlsZCA9IHRoaXMucmlnaHQ7XHJcbiAgICAgICAgcmlnaHRDaGlsZC5wYXJlbnQgPSB0aGlzLnBhcmVudDtcclxuICAgICAgICBpZiAocmlnaHRDaGlsZC5wYXJlbnQgPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICB0aGlzLmludGVydmFsVHJlZS5yb290ID0gcmlnaHRDaGlsZDtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIGlmIChyaWdodENoaWxkLnBhcmVudC5sZWZ0ID09PSB0aGlzKSB7XHJcbiAgICAgICAgICAgICAgICByaWdodENoaWxkLnBhcmVudC5sZWZ0ID0gcmlnaHRDaGlsZDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmIChyaWdodENoaWxkLnBhcmVudC5yaWdodCA9PT0gdGhpcykge1xyXG4gICAgICAgICAgICAgICAgcmlnaHRDaGlsZC5wYXJlbnQucmlnaHQgPSByaWdodENoaWxkO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMucmlnaHQgPSByaWdodENoaWxkLmxlZnQ7XHJcbiAgICAgICAgaWYgKHRoaXMucmlnaHQgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICB0aGlzLnJpZ2h0LnBhcmVudCA9IHRoaXM7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJpZ2h0Q2hpbGQubGVmdCA9IHRoaXM7XHJcbiAgICAgICAgdGhpcy5wYXJlbnQgPSByaWdodENoaWxkO1xyXG4gICAgICAgIHRoaXMudXBkYXRlSGVpZ2h0KCk7XHJcbiAgICAgICAgcmlnaHRDaGlsZC51cGRhdGVIZWlnaHQoKTtcclxuICAgIH07XHJcbiAgICBOb2RlLnByb3RvdHlwZS5fcmlnaHRSb3RhdGUgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIGxlZnRDaGlsZCA9IHRoaXMubGVmdDtcclxuICAgICAgICBsZWZ0Q2hpbGQucGFyZW50ID0gdGhpcy5wYXJlbnQ7XHJcbiAgICAgICAgaWYgKGxlZnRDaGlsZC5wYXJlbnQgPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICB0aGlzLmludGVydmFsVHJlZS5yb290ID0gbGVmdENoaWxkO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgaWYgKGxlZnRDaGlsZC5wYXJlbnQubGVmdCA9PT0gdGhpcykge1xyXG4gICAgICAgICAgICAgICAgbGVmdENoaWxkLnBhcmVudC5sZWZ0ID0gbGVmdENoaWxkO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKGxlZnRDaGlsZC5wYXJlbnQucmlnaHQgPT09IHRoaXMpIHtcclxuICAgICAgICAgICAgICAgIGxlZnRDaGlsZC5wYXJlbnQucmlnaHQgPSBsZWZ0Q2hpbGQ7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5sZWZ0ID0gbGVmdENoaWxkLnJpZ2h0O1xyXG4gICAgICAgIGlmICh0aGlzLmxlZnQgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICB0aGlzLmxlZnQucGFyZW50ID0gdGhpcztcclxuICAgICAgICB9XHJcbiAgICAgICAgbGVmdENoaWxkLnJpZ2h0ID0gdGhpcztcclxuICAgICAgICB0aGlzLnBhcmVudCA9IGxlZnRDaGlsZDtcclxuICAgICAgICB0aGlzLnVwZGF0ZUhlaWdodCgpO1xyXG4gICAgICAgIGxlZnRDaGlsZC51cGRhdGVIZWlnaHQoKTtcclxuICAgIH07XHJcbiAgICAvLyBSZWJhbGFuY2VzIHRoZSB0cmVlIGlmIHRoZSBoZWlnaHQgdmFsdWUgYmV0d2VlbiB0d28gbm9kZXMgb2YgdGhlIHNhbWUgcGFyZW50IGlzIGdyZWF0ZXIgdGhhblxyXG4gICAgLy8gdHdvLiBUaGVyZSBhcmUgNCBjYXNlcyB0aGF0IGNhbiBoYXBwZW4gd2hpY2ggYXJlIG91dGxpbmVkIGluIHRoZSBncmFwaGljcyBhYm92ZVxyXG4gICAgTm9kZS5wcm90b3R5cGUuX3JlYmFsYW5jZSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBpZiAoaGVpZ2h0KHRoaXMubGVmdCkgPj0gMiArIGhlaWdodCh0aGlzLnJpZ2h0KSkge1xyXG4gICAgICAgICAgICB2YXIgbGVmdCA9IHRoaXMubGVmdDtcclxuICAgICAgICAgICAgaWYgKGhlaWdodChsZWZ0LmxlZnQpID49IGhlaWdodChsZWZ0LnJpZ2h0KSkge1xyXG4gICAgICAgICAgICAgICAgLy8gTGVmdC1MZWZ0IGNhc2VcclxuICAgICAgICAgICAgICAgIHRoaXMuX3JpZ2h0Um90YXRlKCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl91cGRhdGVNYXhBZnRlclJpZ2h0Um90YXRlKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAvLyBMZWZ0LVJpZ2h0IGNhc2VcclxuICAgICAgICAgICAgICAgIGxlZnQuX2xlZnRSb3RhdGUoKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuX3JpZ2h0Um90YXRlKCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl91cGRhdGVNYXhBZnRlclJpZ2h0Um90YXRlKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAoaGVpZ2h0KHRoaXMucmlnaHQpID49IDIgKyBoZWlnaHQodGhpcy5sZWZ0KSkge1xyXG4gICAgICAgICAgICB2YXIgcmlnaHQgPSB0aGlzLnJpZ2h0O1xyXG4gICAgICAgICAgICBpZiAoaGVpZ2h0KHJpZ2h0LnJpZ2h0KSA+PSBoZWlnaHQocmlnaHQubGVmdCkpIHtcclxuICAgICAgICAgICAgICAgIC8vIFJpZ2h0LVJpZ2h0IGNhc2VcclxuICAgICAgICAgICAgICAgIHRoaXMuX2xlZnRSb3RhdGUoKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuX3VwZGF0ZU1heEFmdGVyTGVmdFJvdGF0ZSgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgLy8gUmlnaHQtTGVmdCBjYXNlXHJcbiAgICAgICAgICAgICAgICByaWdodC5fcmlnaHRSb3RhdGUoKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2xlZnRSb3RhdGUoKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuX3VwZGF0ZU1heEFmdGVyTGVmdFJvdGF0ZSgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIE5vZGUucHJvdG90eXBlLmluc2VydCA9IGZ1bmN0aW9uIChyZWNvcmQpIHtcclxuICAgICAgICBpZiAocmVjb3JkLmxvdyA8IHRoaXMua2V5KSB7XHJcbiAgICAgICAgICAgIC8vIEluc2VydCBpbnRvIGxlZnQgc3VidHJlZVxyXG4gICAgICAgICAgICBpZiAodGhpcy5sZWZ0ID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMubGVmdCA9IG5ldyBOb2RlKHRoaXMuaW50ZXJ2YWxUcmVlLCByZWNvcmQpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5sZWZ0LnBhcmVudCA9IHRoaXM7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmxlZnQuaW5zZXJ0KHJlY29yZCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIC8vIEluc2VydCBpbnRvIHJpZ2h0IHN1YnRyZWVcclxuICAgICAgICAgICAgaWYgKHRoaXMucmlnaHQgPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5yaWdodCA9IG5ldyBOb2RlKHRoaXMuaW50ZXJ2YWxUcmVlLCByZWNvcmQpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5yaWdodC5wYXJlbnQgPSB0aGlzO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5yaWdodC5pbnNlcnQocmVjb3JkKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBVcGRhdGUgdGhlIG1heCB2YWx1ZSBvZiB0aGlzIGFuY2VzdG9yIGlmIG5lZWRlZFxyXG4gICAgICAgIGlmICh0aGlzLm1heCA8IHJlY29yZC5oaWdoKSB7XHJcbiAgICAgICAgICAgIHRoaXMubWF4ID0gcmVjb3JkLmhpZ2g7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIFVwZGF0ZSBoZWlnaHQgb2YgZWFjaCBub2RlXHJcbiAgICAgICAgdGhpcy51cGRhdGVIZWlnaHQoKTtcclxuICAgICAgICAvLyBSZWJhbGFuY2UgdGhlIHRyZWUgdG8gZW5zdXJlIGFsbCBvcGVyYXRpb25zIGFyZSBleGVjdXRlZCBpbiBPKGxvZ24pIHRpbWUuIFRoaXMgaXMgZXNwZWNpYWxseVxyXG4gICAgICAgIC8vIGltcG9ydGFudCBpbiBzZWFyY2hpbmcsIGFzIHRoZSB0cmVlIGhhcyBhIGhpZ2ggY2hhbmNlIG9mIGRlZ2VuZXJhdGluZyB3aXRob3V0IHRoZSByZWJhbGFuY2luZ1xyXG4gICAgICAgIHRoaXMuX3JlYmFsYW5jZSgpO1xyXG4gICAgfTtcclxuICAgIE5vZGUucHJvdG90eXBlLl9nZXRPdmVybGFwcGluZ1JlY29yZHMgPSBmdW5jdGlvbiAoY3VycmVudE5vZGUsIGxvdywgaGlnaCkge1xyXG4gICAgICAgIGlmIChjdXJyZW50Tm9kZS5rZXkgPD0gaGlnaCAmJiBsb3cgPD0gY3VycmVudE5vZGUuZ2V0Tm9kZUhpZ2goKSkge1xyXG4gICAgICAgICAgICAvLyBOb2RlcyBhcmUgb3ZlcmxhcHBpbmcsIGNoZWNrIGlmIGluZGl2aWR1YWwgcmVjb3JkcyBpbiB0aGUgbm9kZSBhcmUgb3ZlcmxhcHBpbmdcclxuICAgICAgICAgICAgdmFyIHRlbXBSZXN1bHRzID0gW107XHJcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY3VycmVudE5vZGUucmVjb3Jkcy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgaWYgKGN1cnJlbnROb2RlLnJlY29yZHNbaV0uaGlnaCA+PSBsb3cpIHtcclxuICAgICAgICAgICAgICAgICAgICB0ZW1wUmVzdWx0cy5wdXNoKGN1cnJlbnROb2RlLnJlY29yZHNbaV0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiB0ZW1wUmVzdWx0cztcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIFtdO1xyXG4gICAgfTtcclxuICAgIE5vZGUucHJvdG90eXBlLnNlYXJjaCA9IGZ1bmN0aW9uIChsb3csIGhpZ2gpIHtcclxuICAgICAgICAvLyBEb24ndCBzZWFyY2ggbm9kZXMgdGhhdCBkb24ndCBleGlzdFxyXG4gICAgICAgIGlmICh0aGlzID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgcmV0dXJuIFtdO1xyXG4gICAgICAgIH1cclxuICAgICAgICB2YXIgbGVmdFNlYXJjaCA9IFtdO1xyXG4gICAgICAgIHZhciBvd25TZWFyY2ggPSBbXTtcclxuICAgICAgICB2YXIgcmlnaHRTZWFyY2ggPSBbXTtcclxuICAgICAgICAvLyBJZiBpbnRlcnZhbCBpcyB0byB0aGUgcmlnaHQgb2YgdGhlIHJpZ2h0bW9zdCBwb2ludCBvZiBhbnkgaW50ZXJ2YWwgaW4gdGhpcyBub2RlIGFuZCBhbGwgaXRzXHJcbiAgICAgICAgLy8gY2hpbGRyZW4sIHRoZXJlIHdvbid0IGJlIGFueSBtYXRjaGVzXHJcbiAgICAgICAgaWYgKGxvdyA+IHRoaXMubWF4KSB7XHJcbiAgICAgICAgICAgIHJldHVybiBbXTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gU2VhcmNoIGxlZnQgY2hpbGRyZW5cclxuICAgICAgICBpZiAodGhpcy5sZWZ0ICE9PSB1bmRlZmluZWQgJiYgdGhpcy5sZWZ0Lm1heCA+PSBsb3cpIHtcclxuICAgICAgICAgICAgbGVmdFNlYXJjaCA9IHRoaXMubGVmdC5zZWFyY2gobG93LCBoaWdoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gQ2hlY2sgdGhpcyBub2RlXHJcbiAgICAgICAgb3duU2VhcmNoID0gdGhpcy5fZ2V0T3ZlcmxhcHBpbmdSZWNvcmRzKHRoaXMsIGxvdywgaGlnaCk7XHJcbiAgICAgICAgLy8gSWYgaW50ZXJ2YWwgaXMgdG8gdGhlIGxlZnQgb2YgdGhlIHN0YXJ0IG9mIHRoaXMgaW50ZXJ2YWwsIHRoZW4gaXQgY2FuJ3QgYmUgaW4gYW55IGNoaWxkIHRvXHJcbiAgICAgICAgLy8gdGhlIHJpZ2h0XHJcbiAgICAgICAgaWYgKGhpZ2ggPCB0aGlzLmtleSkge1xyXG4gICAgICAgICAgICByZXR1cm4gbGVmdFNlYXJjaC5jb25jYXQob3duU2VhcmNoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gT3RoZXJ3aXNlLCBzZWFyY2ggcmlnaHQgY2hpbGRyZW5cclxuICAgICAgICBpZiAodGhpcy5yaWdodCAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIHJpZ2h0U2VhcmNoID0gdGhpcy5yaWdodC5zZWFyY2gobG93LCBoaWdoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gUmV0dXJuIGFjY3VtdWxhdGVkIHJlc3VsdHMsIGlmIGFueVxyXG4gICAgICAgIHJldHVybiBsZWZ0U2VhcmNoLmNvbmNhdChvd25TZWFyY2gsIHJpZ2h0U2VhcmNoKTtcclxuICAgIH07XHJcbiAgICAvLyBTZWFyY2hlcyBmb3IgYSBub2RlIGJ5IGEgYGtleWAgdmFsdWVcclxuICAgIE5vZGUucHJvdG90eXBlLnNlYXJjaEV4aXN0aW5nID0gZnVuY3Rpb24gKGxvdykge1xyXG4gICAgICAgIGlmICh0aGlzID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHRoaXMua2V5ID09PSBsb3cpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKGxvdyA8IHRoaXMua2V5KSB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLmxlZnQgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMubGVmdC5zZWFyY2hFeGlzdGluZyhsb3cpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5yaWdodCAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5yaWdodC5zZWFyY2hFeGlzdGluZyhsb3cpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XHJcbiAgICB9O1xyXG4gICAgLy8gUmV0dXJucyB0aGUgc21hbGxlc3Qgbm9kZSBvZiB0aGUgc3VidHJlZVxyXG4gICAgTm9kZS5wcm90b3R5cGUuX21pblZhbHVlID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIGlmICh0aGlzLmxlZnQgPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcztcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmxlZnQuX21pblZhbHVlKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIE5vZGUucHJvdG90eXBlLnJlbW92ZSA9IGZ1bmN0aW9uIChub2RlKSB7XHJcbiAgICAgICAgdmFyIHBhcmVudCA9IHRoaXMucGFyZW50O1xyXG4gICAgICAgIGlmIChub2RlLmtleSA8IHRoaXMua2V5KSB7XHJcbiAgICAgICAgICAgIC8vIE5vZGUgdG8gYmUgcmVtb3ZlZCBpcyBvbiB0aGUgbGVmdCBzaWRlXHJcbiAgICAgICAgICAgIGlmICh0aGlzLmxlZnQgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMubGVmdC5yZW1vdmUobm9kZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKG5vZGUua2V5ID4gdGhpcy5rZXkpIHtcclxuICAgICAgICAgICAgLy8gTm9kZSB0byBiZSByZW1vdmVkIGlzIG9uIHRoZSByaWdodCBzaWRlXHJcbiAgICAgICAgICAgIGlmICh0aGlzLnJpZ2h0ICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnJpZ2h0LnJlbW92ZShub2RlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLmxlZnQgIT09IHVuZGVmaW5lZCAmJiB0aGlzLnJpZ2h0ICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgIC8vIE5vZGUgaGFzIHR3byBjaGlsZHJlblxyXG4gICAgICAgICAgICAgICAgdmFyIG1pblZhbHVlID0gdGhpcy5yaWdodC5fbWluVmFsdWUoKTtcclxuICAgICAgICAgICAgICAgIHRoaXMua2V5ID0gbWluVmFsdWUua2V5O1xyXG4gICAgICAgICAgICAgICAgdGhpcy5yZWNvcmRzID0gbWluVmFsdWUucmVjb3JkcztcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnJpZ2h0LnJlbW92ZSh0aGlzKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmIChwYXJlbnQubGVmdCA9PT0gdGhpcykge1xyXG4gICAgICAgICAgICAgICAgLy8gT25lIGNoaWxkIG9yIG5vIGNoaWxkIGNhc2Ugb24gbGVmdCBzaWRlXHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5yaWdodCAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcGFyZW50LmxlZnQgPSB0aGlzLnJpZ2h0O1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMucmlnaHQucGFyZW50ID0gcGFyZW50O1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcGFyZW50LmxlZnQgPSB0aGlzLmxlZnQ7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMubGVmdCAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubGVmdC5wYXJlbnQgPSBwYXJlbnQ7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcGFyZW50LnVwZGF0ZU1heE9mUGFyZW50cygpO1xyXG4gICAgICAgICAgICAgICAgcGFyZW50LnVwZGF0ZUhlaWdodCgpO1xyXG4gICAgICAgICAgICAgICAgcGFyZW50Ll9yZWJhbGFuY2UoKTtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKHBhcmVudC5yaWdodCA9PT0gdGhpcykge1xyXG4gICAgICAgICAgICAgICAgLy8gT25lIGNoaWxkIG9yIG5vIGNoaWxkIGNhc2Ugb24gcmlnaHQgc2lkZVxyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMucmlnaHQgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHBhcmVudC5yaWdodCA9IHRoaXMucmlnaHQ7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5yaWdodC5wYXJlbnQgPSBwYXJlbnQ7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBwYXJlbnQucmlnaHQgPSB0aGlzLmxlZnQ7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMubGVmdCAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubGVmdC5wYXJlbnQgPSBwYXJlbnQ7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcGFyZW50LnVwZGF0ZU1heE9mUGFyZW50cygpO1xyXG4gICAgICAgICAgICAgICAgcGFyZW50LnVwZGF0ZUhlaWdodCgpO1xyXG4gICAgICAgICAgICAgICAgcGFyZW50Ll9yZWJhbGFuY2UoKTtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIHJldHVybiBOb2RlO1xyXG59KCkpO1xyXG5leHBvcnRzLk5vZGUgPSBOb2RlO1xyXG52YXIgSW50ZXJ2YWxUcmVlID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gSW50ZXJ2YWxUcmVlKCkge1xyXG4gICAgICAgIHRoaXMuY291bnQgPSAwO1xyXG4gICAgfVxyXG4gICAgSW50ZXJ2YWxUcmVlLnByb3RvdHlwZS5pbnNlcnQgPSBmdW5jdGlvbiAocmVjb3JkKSB7XHJcbiAgICAgICAgaWYgKHJlY29yZC5sb3cgPiByZWNvcmQuaGlnaCkge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2Bsb3dgIHZhbHVlIG11c3QgYmUgbG93ZXIgb3IgZXF1YWwgdG8gYGhpZ2hgIHZhbHVlJyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh0aGlzLnJvb3QgPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAvLyBCYXNlIGNhc2U6IFRyZWUgaXMgZW1wdHksIG5ldyBub2RlIGJlY29tZXMgcm9vdFxyXG4gICAgICAgICAgICB0aGlzLnJvb3QgPSBuZXcgTm9kZSh0aGlzLCByZWNvcmQpO1xyXG4gICAgICAgICAgICB0aGlzLmNvdW50Kys7XHJcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgLy8gT3RoZXJ3aXNlLCBjaGVjayBpZiBub2RlIGFscmVhZHkgZXhpc3RzIHdpdGggdGhlIHNhbWUga2V5XHJcbiAgICAgICAgICAgIHZhciBub2RlID0gdGhpcy5yb290LnNlYXJjaEV4aXN0aW5nKHJlY29yZC5sb3cpO1xyXG4gICAgICAgICAgICBpZiAobm9kZSAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBDaGVjayB0aGUgcmVjb3JkcyBpbiB0aGlzIG5vZGUgaWYgdGhlcmUgYWxyZWFkeSBpcyB0aGUgb25lIHdpdGggc2FtZSBsb3csIGhpZ2gsIGRhdGFcclxuICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbm9kZS5yZWNvcmRzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGlzU2FtZShub2RlLnJlY29yZHNbaV0sIHJlY29yZCkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gVGhpcyByZWNvcmQgaXMgc2FtZSBhcyB0aGUgb25lIHdlJ3JlIHRyeWluZyB0byBpbnNlcnQ7IHJldHVybiBmYWxzZSB0byBpbmRpY2F0ZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBub3RoaW5nIGhhcyBiZWVuIGluc2VydGVkXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAvLyBBZGQgdGhlIHJlY29yZCB0byB0aGUgbm9kZVxyXG4gICAgICAgICAgICAgICAgbm9kZS5yZWNvcmRzLnB1c2gocmVjb3JkKTtcclxuICAgICAgICAgICAgICAgIC8vIFVwZGF0ZSBtYXggb2YgdGhlIG5vZGUgYW5kIGl0cyBwYXJlbnRzIGlmIG5lY2Vzc2FyeVxyXG4gICAgICAgICAgICAgICAgaWYgKHJlY29yZC5oaWdoID4gbm9kZS5tYXgpIHtcclxuICAgICAgICAgICAgICAgICAgICBub2RlLm1heCA9IHJlY29yZC5oaWdoO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChub2RlLnBhcmVudCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBub2RlLnBhcmVudC51cGRhdGVNYXhPZlBhcmVudHMoKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNvdW50Kys7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIC8vIE5vZGUgd2l0aCB0aGlzIGtleSBkb2Vzbid0IGFscmVhZHkgZXhpc3QuIENhbGwgaW5zZXJ0IGZ1bmN0aW9uIG9uIHJvb3QncyBub2RlXHJcbiAgICAgICAgICAgICAgICB0aGlzLnJvb3QuaW5zZXJ0KHJlY29yZCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNvdW50Kys7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBJbnRlcnZhbFRyZWUucHJvdG90eXBlLnNlYXJjaCA9IGZ1bmN0aW9uIChsb3csIGhpZ2gpIHtcclxuICAgICAgICBpZiAodGhpcy5yb290ID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgLy8gVHJlZSBpcyBlbXB0eTsgcmV0dXJuIGVtcHR5IGFycmF5XHJcbiAgICAgICAgICAgIHJldHVybiBbXTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnJvb3Quc2VhcmNoKGxvdywgaGlnaCk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIEludGVydmFsVHJlZS5wcm90b3R5cGUucmVtb3ZlID0gZnVuY3Rpb24gKHJlY29yZCkge1xyXG4gICAgICAgIGlmICh0aGlzLnJvb3QgPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAvLyBUcmVlIGlzIGVtcHR5OyBub3RoaW5nIHRvIHJlbW92ZVxyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICB2YXIgbm9kZSA9IHRoaXMucm9vdC5zZWFyY2hFeGlzdGluZyhyZWNvcmQubG93KTtcclxuICAgICAgICAgICAgaWYgKG5vZGUgPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKG5vZGUucmVjb3Jkcy5sZW5ndGggPiAxKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgcmVtb3ZlZFJlY29yZCA9IHZvaWQgMDtcclxuICAgICAgICAgICAgICAgIC8vIE5vZGUgd2l0aCB0aGlzIGtleSBoYXMgMiBvciBtb3JlIHJlY29yZHMuIEZpbmQgdGhlIG9uZSB3ZSBuZWVkIGFuZCByZW1vdmUgaXRcclxuICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbm9kZS5yZWNvcmRzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGlzU2FtZShub2RlLnJlY29yZHNbaV0sIHJlY29yZCkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVtb3ZlZFJlY29yZCA9IG5vZGUucmVjb3Jkc1tpXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbm9kZS5yZWNvcmRzLnNwbGljZShpLCAxKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKHJlbW92ZWRSZWNvcmQpIHtcclxuICAgICAgICAgICAgICAgICAgICByZW1vdmVkUmVjb3JkID0gdW5kZWZpbmVkO1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIFVwZGF0ZSBtYXggb2YgdGhhdCBub2RlIGFuZCBpdHMgcGFyZW50cyBpZiBuZWNlc3NhcnlcclxuICAgICAgICAgICAgICAgICAgICBpZiAocmVjb3JkLmhpZ2ggPT09IG5vZGUubWF4KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBub2RlSGlnaCA9IG5vZGUuZ2V0Tm9kZUhpZ2goKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG5vZGUubGVmdCAhPT0gdW5kZWZpbmVkICYmIG5vZGUucmlnaHQgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbm9kZS5tYXggPSBNYXRoLm1heChNYXRoLm1heChub2RlLmxlZnQubWF4LCBub2RlLnJpZ2h0Lm1heCksIG5vZGVIaWdoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIGlmIChub2RlLmxlZnQgIT09IHVuZGVmaW5lZCAmJiBub2RlLnJpZ2h0ID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5vZGUubWF4ID0gTWF0aC5tYXgobm9kZS5sZWZ0Lm1heCwgbm9kZUhpZ2gpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKG5vZGUubGVmdCA9PT0gdW5kZWZpbmVkICYmIG5vZGUucmlnaHQgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbm9kZS5tYXggPSBNYXRoLm1heChub2RlLnJpZ2h0Lm1heCwgbm9kZUhpZ2gpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbm9kZS5tYXggPSBub2RlSGlnaDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobm9kZS5wYXJlbnQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5vZGUucGFyZW50LnVwZGF0ZU1heE9mUGFyZW50cygpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY291bnQtLTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmIChub2RlLnJlY29yZHMubGVuZ3RoID09PSAxKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBOb2RlIHdpdGggdGhpcyBrZXkgaGFzIG9ubHkgMSByZWNvcmQuIENoZWNrIGlmIHRoZSByZW1haW5pbmcgcmVjb3JkIGluIHRoaXMgbm9kZSBpc1xyXG4gICAgICAgICAgICAgICAgLy8gYWN0dWFsbHkgdGhlIG9uZSB3ZSB3YW50IHRvIHJlbW92ZVxyXG4gICAgICAgICAgICAgICAgaWYgKGlzU2FtZShub2RlLnJlY29yZHNbMF0sIHJlY29yZCkpIHtcclxuICAgICAgICAgICAgICAgICAgICAvLyBUaGUgcmVtYWluaW5nIHJlY29yZCBpcyB0aGUgb25lIHdlIHdhbnQgdG8gcmVtb3ZlLiBSZW1vdmUgdGhlIHdob2xlIG5vZGUgZnJvbSB0aGUgdHJlZVxyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLnJvb3Qua2V5ID09PSBub2RlLmtleSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBXZSdyZSByZW1vdmluZyB0aGUgcm9vdCBlbGVtZW50LiBDcmVhdGUgYSBkdW1teSBub2RlIHRoYXQgd2lsbCB0ZW1wb3JhcmlseSB0YWtlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHJvb3QncyBwYXJlbnQgcm9sZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgcm9vdFBhcmVudCA9IG5ldyBOb2RlKHRoaXMsIHsgbG93OiByZWNvcmQubG93LCBoaWdoOiByZWNvcmQubG93IH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByb290UGFyZW50LmxlZnQgPSB0aGlzLnJvb3Q7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucm9vdC5wYXJlbnQgPSByb290UGFyZW50O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgcmVtb3ZlZE5vZGUgPSB0aGlzLnJvb3QucmVtb3ZlKG5vZGUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnJvb3QgPSByb290UGFyZW50LmxlZnQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLnJvb3QgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5yb290LnBhcmVudCA9IHVuZGVmaW5lZDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocmVtb3ZlZE5vZGUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlbW92ZWROb2RlID0gdW5kZWZpbmVkO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jb3VudC0tO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciByZW1vdmVkTm9kZSA9IHRoaXMucm9vdC5yZW1vdmUobm9kZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyZW1vdmVkTm9kZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVtb3ZlZE5vZGUgPSB1bmRlZmluZWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNvdW50LS07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIFRoZSByZW1haW5pbmcgcmVjb3JkIGlzIG5vdCB0aGUgb25lIHdlIHdhbnQgdG8gcmVtb3ZlXHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgLy8gTm8gcmVjb3JkcyBhdCBhbGwgaW4gdGhpcyBub2RlPyEgU2hvdWxkbid0IGhhcHBlblxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIEludGVydmFsVHJlZS5wcm90b3R5cGUuaW5PcmRlciA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gbmV3IEluT3JkZXIodGhpcy5yb290KTtcclxuICAgIH07XHJcbiAgICBJbnRlcnZhbFRyZWUucHJvdG90eXBlLnByZU9yZGVyID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiBuZXcgUHJlT3JkZXIodGhpcy5yb290KTtcclxuICAgIH07XHJcbiAgICByZXR1cm4gSW50ZXJ2YWxUcmVlO1xyXG59KCkpO1xyXG5leHBvcnRzLkludGVydmFsVHJlZSA9IEludGVydmFsVHJlZTtcclxudmFyIERhdGFJbnRlcnZhbFRyZWUgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBEYXRhSW50ZXJ2YWxUcmVlKCkge1xyXG4gICAgICAgIHRoaXMudHJlZSA9IG5ldyBJbnRlcnZhbFRyZWUoKTtcclxuICAgIH1cclxuICAgIERhdGFJbnRlcnZhbFRyZWUucHJvdG90eXBlLmluc2VydCA9IGZ1bmN0aW9uIChsb3csIGhpZ2gsIGRhdGEpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy50cmVlLmluc2VydCh7IGxvdzogbG93LCBoaWdoOiBoaWdoLCBkYXRhOiBkYXRhIH0pO1xyXG4gICAgfTtcclxuICAgIERhdGFJbnRlcnZhbFRyZWUucHJvdG90eXBlLnJlbW92ZSA9IGZ1bmN0aW9uIChsb3csIGhpZ2gsIGRhdGEpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy50cmVlLnJlbW92ZSh7IGxvdzogbG93LCBoaWdoOiBoaWdoLCBkYXRhOiBkYXRhIH0pO1xyXG4gICAgfTtcclxuICAgIERhdGFJbnRlcnZhbFRyZWUucHJvdG90eXBlLnNlYXJjaCA9IGZ1bmN0aW9uIChsb3csIGhpZ2gpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy50cmVlLnNlYXJjaChsb3csIGhpZ2gpLm1hcChmdW5jdGlvbiAodikgeyByZXR1cm4gdi5kYXRhOyB9KTtcclxuICAgIH07XHJcbiAgICBEYXRhSW50ZXJ2YWxUcmVlLnByb3RvdHlwZS5pbk9yZGVyID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnRyZWUuaW5PcmRlcigpO1xyXG4gICAgfTtcclxuICAgIERhdGFJbnRlcnZhbFRyZWUucHJvdG90eXBlLnByZU9yZGVyID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnRyZWUucHJlT3JkZXIoKTtcclxuICAgIH07XHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoRGF0YUludGVydmFsVHJlZS5wcm90b3R5cGUsIFwiY291bnRcIiwge1xyXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy50cmVlLmNvdW50O1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcclxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcclxuICAgIH0pO1xyXG4gICAgcmV0dXJuIERhdGFJbnRlcnZhbFRyZWU7XHJcbn0oKSk7XHJcbmV4cG9ydHMuZGVmYXVsdCA9IERhdGFJbnRlcnZhbFRyZWU7XHJcbnZhciBJbk9yZGVyID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gSW5PcmRlcihzdGFydE5vZGUpIHtcclxuICAgICAgICB0aGlzLnN0YWNrID0gW107XHJcbiAgICAgICAgaWYgKHN0YXJ0Tm9kZSAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIHRoaXMucHVzaChzdGFydE5vZGUpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIEluT3JkZXIucHJvdG90eXBlLm5leHQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgLy8gV2lsbCBvbmx5IGhhcHBlbiBpZiBzdGFjayBpcyBlbXB0eSBhbmQgcG9wIGlzIGNhbGxlZFxyXG4gICAgICAgIGlmICh0aGlzLmN1cnJlbnROb2RlID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgICAgIGRvbmU6IHRydWUsXHJcbiAgICAgICAgICAgICAgICB2YWx1ZTogdW5kZWZpbmVkLFxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBQcm9jZXNzIHRoaXMgbm9kZVxyXG4gICAgICAgIGlmICh0aGlzLmkgPCB0aGlzLmN1cnJlbnROb2RlLnJlY29yZHMubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICAgICBkb25lOiBmYWxzZSxcclxuICAgICAgICAgICAgICAgIHZhbHVlOiB0aGlzLmN1cnJlbnROb2RlLnJlY29yZHNbdGhpcy5pKytdLFxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodGhpcy5jdXJyZW50Tm9kZS5yaWdodCAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIHRoaXMucHVzaCh0aGlzLmN1cnJlbnROb2RlLnJpZ2h0KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIC8vIE1pZ2h0IHBvcCB0aGUgbGFzdCBhbmQgc2V0IHRoaXMuY3VycmVudE5vZGUgPSB1bmRlZmluZWRcclxuICAgICAgICAgICAgdGhpcy5wb3AoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRoaXMubmV4dCgpO1xyXG4gICAgfTtcclxuICAgIEluT3JkZXIucHJvdG90eXBlLnB1c2ggPSBmdW5jdGlvbiAobm9kZSkge1xyXG4gICAgICAgIHRoaXMuY3VycmVudE5vZGUgPSBub2RlO1xyXG4gICAgICAgIHRoaXMuaSA9IDA7XHJcbiAgICAgICAgd2hpbGUgKHRoaXMuY3VycmVudE5vZGUubGVmdCAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIHRoaXMuc3RhY2sucHVzaCh0aGlzLmN1cnJlbnROb2RlKTtcclxuICAgICAgICAgICAgdGhpcy5jdXJyZW50Tm9kZSA9IHRoaXMuY3VycmVudE5vZGUubGVmdDtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgSW5PcmRlci5wcm90b3R5cGUucG9wID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHRoaXMuY3VycmVudE5vZGUgPSB0aGlzLnN0YWNrLnBvcCgpO1xyXG4gICAgICAgIHRoaXMuaSA9IDA7XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIEluT3JkZXI7XHJcbn0oKSk7XHJcbmV4cG9ydHMuSW5PcmRlciA9IEluT3JkZXI7XHJcbmlmICh0eXBlb2YgU3ltYm9sID09PSAnZnVuY3Rpb24nKSB7XHJcbiAgICBJbk9yZGVyLnByb3RvdHlwZVtTeW1ib2wuaXRlcmF0b3JdID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpczsgfTtcclxufVxyXG52YXIgUHJlT3JkZXIgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBQcmVPcmRlcihzdGFydE5vZGUpIHtcclxuICAgICAgICB0aGlzLnN0YWNrID0gW107XHJcbiAgICAgICAgdGhpcy5pID0gMDtcclxuICAgICAgICB0aGlzLmN1cnJlbnROb2RlID0gc3RhcnROb2RlO1xyXG4gICAgfVxyXG4gICAgUHJlT3JkZXIucHJvdG90eXBlLm5leHQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgLy8gV2lsbCBvbmx5IGhhcHBlbiBpZiBzdGFjayBpcyBlbXB0eSBhbmQgcG9wIGlzIGNhbGxlZCxcclxuICAgICAgICAvLyB3aGljaCBvbmx5IGhhcHBlbnMgaWYgdGhlcmUgaXMgbm8gcmlnaHQgbm9kZSAoaS5lIHdlIGFyZSBkb25lKVxyXG4gICAgICAgIGlmICh0aGlzLmN1cnJlbnROb2RlID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgICAgIGRvbmU6IHRydWUsXHJcbiAgICAgICAgICAgICAgICB2YWx1ZTogdW5kZWZpbmVkLFxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBQcm9jZXNzIHRoaXMgbm9kZVxyXG4gICAgICAgIGlmICh0aGlzLmkgPCB0aGlzLmN1cnJlbnROb2RlLnJlY29yZHMubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICAgICBkb25lOiBmYWxzZSxcclxuICAgICAgICAgICAgICAgIHZhbHVlOiB0aGlzLmN1cnJlbnROb2RlLnJlY29yZHNbdGhpcy5pKytdLFxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodGhpcy5jdXJyZW50Tm9kZS5yaWdodCAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIHRoaXMucHVzaCh0aGlzLmN1cnJlbnROb2RlLnJpZ2h0KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHRoaXMuY3VycmVudE5vZGUubGVmdCAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIHRoaXMucHVzaCh0aGlzLmN1cnJlbnROb2RlLmxlZnQpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLnBvcCgpO1xyXG4gICAgICAgIHJldHVybiB0aGlzLm5leHQoKTtcclxuICAgIH07XHJcbiAgICBQcmVPcmRlci5wcm90b3R5cGUucHVzaCA9IGZ1bmN0aW9uIChub2RlKSB7XHJcbiAgICAgICAgdGhpcy5zdGFjay5wdXNoKG5vZGUpO1xyXG4gICAgfTtcclxuICAgIFByZU9yZGVyLnByb3RvdHlwZS5wb3AgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdGhpcy5jdXJyZW50Tm9kZSA9IHRoaXMuc3RhY2sucG9wKCk7XHJcbiAgICAgICAgdGhpcy5pID0gMDtcclxuICAgIH07XHJcbiAgICByZXR1cm4gUHJlT3JkZXI7XHJcbn0oKSk7XHJcbmV4cG9ydHMuUHJlT3JkZXIgPSBQcmVPcmRlcjtcclxuaWYgKHR5cGVvZiBTeW1ib2wgPT09ICdmdW5jdGlvbicpIHtcclxuICAgIFByZU9yZGVyLnByb3RvdHlwZVtTeW1ib2wuaXRlcmF0b3JdID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpczsgfTtcclxufVxyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXBcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gL1VzZXJzL2duaWRhbi9zcmMvd29yay90cnVmZmxlL25vZGVfbW9kdWxlcy9ub2RlLWludGVydmFsLXRyZWUvbGliL2luZGV4LmpzIiwiLy9cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBzaGFsbG93RXF1YWwob2JqQSwgb2JqQiwgY29tcGFyZSwgY29tcGFyZUNvbnRleHQpIHtcbiAgdmFyIHJldCA9IGNvbXBhcmUgPyBjb21wYXJlLmNhbGwoY29tcGFyZUNvbnRleHQsIG9iakEsIG9iakIpIDogdm9pZCAwO1xuXG4gIGlmIChyZXQgIT09IHZvaWQgMCkge1xuICAgIHJldHVybiAhIXJldDtcbiAgfVxuXG4gIGlmIChvYmpBID09PSBvYmpCKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICBpZiAodHlwZW9mIG9iakEgIT09IFwib2JqZWN0XCIgfHwgIW9iakEgfHwgdHlwZW9mIG9iakIgIT09IFwib2JqZWN0XCIgfHwgIW9iakIpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICB2YXIga2V5c0EgPSBPYmplY3Qua2V5cyhvYmpBKTtcbiAgdmFyIGtleXNCID0gT2JqZWN0LmtleXMob2JqQik7XG5cbiAgaWYgKGtleXNBLmxlbmd0aCAhPT0ga2V5c0IubGVuZ3RoKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgdmFyIGJIYXNPd25Qcm9wZXJ0eSA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuYmluZChvYmpCKTtcblxuICAvLyBUZXN0IGZvciBBJ3Mga2V5cyBkaWZmZXJlbnQgZnJvbSBCLlxuICBmb3IgKHZhciBpZHggPSAwOyBpZHggPCBrZXlzQS5sZW5ndGg7IGlkeCsrKSB7XG4gICAgdmFyIGtleSA9IGtleXNBW2lkeF07XG5cbiAgICBpZiAoIWJIYXNPd25Qcm9wZXJ0eShrZXkpKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgdmFyIHZhbHVlQSA9IG9iakFba2V5XTtcbiAgICB2YXIgdmFsdWVCID0gb2JqQltrZXldO1xuXG4gICAgcmV0ID0gY29tcGFyZSA/IGNvbXBhcmUuY2FsbChjb21wYXJlQ29udGV4dCwgdmFsdWVBLCB2YWx1ZUIsIGtleSkgOiB2b2lkIDA7XG5cbiAgICBpZiAocmV0ID09PSBmYWxzZSB8fCAocmV0ID09PSB2b2lkIDAgJiYgdmFsdWVBICE9PSB2YWx1ZUIpKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRydWU7XG59O1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC9Vc2Vycy9nbmlkYW4vc3JjL3dvcmsvdHJ1ZmZsZS9ub2RlX21vZHVsZXMvc2hhbGxvd2VxdWFsL2luZGV4LmpzIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PSBcInByb2R1Y3Rpb25cIikge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCIuL3Byb2R1Y3Rpb25cIik7XG59IGVsc2UgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09IFwidGVzdFwiKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcIi4vdGVzdFwiKTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcIi4vZGV2ZWxvcG1lbnRcIik7XG59XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vbGliL3N0b3JlL2luZGV4LmpzIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5cbnZhciBfY29tbW9uID0gcmVxdWlyZShcIi4vY29tbW9uXCIpO1xuXG52YXIgX2NvbW1vbjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jb21tb24pO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5leHBvcnRzLmRlZmF1bHQgPSBfY29tbW9uMi5kZWZhdWx0O1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL2xpYi9zdG9yZS90ZXN0LmpzIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5cbnZhciBfZW50cmllcyA9IHJlcXVpcmUoXCJiYWJlbC1ydW50aW1lL2NvcmUtanMvb2JqZWN0L2VudHJpZXNcIik7XG5cbnZhciBfZW50cmllczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9lbnRyaWVzKTtcblxudmFyIF9hc3NpZ24gPSByZXF1aXJlKFwiYmFiZWwtcnVudGltZS9jb3JlLWpzL29iamVjdC9hc3NpZ25cIik7XG5cbnZhciBfYXNzaWduMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2Fzc2lnbik7XG5cbmV4cG9ydHMuYWJicmV2aWF0ZVZhbHVlcyA9IGFiYnJldmlhdGVWYWx1ZXM7XG5leHBvcnRzLmRlZmF1bHQgPSBjb25maWd1cmVTdG9yZTtcblxudmFyIF9kZWJ1ZyA9IHJlcXVpcmUoXCJkZWJ1Z1wiKTtcblxudmFyIF9kZWJ1ZzIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9kZWJ1Zyk7XG5cbnZhciBfcmVkdXggPSByZXF1aXJlKFwicmVkdXhcIik7XG5cbnZhciBfcmVkdXhTYWdhID0gcmVxdWlyZShcInJlZHV4LXNhZ2FcIik7XG5cbnZhciBfcmVkdXhTYWdhMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlZHV4U2FnYSk7XG5cbnZhciBfcmVkdXhDbGlMb2dnZXIgPSByZXF1aXJlKFwicmVkdXgtY2xpLWxvZ2dlclwiKTtcblxudmFyIF9yZWR1eENsaUxvZ2dlcjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWR1eENsaUxvZ2dlcik7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmNvbnN0IGRlYnVnID0gKDAsIF9kZWJ1ZzIuZGVmYXVsdCkoXCJkZWJ1Z2dlcjpzdG9yZTpjb21tb25cIik7XG5jb25zdCByZWR1eERlYnVnID0gKDAsIF9kZWJ1ZzIuZGVmYXVsdCkoXCJkZWJ1Z2dlcjpyZWR1eFwiKTtcblxuZnVuY3Rpb24gYWJicmV2aWF0ZVZhbHVlcyh2YWx1ZSwgb3B0aW9ucyA9IHt9LCBkZXB0aCA9IDApIHtcbiAgb3B0aW9ucy5zdHJpbmdMaW1pdCA9IG9wdGlvbnMuc3RyaW5nTGltaXQgfHwgNjY7XG4gIG9wdGlvbnMuYXJyYXlMaW1pdCA9IG9wdGlvbnMuYXJyYXlMaW1pdCB8fCA4O1xuICBvcHRpb25zLnJlY3Vyc2VMaW1pdCA9IG9wdGlvbnMucmVjdXJzZUxpbWl0IHx8IDQ7XG5cbiAgaWYgKGRlcHRoID4gb3B0aW9ucy5yZWN1cnNlTGltaXQpIHtcbiAgICByZXR1cm4gXCIuLi5cIjtcbiAgfVxuXG4gIGNvbnN0IHJlY3Vyc2UgPSBjaGlsZCA9PiBhYmJyZXZpYXRlVmFsdWVzKGNoaWxkLCBvcHRpb25zLCBkZXB0aCArIDEpO1xuXG4gIGlmICh2YWx1ZSBpbnN0YW5jZW9mIEFycmF5KSB7XG4gICAgaWYgKHZhbHVlLmxlbmd0aCA+IG9wdGlvbnMuYXJyYXlMaW1pdCkge1xuICAgICAgdmFsdWUgPSBbLi4udmFsdWUuc2xpY2UoMCwgb3B0aW9ucy5hcnJheUxpbWl0IC8gMiksIFwiLi4uXCIsIC4uLnZhbHVlLnNsaWNlKHZhbHVlLmxlbmd0aCAtIG9wdGlvbnMuYXJyYXlMaW1pdCAvIDIgKyAxKV07XG4gICAgfVxuXG4gICAgcmV0dXJuIHZhbHVlLm1hcChyZWN1cnNlKTtcbiAgfSBlbHNlIGlmICh2YWx1ZSBpbnN0YW5jZW9mIE9iamVjdCkge1xuICAgIHJldHVybiAoMCwgX2Fzc2lnbjIuZGVmYXVsdCkoe30sIC4uLigwLCBfZW50cmllczIuZGVmYXVsdCkodmFsdWUpLm1hcCgoW2ssIHZdKSA9PiAoeyBbcmVjdXJzZShrKV06IHJlY3Vyc2UodikgfSkpKTtcbiAgfSBlbHNlIGlmICh0eXBlb2YgdmFsdWUgPT09IFwic3RyaW5nXCIgJiYgdmFsdWUubGVuZ3RoID4gb3B0aW9ucy5zdHJpbmdMaW1pdCkge1xuICAgIGxldCBpbm5lciA9IFwiLi4uXCI7XG4gICAgbGV0IGV4dHJhY3RBbW91bnQgPSAob3B0aW9ucy5zdHJpbmdMaW1pdCAtIGlubmVyLmxlbmd0aCkgLyAyO1xuICAgIGxldCBsZWFkaW5nID0gdmFsdWUuc2xpY2UoMCwgTWF0aC5jZWlsKGV4dHJhY3RBbW91bnQpKTtcbiAgICBsZXQgdHJhaWxpbmcgPSB2YWx1ZS5zbGljZSh2YWx1ZS5sZW5ndGggLSBNYXRoLmZsb29yKGV4dHJhY3RBbW91bnQpKTtcbiAgICByZXR1cm4gYCR7bGVhZGluZ30ke2lubmVyfSR7dHJhaWxpbmd9YDtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gdmFsdWU7XG4gIH1cbn1cblxuZnVuY3Rpb24gY29uZmlndXJlU3RvcmUocmVkdWNlciwgc2FnYSwgaW5pdGlhbFN0YXRlLCBjb21wb3NlRW5oYW5jZXJzKSB7XG4gIGNvbnN0IHNhZ2FNaWRkbGV3YXJlID0gKDAsIF9yZWR1eFNhZ2EyLmRlZmF1bHQpKCk7XG5cbiAgaWYgKCFjb21wb3NlRW5oYW5jZXJzKSB7XG4gICAgY29tcG9zZUVuaGFuY2VycyA9IF9yZWR1eC5jb21wb3NlO1xuICB9XG5cbiAgY29uc3QgbG9nZ2VyTWlkZGxld2FyZSA9ICgwLCBfcmVkdXhDbGlMb2dnZXIyLmRlZmF1bHQpKHtcbiAgICBsb2c6IHJlZHV4RGVidWcsXG4gICAgc3RhdGVUcmFuc2Zvcm1lcjogc3RhdGUgPT4gYWJicmV2aWF0ZVZhbHVlcyhzdGF0ZSwge1xuICAgICAgYXJyYXlMaW1pdDogNCxcbiAgICAgIHJlY3Vyc2VMaW1pdDogM1xuICAgIH0pLFxuICAgIGFjdGlvblRyYW5zZm9ybWVyOiBhYmJyZXZpYXRlVmFsdWVzXG4gIH0pO1xuXG4gIGxldCBzdG9yZSA9ICgwLCBfcmVkdXguY3JlYXRlU3RvcmUpKHJlZHVjZXIsIGluaXRpYWxTdGF0ZSwgY29tcG9zZUVuaGFuY2VycygoMCwgX3JlZHV4LmFwcGx5TWlkZGxld2FyZSkoc2FnYU1pZGRsZXdhcmUsIGxvZ2dlck1pZGRsZXdhcmUpKSk7XG5cbiAgc2FnYU1pZGRsZXdhcmUucnVuKHNhZ2EpO1xuXG4gIHJldHVybiBzdG9yZTtcbn1cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9saWIvc3RvcmUvY29tbW9uLmpzIiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwicmVkdXgtc2FnYVwiKTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyBleHRlcm5hbCBcInJlZHV4LXNhZ2FcIlxuLy8gbW9kdWxlIGlkID0gNThcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwicmVkdXgtY2xpLWxvZ2dlclwiKTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyBleHRlcm5hbCBcInJlZHV4LWNsaS1sb2dnZXJcIlxuLy8gbW9kdWxlIGlkID0gNTlcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLnNhZ2EgPSBzYWdhO1xuXG52YXIgX2RlYnVnID0gcmVxdWlyZShcImRlYnVnXCIpO1xuXG52YXIgX2RlYnVnMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2RlYnVnKTtcblxudmFyIF9lZmZlY3RzID0gcmVxdWlyZShcInJlZHV4LXNhZ2EvZWZmZWN0c1wiKTtcblxudmFyIF9oZWxwZXJzID0gcmVxdWlyZShcImxpYi9oZWxwZXJzXCIpO1xuXG52YXIgX3NhZ2FzID0gcmVxdWlyZShcImxpYi9hc3Qvc2FnYXNcIik7XG5cbnZhciBhc3QgPSBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChfc2FnYXMpO1xuXG52YXIgX3NhZ2FzMiA9IHJlcXVpcmUoXCJsaWIvY29udHJvbGxlci9zYWdhc1wiKTtcblxudmFyIGNvbnRyb2xsZXIgPSBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChfc2FnYXMyKTtcblxudmFyIF9zYWdhczMgPSByZXF1aXJlKFwibGliL3NvbGlkaXR5L3NhZ2FzXCIpO1xuXG52YXIgc29saWRpdHkgPSBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChfc2FnYXMzKTtcblxudmFyIF9zYWdhczQgPSByZXF1aXJlKFwibGliL2V2bS9zYWdhc1wiKTtcblxudmFyIGV2bSA9IF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKF9zYWdhczQpO1xuXG52YXIgX3NhZ2FzNSA9IHJlcXVpcmUoXCJsaWIvdHJhY2Uvc2FnYXNcIik7XG5cbnZhciB0cmFjZSA9IF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKF9zYWdhczUpO1xuXG52YXIgX3NhZ2FzNiA9IHJlcXVpcmUoXCJsaWIvZGF0YS9zYWdhc1wiKTtcblxudmFyIGRhdGEgPSBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChfc2FnYXM2KTtcblxudmFyIF9zYWdhczcgPSByZXF1aXJlKFwibGliL3dlYjMvc2FnYXNcIik7XG5cbnZhciB3ZWIzID0gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQoX3NhZ2FzNyk7XG5cbnZhciBfYWN0aW9ucyA9IHJlcXVpcmUoXCIuLi9hY3Rpb25zXCIpO1xuXG52YXIgYWN0aW9ucyA9IF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKF9hY3Rpb25zKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQob2JqKSB7IGlmIChvYmogJiYgb2JqLl9fZXNNb2R1bGUpIHsgcmV0dXJuIG9iajsgfSBlbHNlIHsgdmFyIG5ld09iaiA9IHt9OyBpZiAob2JqICE9IG51bGwpIHsgZm9yICh2YXIga2V5IGluIG9iaikgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwga2V5KSkgbmV3T2JqW2tleV0gPSBvYmpba2V5XTsgfSB9IG5ld09iai5kZWZhdWx0ID0gb2JqOyByZXR1cm4gbmV3T2JqOyB9IH1cblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuY29uc3QgZGVidWcgPSAoMCwgX2RlYnVnMi5kZWZhdWx0KShcImRlYnVnZ2VyOnNlc3Npb246c2FnYXNcIik7XG5cbmZ1bmN0aW9uKiBzYWdhKCkge1xuICBkZWJ1ZyhcInN0YXJ0aW5nIGxpc3RlbmVyc1wiKTtcbiAgbGV0IGxpc3RlbmVycyA9IHlpZWxkKiBmb3JrTGlzdGVuZXJzKCk7XG5cbiAgLy8gcmVjZWl2aW5nICYgc2F2aW5nIGNvbnRyYWN0cyBpbnRvIHN0YXRlXG4gIGRlYnVnKFwid2FpdGluZyBmb3IgY29udHJhY3QgaW5mb3JtYXRpb25cIik7XG4gIGxldCB7IGNvbnRleHRzLCBzb3VyY2VzIH0gPSB5aWVsZCAoMCwgX2VmZmVjdHMudGFrZSkoYWN0aW9ucy5SRUNPUkRfQ09OVFJBQ1RTKTtcblxuICBkZWJ1ZyhcInJlY29yZGluZyBjb250cmFjdCBiaW5hcmllc1wiKTtcbiAgeWllbGQqIHJlY29yZENvbnRleHRzKC4uLmNvbnRleHRzKTtcblxuICBkZWJ1ZyhcInJlY29yZGluZyBjb250cmFjdCBzb3VyY2VzXCIpO1xuICB5aWVsZCogcmVjb3JkU291cmNlcyguLi5zb3VyY2VzKTtcblxuICBkZWJ1ZyhcIndhaXRpbmcgZm9yIHN0YXJ0XCIpO1xuICAvLyB3YWl0IGZvciBzdGFydCBzaWduYWxcbiAgbGV0IHsgdHhIYXNoLCBwcm92aWRlciB9ID0geWllbGQgKDAsIF9lZmZlY3RzLnRha2UpKGFjdGlvbnMuU1RBUlQpO1xuICBkZWJ1ZyhcInN0YXJ0aW5nXCIpO1xuXG4gIC8vIHByb2Nlc3MgdHJhbnNhY3Rpb25cbiAgZGVidWcoXCJmZXRjaGluZyB0cmFuc2FjdGlvbiBpbmZvXCIpO1xuICBsZXQgZXJyID0geWllbGQqIGZldGNoVHgodHhIYXNoLCBwcm92aWRlcik7XG4gIGlmIChlcnIpIHtcbiAgICBkZWJ1ZyhcImVycm9yICVvXCIsIGVycik7XG4gICAgeWllbGQqIGVycm9yKGVycik7XG4gIH0gZWxzZSB7XG4gICAgZGVidWcoXCJ2aXNpdGluZyBBU1RzXCIpO1xuICAgIC8vIHZpc2l0IGFzdHNcbiAgICB5aWVsZCogYXN0LnZpc2l0QWxsKCk7XG5cbiAgICBkZWJ1ZyhcInJlYWR5aW5nXCIpO1xuICAgIC8vIHNpZ25hbCB0aGF0IHN0ZXBwaW5nIGNhbiBiZWdpblxuICAgIHlpZWxkKiByZWFkeSgpO1xuXG4gICAgZGVidWcoXCJ3YWl0aW5nIGZvciB0cmFjZSBFT1RcIik7XG4gICAgLy8gd2FpdCB1bnRpbCB0cmFjZSBoaXRzIEVPVFxuICAgIHlpZWxkKiB0cmFjZS53YWl0KCk7XG5cbiAgICBkZWJ1ZyhcImZpbmlzaGluZ1wiKTtcbiAgICAvLyBmaW5pc2hcbiAgICB5aWVsZCAoMCwgX2VmZmVjdHMucHV0KShhY3Rpb25zLmZpbmlzaCgpKTtcbiAgfVxuXG4gIGRlYnVnKFwic3RvcHBpbmcgbGlzdGVuZXJzXCIpO1xuICB5aWVsZCAoMCwgX2VmZmVjdHMuYWxsKShsaXN0ZW5lcnMubWFwKHRhc2sgPT4gKDAsIF9lZmZlY3RzLmNhbmNlbCkodGFzaykpKTtcbn1cblxuZXhwb3J0cy5kZWZhdWx0ID0gKDAsIF9oZWxwZXJzLnByZWZpeE5hbWUpKFwic2Vzc2lvblwiLCBzYWdhKTtcblxuXG5mdW5jdGlvbiogZm9ya0xpc3RlbmVycygpIHtcbiAgcmV0dXJuIHlpZWxkICgwLCBfZWZmZWN0cy5hbGwpKFthc3QsIGNvbnRyb2xsZXIsIGRhdGEsIGV2bSwgc29saWRpdHksIHRyYWNlLCB3ZWIzXS5tYXAoYXBwID0+ICgwLCBfZWZmZWN0cy5mb3JrKShhcHAuc2FnYSkpKTtcbn1cblxuZnVuY3Rpb24qIGZldGNoVHgodHhIYXNoLCBwcm92aWRlcikge1xuICBsZXQgcmVzdWx0ID0geWllbGQqIHdlYjMuaW5zcGVjdFRyYW5zYWN0aW9uKHR4SGFzaCwgcHJvdmlkZXIpO1xuXG4gIGlmIChyZXN1bHQuZXJyb3IpIHtcbiAgICByZXR1cm4gcmVzdWx0LmVycm9yO1xuICB9XG5cbiAgeWllbGQqIGV2bS5iZWdpbihyZXN1bHQpO1xuXG4gIGxldCBhZGRyZXNzZXMgPSB5aWVsZCogdHJhY2UucHJvY2Vzc1RyYWNlKHJlc3VsdC50cmFjZSk7XG4gIGlmIChyZXN1bHQuYWRkcmVzcyAmJiBhZGRyZXNzZXMuaW5kZXhPZihyZXN1bHQuYWRkcmVzcykgPT0gLTEpIHtcbiAgICBhZGRyZXNzZXMucHVzaChyZXN1bHQuYWRkcmVzcyk7XG4gIH1cblxuICBsZXQgYmluYXJpZXMgPSB5aWVsZCogd2ViMy5vYnRhaW5CaW5hcmllcyhhZGRyZXNzZXMpO1xuXG4gIHlpZWxkICgwLCBfZWZmZWN0cy5hbGwpKGFkZHJlc3Nlcy5tYXAoKGFkZHJlc3MsIGkpID0+ICgwLCBfZWZmZWN0cy5jYWxsKShyZWNvcmRJbnN0YW5jZSwgYWRkcmVzcywgYmluYXJpZXNbaV0pKSk7XG59XG5cbmZ1bmN0aW9uKiByZWNvcmRDb250ZXh0cyguLi5jb250ZXh0cykge1xuICBmb3IgKGxldCBfcmVmIG9mIGNvbnRleHRzKSB7XG4gICAgbGV0IHsgY29udHJhY3ROYW1lLCBiaW5hcnksIHNvdXJjZU1hcCB9ID0gX3JlZjtcblxuICAgIHlpZWxkKiBldm0uYWRkQ29udGV4dChjb250cmFjdE5hbWUsIGJpbmFyeSk7XG5cbiAgICBpZiAoc291cmNlTWFwKSB7XG4gICAgICB5aWVsZCogc29saWRpdHkuYWRkU291cmNlTWFwKGJpbmFyeSwgc291cmNlTWFwKTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24qIHJlY29yZFNvdXJjZXMoLi4uc291cmNlcykge1xuICBmb3IgKGxldCBfcmVmMiBvZiBzb3VyY2VzKSB7XG4gICAgbGV0IHsgc291cmNlUGF0aCwgc291cmNlLCBhc3QgfSA9IF9yZWYyO1xuXG4gICAgeWllbGQqIHNvbGlkaXR5LmFkZFNvdXJjZShzb3VyY2UsIHNvdXJjZVBhdGgsIGFzdCk7XG4gIH1cbn1cblxuZnVuY3Rpb24qIHJlY29yZEluc3RhbmNlKGFkZHJlc3MsIGJpbmFyeSkge1xuICB5aWVsZCogZXZtLmFkZEluc3RhbmNlKGFkZHJlc3MsIGJpbmFyeSk7XG59XG5cbmZ1bmN0aW9uKiByZWFkeSgpIHtcbiAgeWllbGQgKDAsIF9lZmZlY3RzLnB1dCkoYWN0aW9ucy5yZWFkeSgpKTtcbn1cblxuZnVuY3Rpb24qIGVycm9yKGVycikge1xuICB5aWVsZCAoMCwgX2VmZmVjdHMucHV0KShhY3Rpb25zLmVycm9yKGVycikpO1xufVxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL2xpYi9zZXNzaW9uL3NhZ2FzL2luZGV4LmpzIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5cbnZhciBfZW50cmllcyA9IHJlcXVpcmUoXCJiYWJlbC1ydW50aW1lL2NvcmUtanMvb2JqZWN0L2VudHJpZXNcIik7XG5cbnZhciBfZW50cmllczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9lbnRyaWVzKTtcblxuZXhwb3J0cy52aXNpdEFsbCA9IHZpc2l0QWxsO1xuZXhwb3J0cy5zYWdhID0gc2FnYTtcblxudmFyIF9kZWJ1ZyA9IHJlcXVpcmUoXCJkZWJ1Z1wiKTtcblxudmFyIF9kZWJ1ZzIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9kZWJ1Zyk7XG5cbnZhciBfZWZmZWN0cyA9IHJlcXVpcmUoXCJyZWR1eC1zYWdhL2VmZmVjdHNcIik7XG5cbnZhciBfaGVscGVycyA9IHJlcXVpcmUoXCJsaWIvaGVscGVyc1wiKTtcblxudmFyIF9zYWdhcyA9IHJlcXVpcmUoXCJsaWIvZGF0YS9zYWdhc1wiKTtcblxudmFyIGRhdGEgPSBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChfc2FnYXMpO1xuXG52YXIgX2FjdGlvbnMgPSByZXF1aXJlKFwiLi4vYWN0aW9uc1wiKTtcblxudmFyIGFjdGlvbnMgPSBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChfYWN0aW9ucyk7XG5cbnZhciBfc2VsZWN0b3JzID0gcmVxdWlyZShcIi4uL3NlbGVjdG9yc1wiKTtcblxudmFyIF9zZWxlY3RvcnMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfc2VsZWN0b3JzKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQob2JqKSB7IGlmIChvYmogJiYgb2JqLl9fZXNNb2R1bGUpIHsgcmV0dXJuIG9iajsgfSBlbHNlIHsgdmFyIG5ld09iaiA9IHt9OyBpZiAob2JqICE9IG51bGwpIHsgZm9yICh2YXIga2V5IGluIG9iaikgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwga2V5KSkgbmV3T2JqW2tleV0gPSBvYmpba2V5XTsgfSB9IG5ld09iai5kZWZhdWx0ID0gb2JqOyByZXR1cm4gbmV3T2JqOyB9IH1cblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuY29uc3QgZGVidWcgPSAoMCwgX2RlYnVnMi5kZWZhdWx0KShcImRlYnVnZ2VyOmFzdDpzYWdhc1wiKTtcblxuZnVuY3Rpb24qIHdhbGsoc291cmNlSWQsIG5vZGUsIHBvaW50ZXIgPSBcIlwiLCBwYXJlbnRJZCA9IG51bGwpIHtcbiAgZGVidWcoXCJ3YWxraW5nICVvICVvXCIsIHBvaW50ZXIsIG5vZGUpO1xuXG4gIHlpZWxkKiBoYW5kbGVFbnRlcihzb3VyY2VJZCwgbm9kZSwgcG9pbnRlciwgcGFyZW50SWQpO1xuXG4gIGlmIChub2RlIGluc3RhbmNlb2YgQXJyYXkpIHtcbiAgICBmb3IgKGxldCBbaSwgY2hpbGRdIG9mIG5vZGUuZW50cmllcygpKSB7XG4gICAgICB5aWVsZCAoMCwgX2VmZmVjdHMuY2FsbCkod2Fsaywgc291cmNlSWQsIGNoaWxkLCBgJHtwb2ludGVyfS8ke2l9YCwgcGFyZW50SWQpO1xuICAgIH1cbiAgfSBlbHNlIGlmIChub2RlIGluc3RhbmNlb2YgT2JqZWN0KSB7XG4gICAgZm9yIChsZXQgW2tleSwgY2hpbGRdIG9mICgwLCBfZW50cmllczIuZGVmYXVsdCkobm9kZSkpIHtcbiAgICAgIHlpZWxkICgwLCBfZWZmZWN0cy5jYWxsKSh3YWxrLCBzb3VyY2VJZCwgY2hpbGQsIGAke3BvaW50ZXJ9LyR7a2V5fWAsIG5vZGUuaWQpO1xuICAgIH1cbiAgfVxuXG4gIHlpZWxkKiBoYW5kbGVFeGl0KHNvdXJjZUlkLCBub2RlLCBwb2ludGVyKTtcbn1cblxuZnVuY3Rpb24qIGhhbmRsZUVudGVyKHNvdXJjZUlkLCBub2RlLCBwb2ludGVyLCBwYXJlbnRJZCkge1xuICBpZiAoIShub2RlIGluc3RhbmNlb2YgT2JqZWN0KSkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGRlYnVnKFwiZW50ZXJpbmcgJXNcIiwgcG9pbnRlcik7XG5cbiAgaWYgKG5vZGUuaWQgIT09IHVuZGVmaW5lZCkge1xuICAgIGRlYnVnKFwiJXMgcmVjb3JkaW5nIHNjb3BlICVzXCIsIHBvaW50ZXIsIG5vZGUuaWQpO1xuICAgIHlpZWxkKiBkYXRhLnNjb3BlKG5vZGUuaWQsIHBvaW50ZXIsIHBhcmVudElkLCBzb3VyY2VJZCk7XG4gIH1cblxuICBzd2l0Y2ggKG5vZGUubm9kZVR5cGUpIHtcbiAgICBjYXNlIFwiVmFyaWFibGVEZWNsYXJhdGlvblwiOlxuICAgICAgZGVidWcoXCIlcyByZWNvcmRpbmcgdmFyaWFibGUgJW9cIiwgcG9pbnRlciwgbm9kZSk7XG4gICAgICB5aWVsZCogZGF0YS5kZWNsYXJlKG5vZGUpO1xuICAgICAgYnJlYWs7XG4gIH1cbn1cblxuZnVuY3Rpb24qIGhhbmRsZUV4aXQoc291cmNlSWQsIG5vZGUsIHBvaW50ZXIpIHtcbiAgZGVidWcoXCJleGl0aW5nICVzXCIsIHBvaW50ZXIpO1xuXG4gIC8vIG5vLW9wIHJpZ2h0IG5vd1xufVxuXG5mdW5jdGlvbiogd2Fsa1NhZ2EoeyBzb3VyY2VJZCwgYXN0IH0pIHtcbiAgeWllbGQgd2Fsayhzb3VyY2VJZCwgYXN0KTtcbn1cblxuZnVuY3Rpb24qIHZpc2l0QWxsKGlkeCkge1xuICBsZXQgc291cmNlcyA9IHlpZWxkICgwLCBfZWZmZWN0cy5zZWxlY3QpKF9zZWxlY3RvcnMyLmRlZmF1bHQudmlld3Muc291cmNlcyk7XG5cbiAgbGV0IHRhc2tzID0geWllbGQgKDAsIF9lZmZlY3RzLmFsbCkoKDAsIF9lbnRyaWVzMi5kZWZhdWx0KShzb3VyY2VzKS5maWx0ZXIoKFtpZCwgeyBhc3QgfV0pID0+ICEhYXN0KS5tYXAoKFtpZCwgeyBhc3QgfV0pID0+ICgwLCBfZWZmZWN0cy5mb3JrKSgoKSA9PiAoMCwgX2VmZmVjdHMucHV0KShhY3Rpb25zLnZpc2l0KGlkLCBhc3QpKSkpKTtcblxuICBpZiAodGFza3MubGVuZ3RoID4gMCkge1xuICAgIHlpZWxkICgwLCBfZWZmZWN0cy5qb2luKSguLi50YXNrcyk7XG4gIH1cblxuICB5aWVsZCAoMCwgX2VmZmVjdHMucHV0KShhY3Rpb25zLmRvbmVWaXNpdGluZygpKTtcbn1cblxuZnVuY3Rpb24qIHNhZ2EoKSB7XG4gIHlpZWxkICgwLCBfZWZmZWN0cy5yYWNlKSh7XG4gICAgdmlzaXRvcjogKDAsIF9lZmZlY3RzLnRha2VFdmVyeSkoYWN0aW9ucy5WSVNJVCwgd2Fsa1NhZ2EpLFxuICAgIGRvbmU6ICgwLCBfZWZmZWN0cy50YWtlKShhY3Rpb25zLkRPTkVfVklTSVRJTkcpXG4gIH0pO1xufVxuXG5leHBvcnRzLmRlZmF1bHQgPSAoMCwgX2hlbHBlcnMucHJlZml4TmFtZSkoXCJhc3RcIiwgc2FnYSk7XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vbGliL2FzdC9zYWdhcy9pbmRleC5qcyIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuXG52YXIgX2VudHJpZXMgPSByZXF1aXJlKFwiYmFiZWwtcnVudGltZS9jb3JlLWpzL29iamVjdC9lbnRyaWVzXCIpO1xuXG52YXIgX2VudHJpZXMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZW50cmllcyk7XG5cbnZhciBfZXh0ZW5kczIgPSByZXF1aXJlKFwiYmFiZWwtcnVudGltZS9oZWxwZXJzL2V4dGVuZHNcIik7XG5cbnZhciBfZXh0ZW5kczMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9leHRlbmRzMik7XG5cbnZhciBfYXNzaWduID0gcmVxdWlyZShcImJhYmVsLXJ1bnRpbWUvY29yZS1qcy9vYmplY3QvYXNzaWduXCIpO1xuXG52YXIgX2Fzc2lnbjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9hc3NpZ24pO1xuXG5leHBvcnRzLnJlYWQgPSByZWFkO1xuZXhwb3J0cy5kZWNvZGVWYWx1ZSA9IGRlY29kZVZhbHVlO1xuZXhwb3J0cy5kZWNvZGVNZW1vcnlSZWZlcmVuY2UgPSBkZWNvZGVNZW1vcnlSZWZlcmVuY2U7XG5leHBvcnRzLmRlY29kZVN0b3JhZ2VSZWZlcmVuY2UgPSBkZWNvZGVTdG9yYWdlUmVmZXJlbmNlO1xuZXhwb3J0cy5kZWNvZGVNYXBwaW5nID0gZGVjb2RlTWFwcGluZztcbmV4cG9ydHMuZGVmYXVsdCA9IGRlY29kZTtcblxudmFyIF9kZWJ1ZyA9IHJlcXVpcmUoXCJkZWJ1Z1wiKTtcblxudmFyIF9kZWJ1ZzIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9kZWJ1Zyk7XG5cbnZhciBfYmlnbnVtYmVyID0gcmVxdWlyZShcImJpZ251bWJlci5qc1wiKTtcblxudmFyIF9tZW1vcnkgPSByZXF1aXJlKFwiLi9tZW1vcnlcIik7XG5cbnZhciBtZW1vcnkgPSBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChfbWVtb3J5KTtcblxudmFyIF9zdG9yYWdlID0gcmVxdWlyZShcIi4vc3RvcmFnZVwiKTtcblxudmFyIHN0b3JhZ2UgPSBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChfc3RvcmFnZSk7XG5cbnZhciBfdXRpbHMgPSByZXF1aXJlKFwiLi91dGlsc1wiKTtcblxudmFyIHV0aWxzID0gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQoX3V0aWxzKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQob2JqKSB7IGlmIChvYmogJiYgb2JqLl9fZXNNb2R1bGUpIHsgcmV0dXJuIG9iajsgfSBlbHNlIHsgdmFyIG5ld09iaiA9IHt9OyBpZiAob2JqICE9IG51bGwpIHsgZm9yICh2YXIga2V5IGluIG9iaikgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwga2V5KSkgbmV3T2JqW2tleV0gPSBvYmpba2V5XTsgfSB9IG5ld09iai5kZWZhdWx0ID0gb2JqOyByZXR1cm4gbmV3T2JqOyB9IH1cblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuY29uc3QgZGVidWcgPSAoMCwgX2RlYnVnMi5kZWZhdWx0KShcImRlYnVnZ2VyOmRhdGE6ZGVjb2RlXCIpO1xuXG5mdW5jdGlvbiByZWFkKHBvaW50ZXIsIHN0YXRlKSB7XG4gIGlmIChwb2ludGVyLnN0YWNrICE9IHVuZGVmaW5lZCAmJiBzdGF0ZS5zdGFjayAmJiBwb2ludGVyLnN0YWNrIDwgc3RhdGUuc3RhY2subGVuZ3RoKSB7XG4gICAgcmV0dXJuIHN0YXRlLnN0YWNrW3BvaW50ZXIuc3RhY2tdO1xuICB9IGVsc2UgaWYgKHBvaW50ZXIuc3RvcmFnZSAhPSB1bmRlZmluZWQgJiYgc3RhdGUuc3RvcmFnZSkge1xuICAgIHJldHVybiBzdG9yYWdlLnJlYWRSYW5nZShzdGF0ZS5zdG9yYWdlLCBwb2ludGVyLnN0b3JhZ2UpO1xuICB9IGVsc2UgaWYgKHBvaW50ZXIubWVtb3J5ICE9IHVuZGVmaW5lZCAmJiBzdGF0ZS5tZW1vcnkpIHtcbiAgICByZXR1cm4gbWVtb3J5LnJlYWRCeXRlcyhzdGF0ZS5tZW1vcnksIHBvaW50ZXIubWVtb3J5LnN0YXJ0LCBwb2ludGVyLm1lbW9yeS5sZW5ndGgpO1xuICB9IGVsc2UgaWYgKHBvaW50ZXIubGl0ZXJhbCAhPSB1bmRlZmluZWQpIHtcbiAgICByZXR1cm4gcG9pbnRlci5saXRlcmFsO1xuICB9XG59XG5cbmZ1bmN0aW9uIGRlY29kZVZhbHVlKGRlZmluaXRpb24sIHBvaW50ZXIsIGluZm8pIHtcbiAgY29uc3QgeyBzdGF0ZSB9ID0gaW5mbztcbiAgZGVidWcoXCJkZWNvZGluZyB2YWx1ZSwgcG9pbnRlcjogJW8sIHR5cGVDbGFzczogJXNcIiwgcG9pbnRlciwgdXRpbHMudHlwZUNsYXNzKGRlZmluaXRpb24pKTtcbiAgbGV0IGJ5dGVzID0gcmVhZChwb2ludGVyLCBzdGF0ZSk7XG4gIGlmIChieXRlcyA9PSB1bmRlZmluZWQpIHtcbiAgICBkZWJ1ZyhcInNlZ2ZhdWx0LCBwb2ludGVyICVvLCBzdGF0ZTogJU9cIiwgcG9pbnRlciwgc3RhdGUpO1xuICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH1cblxuICBzd2l0Y2ggKHV0aWxzLnR5cGVDbGFzcyhkZWZpbml0aW9uKSkge1xuICAgIGNhc2UgXCJib29sXCI6XG4gICAgICByZXR1cm4gIXV0aWxzLnRvQmlnTnVtYmVyKGJ5dGVzKS5pc1plcm8oKTtcblxuICAgIGNhc2UgXCJ1aW50XCI6XG4gICAgICByZXR1cm4gdXRpbHMudG9CaWdOdW1iZXIoYnl0ZXMpO1xuXG4gICAgY2FzZSBcImludFwiOlxuICAgICAgcmV0dXJuIHV0aWxzLnRvU2lnbmVkQmlnTnVtYmVyKGJ5dGVzKTtcblxuICAgIGNhc2UgXCJhZGRyZXNzXCI6XG4gICAgICByZXR1cm4gdXRpbHMudG9IZXhTdHJpbmcoYnl0ZXMsIHRydWUpO1xuXG4gICAgY2FzZSBcImJ5dGVzXCI6XG4gICAgICBkZWJ1ZyhcInR5cGVJZGVudGlmaWVyICVzICVvXCIsIHV0aWxzLnR5cGVJZGVudGlmaWVyKGRlZmluaXRpb24pLCBieXRlcyk7XG4gICAgICAvLyBIQUNLIGJ5dGVzIG1heSBiZSBnZXR0aW5nIHBhc3NlZCBpbiBhcyBhIGxpdGVyYWwgaGV4c3RyaW5nXG4gICAgICBpZiAodHlwZW9mIGJ5dGVzID09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgcmV0dXJuIGJ5dGVzO1xuICAgICAgfVxuICAgICAgbGV0IGxlbmd0aCA9IHV0aWxzLnNwZWNpZmllZFNpemUoZGVmaW5pdGlvbik7XG4gICAgICByZXR1cm4gdXRpbHMudG9IZXhTdHJpbmcoYnl0ZXMsIGxlbmd0aCk7XG5cbiAgICBjYXNlIFwic3RyaW5nXCI6XG4gICAgY2FzZSBcInN0cmluZ2xpdGVyYWxcIjpcbiAgICAgIGRlYnVnKFwidHlwZUlkZW50aWZpZXIgJXMgJW9cIiwgdXRpbHMudHlwZUlkZW50aWZpZXIoZGVmaW5pdGlvbiksIGJ5dGVzKTtcbiAgICAgIGlmICh0eXBlb2YgYnl0ZXMgPT0gXCJzdHJpbmdcIikge1xuICAgICAgICByZXR1cm4gYnl0ZXM7XG4gICAgICB9XG4gICAgICByZXR1cm4gU3RyaW5nLmZyb21DaGFyQ29kZS5hcHBseSh1bmRlZmluZWQsIGJ5dGVzKTtcblxuICAgIGNhc2UgXCJyYXRpb25hbFwiOlxuICAgICAgZGVidWcoXCJ0eXBlSWRlbnRpZmllciAlcyAlb1wiLCB1dGlscy50eXBlSWRlbnRpZmllcihkZWZpbml0aW9uKSwgYnl0ZXMpO1xuICAgICAgcmV0dXJuIHV0aWxzLnRvQmlnTnVtYmVyKGJ5dGVzKTtcblxuICAgIGRlZmF1bHQ6XG4gICAgICBkZWJ1ZyhcIlVua25vd24gdmFsdWUgdHlwZTogJXNcIiwgdXRpbHMudHlwZUlkZW50aWZpZXIoZGVmaW5pdGlvbikpO1xuICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfVxufVxuXG5mdW5jdGlvbiBkZWNvZGVNZW1vcnlSZWZlcmVuY2UoZGVmaW5pdGlvbiwgcG9pbnRlciwgaW5mbykge1xuICBjb25zdCB7IHN0YXRlIH0gPSBpbmZvO1xuICBkZWJ1ZyhcInBvaW50ZXIgJW9cIiwgcG9pbnRlcik7XG4gIGxldCByYXdWYWx1ZSA9IHJlYWQocG9pbnRlciwgc3RhdGUpO1xuICBpZiAocmF3VmFsdWUgPT0gdW5kZWZpbmVkKSB7XG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfVxuXG4gIHJhd1ZhbHVlID0gdXRpbHMudG9CaWdOdW1iZXIocmF3VmFsdWUpLnRvTnVtYmVyKCk7XG5cbiAgdmFyIGJ5dGVzO1xuICBzd2l0Y2ggKHV0aWxzLnR5cGVDbGFzcyhkZWZpbml0aW9uKSkge1xuXG4gICAgY2FzZSBcImJ5dGVzXCI6XG4gICAgY2FzZSBcInN0cmluZ1wiOlxuICAgICAgYnl0ZXMgPSByZWFkKHtcbiAgICAgICAgbWVtb3J5OiB7IHN0YXJ0OiByYXdWYWx1ZSwgbGVuZ3RoOiBfdXRpbHMuV09SRF9TSVpFIH1cbiAgICAgIH0sIHN0YXRlKTsgLy8gYnl0ZXMgY29udGFpbiBsZW5ndGhcblxuICAgICAgbGV0IGNoaWxkUG9pbnRlciA9IHtcbiAgICAgICAgbWVtb3J5OiB7IHN0YXJ0OiByYXdWYWx1ZSArIF91dGlscy5XT1JEX1NJWkUsIGxlbmd0aDogYnl0ZXMgfVxuICAgICAgfTtcblxuICAgICAgcmV0dXJuIGRlY29kZVZhbHVlKGRlZmluaXRpb24sIGNoaWxkUG9pbnRlciwgaW5mbyk7XG5cbiAgICBjYXNlIFwiYXJyYXlcIjpcbiAgICAgIGJ5dGVzID0gdXRpbHMudG9CaWdOdW1iZXIocmVhZCh7XG4gICAgICAgIG1lbW9yeTogeyBzdGFydDogcmF3VmFsdWUsIGxlbmd0aDogX3V0aWxzLldPUkRfU0laRSB9XG4gICAgICB9LCBzdGF0ZSkpLnRvTnVtYmVyKCk7IC8vIGJ5dGVzIGNvbnRhaW4gYXJyYXkgbGVuZ3RoXG5cbiAgICAgIGJ5dGVzID0gcmVhZCh7IG1lbW9yeToge1xuICAgICAgICAgIHN0YXJ0OiByYXdWYWx1ZSArIF91dGlscy5XT1JEX1NJWkUsIGxlbmd0aDogYnl0ZXMgKiBfdXRpbHMuV09SRF9TSVpFXG4gICAgICAgIH0gfSwgc3RhdGUpOyAvLyBub3cgYnl0ZXMgY29udGFpbiBpdGVtc1xuXG4gICAgICByZXR1cm4gbWVtb3J5LmNodW5rKGJ5dGVzLCBfdXRpbHMuV09SRF9TSVpFKS5tYXAoY2h1bmsgPT4gZGVjb2RlKHV0aWxzLmJhc2VEZWZpbml0aW9uKGRlZmluaXRpb24pLCB7XG4gICAgICAgIGxpdGVyYWw6IGNodW5rXG4gICAgICB9LCBpbmZvKSk7XG5cbiAgICBjYXNlIFwic3RydWN0XCI6XG4gICAgICBjb25zdCB7IHNjb3BlcyB9ID0gaW5mbztcblxuICAgICAgLy8gRGVjbGFyYXRpb24gcmVmZXJlbmNlIHVzdWFsbHkgYXBwZWFycyBpbiBgdHlwZU5hbWVgLCBidXQgZm9yXG4gICAgICAvLyB7IG5vZGVUeXBlOiBcIkZ1bmN0aW9uQ2FsbFwiLCBraW5kOiBcInN0cnVjdENvbnN0cnVjdG9yQ2FsbFwiIH0sIHRoaXNcbiAgICAgIC8vIHJlZmVyZW5jZSBhcHBlYXJzIHRvIGxpdmUgaW4gYGV4cHJlc3Npb25gXG4gICAgICBjb25zdCByZWZlcmVuY2VkRGVjbGFyYXRpb24gPSBkZWZpbml0aW9uLnR5cGVOYW1lID8gZGVmaW5pdGlvbi50eXBlTmFtZS5yZWZlcmVuY2VkRGVjbGFyYXRpb24gOiBkZWZpbml0aW9uLmV4cHJlc3Npb24ucmVmZXJlbmNlZERlY2xhcmF0aW9uO1xuXG4gICAgICBsZXQgeyB2YXJpYWJsZXMgfSA9IHNjb3Blc1tyZWZlcmVuY2VkRGVjbGFyYXRpb25dIHx8IHt9O1xuXG4gICAgICByZXR1cm4gKDAsIF9hc3NpZ24yLmRlZmF1bHQpKHt9LCAuLi4odmFyaWFibGVzIHx8IFtdKS5tYXAoKHsgbmFtZSwgaWQgfSwgaSkgPT4ge1xuICAgICAgICBsZXQgbWVtYmVyRGVmaW5pdGlvbiA9IHNjb3Blc1tpZF0uZGVmaW5pdGlvbjtcbiAgICAgICAgbGV0IG1lbWJlclBvaW50ZXIgPSB7XG4gICAgICAgICAgbWVtb3J5OiB7IHN0YXJ0OiByYXdWYWx1ZSArIGkgKiBfdXRpbHMuV09SRF9TSVpFLCBsZW5ndGg6IF91dGlscy5XT1JEX1NJWkUgfVxuICAgICAgICB9O1xuICAgICAgICAvLyBsZXQgbWVtYmVyUG9pbnRlciA9IG1lbW9yeS5yZWFkKHN0YXRlLm1lbW9yeSwgcG9pbnRlciArIGkgKiBXT1JEX1NJWkUpO1xuXG4gICAgICAgIC8vIEhBQ0tcbiAgICAgICAgbWVtYmVyRGVmaW5pdGlvbiA9ICgwLCBfZXh0ZW5kczMuZGVmYXVsdCkoe30sIG1lbWJlckRlZmluaXRpb24sIHtcblxuICAgICAgICAgIHR5cGVEZXNjcmlwdGlvbnM6ICgwLCBfZXh0ZW5kczMuZGVmYXVsdCkoe30sIG1lbWJlckRlZmluaXRpb24udHlwZURlc2NyaXB0aW9ucywge1xuXG4gICAgICAgICAgICB0eXBlSWRlbnRpZmllcjogbWVtYmVyRGVmaW5pdGlvbi50eXBlRGVzY3JpcHRpb25zLnR5cGVJZGVudGlmaWVyLnJlcGxhY2UoL19zdG9yYWdlXy9nLCBcIl9tZW1vcnlfXCIpXG4gICAgICAgICAgfSlcbiAgICAgICAgfSk7XG5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBbbmFtZV06IGRlY29kZShtZW1iZXJEZWZpbml0aW9uLCBtZW1iZXJQb2ludGVyLCBpbmZvKVxuICAgICAgICB9O1xuICAgICAgfSkpO1xuXG4gICAgZGVmYXVsdDpcbiAgICAgIGRlYnVnKFwiVW5rbm93biBtZW1vcnkgcmVmZXJlbmNlIHR5cGU6ICVzXCIsIHV0aWxzLnR5cGVJZGVudGlmaWVyKGRlZmluaXRpb24pKTtcbiAgICAgIHJldHVybiB1bmRlZmluZWQ7XG5cbiAgfVxufVxuXG5mdW5jdGlvbiBkZWNvZGVTdG9yYWdlUmVmZXJlbmNlKGRlZmluaXRpb24sIHBvaW50ZXIsIGluZm8pIHtcbiAgdmFyIGRhdGE7XG4gIHZhciBieXRlcztcbiAgdmFyIGxlbmd0aDtcbiAgdmFyIHNsb3Q7XG5cbiAgY29uc3QgeyBzdGF0ZSB9ID0gaW5mbztcblxuICBzd2l0Y2ggKHV0aWxzLnR5cGVDbGFzcyhkZWZpbml0aW9uKSkge1xuICAgIGNhc2UgXCJhcnJheVwiOlxuICAgICAgZGVidWcoXCJzdG9yYWdlIGFycmF5ISAlb1wiLCBwb2ludGVyKTtcbiAgICAgIGRhdGEgPSByZWFkKHBvaW50ZXIsIHN0YXRlKTtcbiAgICAgIGlmICghZGF0YSkge1xuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgfVxuXG4gICAgICBsZW5ndGggPSB1dGlscy50b0JpZ051bWJlcihkYXRhKS50b051bWJlcigpO1xuICAgICAgZGVidWcoXCJsZW5ndGggJW9cIiwgbGVuZ3RoKTtcblxuICAgICAgY29uc3QgYmFzZVNpemUgPSB1dGlscy5zdG9yYWdlU2l6ZSh1dGlscy5iYXNlRGVmaW5pdGlvbihkZWZpbml0aW9uKSk7XG4gICAgICBjb25zdCBwZXJXb3JkID0gTWF0aC5mbG9vcihfdXRpbHMuV09SRF9TSVpFIC8gYmFzZVNpemUpO1xuICAgICAgZGVidWcoXCJiYXNlU2l6ZSAlb1wiLCBiYXNlU2l6ZSk7XG4gICAgICBkZWJ1ZyhcInBlcldvcmQgJWRcIiwgcGVyV29yZCk7XG5cbiAgICAgIGNvbnN0IG9mZnNldCA9IGkgPT4ge1xuICAgICAgICBpZiAocGVyV29yZCA9PSAxKSB7XG4gICAgICAgICAgcmV0dXJuIGk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gTWF0aC5mbG9vcihpICogYmFzZVNpemUgLyBfdXRpbHMuV09SRF9TSVpFKTtcbiAgICAgIH07XG5cbiAgICAgIGNvbnN0IGluZGV4ID0gaSA9PiB7XG4gICAgICAgIGlmIChwZXJXb3JkID09IDEpIHtcbiAgICAgICAgICByZXR1cm4gX3V0aWxzLldPUkRfU0laRSAtIGJhc2VTaXplO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgcG9zaXRpb24gPSBwZXJXb3JkIC0gaSAlIHBlcldvcmQgLSAxO1xuICAgICAgICByZXR1cm4gcG9zaXRpb24gKiBiYXNlU2l6ZTtcbiAgICAgIH07XG5cbiAgICAgIGxldCBmcm9tID0ge1xuICAgICAgICBzbG90OiB1dGlscy5ub3JtYWxpemVTbG90KHBvaW50ZXIuc3RvcmFnZS5mcm9tLnNsb3QpLFxuICAgICAgICBpbmRleDogcG9pbnRlci5zdG9yYWdlLmZyb20uaW5kZXhcbiAgICAgIH07XG5cbiAgICAgIGRlYnVnKFwicG9pbnRlcjogJW9cIiwgcG9pbnRlcik7XG4gICAgICByZXR1cm4gWy4uLkFycmF5KGxlbmd0aCkua2V5cygpXS5tYXAoaSA9PiB7XG4gICAgICAgIGxldCBjaGlsZEZyb20gPSB7XG4gICAgICAgICAgc2xvdDoge1xuICAgICAgICAgICAgcGF0aDogZnJvbS5zbG90LnBhdGggaW5zdGFuY2VvZiBBcnJheSA/IGZyb20uc2xvdC5wYXRoIDogW2Zyb20uc2xvdF0sXG4gICAgICAgICAgICBvZmZzZXQ6IG9mZnNldChpKVxuICAgICAgICAgIH0sXG4gICAgICAgICAgaW5kZXg6IGluZGV4KGkpXG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiBjaGlsZEZyb207XG4gICAgICB9KS5tYXAoKGNoaWxkRnJvbSwgaWR4KSA9PiB7XG4gICAgICAgIGRlYnVnKFwiY2hpbGRGcm9tICVkLCAlb1wiLCBpZHgsIGNoaWxkRnJvbSk7XG4gICAgICAgIHJldHVybiBkZWNvZGUodXRpbHMuYmFzZURlZmluaXRpb24oZGVmaW5pdGlvbiksIHsgc3RvcmFnZToge1xuICAgICAgICAgICAgZnJvbTogY2hpbGRGcm9tLFxuICAgICAgICAgICAgbGVuZ3RoOiBiYXNlU2l6ZVxuICAgICAgICAgIH0gfSwgaW5mbyk7XG4gICAgICB9KTtcblxuICAgIGNhc2UgXCJieXRlc1wiOlxuICAgIGNhc2UgXCJzdHJpbmdcIjpcbiAgICAgIGRhdGEgPSByZWFkKHBvaW50ZXIsIHN0YXRlKTtcbiAgICAgIGlmIChkYXRhID09IHVuZGVmaW5lZCkge1xuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgfVxuXG4gICAgICBkZWJ1ZyhcImRhdGEgJU9cIiwgZGF0YSk7XG4gICAgICBsZXQgbGVuZ3RoQnl0ZSA9IGRhdGFbX3V0aWxzLldPUkRfU0laRSAtIDFdO1xuICAgICAgaWYgKCFsZW5ndGhCeXRlKSB7XG4gICAgICAgIGxlbmd0aEJ5dGUgPSAwO1xuICAgICAgfVxuXG4gICAgICBpZiAobGVuZ3RoQnl0ZSAlIDIgPT0gMCkge1xuICAgICAgICAvLyBzdHJpbmcgbGl2ZXMgaW4gd29yZCwgbGVuZ3RoIGlzIGxhc3QgYnl0ZSAvIDJcbiAgICAgICAgbGVuZ3RoID0gbGVuZ3RoQnl0ZSAvIDI7XG4gICAgICAgIGRlYnVnKFwiaW4td29yZDsgbGVuZ3RoICVvXCIsIGxlbmd0aCk7XG4gICAgICAgIGlmIChsZW5ndGggPT0gMCkge1xuICAgICAgICAgIHJldHVybiBcIlwiO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGRlY29kZVZhbHVlKGRlZmluaXRpb24sIHsgc3RvcmFnZToge1xuICAgICAgICAgICAgZnJvbTogeyBzbG90OiBwb2ludGVyLnN0b3JhZ2UuZnJvbS5zbG90LCBpbmRleDogMCB9LFxuICAgICAgICAgICAgdG86IHsgc2xvdDogcG9pbnRlci5zdG9yYWdlLmZyb20uc2xvdCwgaW5kZXg6IGxlbmd0aCAtIDEgfVxuICAgICAgICAgIH0gfSwgaW5mbyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBsZW5ndGggPSB1dGlscy50b0JpZ051bWJlcihkYXRhKS5taW51cygxKS5kaXYoMikudG9OdW1iZXIoKTtcbiAgICAgICAgZGVidWcoXCJuZXctd29yZCwgbGVuZ3RoICVvXCIsIGxlbmd0aCk7XG5cbiAgICAgICAgcmV0dXJuIGRlY29kZVZhbHVlKGRlZmluaXRpb24sIHsgc3RvcmFnZToge1xuICAgICAgICAgICAgZnJvbTogeyBzbG90OiBbcG9pbnRlci5zdG9yYWdlLmZyb20uc2xvdF0sIGluZGV4OiAwIH0sXG4gICAgICAgICAgICBsZW5ndGhcbiAgICAgICAgICB9IH0sIGluZm8pO1xuICAgICAgfVxuXG4gICAgY2FzZSBcInN0cnVjdFwiOlxuICAgICAgY29uc3QgeyBzY29wZXMgfSA9IGluZm87XG5cbiAgICAgIGNvbnN0IHJlZmVyZW5jZWREZWNsYXJhdGlvbiA9IGRlZmluaXRpb24udHlwZU5hbWUgPyBkZWZpbml0aW9uLnR5cGVOYW1lLnJlZmVyZW5jZWREZWNsYXJhdGlvbiA6IGRlZmluaXRpb24ucmVmZXJlbmNlZERlY2xhcmF0aW9uO1xuXG4gICAgICBjb25zdCB2YXJpYWJsZXMgPSAoc2NvcGVzW3JlZmVyZW5jZWREZWNsYXJhdGlvbl0gfHwge30pLnZhcmlhYmxlcyB8fCBbXTtcblxuICAgICAgbGV0IHNsb3Q7XG4gICAgICBpZiAocG9pbnRlci5zdG9yYWdlICE9IHVuZGVmaW5lZCkge1xuICAgICAgICBzbG90ID0gcG9pbnRlci5zdG9yYWdlLmZyb20uc2xvdDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHNsb3QgPSB1dGlscy5ub3JtYWxpemVTbG90KHV0aWxzLnRvQmlnTnVtYmVyKHJlYWQocG9pbnRlciwgc3RhdGUpKSk7XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IGFsbG9jYXRpb24gPSB1dGlscy5hbGxvY2F0ZURlY2xhcmF0aW9ucyh2YXJpYWJsZXMsIHNjb3Blcywgc2xvdCk7XG5cbiAgICAgIHJldHVybiAoMCwgX2Fzc2lnbjIuZGVmYXVsdCkoe30sIC4uLigwLCBfZW50cmllczIuZGVmYXVsdCkoYWxsb2NhdGlvbi5jaGlsZHJlbikubWFwKChbaWQsIGNoaWxkUG9pbnRlcl0pID0+ICh7XG4gICAgICAgIFtjaGlsZFBvaW50ZXIubmFtZV06IGRlY29kZShzY29wZXNbaWRdLmRlZmluaXRpb24sIHsgc3RvcmFnZTogY2hpbGRQb2ludGVyIH0sIGluZm8pXG4gICAgICB9KSkpO1xuXG4gICAgZGVmYXVsdDpcbiAgICAgIGRlYnVnKFwiVW5rbm93biBzdG9yYWdlIHJlZmVyZW5jZSB0eXBlOiAlc1wiLCB1dGlscy50eXBlSWRlbnRpZmllcihkZWZpbml0aW9uKSk7XG4gICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICB9XG59XG5cbmZ1bmN0aW9uIGRlY29kZU1hcHBpbmcoZGVmaW5pdGlvbiwgcG9pbnRlciwgaW5mbykge1xuICBpZiAoZGVmaW5pdGlvbi5yZWZlcmVuY2VkRGVjbGFyYXRpb24pIHtcbiAgICAvLyBhdHRlbXB0aW5nIHRvIGRlY29kZSByZWZlcmVuY2UgdG8gbWFwcGluZywgdGh1cyBtaXNzaW5nIHZhbGlkIHBvaW50ZXJcbiAgICByZXR1cm4gdW5kZWZpbmVkO1xuICB9XG5cbiAgY29uc3QgeyBtYXBwaW5nS2V5cyB9ID0gaW5mbztcblxuICBkZWJ1ZyhcIm1hcHBpbmcgJU9cIiwgcG9pbnRlcik7XG4gIGRlYnVnKFwibWFwcGluZyBkZWZpbml0aW9uICVPXCIsIGRlZmluaXRpb24pO1xuICBsZXQga2V5cyA9IG1hcHBpbmdLZXlzW2RlZmluaXRpb24uaWRdIHx8IFtdO1xuICBkZWJ1ZyhcImtub3duIGtleXMgJW9cIiwga2V5cyk7XG5cbiAgbGV0IGtleURlZmluaXRpb24gPSBkZWZpbml0aW9uLnR5cGVOYW1lLmtleVR5cGU7XG4gIGxldCB2YWx1ZURlZmluaXRpb24gPSBkZWZpbml0aW9uLnR5cGVOYW1lLnZhbHVlVHlwZTtcblxuICBsZXQgYmFzZVNsb3QgPSBwb2ludGVyLnN0b3JhZ2UuZnJvbS5zbG90O1xuICBpZiAoIUFycmF5LmlzQXJyYXkoYmFzZVNsb3QpKSB7XG4gICAgYmFzZVNsb3QgPSBbYmFzZVNsb3RdO1xuICB9XG5cbiAgbGV0IG1hcHBpbmcgPSB7fTtcbiAgZGVidWcoXCJtYXBwaW5nICVPXCIsIG1hcHBpbmcpO1xuICBmb3IgKGxldCBrZXkgb2Yga2V5cykge1xuICAgIGxldCBrZXlQb2ludGVyID0geyBcImxpdGVyYWxcIjoga2V5IH07XG4gICAgbGV0IHZhbHVlUG9pbnRlciA9IHtcbiAgICAgIHN0b3JhZ2U6IHtcbiAgICAgICAgZnJvbToge1xuICAgICAgICAgIHNsb3Q6IFtrZXksIC4uLmJhc2VTbG90XSxcbiAgICAgICAgICBpbmRleDogMFxuICAgICAgICB9LFxuICAgICAgICB0bzoge1xuICAgICAgICAgIHNsb3Q6IFtrZXksIC4uLmJhc2VTbG90XSxcbiAgICAgICAgICBpbmRleDogMzFcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG4gICAgZGVidWcoXCJrZXlQb2ludGVyICVvXCIsIGtleVBvaW50ZXIpO1xuXG4gICAgLy8gTk9URSBtYXBwaW5nIGtleXMgYXJlIHBvdGVudGlhbGx5IGxvc3N5IGJlY2F1c2UgSlMgb25seSBsaWtlcyBzdHJpbmdzXG4gICAgbGV0IGtleVZhbHVlID0gZGVjb2RlKGtleURlZmluaXRpb24sIGtleVBvaW50ZXIsIGluZm8pO1xuICAgIGRlYnVnKFwia2V5VmFsdWUgJW9cIiwga2V5VmFsdWUpO1xuICAgIGlmIChrZXlWYWx1ZSAhPSB1bmRlZmluZWQpIHtcbiAgICAgIG1hcHBpbmdba2V5VmFsdWUudG9TdHJpbmcoKV0gPSBkZWNvZGUodmFsdWVEZWZpbml0aW9uLCB2YWx1ZVBvaW50ZXIsIGluZm8pO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBtYXBwaW5nO1xufVxuXG5mdW5jdGlvbiBkZWNvZGUoZGVmaW5pdGlvbiwgcG9pbnRlciwgaW5mbykge1xuICBpZiAocG9pbnRlci5saXRlcmFsICE9IHVuZGVmaW5lZCkge1xuICAgIHJldHVybiBkZWNvZGVWYWx1ZShkZWZpbml0aW9uLCBwb2ludGVyLCBpbmZvKTtcbiAgfVxuXG4gIGNvbnN0IGlkZW50aWZpZXIgPSB1dGlscy50eXBlSWRlbnRpZmllcihkZWZpbml0aW9uKTtcbiAgaWYgKHV0aWxzLmlzUmVmZXJlbmNlKGRlZmluaXRpb24pKSB7XG4gICAgc3dpdGNoICh1dGlscy5yZWZlcmVuY2VUeXBlKGRlZmluaXRpb24pKSB7XG4gICAgICBjYXNlIFwibWVtb3J5XCI6XG4gICAgICAgIGRlYnVnKFwiZGVjb2RpbmcgbWVtb3J5IHJlZmVyZW5jZSwgdHlwZTogJXNcIiwgaWRlbnRpZmllcik7XG4gICAgICAgIHJldHVybiBkZWNvZGVNZW1vcnlSZWZlcmVuY2UoZGVmaW5pdGlvbiwgcG9pbnRlciwgaW5mbyk7XG4gICAgICBjYXNlIFwic3RvcmFnZVwiOlxuICAgICAgICBkZWJ1ZyhcImRlY29kaW5nIHN0b3JhZ2UgcmVmZXJlbmNlLCB0eXBlOiAlc1wiLCBpZGVudGlmaWVyKTtcbiAgICAgICAgcmV0dXJuIGRlY29kZVN0b3JhZ2VSZWZlcmVuY2UoZGVmaW5pdGlvbiwgcG9pbnRlciwgaW5mbyk7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICBkZWJ1ZyhcIlVua25vd24gcmVmZXJlbmNlIGNhdGVnb3J5OiAlc1wiLCB1dGlscy50eXBlSWRlbnRpZmllcihkZWZpbml0aW9uKSk7XG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuICB9XG5cbiAgaWYgKHV0aWxzLmlzTWFwcGluZyhkZWZpbml0aW9uKSkge1xuICAgIGRlYnVnKFwiZGVjb2RpbmcgbWFwcGluZywgdHlwZTogJXNcIiwgaWRlbnRpZmllcik7XG4gICAgcmV0dXJuIGRlY29kZU1hcHBpbmcoZGVmaW5pdGlvbiwgcG9pbnRlciwgaW5mbyk7XG4gIH1cblxuICBkZWJ1ZyhcImRlY29kaW5nIHZhbHVlLCB0eXBlOiAlc1wiLCBpZGVudGlmaWVyKTtcbiAgcmV0dXJuIGRlY29kZVZhbHVlKGRlZmluaXRpb24sIHBvaW50ZXIsIGluZm8pO1xufVxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL2xpYi9kYXRhL2RlY29kZS9pbmRleC5qcyIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5yZWFkID0gcmVhZDtcbmV4cG9ydHMucmVhZEJ5dGVzID0gcmVhZEJ5dGVzO1xuZXhwb3J0cy5jaHVuayA9IGNodW5rO1xuXG52YXIgX2RlYnVnID0gcmVxdWlyZShcImRlYnVnXCIpO1xuXG52YXIgX2RlYnVnMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2RlYnVnKTtcblxudmFyIF9iaWdudW1iZXIgPSByZXF1aXJlKFwiYmlnbnVtYmVyLmpzXCIpO1xuXG52YXIgX3V0aWxzID0gcmVxdWlyZShcIi4vdXRpbHNcIik7XG5cbnZhciB1dGlscyA9IF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKF91dGlscyk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKG9iaikgeyBpZiAob2JqICYmIG9iai5fX2VzTW9kdWxlKSB7IHJldHVybiBvYmo7IH0gZWxzZSB7IHZhciBuZXdPYmogPSB7fTsgaWYgKG9iaiAhPSBudWxsKSB7IGZvciAodmFyIGtleSBpbiBvYmopIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGtleSkpIG5ld09ialtrZXldID0gb2JqW2tleV07IH0gfSBuZXdPYmouZGVmYXVsdCA9IG9iajsgcmV0dXJuIG5ld09iajsgfSB9XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmNvbnN0IGRlYnVnID0gKDAsIF9kZWJ1ZzIuZGVmYXVsdCkoXCJkZWJ1Z2dlcjpkYXRhOmRlY29kZTptZW1vcnlcIik7XG5cbi8qKlxuICogcmVhZCB3b3JkIGZyb20gbWVtb3J5XG4gKlxuICogcmVxdWlyZXMgYGJ5dGVgIHRvIGJlIGEgbXVsdGlwbGUgb2YgV09SRF9TSVpFICgzMilcbiAqXG4gKiBAcGFyYW0gbWVtb3J5IC0gVWludDhBcnJheVxuICogQHJldHVybiB7QmlnTnVtYmVyfVxuICovXG5mdW5jdGlvbiByZWFkKG1lbW9yeSwgYnl0ZSkge1xuICByZXR1cm4gcmVhZEJ5dGVzKG1lbW9yeSwgYnl0ZSwgX3V0aWxzLldPUkRfU0laRSk7XG59XG5cbi8qKlxuICogcmVhZCA8Ynl0ZXM+IGFtb3VudCBvZiBieXRlcyBmcm9tIG1lbW9yeSwgc3RhcnRpbmcgYXQgYnl0ZSA8c3RhcnQ+XG4gKlxuICogQHBhcmFtIG1lbW9yeSAtIFVpbnQ4QXJyYXlcbiAqL1xuZnVuY3Rpb24gcmVhZEJ5dGVzKG1lbW9yeSwgYnl0ZSwgbGVuZ3RoKSB7XG4gIGJ5dGUgPSB1dGlscy50b0JpZ051bWJlcihieXRlKTtcbiAgbGVuZ3RoID0gdXRpbHMudG9CaWdOdW1iZXIobGVuZ3RoKTtcblxuICBpZiAoYnl0ZS50b051bWJlcigpID49IG1lbW9yeS5sZW5ndGgpIHtcbiAgICByZXR1cm4gbmV3IFVpbnQ4QXJyYXkobGVuZ3RoID8gbGVuZ3RoLnRvTnVtYmVyKCkgOiAwKTtcbiAgfVxuXG4gIGlmIChsZW5ndGggPT0gdW5kZWZpbmVkKSB7XG4gICAgcmV0dXJuIG5ldyBVaW50OEFycmF5KG1lbW9yeS5idWZmZXIsIGJ5dGUudG9OdW1iZXIoKSk7XG4gIH1cblxuICAvLyBncmFiIGBsZW5ndGhgIGJ5dGVzIG5vIG1hdHRlciB3aGF0LCBoZXJlIGZpbGwgdGhpcyBhcnJheVxuICB2YXIgYnl0ZXMgPSBuZXcgVWludDhBcnJheShsZW5ndGgudG9OdW1iZXIoKSk7XG5cbiAgLy8gaWYgd2UncmUgcmVhZGluZyBwYXN0IHRoZSBlbmQgb2YgbWVtb3J5LCB0cnVuY2F0ZSB0aGUgbGVuZ3RoIHRvIHJlYWRcbiAgbGV0IGV4Y2VzcyA9IGJ5dGUucGx1cyhsZW5ndGgpLm1pbnVzKG1lbW9yeS5sZW5ndGgpLnRvTnVtYmVyKCk7XG4gIGlmIChleGNlc3MgPiAwKSB7XG4gICAgbGVuZ3RoID0gbmV3IF9iaWdudW1iZXIuQmlnTnVtYmVyKG1lbW9yeS5sZW5ndGgpLm1pbnVzKGJ5dGUpO1xuICB9XG5cbiAgbGV0IGV4aXN0aW5nID0gbmV3IFVpbnQ4QXJyYXkobWVtb3J5LmJ1ZmZlciwgYnl0ZS50b051bWJlcigpLCBsZW5ndGgudG9OdW1iZXIoKSk7XG5cbiAgYnl0ZXMuc2V0KGV4aXN0aW5nKTtcblxuICByZXR1cm4gYnl0ZXM7XG59XG5cbi8qKlxuICogU3BsaXQgbWVtb3J5IGludG8gY2h1bmtzXG4gKi9cbmZ1bmN0aW9uIGNodW5rKG1lbW9yeSwgc2l6ZSA9IF91dGlscy5XT1JEX1NJWkUpIHtcbiAgbGV0IGNodW5rcyA9IFtdO1xuXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgbWVtb3J5Lmxlbmd0aDsgaSArPSBzaXplKSB7XG4gICAgbGV0IGNodW5rID0gcmVhZEJ5dGVzKG1lbW9yeSwgaSwgc2l6ZSk7XG4gICAgY2h1bmtzLnB1c2goY2h1bmspO1xuICB9XG5cbiAgcmV0dXJuIGNodW5rcztcbn1cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9saWIvZGF0YS9kZWNvZGUvbWVtb3J5LmpzIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5cbnZhciBfZXh0ZW5kczIgPSByZXF1aXJlKFwiYmFiZWwtcnVudGltZS9oZWxwZXJzL2V4dGVuZHNcIik7XG5cbnZhciBfZXh0ZW5kczMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9leHRlbmRzMik7XG5cbmV4cG9ydHMuc2xvdEFkZHJlc3MgPSBzbG90QWRkcmVzcztcbmV4cG9ydHMucmVhZCA9IHJlYWQ7XG5leHBvcnRzLnJlYWRSYW5nZSA9IHJlYWRSYW5nZTtcblxudmFyIF9kZWJ1ZyA9IHJlcXVpcmUoXCJkZWJ1Z1wiKTtcblxudmFyIF9kZWJ1ZzIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9kZWJ1Zyk7XG5cbnZhciBfdXRpbHMgPSByZXF1aXJlKFwiLi91dGlsc1wiKTtcblxudmFyIHV0aWxzID0gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQoX3V0aWxzKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQob2JqKSB7IGlmIChvYmogJiYgb2JqLl9fZXNNb2R1bGUpIHsgcmV0dXJuIG9iajsgfSBlbHNlIHsgdmFyIG5ld09iaiA9IHt9OyBpZiAob2JqICE9IG51bGwpIHsgZm9yICh2YXIga2V5IGluIG9iaikgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwga2V5KSkgbmV3T2JqW2tleV0gPSBvYmpba2V5XTsgfSB9IG5ld09iai5kZWZhdWx0ID0gb2JqOyByZXR1cm4gbmV3T2JqOyB9IH1cblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuY29uc3QgZGVidWcgPSAoMCwgX2RlYnVnMi5kZWZhdWx0KShcImRlYnVnZ2VyOmRhdGE6ZGVjb2RlOnN0b3JhZ2VcIik7XG5cbi8qKlxuICogY29udmVydCBhIHNsb3QgdG8gYSB3b3JkIGNvcnJlc3BvbmRpbmcgdG8gYWN0dWFsIHN0b3JhZ2UgYWRkcmVzc1xuICpcbiAqIGlmIGBzbG90YCBpcyBhbiBhcnJheSwgcmV0dXJuIGhhc2ggb2YgYXJyYXkgdmFsdWVzLlxuICogaWYgYHNsb3RgIGFycmF5IGlzIG5lc3RlZCwgcmVjdXJzZSBvbiBzdWItYXJyYXlzXG4gKlxuICogQHBhcmFtIHNsb3QgLSBudW1iZXIgb3IgcG9zc2libHktbmVzdGVkIGFycmF5IG9mIG51bWJlcnNcbiAqL1xuZnVuY3Rpb24gc2xvdEFkZHJlc3Moc2xvdCkge1xuICBpZiAoc2xvdCBpbnN0YW5jZW9mIEFycmF5KSB7XG4gICAgcmV0dXJuIHV0aWxzLmtlY2NhazI1NiguLi5zbG90Lm1hcChzbG90QWRkcmVzcykpO1xuICB9IGVsc2UgaWYgKHR5cGVvZiBzbG90ID09IFwib2JqZWN0XCIgJiYgc2xvdC5wYXRoICE9IHVuZGVmaW5lZCkge1xuICAgIGxldCB7IHBhdGgsIG9mZnNldCB9ID0gc2xvdDtcbiAgICByZXR1cm4gdXRpbHMudG9CaWdOdW1iZXIoc2xvdEFkZHJlc3MocGF0aCkpLnBsdXMob2Zmc2V0KTtcbiAgfSBlbHNlIGlmICh0eXBlb2Ygc2xvdCA9PSBcInN0cmluZ1wiICYmIHNsb3Quc2xpY2UoMCwgMikgPT0gXCIweFwiKSB7XG4gICAgcmV0dXJuIHV0aWxzLnRvQmlnTnVtYmVyKHNsb3QpO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBzbG90O1xuICB9XG59XG5cbi8qKlxuICogcmVhZCBzbG90IGZyb20gc3RvcmFnZVxuICpcbiAqIEBwYXJhbSBzbG90IC0gYmlnIG51bWJlciBvciBhcnJheSBvZiByZWd1bGFyIG51bWJlcnNcbiAqIEBwYXJhbSBvZmZzZXQgLSBmb3IgYXJyYXksIG9mZnNldCBmcm9tIHRoZSBrZWNjYWsgZGV0ZXJtaW5lZCBsb2NhdGlvblxuICovXG5mdW5jdGlvbiByZWFkKHN0b3JhZ2UsIHNsb3QpIHtcbiAgY29uc3QgYWRkcmVzcyA9IHNsb3RBZGRyZXNzKHNsb3QpO1xuXG4gIGRlYnVnKFwicmVhZGluZyBzbG90OiAlb1wiLCB1dGlscy50b0hleFN0cmluZyhhZGRyZXNzKSk7XG5cbiAgbGV0IHdvcmQgPSBzdG9yYWdlW3V0aWxzLnRvSGV4U3RyaW5nKGFkZHJlc3MsIF91dGlscy5XT1JEX1NJWkUpXSB8fCBuZXcgVWludDhBcnJheShfdXRpbHMuV09SRF9TSVpFKTtcblxuICBkZWJ1ZyhcIndvcmQgJW9cIiwgd29yZCk7XG4gIHJldHVybiB3b3JkO1xufVxuXG4vKipcbiAqIHJlYWQgYWxsIGJ5dGVzIGluIHNvbWUgcmFuZ2UuXG4gKlxuICogcGFyYW1ldGVycyBgZnJvbWAgYW5kIGB0b2AgYXJlIG9iamVjdHMgd2l0aCB0aGUgZm9sbG93aW5nIHByb3BlcnRpZXM6XG4gKlxuICogICBzbG90IC0gKHJlcXVpcmVkKSBvbmUgb2YgdGhlIGZvbGxvd2luZzpcbiAqICAgICAtIGEgbGl0ZXJhbCB2YWx1ZSByZWZlcnJpbmcgdG8gYSBzbG90IChhIG51bWJlciwgYSBieXRlc3RyaW5nLCBldGMuKVxuICpcbiAqICAgICAtIGEgXCJwYXRoXCIgYXJyYXkgb2YgbGl0ZXJhbCB2YWx1ZXNcbiAqICAgICAgIHBhdGggYXJyYXkgdmFsdWVzIGdldCBjb252ZXJ0ZWQgaW50byBrZWNjYWsyNTYgaGFzaCBhcyBwZXIgc29saWRpdHlcbiAqICAgICAgIHN0b3JhZ2UgYWxsb2NhdGlvbiBtZXRob2QsIGFmdGVyIHJlY3Vyc2luZy5cbiAqXG4gKiAgICAgLSBhbiBvYmplY3QgeyBwYXRoLCBvZmZzZXQgfSwgd2hlcmUgcGF0aCBpcyBvbmUgb2YgdGhlIGFib3ZlIF5cbiAqICAgICAgIG9mZnNldCB2YWx1ZXMgaW5kaWNhdGUgc2VxdWVudGlhbCBhZGRyZXNzIG9mZnNldCwgcG9zdC1rZWNjYWtcbiAqXG4gKiAgICAgcmVmOiBodHRwczovL3NvbGlkaXR5LnJlYWR0aGVkb2NzLmlvL2VuL3YwLjQuMjMvbWlzY2VsbGFuZW91cy5odG1sI2xheW91dC1vZi1zdGF0ZS12YXJpYWJsZXMtaW4tc3RvcmFnZVxuICogICAgIChzZWFyY2ggXCJjb25jYXRlbmF0aW9uXCIpXG4gKlxuICogIGluZGV4IC0gKGRlZmF1bHQ6IDApIGJ5dGUgaW5kZXggaW4gd29yZFxuICpcbiAqIEBwYXJhbSBmcm9tIC0gbG9jYXRpb24gKHNlZSBeKVxuICogQHBhcmFtIHRvIC0gbG9jYXRpb24gKHNlZSBeKS4gaW5jbHVzaXZlLlxuICogQHBhcmFtIGxlbmd0aCAtIGluc3RlYWQgb2YgYHRvYCwgbnVtYmVyIG9mIGJ5dGVzIGFmdGVyIGBmcm9tYFxuICovXG5mdW5jdGlvbiByZWFkUmFuZ2Uoc3RvcmFnZSwgcmFuZ2UpIHtcbiAgZGVidWcoXCJyZWFkUmFuZ2UgJW9cIiwgcmFuZ2UpO1xuXG4gIGxldCB7IGZyb20sIHRvLCBsZW5ndGggfSA9IHJhbmdlO1xuICBpZiAoIWxlbmd0aCAmJiAhdG8gfHwgbGVuZ3RoICYmIHRvKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwibXVzdCBzcGVjaWZ5IGV4YWN0bHkgb25lIGB0b2B8YGxlbmd0aGBcIik7XG4gIH1cblxuICBmcm9tID0ge1xuICAgIHNsb3Q6IHV0aWxzLm5vcm1hbGl6ZVNsb3QoZnJvbS5zbG90KSxcbiAgICBpbmRleDogZnJvbS5pbmRleCB8fCAwXG4gIH07XG5cbiAgaWYgKGxlbmd0aCkge1xuICAgIHRvID0ge1xuICAgICAgc2xvdDoge1xuICAgICAgICBwYXRoOiBmcm9tLnNsb3QucGF0aCxcbiAgICAgICAgb2Zmc2V0OiBmcm9tLnNsb3Qub2Zmc2V0ICsgTWF0aC5mbG9vcigoZnJvbS5pbmRleCArIGxlbmd0aCAtIDEpIC8gX3V0aWxzLldPUkRfU0laRSlcbiAgICAgIH0sXG4gICAgICBpbmRleDogKGZyb20uaW5kZXggKyBsZW5ndGggLSAxKSAlIF91dGlscy5XT1JEX1NJWkVcbiAgICB9O1xuICB9IGVsc2Uge1xuICAgIHRvID0ge1xuICAgICAgc2xvdDogdXRpbHMubm9ybWFsaXplU2xvdCh0by5zbG90KSxcbiAgICAgIGluZGV4OiB0by5pbmRleFxuICAgIH07XG4gIH1cblxuICBkZWJ1ZyhcIm5vcm1hbGl6ZWQgcmVhZFJhbmdlICVvXCIsIHsgZnJvbSwgdG8gfSk7XG5cbiAgY29uc3QgdG90YWxXb3JkcyA9IHRvLnNsb3Qub2Zmc2V0IC0gZnJvbS5zbG90Lm9mZnNldCArIDE7XG4gIGRlYnVnKFwidG90YWxXb3JkcyAlb1wiLCB0b3RhbFdvcmRzKTtcblxuICBsZXQgZGF0YSA9IG5ldyBVaW50OEFycmF5KHRvdGFsV29yZHMgKiBfdXRpbHMuV09SRF9TSVpFKTtcblxuICBmb3IgKGxldCBpID0gMDsgaSA8IHRvdGFsV29yZHM7IGkrKykge1xuICAgIGxldCBvZmZzZXQgPSBpICsgZnJvbS5zbG90Lm9mZnNldDtcbiAgICBkYXRhLnNldChyZWFkKHN0b3JhZ2UsICgwLCBfZXh0ZW5kczMuZGVmYXVsdCkoe30sIGZyb20uc2xvdCwgeyBvZmZzZXQgfSkpLCBpICogX3V0aWxzLldPUkRfU0laRSk7XG4gIH1cbiAgZGVidWcoXCJ3b3JkcyAlb1wiLCBkYXRhKTtcblxuICBkYXRhID0gZGF0YS5zbGljZShmcm9tLmluZGV4LCAodG90YWxXb3JkcyAtIDEpICogX3V0aWxzLldPUkRfU0laRSArIHRvLmluZGV4ICsgMSk7XG5cbiAgZGVidWcoXCJkYXRhOiAlb1wiLCBkYXRhKTtcblxuICByZXR1cm4gZGF0YTtcbn1cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9saWIvZGF0YS9kZWNvZGUvc3RvcmFnZS5qcyIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy52aXNpdCA9IHZpc2l0O1xuZXhwb3J0cy5kb25lVmlzaXRpbmcgPSBkb25lVmlzaXRpbmc7XG5jb25zdCBWSVNJVCA9IGV4cG9ydHMuVklTSVQgPSBcIlZJU0lUXCI7XG5mdW5jdGlvbiB2aXNpdChzb3VyY2VJZCwgYXN0KSB7XG4gIHJldHVybiB7XG4gICAgdHlwZTogVklTSVQsXG4gICAgc291cmNlSWQsIGFzdFxuICB9O1xufVxuXG5jb25zdCBET05FX1ZJU0lUSU5HID0gZXhwb3J0cy5ET05FX1ZJU0lUSU5HID0gXCJET05FX1ZJU0lUSU5HXCI7XG5mdW5jdGlvbiBkb25lVmlzaXRpbmcoKSB7XG4gIHJldHVybiB7XG4gICAgdHlwZTogRE9ORV9WSVNJVElOR1xuICB9O1xufVxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL2xpYi9hc3QvYWN0aW9ucy9pbmRleC5qcyIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuXG52YXIgX2tleXMgPSByZXF1aXJlKFwiYmFiZWwtcnVudGltZS9jb3JlLWpzL29iamVjdC9rZXlzXCIpO1xuXG52YXIgX2tleXMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfa2V5cyk7XG5cbnZhciBfc2V0ID0gcmVxdWlyZShcImJhYmVsLXJ1bnRpbWUvY29yZS1qcy9zZXRcIik7XG5cbnZhciBfc2V0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3NldCk7XG5cbmV4cG9ydHMuc2FnYSA9IHNhZ2E7XG5cbnZhciBfZGVidWcgPSByZXF1aXJlKFwiZGVidWdcIik7XG5cbnZhciBfZGVidWcyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZGVidWcpO1xuXG52YXIgX2VmZmVjdHMgPSByZXF1aXJlKFwicmVkdXgtc2FnYS9lZmZlY3RzXCIpO1xuXG52YXIgX2hlbHBlcnMgPSByZXF1aXJlKFwibGliL2hlbHBlcnNcIik7XG5cbnZhciBfc2FnYXMgPSByZXF1aXJlKFwibGliL3RyYWNlL3NhZ2FzXCIpO1xuXG52YXIgdHJhY2UgPSBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChfc2FnYXMpO1xuXG52YXIgX2FjdGlvbnMgPSByZXF1aXJlKFwiLi4vYWN0aW9uc1wiKTtcblxudmFyIGFjdGlvbnMgPSBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChfYWN0aW9ucyk7XG5cbnZhciBfc2VsZWN0b3JzID0gcmVxdWlyZShcIi4uL3NlbGVjdG9yc1wiKTtcblxudmFyIF9zZWxlY3RvcnMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfc2VsZWN0b3JzKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQob2JqKSB7IGlmIChvYmogJiYgb2JqLl9fZXNNb2R1bGUpIHsgcmV0dXJuIG9iajsgfSBlbHNlIHsgdmFyIG5ld09iaiA9IHt9OyBpZiAob2JqICE9IG51bGwpIHsgZm9yICh2YXIga2V5IGluIG9iaikgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwga2V5KSkgbmV3T2JqW2tleV0gPSBvYmpba2V5XTsgfSB9IG5ld09iai5kZWZhdWx0ID0gb2JqOyByZXR1cm4gbmV3T2JqOyB9IH1cblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuY29uc3QgZGVidWcgPSAoMCwgX2RlYnVnMi5kZWZhdWx0KShcImRlYnVnZ2VyOmNvbnRyb2xsZXI6c2FnYXNcIik7XG5cbmNvbnN0IENPTlRST0xfU0FHQVMgPSB7XG4gIFthY3Rpb25zLkFEVkFOQ0VdOiBhZHZhbmNlLFxuICBbYWN0aW9ucy5TVEVQX05FWFRdOiBzdGVwTmV4dCxcbiAgW2FjdGlvbnMuU1RFUF9PVkVSXTogc3RlcE92ZXIsXG4gIFthY3Rpb25zLlNURVBfSU5UT106IHN0ZXBJbnRvLFxuICBbYWN0aW9ucy5TVEVQX09VVF06IHN0ZXBPdXQsXG4gIFthY3Rpb25zLkNPTlRJTlVFX1VOVElMXTogY29udGludWVVbnRpbFxufTtcblxuLyoqIEFTVCBub2RlIHR5cGVzIHRoYXQgYXJlIHNraXBwZWQgdG8gZmlsdGVyIG91dCBzb21lIG5vaXNlICovXG5jb25zdCBTS0lQUEVEX1RZUEVTID0gbmV3IF9zZXQyLmRlZmF1bHQoW1wiQ29udHJhY3REZWZpbml0aW9uXCIsIFwiVmFyaWFibGVEZWNsYXJhdGlvblwiXSk7XG5cbmZ1bmN0aW9uKiBzYWdhKCkge1xuICB3aGlsZSAodHJ1ZSkge1xuICAgIGRlYnVnKFwid2FpdGluZyBmb3IgY29udHJvbCBhY3Rpb25cIik7XG4gICAgbGV0IGFjdGlvbiA9IHlpZWxkICgwLCBfZWZmZWN0cy50YWtlKSgoMCwgX2tleXMyLmRlZmF1bHQpKENPTlRST0xfU0FHQVMpKTtcbiAgICBkZWJ1ZyhcImdvdCBjb250cm9sIGFjdGlvblwiKTtcbiAgICBsZXQgc2FnYSA9IENPTlRST0xfU0FHQVNbYWN0aW9uLnR5cGVdO1xuXG4gICAgeWllbGQgKDAsIF9lZmZlY3RzLnB1dCkoYWN0aW9ucy5iZWdpblN0ZXAoYWN0aW9uLnR5cGUpKTtcblxuICAgIHlpZWxkICgwLCBfZWZmZWN0cy5yYWNlKSh7XG4gICAgICBleGVjOiAoMCwgX2VmZmVjdHMuY2FsbCkoc2FnYSwgYWN0aW9uKSxcbiAgICAgIGludGVycnVwdDogKDAsIF9lZmZlY3RzLnRha2UpKGFjdGlvbnMuSU5URVJSVVBUKVxuICAgIH0pO1xuICB9XG59XG5cbmV4cG9ydHMuZGVmYXVsdCA9ICgwLCBfaGVscGVycy5wcmVmaXhOYW1lKShcImNvbnRyb2xsZXJcIiwgc2FnYSk7XG5cbi8qKlxuICogQWR2YW5jZSB0aGUgc3RhdGUgYnkgb25lIGluc3RydWN0aW9uXG4gKi9cblxuZnVuY3Rpb24qIGFkdmFuY2UoKSB7XG4gIC8vIHNlbmQgYWN0aW9uIHRvIGFkdmFuY2UgdHJhY2VcbiAgeWllbGQqIHRyYWNlLmFkdmFuY2UoKTtcbn1cblxuLyoqXG4gKiBzdGVwTmV4dCAtIHN0ZXAgdG8gdGhlIG5leHQgbG9naWNhbCBjb2RlIHNlZ21lbnRcbiAqXG4gKiBOb3RlOiBJdCBtaWdodCB0YWtlIG11bHRpcGxlIGluc3RydWN0aW9ucyB0byBleHByZXNzIHRoZSBzYW1lIHNlY3Rpb24gb2YgY29kZS5cbiAqIFwiU3RlcHBpbmdcIiwgdGhlbiwgaXMgc3RlcHBpbmcgdG8gdGhlIG5leHQgbG9naWNhbCBpdGVtLCBub3Qgc3RlcHBpbmcgdG8gdGhlIG5leHRcbiAqIGluc3RydWN0aW9uLiBTZWUgYWR2YW5jZSgpIGlmIHlvdSdkIGxpa2UgdG8gYWR2YW5jZSBieSBvbmUgaW5zdHJ1Y3Rpb24uXG4gKi9cbmZ1bmN0aW9uKiBzdGVwTmV4dCgpIHtcbiAgY29uc3Qgc3RhcnRpbmdSYW5nZSA9IHlpZWxkICgwLCBfZWZmZWN0cy5zZWxlY3QpKF9zZWxlY3RvcnMyLmRlZmF1bHQuY3VycmVudC5sb2NhdGlvbi5zb3VyY2VSYW5nZSk7XG5cbiAgdmFyIHVwY29taW5nO1xuXG4gIGRvIHtcbiAgICAvLyBhZHZhbmNlIGF0IGxlYXN0IG9uY2Ugc3RlcFxuICAgIHlpZWxkKiBhZHZhbmNlKCk7XG5cbiAgICAvLyBhbmQgY2hlY2sgdGhlIG5leHQgc291cmNlIHJhbmdlXG4gICAgdHJ5IHtcbiAgICAgIHVwY29taW5nID0geWllbGQgKDAsIF9lZmZlY3RzLnNlbGVjdCkoX3NlbGVjdG9yczIuZGVmYXVsdC5jdXJyZW50LmxvY2F0aW9uKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICB1cGNvbWluZyA9IG51bGw7XG4gICAgfVxuXG4gICAgLy8gaWYgdGhlIG5leHQgc3RlcCdzIHNvdXJjZSByYW5nZSBpcyBzdGlsbCB0aGUgc2FtZSwga2VlcCBnb2luZ1xuICB9IHdoaWxlICghdXBjb21pbmcgfHwgIXVwY29taW5nLm5vZGUgfHwgU0tJUFBFRF9UWVBFUy5oYXModXBjb21pbmcubm9kZS5ub2RlVHlwZSkgfHwgdXBjb21pbmcuc291cmNlUmFuZ2Uuc3RhcnQgPT0gc3RhcnRpbmdSYW5nZS5zdGFydCAmJiB1cGNvbWluZy5zb3VyY2VSYW5nZS5sZW5ndGggPT0gc3RhcnRpbmdSYW5nZS5sZW5ndGgpO1xufVxuXG4vKipcbiAqIHN0ZXBJbnRvIC0gc3RlcCBpbnRvIHRoZSBjdXJyZW50IGZ1bmN0aW9uXG4gKlxuICogQ29uY2VwdHVhbGx5IHRoaXMgaXMgZWFzeSwgYnV0IGZyb20gYSBwcm9ncmFtbWluZyBzdGFuZHBvaW50IGl0J3MgaGFyZC5cbiAqIENvZGUgbGlrZSBgZ2V0QmFsYW5jZShtc2cuc2VuZGVyKWAgbWlnaHQgYmUgaGlnaGxpZ2h0ZWQsIGJ1dCB0aGVyZSBjb3VsZFxuICogYmUgYSBudW1iZXIgb2YgZGlmZmVyZW50IGludGVybWVkaWF0ZSBzdGVwcyAobGlrZSBldmFsdWF0aW5nIGBtc2cuc2VuZGVyYClcbiAqIGJlZm9yZSBgZ2V0QmFsYW5jZWAgaXMgc3RlcHBlZCBpbnRvLiBUaGlzIGZ1bmN0aW9uIHdpbGwgc3RlcCBpbnRvIHRoZSBmaXJzdFxuICogZnVuY3Rpb24gYXZhaWxhYmxlICh3aGVyZSBpbnN0cnVjdGlvbi5qdW1wID09IFwiaVwiKSwgaWdub3JpbmcgYW55IGludGVybWVkaWF0ZVxuICogc3RlcHMgdGhhdCBmYWxsIHdpdGhpbiB0aGUgc2FtZSBjb2RlIHJhbmdlLiBJZiB0aGVyZSdzIGEgc3RlcCBlbmNvdW50ZXJlZFxuICogdGhhdCBleGlzdHMgb3V0c2lkZSBvZiB0aGUgcmFuZ2UsIHRoZW4gc3RlcEludG8gd2lsbCBvbmx5IGV4ZWN1dGUgdW50aWwgdGhhdFxuICogc3RlcC5cbiAqL1xuZnVuY3Rpb24qIHN0ZXBJbnRvKCkge1xuICBpZiAoeWllbGQgKDAsIF9lZmZlY3RzLnNlbGVjdCkoX3NlbGVjdG9yczIuZGVmYXVsdC5jdXJyZW50LndpbGxKdW1wKSkge1xuICAgIHlpZWxkKiBzdGVwTmV4dCgpO1xuXG4gICAgcmV0dXJuO1xuICB9XG5cbiAgaWYgKHlpZWxkICgwLCBfZWZmZWN0cy5zZWxlY3QpKF9zZWxlY3RvcnMyLmRlZmF1bHQuY3VycmVudC5sb2NhdGlvbi5pc011bHRpbGluZSkpIHtcbiAgICB5aWVsZCogc3RlcE92ZXIoKTtcblxuICAgIHJldHVybjtcbiAgfVxuXG4gIGNvbnN0IHN0YXJ0aW5nRGVwdGggPSB5aWVsZCAoMCwgX2VmZmVjdHMuc2VsZWN0KShfc2VsZWN0b3JzMi5kZWZhdWx0LmN1cnJlbnQuZnVuY3Rpb25EZXB0aCk7XG4gIGNvbnN0IHN0YXJ0aW5nUmFuZ2UgPSB5aWVsZCAoMCwgX2VmZmVjdHMuc2VsZWN0KShfc2VsZWN0b3JzMi5kZWZhdWx0LmN1cnJlbnQubG9jYXRpb24uc291cmNlUmFuZ2UpO1xuICB2YXIgY3VycmVudERlcHRoO1xuICB2YXIgY3VycmVudFJhbmdlO1xuXG4gIGRvIHtcbiAgICB5aWVsZCogc3RlcE5leHQoKTtcblxuICAgIGN1cnJlbnREZXB0aCA9IHlpZWxkICgwLCBfZWZmZWN0cy5zZWxlY3QpKF9zZWxlY3RvcnMyLmRlZmF1bHQuY3VycmVudC5mdW5jdGlvbkRlcHRoKTtcbiAgICBjdXJyZW50UmFuZ2UgPSB5aWVsZCAoMCwgX2VmZmVjdHMuc2VsZWN0KShfc2VsZWN0b3JzMi5kZWZhdWx0LmN1cnJlbnQubG9jYXRpb24uc291cmNlUmFuZ2UpO1xuICB9IHdoaWxlIChcbiAgLy8gdGhlIGZ1bmN0aW9uIHN0YWNrIGhhcyBub3QgaW5jcmVhc2VkLFxuICBjdXJyZW50RGVwdGggPD0gc3RhcnRpbmdEZXB0aCAmJlxuXG4gIC8vIHRoZSBjdXJyZW50IHNvdXJjZSByYW5nZSBiZWdpbnMgb24gb3IgYWZ0ZXIgdGhlIHN0YXJ0aW5nIHJhbmdlXG4gIGN1cnJlbnRSYW5nZS5zdGFydCA+PSBzdGFydGluZ1JhbmdlLnN0YXJ0ICYmXG5cbiAgLy8gYW5kIHRoZSBjdXJyZW50IHJhbmdlIGVuZHMgb24gb3IgYmVmb3JlIHRoZSBzdGFydGluZyByYW5nZSBlbmRzXG4gIGN1cnJlbnRSYW5nZS5zdGFydCArIGN1cnJlbnRSYW5nZS5sZW5ndGggPD0gc3RhcnRpbmdSYW5nZS5zdGFydCArIHN0YXJ0aW5nUmFuZ2UubGVuZ3RoKTtcbn1cblxuLyoqXG4gKiBTdGVwIG91dCBvZiB0aGUgY3VycmVudCBmdW5jdGlvblxuICpcbiAqIFRoaXMgd2lsbCBydW4gdW50aWwgdGhlIGRlYnVnZ2VyIGVuY291bnRlcnMgYSBkZWNyZWFzZSBpbiBmdW5jdGlvbiBkZXB0aC5cbiAqL1xuZnVuY3Rpb24qIHN0ZXBPdXQoKSB7XG4gIGlmICh5aWVsZCAoMCwgX2VmZmVjdHMuc2VsZWN0KShfc2VsZWN0b3JzMi5kZWZhdWx0LmN1cnJlbnQubG9jYXRpb24uaXNNdWx0aWxpbmUpKSB7XG4gICAgeWllbGQqIHN0ZXBPdmVyKCk7XG5cbiAgICByZXR1cm47XG4gIH1cblxuICBjb25zdCBzdGFydGluZ0RlcHRoID0geWllbGQgKDAsIF9lZmZlY3RzLnNlbGVjdCkoX3NlbGVjdG9yczIuZGVmYXVsdC5jdXJyZW50LmZ1bmN0aW9uRGVwdGgpO1xuICB2YXIgY3VycmVudERlcHRoO1xuXG4gIGRvIHtcbiAgICB5aWVsZCogc3RlcE5leHQoKTtcblxuICAgIGN1cnJlbnREZXB0aCA9IHlpZWxkICgwLCBfZWZmZWN0cy5zZWxlY3QpKF9zZWxlY3RvcnMyLmRlZmF1bHQuY3VycmVudC5mdW5jdGlvbkRlcHRoKTtcbiAgfSB3aGlsZSAoY3VycmVudERlcHRoID49IHN0YXJ0aW5nRGVwdGgpO1xufVxuXG4vKipcbiAqIHN0ZXBPdmVyIC0gc3RlcCBvdmVyIHRoZSBjdXJyZW50IGxpbmVcbiAqXG4gKiBTdGVwIG92ZXIgdGhlIGN1cnJlbnQgbGluZS4gVGhpcyB3aWxsIHN0ZXAgdG8gdGhlIG5leHQgaW5zdHJ1Y3Rpb24gdGhhdFxuICogZXhpc3RzIG9uIGEgZGlmZmVyZW50IGxpbmUgb2YgY29kZSB3aXRoaW4gdGhlIHNhbWUgZnVuY3Rpb24gZGVwdGguXG4gKi9cbmZ1bmN0aW9uKiBzdGVwT3ZlcigpIHtcbiAgY29uc3Qgc3RhcnRpbmdEZXB0aCA9IHlpZWxkICgwLCBfZWZmZWN0cy5zZWxlY3QpKF9zZWxlY3RvcnMyLmRlZmF1bHQuY3VycmVudC5mdW5jdGlvbkRlcHRoKTtcbiAgY29uc3Qgc3RhcnRpbmdSYW5nZSA9IHlpZWxkICgwLCBfZWZmZWN0cy5zZWxlY3QpKF9zZWxlY3RvcnMyLmRlZmF1bHQuY3VycmVudC5sb2NhdGlvbi5zb3VyY2VSYW5nZSk7XG4gIHZhciBjdXJyZW50RGVwdGg7XG4gIHZhciBjdXJyZW50UmFuZ2U7XG5cbiAgZG8ge1xuICAgIHlpZWxkKiBzdGVwTmV4dCgpO1xuXG4gICAgY3VycmVudERlcHRoID0geWllbGQgKDAsIF9lZmZlY3RzLnNlbGVjdCkoX3NlbGVjdG9yczIuZGVmYXVsdC5jdXJyZW50LmZ1bmN0aW9uRGVwdGgpO1xuICAgIGN1cnJlbnRSYW5nZSA9IHlpZWxkICgwLCBfZWZmZWN0cy5zZWxlY3QpKF9zZWxlY3RvcnMyLmRlZmF1bHQuY3VycmVudC5sb2NhdGlvbi5zb3VyY2VSYW5nZSk7XG4gIH0gd2hpbGUgKFxuICAvLyBrZWVwIHN0ZXBwaW5nIHByb3ZpZGVkOlxuICAvL1xuICAvLyB3ZSBoYXZlbid0IGp1bXBlZCBvdXRcbiAgIShjdXJyZW50RGVwdGggPCBzdGFydGluZ0RlcHRoKSAmJiAoXG5cbiAgLy8gZWl0aGVyOiBmdW5jdGlvbiBkZXB0aCBpcyBncmVhdGVyIHRoYW4gc3RhcnRpbmcgKGlnbm9yZSBmdW5jdGlvbiBjYWxscylcbiAgLy8gb3IsIGlmIHdlJ3JlIGF0IHRoZSBzYW1lIGRlcHRoLCBrZWVwIHN0ZXBwaW5nIHVudGlsIHdlJ3JlIG9uIGEgbmV3XG4gIC8vIGxpbmUuXG4gIGN1cnJlbnREZXB0aCA+IHN0YXJ0aW5nRGVwdGggfHwgY3VycmVudFJhbmdlLmxpbmVzLnN0YXJ0LmxpbmUgPT0gc3RhcnRpbmdSYW5nZS5saW5lcy5zdGFydC5saW5lKSk7XG59XG5cbi8qKlxuICogY29udGludWVVbnRpbCAtIHN0ZXAgdGhyb3VnaCBleGVjdXRpb24gdW50aWwgYSBicmVha3BvaW50XG4gKlxuICogQHBhcmFtIGJyZWFrcG9pbnRzIC0gYXJyYXkgb2YgYnJlYWtwb2ludHMgKHsgLi4uY2FsbCwgbGluZSB9KVxuICovXG5mdW5jdGlvbiogY29udGludWVVbnRpbCh7IGJyZWFrcG9pbnRzIH0pIHtcbiAgdmFyIGN1cnJlbnRDYWxsO1xuICB2YXIgY3VycmVudExvY2F0aW9uO1xuXG4gIGxldCBicmVha3BvaW50SGl0ID0gZmFsc2U7XG5cbiAgZG8ge1xuICAgIHlpZWxkKiBzdGVwTmV4dCgpO1xuXG4gICAgY3VycmVudENhbGwgPSB5aWVsZCAoMCwgX2VmZmVjdHMuc2VsZWN0KShfc2VsZWN0b3JzMi5kZWZhdWx0LmN1cnJlbnQuZXhlY3V0aW9uQ29udGV4dCk7XG4gICAgY3VycmVudExvY2F0aW9uID0geWllbGQgKDAsIF9lZmZlY3RzLnNlbGVjdCkoX3NlbGVjdG9yczIuZGVmYXVsdC5jdXJyZW50LmxvY2F0aW9uKTtcblxuICAgIGJyZWFrcG9pbnRIaXQgPSBicmVha3BvaW50cy5maWx0ZXIoKHsgYWRkcmVzcywgYmluYXJ5LCBsaW5lLCBub2RlIH0pID0+IChhZGRyZXNzID09IGN1cnJlbnRDYWxsLmFkZHJlc3MgfHwgYmluYXJ5ID09IGN1cnJlbnRDYWxsLmJpbmFyeSkgJiYgKGxpbmUgPT0gY3VycmVudExvY2F0aW9uLnNvdXJjZVJhbmdlLmxpbmVzLnN0YXJ0LmxpbmUgfHwgbm9kZSA9PSBjdXJyZW50TG9jYXRpb24ubm9kZS5pZCkpLmxlbmd0aCA+IDA7XG4gIH0gd2hpbGUgKCFicmVha3BvaW50SGl0KTtcbn1cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9saWIvY29udHJvbGxlci9zYWdhcy9pbmRleC5qcyIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuXG52YXIgX2RlYnVnID0gcmVxdWlyZShcImRlYnVnXCIpO1xuXG52YXIgX2RlYnVnMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2RlYnVnKTtcblxudmFyIF9yZXNlbGVjdFRyZWUgPSByZXF1aXJlKFwicmVzZWxlY3QtdHJlZVwiKTtcblxudmFyIF9zZWxlY3RvcnMgPSByZXF1aXJlKFwibGliL2V2bS9zZWxlY3RvcnNcIik7XG5cbnZhciBfc2VsZWN0b3JzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3NlbGVjdG9ycyk7XG5cbnZhciBfc2VsZWN0b3JzMyA9IHJlcXVpcmUoXCJsaWIvc29saWRpdHkvc2VsZWN0b3JzXCIpO1xuXG52YXIgX3NlbGVjdG9yczQgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9zZWxlY3RvcnMzKTtcblxudmFyIF9zZWxlY3RvcnM1ID0gcmVxdWlyZShcImxpYi9hc3Qvc2VsZWN0b3JzXCIpO1xuXG52YXIgX3NlbGVjdG9yczYgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9zZWxlY3RvcnM1KTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuY29uc3QgZGVidWcgPSAoMCwgX2RlYnVnMi5kZWZhdWx0KShcImRlYnVnZ2VyOmNvbnRyb2xsZXI6c2FnYXNcIik7XG5cbi8qKlxuICogQHByaXZhdGVcbiAqL1xuY29uc3QgaWRlbnRpdHkgPSB4ID0+IHg7XG5cbi8qKlxuICogY29udHJvbGxlclxuICovXG5jb25zdCBjb250cm9sbGVyID0gKDAsIF9yZXNlbGVjdFRyZWUuY3JlYXRlU2VsZWN0b3JUcmVlKSh7XG5cbiAgLyoqXG4gICAqIGNvbnRyb2xsZXIuY3VycmVudFxuICAgKi9cbiAgY3VycmVudDoge1xuICAgIC8qKlxuICAgICAqIGNvbnRyb2xsZXIuY3VycmVudC5mdW5jdGlvbkRlcHRoXG4gICAgICovXG4gICAgZnVuY3Rpb25EZXB0aDogKDAsIF9yZXNlbGVjdFRyZWUuY3JlYXRlTGVhZikoW19zZWxlY3RvcnM0LmRlZmF1bHQuY3VycmVudC5mdW5jdGlvbkRlcHRoXSwgaWRlbnRpdHkpLFxuXG4gICAgLyoqXG4gICAgICogY29udHJvbGxlci5jdXJyZW50LmV4ZWN1dGlvbkNvbnRleHRcbiAgICAgKi9cbiAgICBleGVjdXRpb25Db250ZXh0OiAoMCwgX3Jlc2VsZWN0VHJlZS5jcmVhdGVMZWFmKShbX3NlbGVjdG9yczIuZGVmYXVsdC5jdXJyZW50LmNhbGxdLCBpZGVudGl0eSksXG5cbiAgICAvKipcbiAgICAgKiBjb250cm9sbGVyLmN1cnJlbnQud2lsbEp1bXBcbiAgICAgKi9cbiAgICB3aWxsSnVtcDogKDAsIF9yZXNlbGVjdFRyZWUuY3JlYXRlTGVhZikoW19zZWxlY3RvcnMyLmRlZmF1bHQuY3VycmVudC5zdGVwLmlzSnVtcF0sIGlkZW50aXR5KSxcblxuICAgIC8qKlxuICAgICAqIGNvbnRyb2xsZXIuY3VycmVudC5sb2NhdGlvblxuICAgICAqL1xuICAgIGxvY2F0aW9uOiB7XG4gICAgICAvKipcbiAgICAgICAqIGNvbnRyb2xsZXIuY3VycmVudC5sb2NhdGlvbi5zb3VyY2VSYW5nZVxuICAgICAgICovXG4gICAgICBzb3VyY2VSYW5nZTogKDAsIF9yZXNlbGVjdFRyZWUuY3JlYXRlTGVhZikoW19zZWxlY3RvcnM0LmRlZmF1bHQuY3VycmVudC5zb3VyY2VSYW5nZV0sIGlkZW50aXR5KSxcblxuICAgICAgLyoqXG4gICAgICAgKiBjb250cm9sbGVyLmN1cnJlbnQubG9jYXRpb24ubm9kZVxuICAgICAgICovXG4gICAgICBub2RlOiAoMCwgX3Jlc2VsZWN0VHJlZS5jcmVhdGVMZWFmKShbX3NlbGVjdG9yczYuZGVmYXVsdC5jdXJyZW50Lm5vZGVdLCBpZGVudGl0eSksXG5cbiAgICAgIC8qKlxuICAgICAgICogY29udHJvbGxlci5jdXJyZW50LmxvY2F0aW9uLmlzTXVsdGlsaW5lXG4gICAgICAgKi9cbiAgICAgIGlzTXVsdGlsaW5lOiAoMCwgX3Jlc2VsZWN0VHJlZS5jcmVhdGVMZWFmKShbX3NlbGVjdG9yczQuZGVmYXVsdC5jdXJyZW50LmlzTXVsdGlsaW5lXSwgaWRlbnRpdHkpXG4gICAgfVxuICB9XG59KTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gY29udHJvbGxlcjtcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9saWIvY29udHJvbGxlci9zZWxlY3RvcnMvaW5kZXguanMiLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuYWRkU291cmNlID0gYWRkU291cmNlO1xuZXhwb3J0cy5hZGRTb3VyY2VNYXAgPSBhZGRTb3VyY2VNYXA7XG5leHBvcnRzLnNhZ2EgPSBzYWdhO1xuXG52YXIgX2RlYnVnID0gcmVxdWlyZShcImRlYnVnXCIpO1xuXG52YXIgX2RlYnVnMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2RlYnVnKTtcblxudmFyIF9lZmZlY3RzID0gcmVxdWlyZShcInJlZHV4LXNhZ2EvZWZmZWN0c1wiKTtcblxudmFyIF9oZWxwZXJzID0gcmVxdWlyZShcImxpYi9oZWxwZXJzXCIpO1xuXG52YXIgX2FjdGlvbnMgPSByZXF1aXJlKFwiLi4vYWN0aW9uc1wiKTtcblxudmFyIGFjdGlvbnMgPSBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChfYWN0aW9ucyk7XG5cbnZhciBfYWN0aW9uczIgPSByZXF1aXJlKFwibGliL3RyYWNlL2FjdGlvbnNcIik7XG5cbnZhciBfc2VsZWN0b3JzID0gcmVxdWlyZShcIi4uL3NlbGVjdG9yc1wiKTtcblxudmFyIF9zZWxlY3RvcnMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfc2VsZWN0b3JzKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQob2JqKSB7IGlmIChvYmogJiYgb2JqLl9fZXNNb2R1bGUpIHsgcmV0dXJuIG9iajsgfSBlbHNlIHsgdmFyIG5ld09iaiA9IHt9OyBpZiAob2JqICE9IG51bGwpIHsgZm9yICh2YXIga2V5IGluIG9iaikgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwga2V5KSkgbmV3T2JqW2tleV0gPSBvYmpba2V5XTsgfSB9IG5ld09iai5kZWZhdWx0ID0gb2JqOyByZXR1cm4gbmV3T2JqOyB9IH1cblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuY29uc3QgZGVidWcgPSAoMCwgX2RlYnVnMi5kZWZhdWx0KShcImRlYnVnZ2VyOnNvbGlkaXR5OnNhZ2FzXCIpO1xuXG5mdW5jdGlvbiogYWRkU291cmNlKHNvdXJjZSwgc291cmNlUGF0aCwgYXN0KSB7XG4gIHlpZWxkICgwLCBfZWZmZWN0cy5wdXQpKGFjdGlvbnMuYWRkU291cmNlKHNvdXJjZSwgc291cmNlUGF0aCwgYXN0KSk7XG59XG5cbmZ1bmN0aW9uKiBhZGRTb3VyY2VNYXAoYmluYXJ5LCBzb3VyY2VNYXApIHtcbiAgeWllbGQgKDAsIF9lZmZlY3RzLnB1dCkoYWN0aW9ucy5hZGRTb3VyY2VNYXAoYmluYXJ5LCBzb3VyY2VNYXApKTtcbn1cblxuZnVuY3Rpb24qIHRpY2tTYWdhKCkge1xuICB3aGlsZSAodHJ1ZSkge1xuICAgIHlpZWxkICgwLCBfZWZmZWN0cy50YWtlKShfYWN0aW9uczIuVElDSyk7XG4gICAgZGVidWcoXCJnb3QgVElDS1wiKTtcblxuICAgIHlpZWxkKiBmdW5jdGlvbkRlcHRoU2FnYSgpO1xuICB9XG59XG5cbmZ1bmN0aW9uKiBmdW5jdGlvbkRlcHRoU2FnYSgpIHtcbiAgaWYgKHlpZWxkICgwLCBfZWZmZWN0cy5zZWxlY3QpKF9zZWxlY3RvcnMyLmRlZmF1bHQuY3VycmVudC53aWxsSnVtcCkpIHtcbiAgICBsZXQganVtcERpcmVjdGlvbiA9IHlpZWxkICgwLCBfZWZmZWN0cy5zZWxlY3QpKF9zZWxlY3RvcnMyLmRlZmF1bHQuY3VycmVudC5qdW1wRGlyZWN0aW9uKTtcblxuICAgIHlpZWxkICgwLCBfZWZmZWN0cy5wdXQpKGFjdGlvbnMuanVtcChqdW1wRGlyZWN0aW9uKSk7XG4gIH1cbn1cblxuZnVuY3Rpb24qIHNhZ2EoKSB7XG4gIHlpZWxkICgwLCBfZWZmZWN0cy5jYWxsKSh0aWNrU2FnYSk7XG59XG5cbmV4cG9ydHMuZGVmYXVsdCA9ICgwLCBfaGVscGVycy5wcmVmaXhOYW1lKShcInNvbGlkaXR5XCIsIHNhZ2EpO1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL2xpYi9zb2xpZGl0eS9zYWdhcy9pbmRleC5qcyIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5hZGRDb250ZXh0ID0gYWRkQ29udGV4dDtcbmV4cG9ydHMuYWRkSW5zdGFuY2UgPSBhZGRJbnN0YW5jZTtcbmV4cG9ydHMuYmVnaW4gPSBiZWdpbjtcbmV4cG9ydHMuY2FsbHN0YWNrU2FnYSA9IGNhbGxzdGFja1NhZ2E7XG5leHBvcnRzLnNhZ2EgPSBzYWdhO1xuXG52YXIgX2RlYnVnID0gcmVxdWlyZShcImRlYnVnXCIpO1xuXG52YXIgX2RlYnVnMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2RlYnVnKTtcblxudmFyIF9lZmZlY3RzID0gcmVxdWlyZShcInJlZHV4LXNhZ2EvZWZmZWN0c1wiKTtcblxudmFyIF9oZWxwZXJzID0gcmVxdWlyZShcImxpYi9oZWxwZXJzXCIpO1xuXG52YXIgX2FjdGlvbnMgPSByZXF1aXJlKFwibGliL3RyYWNlL2FjdGlvbnNcIik7XG5cbnZhciBfYWN0aW9uczIgPSByZXF1aXJlKFwiLi4vYWN0aW9uc1wiKTtcblxudmFyIGFjdGlvbnMgPSBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChfYWN0aW9uczIpO1xuXG52YXIgX3NlbGVjdG9ycyA9IHJlcXVpcmUoXCIuLi9zZWxlY3RvcnNcIik7XG5cbnZhciBfc2VsZWN0b3JzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3NlbGVjdG9ycyk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKG9iaikgeyBpZiAob2JqICYmIG9iai5fX2VzTW9kdWxlKSB7IHJldHVybiBvYmo7IH0gZWxzZSB7IHZhciBuZXdPYmogPSB7fTsgaWYgKG9iaiAhPSBudWxsKSB7IGZvciAodmFyIGtleSBpbiBvYmopIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGtleSkpIG5ld09ialtrZXldID0gb2JqW2tleV07IH0gfSBuZXdPYmouZGVmYXVsdCA9IG9iajsgcmV0dXJuIG5ld09iajsgfSB9XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmNvbnN0IGRlYnVnID0gKDAsIF9kZWJ1ZzIuZGVmYXVsdCkoXCJkZWJ1Z2dlcjpldm06c2FnYXNcIik7XG5cbi8qKlxuICogQWRkcyBFVk0gYnl0ZWNvZGUgY29udGV4dFxuICpcbiAqIEByZXR1cm4ge3N0cmluZ30gSUQgKDB4LXByZWZpeGVkIGtlY2NhayBvZiBiaW5hcnkpXG4gKi9cbmZ1bmN0aW9uKiBhZGRDb250ZXh0KGNvbnRyYWN0TmFtZSwgYmluYXJ5KSB7XG4gIHlpZWxkICgwLCBfZWZmZWN0cy5wdXQpKGFjdGlvbnMuYWRkQ29udGV4dChjb250cmFjdE5hbWUsIGJpbmFyeSkpO1xuXG4gIHJldHVybiAoMCwgX2hlbHBlcnMua2VjY2FrMjU2KShiaW5hcnkpO1xufVxuXG4vKipcbiAqIEFkZHMga25vd24gZGVwbG95ZWQgaW5zdGFuY2Ugb2YgYmluYXJ5IGF0IGFkZHJlc3NcbiAqXG4gKiBAcmV0dXJuIHtzdHJpbmd9IElEICgweC1wcmVmaXhlZCBrZWNjYWsgb2YgYmluYXJ5KVxuICovXG5mdW5jdGlvbiogYWRkSW5zdGFuY2UoYWRkcmVzcywgYmluYXJ5KSB7XG4gIGxldCBzZWFyY2ggPSB5aWVsZCAoMCwgX2VmZmVjdHMuc2VsZWN0KShfc2VsZWN0b3JzMi5kZWZhdWx0LmluZm8uYmluYXJpZXMuc2VhcmNoKTtcbiAgaWYgKGJpbmFyeSAhPSBcIjB4MFwiKSB7XG4gICAgbGV0IHsgY29udGV4dCB9ID0gc2VhcmNoKGJpbmFyeSk7XG5cbiAgICB5aWVsZCAoMCwgX2VmZmVjdHMucHV0KShhY3Rpb25zLmFkZEluc3RhbmNlKGFkZHJlc3MsIGNvbnRleHQsIGJpbmFyeSkpO1xuXG4gICAgcmV0dXJuIGNvbnRleHQ7XG4gIH1cbn1cblxuZnVuY3Rpb24qIGJlZ2luKHsgYWRkcmVzcywgYmluYXJ5IH0pIHtcbiAgaWYgKGFkZHJlc3MpIHtcbiAgICB5aWVsZCAoMCwgX2VmZmVjdHMucHV0KShhY3Rpb25zLmNhbGwoYWRkcmVzcykpO1xuICB9IGVsc2Uge1xuICAgIHlpZWxkICgwLCBfZWZmZWN0cy5wdXQpKGFjdGlvbnMuY3JlYXRlKGJpbmFyeSkpO1xuICB9XG59XG5cbmZ1bmN0aW9uKiBjYWxsc3RhY2tTYWdhKCkge1xuICB3aGlsZSAodHJ1ZSkge1xuICAgIHlpZWxkICgwLCBfZWZmZWN0cy50YWtlKShfYWN0aW9ucy5USUNLKTtcbiAgICBkZWJ1ZyhcImdvdCBUSUNLXCIpO1xuXG4gICAgaWYgKHlpZWxkICgwLCBfZWZmZWN0cy5zZWxlY3QpKF9zZWxlY3RvcnMyLmRlZmF1bHQuY3VycmVudC5zdGVwLmlzQ2FsbCkpIHtcbiAgICAgIGRlYnVnKFwiZ290IGNhbGxcIik7XG4gICAgICBsZXQgYWRkcmVzcyA9IHlpZWxkICgwLCBfZWZmZWN0cy5zZWxlY3QpKF9zZWxlY3RvcnMyLmRlZmF1bHQuY3VycmVudC5zdGVwLmNhbGxBZGRyZXNzKTtcblxuICAgICAgeWllbGQgKDAsIF9lZmZlY3RzLnB1dCkoYWN0aW9ucy5jYWxsKGFkZHJlc3MpKTtcbiAgICB9IGVsc2UgaWYgKHlpZWxkICgwLCBfZWZmZWN0cy5zZWxlY3QpKF9zZWxlY3RvcnMyLmRlZmF1bHQuY3VycmVudC5zdGVwLmlzQ3JlYXRlKSkge1xuICAgICAgZGVidWcoXCJnb3QgY3JlYXRlXCIpO1xuICAgICAgbGV0IGJpbmFyeSA9IHlpZWxkICgwLCBfZWZmZWN0cy5zZWxlY3QpKF9zZWxlY3RvcnMyLmRlZmF1bHQuY3VycmVudC5zdGVwLmNyZWF0ZUJpbmFyeSk7XG5cbiAgICAgIHlpZWxkICgwLCBfZWZmZWN0cy5wdXQpKGFjdGlvbnMuY3JlYXRlKGJpbmFyeSkpO1xuICAgIH0gZWxzZSBpZiAoeWllbGQgKDAsIF9lZmZlY3RzLnNlbGVjdCkoX3NlbGVjdG9yczIuZGVmYXVsdC5jdXJyZW50LnN0ZXAuaXNIYWx0aW5nKSkge1xuICAgICAgZGVidWcoXCJnb3QgcmV0dXJuXCIpO1xuICAgICAgeWllbGQgKDAsIF9lZmZlY3RzLnB1dCkoYWN0aW9ucy5yZXR1cm5DYWxsKCkpO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiogc2FnYSgpIHtcbiAgeWllbGQgKDAsIF9lZmZlY3RzLmNhbGwpKGNhbGxzdGFja1NhZ2EpO1xufVxuXG5leHBvcnRzLmRlZmF1bHQgPSAoMCwgX2hlbHBlcnMucHJlZml4TmFtZSkoXCJldm1cIiwgc2FnYSk7XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vbGliL2V2bS9zYWdhcy9pbmRleC5qcyIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5pbnNwZWN0VHJhbnNhY3Rpb24gPSBpbnNwZWN0VHJhbnNhY3Rpb247XG5leHBvcnRzLm9idGFpbkJpbmFyaWVzID0gb2J0YWluQmluYXJpZXM7XG5leHBvcnRzLnNhZ2EgPSBzYWdhO1xuXG52YXIgX2RlYnVnID0gcmVxdWlyZShcImRlYnVnXCIpO1xuXG52YXIgX2RlYnVnMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2RlYnVnKTtcblxudmFyIF9lZmZlY3RzID0gcmVxdWlyZShcInJlZHV4LXNhZ2EvZWZmZWN0c1wiKTtcblxudmFyIF9oZWxwZXJzID0gcmVxdWlyZShcImxpYi9oZWxwZXJzXCIpO1xuXG52YXIgX2FjdGlvbnMgPSByZXF1aXJlKFwiLi4vYWN0aW9uc1wiKTtcblxudmFyIGFjdGlvbnMgPSBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChfYWN0aW9ucyk7XG5cbnZhciBfYWRhcHRlciA9IHJlcXVpcmUoXCIuLi9hZGFwdGVyXCIpO1xuXG52YXIgX2FkYXB0ZXIyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfYWRhcHRlcik7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKG9iaikgeyBpZiAob2JqICYmIG9iai5fX2VzTW9kdWxlKSB7IHJldHVybiBvYmo7IH0gZWxzZSB7IHZhciBuZXdPYmogPSB7fTsgaWYgKG9iaiAhPSBudWxsKSB7IGZvciAodmFyIGtleSBpbiBvYmopIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGtleSkpIG5ld09ialtrZXldID0gb2JqW2tleV07IH0gfSBuZXdPYmouZGVmYXVsdCA9IG9iajsgcmV0dXJuIG5ld09iajsgfSB9XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmNvbnN0IGRlYnVnID0gKDAsIF9kZWJ1ZzIuZGVmYXVsdCkoXCJkZWJ1Z2dlcjp3ZWIzOnNhZ2FzXCIpO1xuXG5mdW5jdGlvbiogZmV0Y2hUcmFuc2FjdGlvbkluZm8oYWRhcHRlciwgeyB0eEhhc2ggfSkge1xuICBkZWJ1ZyhcImluc3BlY3RpbmcgdHJhbnNhY3Rpb25cIik7XG4gIHZhciB0cmFjZTtcbiAgdHJ5IHtcbiAgICB0cmFjZSA9IHlpZWxkICgwLCBfZWZmZWN0cy5hcHBseSkoYWRhcHRlciwgYWRhcHRlci5nZXRUcmFjZSwgW3R4SGFzaF0pO1xuICB9IGNhdGNoIChlKSB7XG4gICAgZGVidWcoXCJwdXR0aW5nIGVycm9yXCIpO1xuICAgIHlpZWxkICgwLCBfZWZmZWN0cy5wdXQpKGFjdGlvbnMuZXJyb3IoZSkpO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGRlYnVnKFwiZ290IHRyYWNlXCIpO1xuICB5aWVsZCAoMCwgX2VmZmVjdHMucHV0KShhY3Rpb25zLnJlY2VpdmVUcmFjZSh0cmFjZSkpO1xuXG4gIGxldCB0eCA9IHlpZWxkICgwLCBfZWZmZWN0cy5hcHBseSkoYWRhcHRlciwgYWRhcHRlci5nZXRUcmFuc2FjdGlvbiwgW3R4SGFzaF0pO1xuICBpZiAodHgudG8gJiYgdHgudG8gIT0gXCIweDBcIikge1xuICAgIHlpZWxkICgwLCBfZWZmZWN0cy5wdXQpKGFjdGlvbnMucmVjZWl2ZUNhbGwoeyBhZGRyZXNzOiB0eC50byB9KSk7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgbGV0IHJlY2VpcHQgPSB5aWVsZCAoMCwgX2VmZmVjdHMuYXBwbHkpKGFkYXB0ZXIsIGFkYXB0ZXIuZ2V0UmVjZWlwdCwgW3R4SGFzaF0pO1xuICBpZiAocmVjZWlwdC5jb250cmFjdEFkZHJlc3MpIHtcbiAgICB5aWVsZCAoMCwgX2VmZmVjdHMucHV0KShhY3Rpb25zLnJlY2VpdmVDYWxsKHsgYmluYXJ5OiB0eC5pbnB1dCB9KSk7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdGhyb3cgbmV3IEVycm9yKFwiQ291bGQgbm90IGZpbmQgY29udHJhY3QgYXNzb2NpYXRlZCB3aXRoIHRyYW5zYWN0aW9uLiBcIiArIFwiUGxlYXNlIG1ha2Ugc3VyZSB5b3UncmUgZGVidWdnaW5nIGEgdHJhbnNhY3Rpb24gdGhhdCBleGVjdXRlcyBhIFwiICsgXCJjb250cmFjdCBmdW5jdGlvbiBvciBjcmVhdGVzIGEgbmV3IGNvbnRyYWN0LlwiKTtcbn1cblxuZnVuY3Rpb24qIGZldGNoQmluYXJ5KGFkYXB0ZXIsIHsgYWRkcmVzcyB9KSB7XG4gIGRlYnVnKFwiZmV0Y2hpbmcgYmluYXJ5IGZvciAlc1wiLCBhZGRyZXNzKTtcbiAgbGV0IGJpbmFyeSA9IHlpZWxkICgwLCBfZWZmZWN0cy5hcHBseSkoYWRhcHRlciwgYWRhcHRlci5nZXREZXBsb3llZENvZGUsIFthZGRyZXNzXSk7XG5cbiAgZGVidWcoXCJyZWNlaXZlZCBiaW5hcnkgZm9yICVzXCIsIGFkZHJlc3MpO1xuICB5aWVsZCAoMCwgX2VmZmVjdHMucHV0KShhY3Rpb25zLnJlY2VpdmVCaW5hcnkoYWRkcmVzcywgYmluYXJ5KSk7XG59XG5cbmZ1bmN0aW9uKiBpbnNwZWN0VHJhbnNhY3Rpb24odHhIYXNoLCBwcm92aWRlcikge1xuICB5aWVsZCAoMCwgX2VmZmVjdHMucHV0KShhY3Rpb25zLmluaXQocHJvdmlkZXIpKTtcbiAgeWllbGQgKDAsIF9lZmZlY3RzLnB1dCkoYWN0aW9ucy5pbnNwZWN0KHR4SGFzaCkpO1xuXG4gIGxldCBhY3Rpb24gPSB5aWVsZCAoMCwgX2VmZmVjdHMudGFrZSkoKHsgdHlwZSB9KSA9PiB0eXBlID09IGFjdGlvbnMuUkVDRUlWRV9UUkFDRSB8fCB0eXBlID09IGFjdGlvbnMuRVJST1JfV0VCMyk7XG4gIGRlYnVnKFwiYWN0aW9uICVvXCIsIGFjdGlvbik7XG5cbiAgdmFyIHRyYWNlO1xuICBpZiAoYWN0aW9uLnR5cGUgPT0gYWN0aW9ucy5SRUNFSVZFX1RSQUNFKSB7XG4gICAgdHJhY2UgPSBhY3Rpb24udHJhY2U7XG4gICAgZGVidWcoXCJyZWNlaXZlZCB0cmFjZVwiKTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4geyBlcnJvcjogYWN0aW9uLmVycm9yIH07XG4gIH1cblxuICBsZXQgeyBhZGRyZXNzLCBiaW5hcnkgfSA9IHlpZWxkICgwLCBfZWZmZWN0cy50YWtlKShhY3Rpb25zLlJFQ0VJVkVfQ0FMTCk7XG4gIGRlYnVnKFwicmVjZWl2ZWQgY2FsbFwiKTtcblxuICByZXR1cm4geyB0cmFjZSwgYWRkcmVzcywgYmluYXJ5IH07XG59XG5cbmZ1bmN0aW9uKiBvYnRhaW5CaW5hcmllcyhhZGRyZXNzZXMpIHtcbiAgbGV0IHRhc2tzID0geWllbGQgKDAsIF9lZmZlY3RzLmFsbCkoYWRkcmVzc2VzLm1hcChhZGRyZXNzID0+ICgwLCBfZWZmZWN0cy5mb3JrKShyZWNlaXZlQmluYXJ5LCBhZGRyZXNzKSkpO1xuXG4gIGRlYnVnKFwicmVxdWVzdGluZyBiaW5hcmllc1wiKTtcbiAgeWllbGQgKDAsIF9lZmZlY3RzLmFsbCkoYWRkcmVzc2VzLm1hcChhZGRyZXNzID0+ICgwLCBfZWZmZWN0cy5wdXQpKGFjdGlvbnMuZmV0Y2hCaW5hcnkoYWRkcmVzcykpKSk7XG5cbiAgbGV0IGJpbmFyaWVzID0gW107XG4gIGJpbmFyaWVzID0geWllbGQgKDAsIF9lZmZlY3RzLmFsbCkodGFza3MubWFwKHRhc2sgPT4gKDAsIF9lZmZlY3RzLmpvaW4pKHRhc2spKSk7XG5cbiAgZGVidWcoXCJiaW5hcmllcyAlb1wiLCBiaW5hcmllcyk7XG5cbiAgcmV0dXJuIGJpbmFyaWVzO1xufVxuXG5mdW5jdGlvbiogcmVjZWl2ZUJpbmFyeShhZGRyZXNzKSB7XG4gIGxldCB7IGJpbmFyeSB9ID0geWllbGQgKDAsIF9lZmZlY3RzLnRha2UpKGFjdGlvbiA9PiBhY3Rpb24udHlwZSA9PSBhY3Rpb25zLlJFQ0VJVkVfQklOQVJZICYmIGFjdGlvbi5hZGRyZXNzID09IGFkZHJlc3MpO1xuICBkZWJ1ZyhcImdvdCBiaW5hcnkgZm9yICVzXCIsIGFkZHJlc3MpO1xuXG4gIHJldHVybiBiaW5hcnk7XG59XG5cbmZ1bmN0aW9uKiBzYWdhKCkge1xuICAvLyB3YWl0IGZvciB3ZWIzIGluaXQgc2lnbmFsXG4gIGxldCB7IHByb3ZpZGVyIH0gPSB5aWVsZCAoMCwgX2VmZmVjdHMudGFrZSkoYWN0aW9ucy5JTklUX1dFQjMpO1xuICBsZXQgYWRhcHRlciA9IG5ldyBfYWRhcHRlcjIuZGVmYXVsdChwcm92aWRlcik7XG5cbiAgeWllbGQgKDAsIF9lZmZlY3RzLnRha2VFdmVyeSkoYWN0aW9ucy5JTlNQRUNULCBmZXRjaFRyYW5zYWN0aW9uSW5mbywgYWRhcHRlcik7XG4gIHlpZWxkICgwLCBfZWZmZWN0cy50YWtlRXZlcnkpKGFjdGlvbnMuRkVUQ0hfQklOQVJZLCBmZXRjaEJpbmFyeSwgYWRhcHRlcik7XG59XG5cbmV4cG9ydHMuZGVmYXVsdCA9ICgwLCBfaGVscGVycy5wcmVmaXhOYW1lKShcIndlYjNcIiwgc2FnYSk7XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vbGliL3dlYjMvc2FnYXMvaW5kZXguanMiLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuaW5pdCA9IGluaXQ7XG5leHBvcnRzLmluc3BlY3QgPSBpbnNwZWN0O1xuZXhwb3J0cy5mZXRjaEJpbmFyeSA9IGZldGNoQmluYXJ5O1xuZXhwb3J0cy5yZWNlaXZlQmluYXJ5ID0gcmVjZWl2ZUJpbmFyeTtcbmV4cG9ydHMucmVjZWl2ZVRyYWNlID0gcmVjZWl2ZVRyYWNlO1xuZXhwb3J0cy5yZWNlaXZlQ2FsbCA9IHJlY2VpdmVDYWxsO1xuZXhwb3J0cy5lcnJvciA9IGVycm9yO1xuY29uc3QgSU5JVF9XRUIzID0gZXhwb3J0cy5JTklUX1dFQjMgPSBcIklOSVRfV0VCM1wiO1xuZnVuY3Rpb24gaW5pdChwcm92aWRlcikge1xuICByZXR1cm4ge1xuICAgIHR5cGU6IElOSVRfV0VCMyxcbiAgICBwcm92aWRlclxuICB9O1xufVxuXG5jb25zdCBJTlNQRUNUID0gZXhwb3J0cy5JTlNQRUNUID0gXCJJTlNQRUNUX1RSQU5TQUNUSU9OXCI7XG5mdW5jdGlvbiBpbnNwZWN0KHR4SGFzaCkge1xuICByZXR1cm4ge1xuICAgIHR5cGU6IElOU1BFQ1QsXG4gICAgdHhIYXNoXG4gIH07XG59XG5cbmNvbnN0IEZFVENIX0JJTkFSWSA9IGV4cG9ydHMuRkVUQ0hfQklOQVJZID0gXCJGRVRDSF9CSU5BUllcIjtcbmZ1bmN0aW9uIGZldGNoQmluYXJ5KGFkZHJlc3MpIHtcbiAgcmV0dXJuIHtcbiAgICB0eXBlOiBGRVRDSF9CSU5BUlksXG4gICAgYWRkcmVzc1xuICB9O1xufVxuXG5jb25zdCBSRUNFSVZFX0JJTkFSWSA9IGV4cG9ydHMuUkVDRUlWRV9CSU5BUlkgPSBcIlJFQ0VJVkVfQklOQVJZXCI7XG5mdW5jdGlvbiByZWNlaXZlQmluYXJ5KGFkZHJlc3MsIGJpbmFyeSkge1xuICByZXR1cm4ge1xuICAgIHR5cGU6IFJFQ0VJVkVfQklOQVJZLFxuICAgIGFkZHJlc3MsIGJpbmFyeVxuICB9O1xufVxuXG5jb25zdCBSRUNFSVZFX1RSQUNFID0gZXhwb3J0cy5SRUNFSVZFX1RSQUNFID0gXCJSRUNFSVZFX1RSQUNFXCI7XG5mdW5jdGlvbiByZWNlaXZlVHJhY2UodHJhY2UpIHtcbiAgcmV0dXJuIHtcbiAgICB0eXBlOiBSRUNFSVZFX1RSQUNFLFxuICAgIHRyYWNlXG4gIH07XG59XG5cbmNvbnN0IFJFQ0VJVkVfQ0FMTCA9IGV4cG9ydHMuUkVDRUlWRV9DQUxMID0gXCJSRUNFSVZFX0NBTExcIjtcbmZ1bmN0aW9uIHJlY2VpdmVDYWxsKHsgYWRkcmVzcywgYmluYXJ5IH0pIHtcbiAgcmV0dXJuIHtcbiAgICB0eXBlOiBSRUNFSVZFX0NBTEwsXG4gICAgYWRkcmVzcywgYmluYXJ5XG4gIH07XG59XG5cbmNvbnN0IEVSUk9SX1dFQjMgPSBleHBvcnRzLkVSUk9SX1dFQjMgPSBcIkVSUk9SX1dFQjNcIjtcbmZ1bmN0aW9uIGVycm9yKGVycm9yKSB7XG4gIHJldHVybiB7XG4gICAgdHlwZTogRVJST1JfV0VCMyxcbiAgICBlcnJvclxuICB9O1xufVxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL2xpYi93ZWIzL2FjdGlvbnMvaW5kZXguanMiLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcblxudmFyIF9wcm9taXNlID0gcmVxdWlyZShcImJhYmVsLXJ1bnRpbWUvY29yZS1qcy9wcm9taXNlXCIpO1xuXG52YXIgX3Byb21pc2UyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcHJvbWlzZSk7XG5cbnZhciBfYXN5bmNUb0dlbmVyYXRvcjIgPSByZXF1aXJlKFwiYmFiZWwtcnVudGltZS9oZWxwZXJzL2FzeW5jVG9HZW5lcmF0b3JcIik7XG5cbnZhciBfYXN5bmNUb0dlbmVyYXRvcjMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9hc3luY1RvR2VuZXJhdG9yMik7XG5cbnZhciBfZGVidWcgPSByZXF1aXJlKFwiZGVidWdcIik7XG5cbnZhciBfZGVidWcyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZGVidWcpO1xuXG52YXIgX3dlYiA9IHJlcXVpcmUoXCJ3ZWIzXCIpO1xuXG52YXIgX3dlYjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF93ZWIpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5jb25zdCBkZWJ1ZyA9ICgwLCBfZGVidWcyLmRlZmF1bHQpKFwiZGVidWdnZXI6d2ViMzphZGFwdGVyXCIpO1xuXG5jbGFzcyBXZWIzQWRhcHRlciB7XG4gIGNvbnN0cnVjdG9yKHByb3ZpZGVyKSB7XG4gICAgdGhpcy53ZWIzID0gbmV3IF93ZWIyLmRlZmF1bHQocHJvdmlkZXIpO1xuICB9XG5cbiAgZ2V0VHJhY2UodHhIYXNoKSB7XG4gICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgIHJldHVybiAoMCwgX2FzeW5jVG9HZW5lcmF0b3IzLmRlZmF1bHQpKGZ1bmN0aW9uKiAoKSB7XG4gICAgICByZXR1cm4gbmV3IF9wcm9taXNlMi5kZWZhdWx0KGZ1bmN0aW9uIChhY2NlcHQsIHJlamVjdCkge1xuICAgICAgICBfdGhpcy53ZWIzLmN1cnJlbnRQcm92aWRlci5zZW5kKHtcbiAgICAgICAgICBqc29ucnBjOiBcIjIuMFwiLFxuICAgICAgICAgIG1ldGhvZDogXCJkZWJ1Z190cmFjZVRyYW5zYWN0aW9uXCIsXG4gICAgICAgICAgcGFyYW1zOiBbdHhIYXNoLCB7fV0sXG4gICAgICAgICAgaWQ6IG5ldyBEYXRlKCkuZ2V0VGltZSgpXG4gICAgICAgIH0sIGZ1bmN0aW9uIChlcnIsIHJlc3VsdCkge1xuICAgICAgICAgIGlmIChlcnIpIHJldHVybiByZWplY3QoZXJyKTtcbiAgICAgICAgICBpZiAocmVzdWx0LmVycm9yKSByZXR1cm4gcmVqZWN0KG5ldyBFcnJvcihyZXN1bHQuZXJyb3IubWVzc2FnZSkpO1xuICAgICAgICAgIGRlYnVnKFwicmVzdWx0OiAlb1wiLCByZXN1bHQpO1xuICAgICAgICAgIGFjY2VwdChyZXN1bHQucmVzdWx0LnN0cnVjdExvZ3MpO1xuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH0pKCk7XG4gIH1cblxuICBnZXRUcmFuc2FjdGlvbih0eEhhc2gpIHtcbiAgICB2YXIgX3RoaXMyID0gdGhpcztcblxuICAgIHJldHVybiAoMCwgX2FzeW5jVG9HZW5lcmF0b3IzLmRlZmF1bHQpKGZ1bmN0aW9uKiAoKSB7XG4gICAgICByZXR1cm4gbmV3IF9wcm9taXNlMi5kZWZhdWx0KGZ1bmN0aW9uIChhY2NlcHQsIHJlamVjdCkge1xuICAgICAgICBfdGhpczIud2ViMy5ldGguZ2V0VHJhbnNhY3Rpb24odHhIYXNoLCBmdW5jdGlvbiAoZXJyLCB0eCkge1xuICAgICAgICAgIGlmIChlcnIpIHJldHVybiByZWplY3QoZXJyKTtcblxuICAgICAgICAgIHJldHVybiBhY2NlcHQodHgpO1xuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH0pKCk7XG4gIH1cblxuICBnZXRSZWNlaXB0KHR4SGFzaCkge1xuICAgIHZhciBfdGhpczMgPSB0aGlzO1xuXG4gICAgcmV0dXJuICgwLCBfYXN5bmNUb0dlbmVyYXRvcjMuZGVmYXVsdCkoZnVuY3Rpb24qICgpIHtcbiAgICAgIHJldHVybiBuZXcgX3Byb21pc2UyLmRlZmF1bHQoZnVuY3Rpb24gKGFjY2VwdCwgcmVqZWN0KSB7XG4gICAgICAgIF90aGlzMy53ZWIzLmV0aC5nZXRUcmFuc2FjdGlvblJlY2VpcHQodHhIYXNoLCBmdW5jdGlvbiAoZXJyLCByZWNlaXB0KSB7XG4gICAgICAgICAgaWYgKGVycikgcmV0dXJuIHJlamVjdChlcnIpO1xuXG4gICAgICAgICAgcmV0dXJuIGFjY2VwdChyZWNlaXB0KTtcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9KSgpO1xuICB9XG5cbiAgLyoqXG4gICAqIGdldERlcGxveWVkQ29kZSAtIGdldCB0aGUgZGVwbG95ZWQgY29kZSBmb3IgYW4gYWRkcmVzcyBmcm9tIHRoZSBjbGllbnRcbiAgICogQHBhcmFtICB7U3RyaW5nfSBhZGRyZXNzXG4gICAqIEByZXR1cm4ge1N0cmluZ30gICAgICAgICBkZXBsb3llZEJpbmFyeVxuICAgKi9cbiAgZ2V0RGVwbG95ZWRDb2RlKGFkZHJlc3MpIHtcbiAgICB2YXIgX3RoaXM0ID0gdGhpcztcblxuICAgIHJldHVybiAoMCwgX2FzeW5jVG9HZW5lcmF0b3IzLmRlZmF1bHQpKGZ1bmN0aW9uKiAoKSB7XG4gICAgICBkZWJ1ZyhcImdldHRpbmcgZGVwbG95ZWQgY29kZSBmb3IgJXNcIiwgYWRkcmVzcyk7XG4gICAgICByZXR1cm4gbmV3IF9wcm9taXNlMi5kZWZhdWx0KGZ1bmN0aW9uIChhY2NlcHQsIHJlamVjdCkge1xuICAgICAgICBfdGhpczQud2ViMy5ldGguZ2V0Q29kZShhZGRyZXNzLCBmdW5jdGlvbiAoZXJyLCBkZXBsb3llZEJpbmFyeSkge1xuICAgICAgICAgIGlmIChlcnIpIGRlYnVnKFwiZXJyb3I6ICVvXCIsIGVycik7XG4gICAgICAgICAgaWYgKGVycikgcmV0dXJuIHJlamVjdChlcnIpO1xuICAgICAgICAgIGRlYnVnKFwiZ290IGRlcGxveWVkIGNvZGUgZm9yICVzXCIsIGFkZHJlc3MpO1xuICAgICAgICAgIGFjY2VwdChkZXBsb3llZEJpbmFyeSk7XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfSkoKTtcbiAgfVxufVxuZXhwb3J0cy5kZWZhdWx0ID0gV2ViM0FkYXB0ZXI7XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vbGliL3dlYjMvYWRhcHRlci5qcyIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5GSU5JU0hFRCA9IGV4cG9ydHMuRVJST1IgPSBleHBvcnRzLkFDVElWRSA9IGV4cG9ydHMuV0FJVElORyA9IHVuZGVmaW5lZDtcbmV4cG9ydHMuc2Vzc2lvbiA9IHNlc3Npb247XG5cbnZhciBfcmVkdXggPSByZXF1aXJlKFwicmVkdXhcIik7XG5cbnZhciBfcmVkdWNlcnMgPSByZXF1aXJlKFwibGliL2RhdGEvcmVkdWNlcnNcIik7XG5cbnZhciBfcmVkdWNlcnMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVkdWNlcnMpO1xuXG52YXIgX3JlZHVjZXJzMyA9IHJlcXVpcmUoXCJsaWIvZXZtL3JlZHVjZXJzXCIpO1xuXG52YXIgX3JlZHVjZXJzNCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlZHVjZXJzMyk7XG5cbnZhciBfcmVkdWNlcnM1ID0gcmVxdWlyZShcImxpYi9zb2xpZGl0eS9yZWR1Y2Vyc1wiKTtcblxudmFyIF9yZWR1Y2VyczYgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWR1Y2VyczUpO1xuXG52YXIgX3JlZHVjZXJzNyA9IHJlcXVpcmUoXCJsaWIvdHJhY2UvcmVkdWNlcnNcIik7XG5cbnZhciBfcmVkdWNlcnM4ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVkdWNlcnM3KTtcblxudmFyIF9hY3Rpb25zID0gcmVxdWlyZShcIi4vYWN0aW9uc1wiKTtcblxudmFyIGFjdGlvbnMgPSBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChfYWN0aW9ucyk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKG9iaikgeyBpZiAob2JqICYmIG9iai5fX2VzTW9kdWxlKSB7IHJldHVybiBvYmo7IH0gZWxzZSB7IHZhciBuZXdPYmogPSB7fTsgaWYgKG9iaiAhPSBudWxsKSB7IGZvciAodmFyIGtleSBpbiBvYmopIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGtleSkpIG5ld09ialtrZXldID0gb2JqW2tleV07IH0gfSBuZXdPYmouZGVmYXVsdCA9IG9iajsgcmV0dXJuIG5ld09iajsgfSB9XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmNvbnN0IFdBSVRJTkcgPSBleHBvcnRzLldBSVRJTkcgPSBcIldBSVRJTkdcIjtcbmNvbnN0IEFDVElWRSA9IGV4cG9ydHMuQUNUSVZFID0gXCJBQ1RJVkVcIjtcbmNvbnN0IEVSUk9SID0gZXhwb3J0cy5FUlJPUiA9IFwiRVJST1JcIjtcbmNvbnN0IEZJTklTSEVEID0gZXhwb3J0cy5GSU5JU0hFRCA9IFwiRklOSVNIRURcIjtcblxuZnVuY3Rpb24gc2Vzc2lvbihzdGF0ZSA9IFdBSVRJTkcsIGFjdGlvbikge1xuICBzd2l0Y2ggKGFjdGlvbi50eXBlKSB7XG4gICAgY2FzZSBhY3Rpb25zLlJFQURZOlxuICAgICAgcmV0dXJuIEFDVElWRTtcblxuICAgIGNhc2UgYWN0aW9ucy5FUlJPUjpcbiAgICAgIHJldHVybiB7IGVycm9yOiBhY3Rpb24uZXJyb3IgfTtcblxuICAgIGNhc2UgYWN0aW9ucy5GSU5JU0g6XG4gICAgICByZXR1cm4gRklOSVNIRUQ7XG5cbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIHN0YXRlO1xuICB9XG59XG5cbmNvbnN0IHJlZHVjZVN0YXRlID0gKDAsIF9yZWR1eC5jb21iaW5lUmVkdWNlcnMpKHtcbiAgc2Vzc2lvbixcbiAgZGF0YTogX3JlZHVjZXJzMi5kZWZhdWx0LFxuICBldm06IF9yZWR1Y2VyczQuZGVmYXVsdCxcbiAgc29saWRpdHk6IF9yZWR1Y2VyczYuZGVmYXVsdCxcbiAgdHJhY2U6IF9yZWR1Y2VyczguZGVmYXVsdFxufSk7XG5cbmV4cG9ydHMuZGVmYXVsdCA9IHJlZHVjZVN0YXRlO1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL2xpYi9zZXNzaW9uL3JlZHVjZXJzLmpzIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5cbnZhciBfc2V0ID0gcmVxdWlyZShcImJhYmVsLXJ1bnRpbWUvY29yZS1qcy9zZXRcIik7XG5cbnZhciBfc2V0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3NldCk7XG5cbnZhciBfZW50cmllcyA9IHJlcXVpcmUoXCJiYWJlbC1ydW50aW1lL2NvcmUtanMvb2JqZWN0L2VudHJpZXNcIik7XG5cbnZhciBfZW50cmllczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9lbnRyaWVzKTtcblxudmFyIF9hc3NpZ24gPSByZXF1aXJlKFwiYmFiZWwtcnVudGltZS9jb3JlLWpzL29iamVjdC9hc3NpZ25cIik7XG5cbnZhciBfYXNzaWduMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2Fzc2lnbik7XG5cbnZhciBfZXh0ZW5kczIgPSByZXF1aXJlKFwiYmFiZWwtcnVudGltZS9oZWxwZXJzL2V4dGVuZHNcIik7XG5cbnZhciBfZXh0ZW5kczMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9leHRlbmRzMik7XG5cbnZhciBfZGVidWcgPSByZXF1aXJlKFwiZGVidWdcIik7XG5cbnZhciBfZGVidWcyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZGVidWcpO1xuXG52YXIgX3JlZHV4ID0gcmVxdWlyZShcInJlZHV4XCIpO1xuXG52YXIgX2FjdGlvbnMgPSByZXF1aXJlKFwiLi9hY3Rpb25zXCIpO1xuXG52YXIgYWN0aW9ucyA9IF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKF9hY3Rpb25zKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQob2JqKSB7IGlmIChvYmogJiYgb2JqLl9fZXNNb2R1bGUpIHsgcmV0dXJuIG9iajsgfSBlbHNlIHsgdmFyIG5ld09iaiA9IHt9OyBpZiAob2JqICE9IG51bGwpIHsgZm9yICh2YXIga2V5IGluIG9iaikgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwga2V5KSkgbmV3T2JqW2tleV0gPSBvYmpba2V5XTsgfSB9IG5ld09iai5kZWZhdWx0ID0gb2JqOyByZXR1cm4gbmV3T2JqOyB9IH1cblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuY29uc3QgZGVidWcgPSAoMCwgX2RlYnVnMi5kZWZhdWx0KShcImRlYnVnZ2VyOmRhdGE6cmVkdWNlcnNcIik7XG5cbmNvbnN0IERFRkFVTFRfU0NPUEVTID0ge1xuICBieUlkOiB7fVxufTtcblxuZnVuY3Rpb24gc2NvcGVzKHN0YXRlID0gREVGQVVMVF9TQ09QRVMsIGFjdGlvbikge1xuICB2YXIgY29udGV4dDtcbiAgdmFyIHNjb3BlO1xuICB2YXIgdmFyaWFibGVzO1xuXG4gIHN3aXRjaCAoYWN0aW9uLnR5cGUpIHtcbiAgICBjYXNlIGFjdGlvbnMuU0NPUEU6XG4gICAgICBzY29wZSA9IHN0YXRlLmJ5SWRbYWN0aW9uLmlkXSB8fCB7fTtcblxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgYnlJZDogKDAsIF9leHRlbmRzMy5kZWZhdWx0KSh7fSwgc3RhdGUuYnlJZCwge1xuXG4gICAgICAgICAgW2FjdGlvbi5pZF06ICgwLCBfZXh0ZW5kczMuZGVmYXVsdCkoe30sIHNjb3BlLCB7XG5cbiAgICAgICAgICAgIGlkOiBhY3Rpb24uaWQsXG4gICAgICAgICAgICBzb3VyY2VJZDogYWN0aW9uLnNvdXJjZUlkLFxuICAgICAgICAgICAgcGFyZW50SWQ6IGFjdGlvbi5wYXJlbnRJZCxcbiAgICAgICAgICAgIHBvaW50ZXI6IGFjdGlvbi5wb2ludGVyXG4gICAgICAgICAgfSlcbiAgICAgICAgfSlcbiAgICAgIH07XG5cbiAgICBjYXNlIGFjdGlvbnMuREVDTEFSRTpcbiAgICAgIHNjb3BlID0gc3RhdGUuYnlJZFthY3Rpb24ubm9kZS5zY29wZV0gfHwge307XG4gICAgICB2YXJpYWJsZXMgPSBzY29wZS52YXJpYWJsZXMgfHwgW107XG5cbiAgICAgIHJldHVybiB7XG4gICAgICAgIGJ5SWQ6ICgwLCBfZXh0ZW5kczMuZGVmYXVsdCkoe30sIHN0YXRlLmJ5SWQsIHtcblxuICAgICAgICAgIFthY3Rpb24ubm9kZS5zY29wZV06ICgwLCBfZXh0ZW5kczMuZGVmYXVsdCkoe30sIHNjb3BlLCB7XG5cbiAgICAgICAgICAgIHZhcmlhYmxlczogWy4uLnZhcmlhYmxlcywgeyBuYW1lOiBhY3Rpb24ubm9kZS5uYW1lLCBpZDogYWN0aW9uLm5vZGUuaWQgfV1cbiAgICAgICAgICB9KVxuICAgICAgICB9KVxuICAgICAgfTtcblxuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gc3RhdGU7XG4gIH1cbn1cblxuY29uc3QgaW5mbyA9ICgwLCBfcmVkdXguY29tYmluZVJlZHVjZXJzKSh7XG4gIHNjb3Blc1xufSk7XG5cbmNvbnN0IERFRkFVTFRfQVNTSUdOTUVOVFMgPSB7XG4gIGJ5SWQ6IHt9XG59O1xuXG5mdW5jdGlvbiBhc3NpZ25tZW50cyhzdGF0ZSA9IERFRkFVTFRfQVNTSUdOTUVOVFMsIGFjdGlvbikge1xuICBzd2l0Y2ggKGFjdGlvbi50eXBlKSB7XG4gICAgY2FzZSBhY3Rpb25zLkFTU0lHTjpcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGJ5SWQ6ICgwLCBfZXh0ZW5kczMuZGVmYXVsdCkoe30sIHN0YXRlLmJ5SWQsICgwLCBfYXNzaWduMi5kZWZhdWx0KSh7fSwgLi4uKDAsIF9lbnRyaWVzMi5kZWZhdWx0KShhY3Rpb24uYXNzaWdubWVudHMpLm1hcCgoW2lkLCByZWZdKSA9PiAoe1xuICAgICAgICAgIFtpZF06ICgwLCBfZXh0ZW5kczMuZGVmYXVsdCkoe30sIHN0YXRlLmJ5SWRbaWRdLCB7XG4gICAgICAgICAgICByZWZcbiAgICAgICAgICB9KVxuICAgICAgICB9KSkpKVxuICAgICAgfTtcblxuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gc3RhdGU7XG4gIH1cbn07XG5cbmNvbnN0IERFRkFVTFRfTUFQUElOR19LRVlTID0ge1xuICBieUlkOiB7fVxufTtcblxuZnVuY3Rpb24gbWFwcGluZ0tleXMoc3RhdGUgPSBERUZBVUxUX01BUFBJTkdfS0VZUywgYWN0aW9uKSB7XG4gIHN3aXRjaCAoYWN0aW9uLnR5cGUpIHtcbiAgICBjYXNlIGFjdGlvbnMuTUFQX0tFWTpcbiAgICAgIGxldCB7IGlkLCBrZXkgfSA9IGFjdGlvbjtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGJ5SWQ6ICgwLCBfZXh0ZW5kczMuZGVmYXVsdCkoe30sIHN0YXRlLmJ5SWQsIHtcblxuICAgICAgICAgIC8vIGFkZCBuZXcga2V5IHRvIHNldCBvZiBrZXlzIGFscmVhZHkgZGVmaW5lZFxuICAgICAgICAgIFtpZF06IFsuLi5uZXcgX3NldDIuZGVmYXVsdChbLi4uKHN0YXRlLmJ5SWRbaWRdIHx8IFtdKSwga2V5XSldXG4gICAgICAgIH0pXG4gICAgICB9O1xuXG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiBzdGF0ZTtcbiAgfVxufVxuXG5jb25zdCBwcm9jID0gKDAsIF9yZWR1eC5jb21iaW5lUmVkdWNlcnMpKHtcbiAgYXNzaWdubWVudHMsXG4gIG1hcHBpbmdLZXlzXG59KTtcblxuY29uc3QgcmVkdWNlciA9ICgwLCBfcmVkdXguY29tYmluZVJlZHVjZXJzKSh7XG4gIGluZm8sXG4gIHByb2Ncbn0pO1xuXG5leHBvcnRzLmRlZmF1bHQgPSByZWR1Y2VyO1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL2xpYi9kYXRhL3JlZHVjZXJzLmpzIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5cbnZhciBfc2V0ID0gcmVxdWlyZShcImJhYmVsLXJ1bnRpbWUvY29yZS1qcy9zZXRcIik7XG5cbnZhciBfc2V0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3NldCk7XG5cbnZhciBfZnJvbSA9IHJlcXVpcmUoXCJiYWJlbC1ydW50aW1lL2NvcmUtanMvYXJyYXkvZnJvbVwiKTtcblxudmFyIF9mcm9tMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2Zyb20pO1xuXG52YXIgX2V4dGVuZHMyID0gcmVxdWlyZShcImJhYmVsLXJ1bnRpbWUvaGVscGVycy9leHRlbmRzXCIpO1xuXG52YXIgX2V4dGVuZHMzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZXh0ZW5kczIpO1xuXG5leHBvcnRzLmNhbGxzdGFjayA9IGNhbGxzdGFjaztcblxudmFyIF9yZWR1eCA9IHJlcXVpcmUoXCJyZWR1eFwiKTtcblxudmFyIF9hY3Rpb25zID0gcmVxdWlyZShcIi4vYWN0aW9uc1wiKTtcblxudmFyIGFjdGlvbnMgPSBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChfYWN0aW9ucyk7XG5cbnZhciBfaGVscGVycyA9IHJlcXVpcmUoXCJsaWIvaGVscGVyc1wiKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQob2JqKSB7IGlmIChvYmogJiYgb2JqLl9fZXNNb2R1bGUpIHsgcmV0dXJuIG9iajsgfSBlbHNlIHsgdmFyIG5ld09iaiA9IHt9OyBpZiAob2JqICE9IG51bGwpIHsgZm9yICh2YXIga2V5IGluIG9iaikgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwga2V5KSkgbmV3T2JqW2tleV0gPSBvYmpba2V5XTsgfSB9IG5ld09iai5kZWZhdWx0ID0gb2JqOyByZXR1cm4gbmV3T2JqOyB9IH1cblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuY29uc3QgREVGQVVMVF9DT05URVhUUyA9IHtcbiAgYnlDb250ZXh0OiB7fSxcbiAgYnlCaW5hcnk6IHt9XG59O1xuXG5mdW5jdGlvbiBjb250ZXh0cyhzdGF0ZSA9IERFRkFVTFRfQ09OVEVYVFMsIGFjdGlvbikge1xuICBzd2l0Y2ggKGFjdGlvbi50eXBlKSB7XG4gICAgLypcbiAgICAgKiBBZGRpbmcgYSBuZXcgY29udGV4dFxuICAgICAqL1xuICAgIGNhc2UgYWN0aW9ucy5BRERfQ09OVEVYVDpcbiAgICAgIGxldCB7IGNvbnRyYWN0TmFtZSwgYmluYXJ5IH0gPSBhY3Rpb247XG5cbiAgICAgIGlmIChzdGF0ZS5ieUJpbmFyeVtiaW5hcnldKSB7XG4gICAgICAgIHJldHVybiBzdGF0ZTtcbiAgICAgIH1cblxuICAgICAgbGV0IGNvbnRleHQgPSAoMCwgX2hlbHBlcnMua2VjY2FrMjU2KShiaW5hcnkpO1xuXG4gICAgICByZXR1cm4ge1xuICAgICAgICBieUNvbnRleHQ6ICgwLCBfZXh0ZW5kczMuZGVmYXVsdCkoe30sIHN0YXRlLmJ5Q29udGV4dCwge1xuXG4gICAgICAgICAgW2NvbnRleHRdOiB7IGNvbnRleHQsIGJpbmFyeSwgY29udHJhY3ROYW1lIH1cbiAgICAgICAgfSksXG5cbiAgICAgICAgYnlCaW5hcnk6ICgwLCBfZXh0ZW5kczMuZGVmYXVsdCkoe30sIHN0YXRlLmJ5QmluYXJ5LCB7XG5cbiAgICAgICAgICBbYmluYXJ5XTogeyBjb250ZXh0OiBjb250ZXh0IH1cbiAgICAgICAgfSlcbiAgICAgIH07XG5cbiAgICAvKlxuICAgICAqIERlZmF1bHQgY2FzZVxuICAgICAqL1xuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gc3RhdGU7XG4gIH1cbn1cblxuY29uc3QgREVGQVVMVF9JTlNUQU5DRVMgPSB7XG4gIGJ5QWRkcmVzczoge30sXG4gIGJ5Q29udGV4dDoge31cbn07XG5cbmZ1bmN0aW9uIGluc3RhbmNlcyhzdGF0ZSA9IERFRkFVTFRfSU5TVEFOQ0VTLCBhY3Rpb24pIHtcbiAgc3dpdGNoIChhY3Rpb24udHlwZSkge1xuICAgIC8qXG4gICAgICogQWRkaW5nIGEgbmV3IGFkZHJlc3MgZm9yIGNvbnRleHRcbiAgICAgKi9cbiAgICBjYXNlIGFjdGlvbnMuQUREX0lOU1RBTkNFOlxuICAgICAgbGV0IHsgYWRkcmVzcywgY29udGV4dCwgYmluYXJ5IH0gPSBhY3Rpb247XG5cbiAgICAgIC8vIGdldCBrbm93biBhZGRyZXNzZXMgZm9yIHRoaXMgY29udGV4dFxuICAgICAgbGV0IG90aGVySW5zdGFuY2VzID0gc3RhdGUuYnlDb250ZXh0W2NvbnRleHRdIHx8IFtdO1xuICAgICAgbGV0IG90aGVyQWRkcmVzc2VzID0gb3RoZXJJbnN0YW5jZXMubWFwKCh7IGFkZHJlc3MgfSkgPT4gYWRkcmVzcyk7XG5cbiAgICAgIHJldHVybiB7XG4gICAgICAgIGJ5QWRkcmVzczogKDAsIF9leHRlbmRzMy5kZWZhdWx0KSh7fSwgc3RhdGUuYnlBZGRyZXNzLCB7XG5cbiAgICAgICAgICBbYWRkcmVzc106IHsgY29udGV4dCwgYmluYXJ5IH1cbiAgICAgICAgfSksXG5cbiAgICAgICAgYnlDb250ZXh0OiAoMCwgX2V4dGVuZHMzLmRlZmF1bHQpKHt9LCBzdGF0ZS5ieUNvbnRleHQsIHtcblxuICAgICAgICAgIC8vIHJlY29uc3RydWN0IGNvbnRleHQgaW5zdGFuY2VzIHRvIGluY2x1ZGUgbmV3IGFkZHJlc3NcbiAgICAgICAgICBbY29udGV4dF06ICgwLCBfZnJvbTIuZGVmYXVsdCkobmV3IF9zZXQyLmRlZmF1bHQob3RoZXJBZGRyZXNzZXMpLmFkZChhZGRyZXNzKSkubWFwKGFkZHJlc3MgPT4gKHsgYWRkcmVzcyB9KSlcbiAgICAgICAgfSlcbiAgICAgIH07XG5cbiAgICAvKlxuICAgICAqIERlZmF1bHQgY2FzZVxuICAgICAqL1xuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gc3RhdGU7XG4gIH1cbn1cblxuY29uc3QgaW5mbyA9ICgwLCBfcmVkdXguY29tYmluZVJlZHVjZXJzKSh7XG4gIGNvbnRleHRzLFxuICBpbnN0YW5jZXNcbn0pO1xuXG5mdW5jdGlvbiBjYWxsc3RhY2soc3RhdGUgPSBbXSwgYWN0aW9uKSB7XG4gIHN3aXRjaCAoYWN0aW9uLnR5cGUpIHtcbiAgICBjYXNlIGFjdGlvbnMuQ0FMTDpcbiAgICAgIGxldCBhZGRyZXNzID0gYWN0aW9uLmFkZHJlc3M7XG4gICAgICByZXR1cm4gc3RhdGUuY29uY2F0KFt7IGFkZHJlc3MgfV0pO1xuXG4gICAgY2FzZSBhY3Rpb25zLkNSRUFURTpcbiAgICAgIGNvbnN0IGJpbmFyeSA9IGFjdGlvbi5iaW5hcnk7XG4gICAgICByZXR1cm4gc3RhdGUuY29uY2F0KFt7IGJpbmFyeSB9XSk7XG5cbiAgICBjYXNlIGFjdGlvbnMuUkVUVVJOOlxuICAgICAgcmV0dXJuIHN0YXRlLnNsaWNlKDAsIC0xKTsgLy8gcG9wXG5cbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIHN0YXRlO1xuICB9O1xufVxuXG5jb25zdCBwcm9jID0gKDAsIF9yZWR1eC5jb21iaW5lUmVkdWNlcnMpKHtcbiAgY2FsbHN0YWNrXG59KTtcblxuY29uc3QgcmVkdWNlciA9ICgwLCBfcmVkdXguY29tYmluZVJlZHVjZXJzKSh7XG4gIGluZm8sXG4gIHByb2Ncbn0pO1xuXG5leHBvcnRzLmRlZmF1bHQgPSByZWR1Y2VyO1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL2xpYi9ldm0vcmVkdWNlcnMuanMiLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCJiYWJlbC1ydW50aW1lL2NvcmUtanMvYXJyYXkvZnJvbVwiKTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyBleHRlcm5hbCBcImJhYmVsLXJ1bnRpbWUvY29yZS1qcy9hcnJheS9mcm9tXCJcbi8vIG1vZHVsZSBpZCA9IDc2XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuXG52YXIgX2V4dGVuZHMyID0gcmVxdWlyZShcImJhYmVsLXJ1bnRpbWUvaGVscGVycy9leHRlbmRzXCIpO1xuXG52YXIgX2V4dGVuZHMzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZXh0ZW5kczIpO1xuXG52YXIgX2tleXMgPSByZXF1aXJlKFwiYmFiZWwtcnVudGltZS9jb3JlLWpzL29iamVjdC9rZXlzXCIpO1xuXG52YXIgX2tleXMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfa2V5cyk7XG5cbmV4cG9ydHMuZnVuY3Rpb25EZXB0aCA9IGZ1bmN0aW9uRGVwdGg7XG5cbnZhciBfcmVkdXggPSByZXF1aXJlKFwicmVkdXhcIik7XG5cbnZhciBfaGVscGVycyA9IHJlcXVpcmUoXCJsaWIvaGVscGVyc1wiKTtcblxudmFyIF9hY3Rpb25zID0gcmVxdWlyZShcIi4vYWN0aW9uc1wiKTtcblxudmFyIGFjdGlvbnMgPSBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChfYWN0aW9ucyk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKG9iaikgeyBpZiAob2JqICYmIG9iai5fX2VzTW9kdWxlKSB7IHJldHVybiBvYmo7IH0gZWxzZSB7IHZhciBuZXdPYmogPSB7fTsgaWYgKG9iaiAhPSBudWxsKSB7IGZvciAodmFyIGtleSBpbiBvYmopIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGtleSkpIG5ld09ialtrZXldID0gb2JqW2tleV07IH0gfSBuZXdPYmouZGVmYXVsdCA9IG9iajsgcmV0dXJuIG5ld09iajsgfSB9XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmNvbnN0IERFRkFVTFRfU09VUkNFUyA9IHtcbiAgYnlJZDoge31cbn07XG5cbmZ1bmN0aW9uIHNvdXJjZXMoc3RhdGUgPSBERUZBVUxUX1NPVVJDRVMsIGFjdGlvbikge1xuICBzd2l0Y2ggKGFjdGlvbi50eXBlKSB7XG4gICAgLypcbiAgICAgKiBBZGRpbmcgYSBuZXcgc291cmNlXG4gICAgICovXG4gICAgY2FzZSBhY3Rpb25zLkFERF9TT1VSQ0U6XG4gICAgICBsZXQgeyBhc3QsIHNvdXJjZSwgc291cmNlUGF0aCB9ID0gYWN0aW9uO1xuXG4gICAgICBsZXQgaWQgPSAoMCwgX2tleXMyLmRlZmF1bHQpKHN0YXRlLmJ5SWQpLmxlbmd0aDtcblxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgYnlJZDogKDAsIF9leHRlbmRzMy5kZWZhdWx0KSh7fSwgc3RhdGUuYnlJZCwge1xuXG4gICAgICAgICAgW2lkXToge1xuICAgICAgICAgICAgaWQsXG4gICAgICAgICAgICBhc3QsXG4gICAgICAgICAgICBzb3VyY2UsXG4gICAgICAgICAgICBzb3VyY2VQYXRoXG4gICAgICAgICAgfVxuICAgICAgICB9KVxuXG4gICAgICAgIC8qXG4gICAgICAgICAqIERlZmF1bHQgY2FzZVxuICAgICAgICAgKi9cbiAgICAgIH07ZGVmYXVsdDpcbiAgICAgIHJldHVybiBzdGF0ZTtcbiAgfVxufVxuXG5jb25zdCBERUZBVUxUX1NPVVJDRU1BUFMgPSB7XG4gIGJ5Q29udGV4dDoge31cbn07XG5cbmZ1bmN0aW9uIHNvdXJjZU1hcHMoc3RhdGUgPSBERUZBVUxUX1NPVVJDRU1BUFMsIGFjdGlvbikge1xuICBzd2l0Y2ggKGFjdGlvbi50eXBlKSB7XG4gICAgLypcbiAgICAgKiBBZGRpbmcgYSBuZXcgc291cmNlTWFwXG4gICAgICovXG4gICAgY2FzZSBhY3Rpb25zLkFERF9TT1VSQ0VNQVA6XG4gICAgICBsZXQgeyBiaW5hcnksIHNvdXJjZU1hcCB9ID0gYWN0aW9uO1xuICAgICAgbGV0IGNvbnRleHQgPSAoMCwgX2hlbHBlcnMua2VjY2FrMjU2KShiaW5hcnkpO1xuXG4gICAgICByZXR1cm4ge1xuICAgICAgICBieUNvbnRleHQ6ICgwLCBfZXh0ZW5kczMuZGVmYXVsdCkoe30sIHN0YXRlLmJ5Q29udGV4dCwge1xuXG4gICAgICAgICAgW2NvbnRleHRdOiB7XG4gICAgICAgICAgICBjb250ZXh0LFxuICAgICAgICAgICAgc291cmNlTWFwXG4gICAgICAgICAgfVxuICAgICAgICB9KVxuICAgICAgfTtcblxuICAgIC8qXG4gICAgICogRGVmYXVsdCBDYXNlXG4gICAgICovXG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiBzdGF0ZTtcbiAgfVxufVxuXG5jb25zdCBpbmZvID0gKDAsIF9yZWR1eC5jb21iaW5lUmVkdWNlcnMpKHtcbiAgc291cmNlcyxcbiAgc291cmNlTWFwc1xufSk7XG5cbmZ1bmN0aW9uIGZ1bmN0aW9uRGVwdGgoc3RhdGUgPSAxLCBhY3Rpb24pIHtcbiAgaWYgKGFjdGlvbi50eXBlID09PSBhY3Rpb25zLkpVTVApIHtcbiAgICBjb25zdCBkZWx0YSA9IHNwZWx1bmsoYWN0aW9uLmp1bXBEaXJlY3Rpb24pO1xuICAgIHJldHVybiBzdGF0ZSArIGRlbHRhO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBzdGF0ZTtcbiAgfVxufVxuXG5mdW5jdGlvbiBzcGVsdW5rKGp1bXApIHtcbiAgaWYgKGp1bXAgPT0gXCJpXCIpIHtcbiAgICByZXR1cm4gMTtcbiAgfSBlbHNlIGlmIChqdW1wID09IFwib1wiKSB7XG4gICAgcmV0dXJuIC0xO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiAwO1xuICB9XG59XG5cbmNvbnN0IHByb2MgPSAoMCwgX3JlZHV4LmNvbWJpbmVSZWR1Y2Vycykoe1xuICBmdW5jdGlvbkRlcHRoXG59KTtcblxuY29uc3QgcmVkdWNlciA9ICgwLCBfcmVkdXguY29tYmluZVJlZHVjZXJzKSh7XG4gIGluZm8sXG4gIHByb2Ncbn0pO1xuXG5leHBvcnRzLmRlZmF1bHQgPSByZWR1Y2VyO1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL2xpYi9zb2xpZGl0eS9yZWR1Y2Vycy5qcyIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5pbmRleCA9IGluZGV4O1xuZXhwb3J0cy5zdGVwcyA9IHN0ZXBzO1xuXG52YXIgX3JlZHV4ID0gcmVxdWlyZShcInJlZHV4XCIpO1xuXG52YXIgX2FjdGlvbnMgPSByZXF1aXJlKFwiLi9hY3Rpb25zXCIpO1xuXG52YXIgYWN0aW9ucyA9IF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKF9hY3Rpb25zKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQob2JqKSB7IGlmIChvYmogJiYgb2JqLl9fZXNNb2R1bGUpIHsgcmV0dXJuIG9iajsgfSBlbHNlIHsgdmFyIG5ld09iaiA9IHt9OyBpZiAob2JqICE9IG51bGwpIHsgZm9yICh2YXIga2V5IGluIG9iaikgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwga2V5KSkgbmV3T2JqW2tleV0gPSBvYmpba2V5XTsgfSB9IG5ld09iai5kZWZhdWx0ID0gb2JqOyByZXR1cm4gbmV3T2JqOyB9IH1cblxuZnVuY3Rpb24gaW5kZXgoc3RhdGUgPSAwLCBhY3Rpb24pIHtcbiAgaWYgKGFjdGlvbi50eXBlID09IGFjdGlvbnMuVE9DSyB8fCBhY3Rpb24udHlwZSA9PSBhY3Rpb25zLkVORF9PRl9UUkFDRSkge1xuICAgIHJldHVybiBzdGF0ZSArIDE7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHN0YXRlO1xuICB9XG59XG5cbmZ1bmN0aW9uIHN0ZXBzKHN0YXRlID0gbnVsbCwgYWN0aW9uKSB7XG4gIGlmIChhY3Rpb24udHlwZSA9PSBhY3Rpb25zLlNBVkVfU1RFUFMpIHtcbiAgICByZXR1cm4gYWN0aW9uLnN0ZXBzO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBzdGF0ZTtcbiAgfVxufVxuXG5jb25zdCBpbmZvID0gKDAsIF9yZWR1eC5jb21iaW5lUmVkdWNlcnMpKHtcbiAgc3RlcHNcbn0pO1xuXG5jb25zdCBwcm9jID0gKDAsIF9yZWR1eC5jb21iaW5lUmVkdWNlcnMpKHtcbiAgaW5kZXhcbn0pO1xuXG5jb25zdCByZWR1Y2VyID0gKDAsIF9yZWR1eC5jb21iaW5lUmVkdWNlcnMpKHtcbiAgaW5mbyxcbiAgcHJvY1xufSk7XG5cbmV4cG9ydHMuZGVmYXVsdCA9IHJlZHVjZXI7XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vbGliL3RyYWNlL3JlZHVjZXJzLmpzIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfa2V5cyA9IHJlcXVpcmUoXCJiYWJlbC1ydW50aW1lL2NvcmUtanMvb2JqZWN0L2tleXNcIik7XG5cbnZhciBfa2V5czIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9rZXlzKTtcblxudmFyIF9hc3luY1RvR2VuZXJhdG9yMiA9IHJlcXVpcmUoXCJiYWJlbC1ydW50aW1lL2hlbHBlcnMvYXN5bmNUb0dlbmVyYXRvclwiKTtcblxudmFyIF9hc3luY1RvR2VuZXJhdG9yMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2FzeW5jVG9HZW5lcmF0b3IyKTtcblxudmFyIF9kZWJ1ZyA9IHJlcXVpcmUoXCJkZWJ1Z1wiKTtcblxudmFyIF9kZWJ1ZzIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9kZWJ1Zyk7XG5cbnZhciBfY2hhaSA9IHJlcXVpcmUoXCJjaGFpXCIpO1xuXG52YXIgX2dhbmFjaGVDbGkgPSByZXF1aXJlKFwiZ2FuYWNoZS1jbGlcIik7XG5cbnZhciBfZ2FuYWNoZUNsaTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9nYW5hY2hlQ2xpKTtcblxudmFyIF93ZWIgPSByZXF1aXJlKFwid2ViM1wiKTtcblxudmFyIF93ZWIyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfd2ViKTtcblxudmFyIF9oZWxwZXJzID0gcmVxdWlyZShcIi4vaGVscGVyc1wiKTtcblxudmFyIF9kZWJ1Z2dlciA9IHJlcXVpcmUoXCJsaWIvZGVidWdnZXJcIik7XG5cbnZhciBfZGVidWdnZXIyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZGVidWdnZXIpO1xuXG52YXIgX3NlbGVjdG9ycyA9IHJlcXVpcmUoXCJsaWIvc2Vzc2lvbi9zZWxlY3RvcnNcIik7XG5cbnZhciBfc2VsZWN0b3JzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3NlbGVjdG9ycyk7XG5cbnZhciBfc2VsZWN0b3JzMyA9IHJlcXVpcmUoXCJsaWIvdHJhY2Uvc2VsZWN0b3JzXCIpO1xuXG52YXIgX3NlbGVjdG9yczQgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9zZWxlY3RvcnMzKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuY29uc3QgZGVidWcgPSAoMCwgX2RlYnVnMi5kZWZhdWx0KShcInRlc3Q6Y29udGV4dFwiKTtcblxuY29uc3QgX19PVVRFUiA9IGBcbnByYWdtYSBzb2xpZGl0eSBeMC40LjE4O1xuXG5pbXBvcnQgXCIuL0lubmVyQ29udHJhY3Quc29sXCI7XG5cbmNvbnRyYWN0IE91dGVyQ29udHJhY3Qge1xuICBldmVudCBPdXRlcigpO1xuXG4gIElubmVyQ29udHJhY3QgaW5uZXI7XG5cbiAgY29uc3RydWN0b3IoYWRkcmVzcyBfaW5uZXIpIHB1YmxpYyB7XG4gICAgaW5uZXIgPSBJbm5lckNvbnRyYWN0KF9pbm5lcik7XG4gIH1cblxuICBmdW5jdGlvbiBydW4oKSBwdWJsaWMge1xuICAgIGlubmVyLnJ1bigpO1xuXG4gICAgZW1pdCBPdXRlcigpO1xuICB9XG59XG5gO1xuXG5jb25zdCBfX0lOTkVSID0gYFxucHJhZ21hIHNvbGlkaXR5IF4wLjQuMTg7XG5cbmNvbnRyYWN0IElubmVyQ29udHJhY3Qge1xuICBldmVudCBJbm5lcigpO1xuXG4gIGZ1bmN0aW9uIHJ1bigpIHB1YmxpYyB7XG4gICAgZW1pdCBJbm5lcigpO1xuICB9XG59XG5gO1xuXG5jb25zdCBfX01JR1JBVElPTiA9IGBcbmxldCBPdXRlckNvbnRyYWN0ID0gYXJ0aWZhY3RzLnJlcXVpcmUoXCJPdXRlckNvbnRyYWN0XCIpO1xubGV0IElubmVyQ29udHJhY3QgPSBhcnRpZmFjdHMucmVxdWlyZShcIklubmVyQ29udHJhY3RcIik7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oZGVwbG95ZXIpIHtcbiAgcmV0dXJuIGRlcGxveWVyXG4gICAgLnRoZW4oZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gZGVwbG95ZXIuZGVwbG95KElubmVyQ29udHJhY3QpO1xuICAgIH0pXG4gICAgLnRoZW4oZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gSW5uZXJDb250cmFjdC5kZXBsb3llZCgpO1xuICAgIH0pXG4gICAgLnRoZW4oZnVuY3Rpb24oaW5uZXIpIHtcbiAgICAgIHJldHVybiBkZXBsb3llci5kZXBsb3koT3V0ZXJDb250cmFjdCwgaW5uZXIuYWRkcmVzcyk7XG4gICAgfSk7XG59O1xuYDtcblxubGV0IG1pZ3JhdGlvbnMgPSB7XG4gIFwiMl9kZXBsb3lfY29udHJhY3RzLmpzXCI6IF9fTUlHUkFUSU9OXG59O1xuXG5sZXQgc291cmNlcyA9IHtcbiAgXCJPdXRlckxpYnJhcnkuc29sXCI6IF9fT1VURVIsXG4gIFwiSW5uZXJDb250cmFjdC5zb2xcIjogX19JTk5FUlxufTtcblxuZGVzY3JpYmUoXCJDb250ZXh0c1wiLCBmdW5jdGlvbiAoKSB7XG4gIHZhciBwcm92aWRlcjtcbiAgdmFyIHdlYjM7XG5cbiAgdmFyIGFic3RyYWN0aW9ucztcbiAgdmFyIGFydGlmYWN0cztcblxuICBiZWZvcmUoXCJDcmVhdGUgUHJvdmlkZXJcIiwgKDAsIF9hc3luY1RvR2VuZXJhdG9yMy5kZWZhdWx0KShmdW5jdGlvbiogKCkge1xuICAgIHByb3ZpZGVyID0gX2dhbmFjaGVDbGkyLmRlZmF1bHQucHJvdmlkZXIoeyBzZWVkOiBcImRlYnVnZ2VyXCIsIGdhc0xpbWl0OiA3MDAwMDAwIH0pO1xuICAgIHdlYjMgPSBuZXcgX3dlYjIuZGVmYXVsdChwcm92aWRlcik7XG4gIH0pKTtcblxuICBiZWZvcmUoXCJQcmVwYXJlIGNvbnRyYWN0cyBhbmQgYXJ0aWZhY3RzXCIsICgwLCBfYXN5bmNUb0dlbmVyYXRvcjMuZGVmYXVsdCkoZnVuY3Rpb24qICgpIHtcbiAgICB0aGlzLnRpbWVvdXQoMzAwMDApO1xuXG4gICAgbGV0IHByZXBhcmVkID0geWllbGQgKDAsIF9oZWxwZXJzLnByZXBhcmVDb250cmFjdHMpKHByb3ZpZGVyLCBzb3VyY2VzLCBtaWdyYXRpb25zKTtcbiAgICBhYnN0cmFjdGlvbnMgPSBwcmVwYXJlZC5hYnN0cmFjdGlvbnM7XG4gICAgYXJ0aWZhY3RzID0gcHJlcGFyZWQuYXJ0aWZhY3RzO1xuICB9KSk7XG5cbiAgaXQoXCJyZXR1cm5zIHZpZXcgb2YgYWRkcmVzc2VzIGFmZmVjdGVkXCIsICgwLCBfYXN5bmNUb0dlbmVyYXRvcjMuZGVmYXVsdCkoZnVuY3Rpb24qICgpIHtcbiAgICBsZXQgb3V0ZXIgPSB5aWVsZCBhYnN0cmFjdGlvbnMuT3V0ZXJDb250cmFjdC5kZXBsb3llZCgpO1xuICAgIGxldCBpbm5lciA9IHlpZWxkIGFic3RyYWN0aW9ucy5Jbm5lckNvbnRyYWN0LmRlcGxveWVkKCk7XG5cbiAgICAvLyBydW4gb3V0ZXIgY29udHJhY3QgbWV0aG9kXG4gICAgbGV0IHJlc3VsdCA9IHlpZWxkIG91dGVyLnJ1bigpO1xuXG4gICAgX2NoYWkuYXNzZXJ0LmVxdWFsKDIsIHJlc3VsdC5yZWNlaXB0LmxvZ3MubGVuZ3RoLCBcIlRoZXJlIHNob3VsZCBiZSB0d28gbG9nc1wiKTtcblxuICAgIGxldCB0eEhhc2ggPSByZXN1bHQudHg7XG5cbiAgICBsZXQgYnVnZ2VyID0geWllbGQgX2RlYnVnZ2VyMi5kZWZhdWx0LmZvclR4KHR4SGFzaCwge1xuICAgICAgcHJvdmlkZXIsXG4gICAgICBjb250cmFjdHM6IGFydGlmYWN0c1xuICAgIH0pO1xuICAgIGRlYnVnKFwiZGVidWdnZXIgcmVhZHlcIik7XG5cbiAgICBsZXQgc2Vzc2lvbiA9IGJ1Z2dlci5jb25uZWN0KCk7XG5cbiAgICBsZXQgYWZmZWN0ZWRJbnN0YW5jZXMgPSBzZXNzaW9uLnZpZXcoX3NlbGVjdG9yczIuZGVmYXVsdC5pbmZvLmFmZmVjdGVkSW5zdGFuY2VzKTtcbiAgICBkZWJ1ZyhcImFmZmVjdGVkSW5zdGFuY2VzOiAlb1wiLCBhZmZlY3RlZEluc3RhbmNlcyk7XG5cbiAgICBsZXQgYWZmZWN0ZWRBZGRyZXNzZXMgPSAoMCwgX2tleXMyLmRlZmF1bHQpKGFmZmVjdGVkSW5zdGFuY2VzKS5tYXAoZnVuY3Rpb24gKGFkZHJlc3MpIHtcbiAgICAgIHJldHVybiBhZGRyZXNzLnRvTG93ZXJDYXNlKCk7XG4gICAgfSk7XG5cbiAgICBfY2hhaS5hc3NlcnQuZXF1YWwoMiwgYWZmZWN0ZWRBZGRyZXNzZXMubGVuZ3RoKTtcblxuICAgIF9jaGFpLmFzc2VydC5pbmNsdWRlKGFmZmVjdGVkQWRkcmVzc2VzLCBvdXRlci5hZGRyZXNzLnRvTG93ZXJDYXNlKCksIFwiT3V0ZXJDb250cmFjdCBzaG91bGQgYmUgYW4gYWZmZWN0ZWQgYWRkcmVzc1wiKTtcblxuICAgIF9jaGFpLmFzc2VydC5pbmNsdWRlKGFmZmVjdGVkQWRkcmVzc2VzLCBpbm5lci5hZGRyZXNzLnRvTG93ZXJDYXNlKCksIFwiSW5uZXJDb250cmFjdCBzaG91bGQgYmUgYW4gYWZmZWN0ZWQgYWRkcmVzc1wiKTtcbiAgfSkpO1xufSk7XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vdGVzdC9jb250ZXh0LmpzIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfZW50cmllcyA9IHJlcXVpcmUoXCJiYWJlbC1ydW50aW1lL2NvcmUtanMvb2JqZWN0L2VudHJpZXNcIik7XG5cbnZhciBfZW50cmllczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9lbnRyaWVzKTtcblxudmFyIF9zdHJpbmdpZnkgPSByZXF1aXJlKFwiYmFiZWwtcnVudGltZS9jb3JlLWpzL2pzb24vc3RyaW5naWZ5XCIpO1xuXG52YXIgX3N0cmluZ2lmeTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9zdHJpbmdpZnkpO1xuXG52YXIgX2Fzc2lnbiA9IHJlcXVpcmUoXCJiYWJlbC1ydW50aW1lL2NvcmUtanMvb2JqZWN0L2Fzc2lnblwiKTtcblxudmFyIF9hc3NpZ24yID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfYXNzaWduKTtcblxudmFyIF9leHRlbmRzMiA9IHJlcXVpcmUoXCJiYWJlbC1ydW50aW1lL2hlbHBlcnMvZXh0ZW5kc1wiKTtcblxudmFyIF9leHRlbmRzMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2V4dGVuZHMyKTtcblxudmFyIF9kZWJ1ZyA9IHJlcXVpcmUoXCJkZWJ1Z1wiKTtcblxudmFyIF9kZWJ1ZzIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9kZWJ1Zyk7XG5cbnZhciBfZmFrZXIgPSByZXF1aXJlKFwiZmFrZXJcIik7XG5cbnZhciBfZmFrZXIyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZmFrZXIpO1xuXG52YXIgX3NlbGVjdG9ycyA9IHJlcXVpcmUoXCJsaWIvZXZtL3NlbGVjdG9yc1wiKTtcblxudmFyIF9zZWxlY3RvcnMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfc2VsZWN0b3JzKTtcblxudmFyIF9oZWxwZXJzID0gcmVxdWlyZShcIi4vaGVscGVyc1wiKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuY29uc3QgZGVidWcgPSAoMCwgX2RlYnVnMi5kZWZhdWx0KShcInRlc3Q6ZGF0YTpkZWNvZGVcIik7XG5cbmNvbnN0IHVpbnRzID0gKDAsIF9oZWxwZXJzLmdlbmVyYXRlVWludHMpKCk7XG5cbmZ1bmN0aW9uIGdlbmVyYXRlQXJyYXkobGVuZ3RoKSB7XG4gIHJldHVybiBbLi4uQXJyYXkobGVuZ3RoKV0ubWFwKCgpID0+IHVpbnRzLm5leHQoKS52YWx1ZSk7XG59XG5cbmNvbnN0IGNvbW1vbkZpeHR1cmVzID0gW3tcbiAgbmFtZTogXCJtdWx0aXBsZUZ1bGxXb3JkQXJyYXlcIixcbiAgdHlwZTogXCJ1aW50W11cIixcbiAgdmFsdWU6IGdlbmVyYXRlQXJyYXkoMykgLy8gdGFrZXMgdXAgMyB3aG9sZSB3b3Jkc1xufSwge1xuICBuYW1lOiBcIndpdGhpbldvcmRBcnJheVwiLFxuICB0eXBlOiBcInVpbnQxNltdXCIsXG4gIHZhbHVlOiBnZW5lcmF0ZUFycmF5KDEwKSAvLyB0YWtlcyB1cCA+MS8yIHdvcmRcbn0sIHtcbiAgbmFtZTogXCJtdWx0aXBsZVBhcnRXb3JkQXJyYXlcIixcbiAgdHlwZTogXCJ1aW50NjRbXVwiLFxuICB2YWx1ZTogZ2VuZXJhdGVBcnJheSg5KSAvLyB0YWtlcyB1cCAyLjI1IHdvcmRzXG59LCB7XG4gIG5hbWU6IFwiaW5jb252ZW5pZW50bHlXb3JkT2Zmc2V0QXJyYXlcIixcbiAgdHlwZTogXCJ1aW50MjQwW11cIixcbiAgdmFsdWU6IGdlbmVyYXRlQXJyYXkoMykgLy8gdGFrZXMgdXAgfjIuOCB3b3Jkc1xufSwge1xuICBuYW1lOiBcInNob3J0U3RyaW5nXCIsXG4gIHR5cGU6IFwic3RyaW5nXCIsXG4gIHZhbHVlOiBcImhlbGxvIHdvcmxkXCJcbn0sIHtcbiAgbmFtZTogXCJsb25nU3RyaW5nXCIsXG4gIHR5cGU6IFwic3RyaW5nXCIsXG4gIHZhbHVlOiBcInNvbGlkaXR5IGFsbG9jYXRpb24gaXMgYSBmdW4gbGVzc29uIGluIGVuZGlhbm5lc3NcIlxufV07XG5cbmNvbnN0IG1hcHBpbmdGaXh0dXJlcyA9IFt7XG4gIG5hbWU6IFwic2ltcGxlTWFwcGluZ1wiLFxuICB0eXBlOiB7XG4gICAgZnJvbTogXCJ1aW50MjU2XCIsXG4gICAgdG86IFwidWludDI1NlwiXG4gIH0sXG4gIHZhbHVlOiAoMCwgX2V4dGVuZHMzLmRlZmF1bHQpKHt9LCAoMCwgX2Fzc2lnbjIuZGVmYXVsdCkoe30sIC4uLmdlbmVyYXRlQXJyYXkoNSkubWFwKCh2YWx1ZSwgaWR4KSA9PiAoeyBbaWR4XTogdmFsdWUgfSkpKSlcbn0sIHtcbiAgbmFtZTogXCJudW1iZXJlZFN0cmluZ3NcIixcbiAgdHlwZToge1xuICAgIGZyb206IFwidWludDI1NlwiLFxuICAgIHRvOiBcInN0cmluZ1wiXG4gIH0sXG4gIHZhbHVlOiAoMCwgX2V4dGVuZHMzLmRlZmF1bHQpKHt9LCAoMCwgX2Fzc2lnbjIuZGVmYXVsdCkoe30sIC4uLmdlbmVyYXRlQXJyYXkoNykubWFwKCh2YWx1ZSwgaWR4KSA9PiAoeyBbdmFsdWVdOiBfZmFrZXIyLmRlZmF1bHQubG9yZW0uc2x1ZyhpZHgpIH0pKSkpXG59LCB7XG4gIG5hbWU6IFwic3RyaW5nc1RvU3RyaW5nc1wiLFxuICB0eXBlOiB7XG4gICAgZnJvbTogXCJzdHJpbmdcIixcbiAgICB0bzogXCJzdHJpbmdcIlxuICB9LFxuICB2YWx1ZTogKDAsIF9leHRlbmRzMy5kZWZhdWx0KSh7fSwgKDAsIF9hc3NpZ24yLmRlZmF1bHQpKHt9LCAuLi5bMCwgMSwgMiwgMywgNF0ubWFwKGlkeCA9PiAoeyBbX2Zha2VyMi5kZWZhdWx0LmxvcmVtLnNsdWcoaWR4KV06IF9mYWtlcjIuZGVmYXVsdC5sb3JlbS5zbHVnKGlkeCkgfSkpKSlcbn1dO1xuXG5kZWJ1ZyhcIm1hcHBpbmdGaXh0dXJlcyAlT1wiLCBtYXBwaW5nRml4dHVyZXMpO1xuXG5kZXNjcmliZShcIkRlY29kaW5nXCIsIGZ1bmN0aW9uICgpIHtcblxuICAvKlxuICAgKiBTdG9yYWdlIFRlc3RzXG4gICAqL1xuICAoMCwgX2hlbHBlcnMuZGVzY3JpYmVEZWNvZGluZykoXCJTdG9yYWdlIFZhcmlhYmxlc1wiLCBjb21tb25GaXh0dXJlcywgX3NlbGVjdG9yczIuZGVmYXVsdC5jdXJyZW50LnN0YXRlLnN0b3JhZ2UsIChjb250cmFjdE5hbWUsIGZpeHR1cmVzKSA9PiB7XG4gICAgcmV0dXJuIGBwcmFnbWEgc29saWRpdHkgXjAuNC4yMztcblxuY29udHJhY3QgJHtjb250cmFjdE5hbWV9IHtcblxuICBldmVudCBEb25lKCk7XG5cbiAgLy8gZGVjbGFyYXRpb25zXG4gICR7Zml4dHVyZXMubWFwKCh7IHR5cGUsIG5hbWUgfSkgPT4gYCR7dHlwZX0gJHtuYW1lfTtgKS5qb2luKFwiXFxuICBcIil9XG5cbiAgZnVuY3Rpb24gcnVuKCkgcHVibGljIHtcbiAgICAke2ZpeHR1cmVzLm1hcCgoeyBuYW1lLCB2YWx1ZSB9KSA9PiBgJHtuYW1lfSA9ICR7KDAsIF9zdHJpbmdpZnkyLmRlZmF1bHQpKHZhbHVlKX07YCkuam9pbihcIlxcbiAgICBcIil9XG5cbiAgICBlbWl0IERvbmUoKTtcbiAgfVxufVxuYDtcbiAgfSk7XG5cbiAgKDAsIF9oZWxwZXJzLmRlc2NyaWJlRGVjb2RpbmcpKFwiTWFwcGluZyBWYXJpYWJsZXNcIiwgbWFwcGluZ0ZpeHR1cmVzLCBfc2VsZWN0b3JzMi5kZWZhdWx0LmN1cnJlbnQuc3RhdGUuc3RvcmFnZSwgKGNvbnRyYWN0TmFtZSwgZml4dHVyZXMpID0+IHtcbiAgICByZXR1cm4gYHByYWdtYSBzb2xpZGl0eSBeMC40LjI0O1xuXG5jb250cmFjdCAke2NvbnRyYWN0TmFtZX0ge1xuICBldmVudCBEb25lKCk7XG5cbiAgLy8gZGVjbGFyYXRpb25zXG4gICR7Zml4dHVyZXMubWFwKCh7IG5hbWUsIHR5cGU6IHsgZnJvbSwgdG8gfSB9KSA9PiBgbWFwcGluZyAoJHtmcm9tfSA9PiAke3RvfSkgJHtuYW1lfTtgKS5qb2luKFwiXFxuICBcIil9XG5cbiAgZnVuY3Rpb24gcnVuKCkgcHVibGljIHtcbiAgICAke2ZpeHR1cmVzLm1hcCgoeyBuYW1lLCB0eXBlOiB7IGZyb20gfSwgdmFsdWUgfSkgPT4gKDAsIF9lbnRyaWVzMi5kZWZhdWx0KSh2YWx1ZSkubWFwKChbaywgdl0pID0+IGZyb20gPT09IFwic3RyaW5nXCIgPyBgJHtuYW1lfVtcIiR7a31cIl0gPSAkeygwLCBfc3RyaW5naWZ5Mi5kZWZhdWx0KSh2KX07YCA6IGAke25hbWV9WyR7a31dID0gJHsoMCwgX3N0cmluZ2lmeTIuZGVmYXVsdCkodil9O2ApLmpvaW4oXCJcXG4gICAgXCIpKS5qb2luKFwiXFxuXFxuICAgIFwiKX1cblxuICAgIGVtaXQgRG9uZSgpO1xuICB9XG59XG5gO1xuICB9KTtcblxuICAvKlxuICAgKiBNZW1vcnkgVGVzdHNcbiAgICovXG4gICgwLCBfaGVscGVycy5kZXNjcmliZURlY29kaW5nKShcIk1lbW9yeSBWYXJpYWJsZXNcIiwgY29tbW9uRml4dHVyZXMsIF9zZWxlY3RvcnMyLmRlZmF1bHQuY3VycmVudC5zdGF0ZS5tZW1vcnksIChjb250cmFjdE5hbWUsIGZpeHR1cmVzKSA9PiB7XG4gICAgY29uc3Qgc2VwYXJhdG9yID0gXCI7XFxuICAgIFwiO1xuXG4gICAgZnVuY3Rpb24gZGVjbGFyZUFzc2lnbih7IG5hbWUsIHR5cGUsIHZhbHVlIH0pIHtcbiAgICAgIGlmICh0eXBlLmluZGV4T2YoXCJbXVwiKSAhPSAtMSkge1xuICAgICAgICAvLyBhcnJheSwgbXVzdCBgbmV3YFxuICAgICAgICBsZXQgZGVjbGFyZSA9IGAke3R5cGV9IG1lbW9yeSAke25hbWV9ID0gbmV3ICR7dHlwZX0oJHt2YWx1ZS5sZW5ndGh9KWA7XG4gICAgICAgIGxldCBhc3NpZ25zID0gdmFsdWUubWFwKChrLCBpKSA9PiBgJHtuYW1lfVske2l9XSA9ICR7a31gKTtcbiAgICAgICAgcmV0dXJuIGAke2RlY2xhcmV9JHtzZXBhcmF0b3J9JHthc3NpZ25zLmpvaW4oc2VwYXJhdG9yKX1gO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGAke3R5cGV9IG1lbW9yeSAke25hbWV9ID0gJHsoMCwgX3N0cmluZ2lmeTIuZGVmYXVsdCkodmFsdWUpfWA7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGBwcmFnbWEgc29saWRpdHkgXjAuNC4yMztcblxuY29udHJhY3QgJHtjb250cmFjdE5hbWV9IHtcblxuICBldmVudCBEb25lKCk7XG5cbiAgZnVuY3Rpb24gcnVuKCkgcHVibGljIHtcbiAgICB1aW50IGk7XG4gICAgLy8gZGVjbGFyYXRpb25zXG4gICAgJHtmaXh0dXJlcy5tYXAoZGVjbGFyZUFzc2lnbikuam9pbihzZXBhcmF0b3IpfTtcblxuICAgIGVtaXQgRG9uZSgpO1xuICB9XG59XG5gO1xuICB9KTtcbn0pO1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3Rlc3QvZGF0YS9kZWNvZGUvZGVjb2RpbmcuanMiLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCJiYWJlbC1ydW50aW1lL2NvcmUtanMvanNvbi9zdHJpbmdpZnlcIik7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gZXh0ZXJuYWwgXCJiYWJlbC1ydW50aW1lL2NvcmUtanMvanNvbi9zdHJpbmdpZnlcIlxuLy8gbW9kdWxlIGlkID0gODFcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiZmFrZXJcIik7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gZXh0ZXJuYWwgXCJmYWtlclwiXG4vLyBtb2R1bGUgaWQgPSA4MlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCJjaGFuZ2UtY2FzZVwiKTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyBleHRlcm5hbCBcImNoYW5nZS1jYXNlXCJcbi8vIG1vZHVsZSBpZCA9IDgzXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2RlYnVnID0gcmVxdWlyZShcImRlYnVnXCIpO1xuXG52YXIgX2RlYnVnMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2RlYnVnKTtcblxudmFyIF9jaGFpID0gcmVxdWlyZShcImNoYWlcIik7XG5cbnZhciBfYmlnbnVtYmVyID0gcmVxdWlyZShcImJpZ251bWJlci5qc1wiKTtcblxudmFyIF91dGlscyA9IHJlcXVpcmUoXCJsaWIvZGF0YS9kZWNvZGUvdXRpbHNcIik7XG5cbnZhciB1dGlscyA9IF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKF91dGlscyk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKG9iaikgeyBpZiAob2JqICYmIG9iai5fX2VzTW9kdWxlKSB7IHJldHVybiBvYmo7IH0gZWxzZSB7IHZhciBuZXdPYmogPSB7fTsgaWYgKG9iaiAhPSBudWxsKSB7IGZvciAodmFyIGtleSBpbiBvYmopIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGtleSkpIG5ld09ialtrZXldID0gb2JqW2tleV07IH0gfSBuZXdPYmouZGVmYXVsdCA9IG9iajsgcmV0dXJuIG5ld09iajsgfSB9XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmNvbnN0IGRlYnVnID0gKDAsIF9kZWJ1ZzIuZGVmYXVsdCkoXCJ0ZXN0OmRhdGE6ZGVjb2RlOnV0aWxzXCIpO1xuXG5kZXNjcmliZShcIlV0aWxzXCIsIGZ1bmN0aW9uICgpIHtcbiAgZGVzY3JpYmUoXCJ0eXBlQ2xhc3MoKVwiLCBmdW5jdGlvbiAoKSB7XG4gICAgaXQoXCJoYW5kbGVzIG1hcHBpbmdzXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgIGxldCBkZWZpbml0aW9uID0ge1xuICAgICAgICB0eXBlRGVzY3JpcHRpb25zOiB7XG4gICAgICAgICAgdHlwZUlkZW50aWZpZXI6IFwidF9tYXBwaW5nJF90X3VpbnQyNTZfJF90X3VpbnQyNTZfJFwiXG4gICAgICAgIH1cbiAgICAgIH07XG5cbiAgICAgIF9jaGFpLmFzc2VydC5lcXVhbCh1dGlscy50eXBlQ2xhc3MoZGVmaW5pdGlvbiksIFwibWFwcGluZ1wiKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoXCJ0b0JpZ051bWJlcigpXCIsIGZ1bmN0aW9uICgpIHtcbiAgICBpdChcInJldHVybnMgY29ycmVjdCB2YWx1ZVwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICBsZXQgYnl0ZXMgPSBbMHhmNSwgMHhlMiwgMHhjNSwgMHgxN107XG4gICAgICBsZXQgZXhwZWN0ZWRWYWx1ZSA9IG5ldyBfYmlnbnVtYmVyLkJpZ051bWJlcihcImY1ZTJjNTE3XCIsIDE2KTtcblxuICAgICAgbGV0IHJlc3VsdCA9IHV0aWxzLnRvQmlnTnVtYmVyKGJ5dGVzKTtcblxuICAgICAgX2NoYWkuYXNzZXJ0LmVxdWFsKHJlc3VsdC50b1N0cmluZygpLCBleHBlY3RlZFZhbHVlLnRvU3RyaW5nKCkpO1xuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZShcInRvU2lnbmVkQmlnTnVtYmVyKClcIiwgZnVuY3Rpb24gKCkge1xuICAgIGl0KFwicmV0dXJucyBjb3JyZWN0IG5lZ2F0aXZlIHZhbHVlXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgIGxldCBieXRlcyA9IFsweGY1LCAweGUyLCAweGM1LCAweDE3XTsgLy8gc3RhcnRzIHdpdGggMGIxXG4gICAgICBsZXQgcmF3ID0gbmV3IF9iaWdudW1iZXIuQmlnTnVtYmVyKFwiZjVlMmM1MTdcIiwgMTYpO1xuICAgICAgbGV0IGJpdGZpcHBlZCA9IG5ldyBfYmlnbnVtYmVyLkJpZ051bWJlcihyYXcudG9TdHJpbmcoMikucmVwbGFjZSgvMC9nLCBcInhcIikucmVwbGFjZSgvMS9nLCBcIjBcIikucmVwbGFjZSgveC9nLCBcIjFcIiksIDIpO1xuXG4gICAgICBsZXQgZXhwZWN0ZWRWYWx1ZSA9IGJpdGZpcHBlZC5wbHVzKDEpLm5lZ2F0ZWQoKTtcblxuICAgICAgbGV0IHJlc3VsdCA9IHV0aWxzLnRvU2lnbmVkQmlnTnVtYmVyKGJ5dGVzKTtcblxuICAgICAgX2NoYWkuYXNzZXJ0LmVxdWFsKHJlc3VsdC50b1N0cmluZygpLCBleHBlY3RlZFZhbHVlLnRvU3RyaW5nKCkpO1xuICAgIH0pO1xuXG4gICAgaXQoXCJyZXR1cm5zIGNvcnJlY3QgcG9zaXRpdmUgdmFsdWVcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgbGV0IGJ5dGVzID0gWzB4MDUsIDB4ZTIsIDB4YzUsIDB4MTddOyAvLyBzdGFydHMgd2l0aCAwYjBcbiAgICAgIGxldCByYXcgPSBuZXcgX2JpZ251bWJlci5CaWdOdW1iZXIoXCIwNWUyYzUxN1wiLCAxNik7XG4gICAgICBsZXQgZXhwZWN0ZWRWYWx1ZSA9IHJhdztcblxuICAgICAgbGV0IHJlc3VsdCA9IHV0aWxzLnRvU2lnbmVkQmlnTnVtYmVyKGJ5dGVzKTtcblxuICAgICAgX2NoYWkuYXNzZXJ0LmVxdWFsKHJlc3VsdC50b1N0cmluZygpLCBleHBlY3RlZFZhbHVlLnRvU3RyaW5nKCkpO1xuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZShcInRvSGV4U3RyaW5nKClcIiwgZnVuY3Rpb24gKCkge1xuICAgIGl0KFwicmV0dXJucyBjb3JyZWN0IHJlcHJlc2VudGF0aW9uIHdpdGggZnVsbCBieXRlc1wiLCBmdW5jdGlvbiAoKSB7XG4gICAgICAvLyBpZSwgMHgwMCBpbnN0ZWFkIG9mIDB4MFxuICAgICAgX2NoYWkuYXNzZXJ0LmVxdWFsKHV0aWxzLnRvSGV4U3RyaW5nKFsweDA1LCAweDExXSksIFwiMHgwNTExXCIpO1xuICAgICAgX2NoYWkuYXNzZXJ0LmVxdWFsKHV0aWxzLnRvSGV4U3RyaW5nKFsweGZmLCAweDAwLCAweGZmXSksIFwiMHhmZjAwZmZcIik7XG4gICAgfSk7XG5cbiAgICBpdChcImFsbG93cyByZW1vdmluZyBsZWFkaW5nIHplcm9lc1wiLCBmdW5jdGlvbiAoKSB7XG4gICAgICBfY2hhaS5hc3NlcnQuZXF1YWwodXRpbHMudG9IZXhTdHJpbmcoWzB4MDAsIDB4MDAsIDB4Y2NdLCB0cnVlKSwgXCIweGNjXCIpO1xuICAgIH0pO1xuICB9KTtcbn0pO1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3Rlc3QvZGF0YS9kZWNvZGUvdXRpbHMuanMiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9hc3luY1RvR2VuZXJhdG9yMiA9IHJlcXVpcmUoXCJiYWJlbC1ydW50aW1lL2hlbHBlcnMvYXN5bmNUb0dlbmVyYXRvclwiKTtcblxudmFyIF9hc3luY1RvR2VuZXJhdG9yMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2FzeW5jVG9HZW5lcmF0b3IyKTtcblxudmFyIF9kZWJ1ZyA9IHJlcXVpcmUoXCJkZWJ1Z1wiKTtcblxudmFyIF9kZWJ1ZzIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9kZWJ1Zyk7XG5cbnZhciBfY2hhaSA9IHJlcXVpcmUoXCJjaGFpXCIpO1xuXG52YXIgX2dhbmFjaGVDbGkgPSByZXF1aXJlKFwiZ2FuYWNoZS1jbGlcIik7XG5cbnZhciBfZ2FuYWNoZUNsaTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9nYW5hY2hlQ2xpKTtcblxudmFyIF93ZWIgPSByZXF1aXJlKFwid2ViM1wiKTtcblxudmFyIF93ZWIyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfd2ViKTtcblxudmFyIF9oZWxwZXJzID0gcmVxdWlyZShcIi4vaGVscGVyc1wiKTtcblxudmFyIF9kZWJ1Z2dlciA9IHJlcXVpcmUoXCJsaWIvZGVidWdnZXJcIik7XG5cbnZhciBfZGVidWdnZXIyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZGVidWdnZXIpO1xuXG52YXIgX3NlbGVjdG9ycyA9IHJlcXVpcmUoXCJsaWIvZXZtL3NlbGVjdG9yc1wiKTtcblxudmFyIF9zZWxlY3RvcnMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfc2VsZWN0b3JzKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuY29uc3QgZGVidWcgPSAoMCwgX2RlYnVnMi5kZWZhdWx0KShcInRlc3Q6c29saWRpdHlcIik7XG5cbmNvbnN0IF9fT1VURVIgPSBgXG5wcmFnbWEgc29saWRpdHkgXjAuNC4xODtcblxuaW1wb3J0IFwiLi9Jbm5lci5zb2xcIjtcblxuY29udHJhY3QgT3V0ZXIge1xuICBldmVudCBDYWxsZWQoKTtcblxuICBJbm5lciBpbm5lcjtcblxuICBjb25zdHJ1Y3RvcihhZGRyZXNzIF9pbm5lcikgcHVibGljIHtcbiAgICBpbm5lciA9IElubmVyKF9pbm5lcik7XG4gIH1cblxuICBmdW5jdGlvbiBydW5TaW5nbGUoKSBwdWJsaWMge1xuICB9XG5cbiAgZnVuY3Rpb24gcnVuKCkgcHVibGljIHtcbiAgICBpbm5lci5ydW4oKTtcbiAgfVxufVxuYDtcblxuY29uc3QgX19JTk5FUiA9IGBcbnByYWdtYSBzb2xpZGl0eSBeMC40LjE4O1xuXG5jb250cmFjdCBJbm5lciB7XG4gIGZ1bmN0aW9uIHJ1bigpIHB1YmxpYyB7XG4gIH1cbn1cbmA7XG5cbmNvbnN0IF9fTUlHUkFUSU9OID0gYFxubGV0IE91dGVyID0gYXJ0aWZhY3RzLnJlcXVpcmUoXCJPdXRlclwiKTtcbmxldCBJbm5lciA9IGFydGlmYWN0cy5yZXF1aXJlKFwiSW5uZXJcIik7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oZGVwbG95ZXIpIHtcbiAgcmV0dXJuIGRlcGxveWVyXG4gICAgLnRoZW4oZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gZGVwbG95ZXIuZGVwbG95KElubmVyKTtcbiAgICB9KVxuICAgIC50aGVuKGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIElubmVyLmRlcGxveWVkKCk7XG4gICAgfSlcbiAgICAudGhlbihmdW5jdGlvbihpbm5lcikge1xuICAgICAgcmV0dXJuIGRlcGxveWVyLmRlcGxveShPdXRlciwgaW5uZXIuYWRkcmVzcyk7XG4gICAgfSk7XG59O1xuYDtcblxubGV0IHNvdXJjZXMgPSB7XG4gIFwiSW5uZXIuc29sXCI6IF9fSU5ORVIsXG4gIFwiT3V0ZXIuc29sXCI6IF9fT1VURVJcbn07XG5cbmxldCBtaWdyYXRpb25zID0ge1xuICBcIjJfZGVwbG95X2NvbnRyYWN0cy5qc1wiOiBfX01JR1JBVElPTlxufTtcblxuZGVzY3JpYmUoXCJFVk0gRGVidWdnaW5nXCIsIGZ1bmN0aW9uICgpIHtcbiAgdmFyIHByb3ZpZGVyO1xuICB2YXIgd2ViMztcblxuICB2YXIgYWJzdHJhY3Rpb25zO1xuICB2YXIgYXJ0aWZhY3RzO1xuICB2YXIgZmlsZXM7XG5cbiAgYmVmb3JlKFwiQ3JlYXRlIFByb3ZpZGVyXCIsICgwLCBfYXN5bmNUb0dlbmVyYXRvcjMuZGVmYXVsdCkoZnVuY3Rpb24qICgpIHtcbiAgICBwcm92aWRlciA9IF9nYW5hY2hlQ2xpMi5kZWZhdWx0LnByb3ZpZGVyKHsgc2VlZDogXCJkZWJ1Z2dlclwiLCBnYXNMaW1pdDogNzAwMDAwMCB9KTtcbiAgICB3ZWIzID0gbmV3IF93ZWIyLmRlZmF1bHQocHJvdmlkZXIpO1xuICB9KSk7XG5cbiAgYmVmb3JlKFwiUHJlcGFyZSBjb250cmFjdHMgYW5kIGFydGlmYWN0c1wiLCAoMCwgX2FzeW5jVG9HZW5lcmF0b3IzLmRlZmF1bHQpKGZ1bmN0aW9uKiAoKSB7XG4gICAgdGhpcy50aW1lb3V0KDMwMDAwKTtcblxuICAgIGxldCBwcmVwYXJlZCA9IHlpZWxkICgwLCBfaGVscGVycy5wcmVwYXJlQ29udHJhY3RzKShwcm92aWRlciwgc291cmNlcywgbWlncmF0aW9ucyk7XG4gICAgYWJzdHJhY3Rpb25zID0gcHJlcGFyZWQuYWJzdHJhY3Rpb25zO1xuICAgIGFydGlmYWN0cyA9IHByZXBhcmVkLmFydGlmYWN0cztcbiAgICBmaWxlcyA9IHByZXBhcmVkLmZpbGVzO1xuICB9KSk7XG5cbiAgZGVzY3JpYmUoXCJGdW5jdGlvbiBEZXB0aFwiLCBmdW5jdGlvbiAoKSB7XG4gICAgaXQoXCJyZW1haW5zIGF0IDEgaW4gYWJzZW5jZSBvZiBjcm9zcy1jb250cmFjdCBjYWxsc1wiLCAoMCwgX2FzeW5jVG9HZW5lcmF0b3IzLmRlZmF1bHQpKGZ1bmN0aW9uKiAoKSB7XG4gICAgICBjb25zdCBtYXhFeHBlY3RlZCA9IDE7XG5cbiAgICAgIGxldCBpbnN0YW5jZSA9IHlpZWxkIGFic3RyYWN0aW9ucy5Jbm5lci5kZXBsb3llZCgpO1xuICAgICAgbGV0IHJlY2VpcHQgPSB5aWVsZCBpbnN0YW5jZS5ydW4oKTtcbiAgICAgIGxldCB0eEhhc2ggPSByZWNlaXB0LnR4O1xuXG4gICAgICBsZXQgYnVnZ2VyID0geWllbGQgX2RlYnVnZ2VyMi5kZWZhdWx0LmZvclR4KHR4SGFzaCwge1xuICAgICAgICBwcm92aWRlcixcbiAgICAgICAgZmlsZXMsXG4gICAgICAgIGNvbnRyYWN0czogYXJ0aWZhY3RzXG4gICAgICB9KTtcblxuICAgICAgbGV0IHNlc3Npb24gPSBidWdnZXIuY29ubmVjdCgpO1xuICAgICAgdmFyIHN0ZXBwZWQ7IC8vIHNlc3Npb24gc3RlcHBlcnMgcmV0dXJuIGZhbHNlIHdoZW4gZG9uZVxuXG4gICAgICBkbyB7XG4gICAgICAgIHN0ZXBwZWQgPSBzZXNzaW9uLnN0ZXBOZXh0KCk7XG5cbiAgICAgICAgbGV0IGFjdHVhbCA9IHNlc3Npb24udmlldyhfc2VsZWN0b3JzMi5kZWZhdWx0LmN1cnJlbnQuY2FsbHN0YWNrKS5sZW5ndGg7XG5cbiAgICAgICAgX2NoYWkuYXNzZXJ0LmlzQXRNb3N0KGFjdHVhbCwgbWF4RXhwZWN0ZWQpO1xuICAgICAgfSB3aGlsZSAoc3RlcHBlZCk7XG4gICAgfSkpO1xuXG4gICAgaXQoXCJ0cmFja3MgY2FsbHN0YWNrIGNvcnJlY3RseVwiLCAoMCwgX2FzeW5jVG9HZW5lcmF0b3IzLmRlZmF1bHQpKGZ1bmN0aW9uKiAoKSB7XG4gICAgICAvLyBwcmVwYXJlXG4gICAgICBsZXQgaW5zdGFuY2UgPSB5aWVsZCBhYnN0cmFjdGlvbnMuT3V0ZXIuZGVwbG95ZWQoKTtcbiAgICAgIGxldCByZWNlaXB0ID0geWllbGQgaW5zdGFuY2UucnVuKCk7XG4gICAgICBsZXQgdHhIYXNoID0gcmVjZWlwdC50eDtcblxuICAgICAgbGV0IGJ1Z2dlciA9IHlpZWxkIF9kZWJ1Z2dlcjIuZGVmYXVsdC5mb3JUeCh0eEhhc2gsIHtcbiAgICAgICAgcHJvdmlkZXIsXG4gICAgICAgIGZpbGVzLFxuICAgICAgICBjb250cmFjdHM6IGFydGlmYWN0c1xuICAgICAgfSk7XG5cbiAgICAgIGxldCBzZXNzaW9uID0gYnVnZ2VyLmNvbm5lY3QoKTtcblxuICAgICAgLy8gZm9sbG93IGNhbGxzdGFjayBsZW5ndGggdmFsdWVzIGluIGxpc3RcbiAgICAgIC8vIHNlZSBzb3VyY2UgYWJvdmVcbiAgICAgIGxldCBleHBlY3RlZERlcHRoU2VxdWVuY2UgPSBbMSwgMiwgMSwgMF07XG4gICAgICBsZXQgYWN0dWFsU2VxdWVuY2UgPSBbc2Vzc2lvbi52aWV3KF9zZWxlY3RvcnMyLmRlZmF1bHQuY3VycmVudC5jYWxsc3RhY2spLmxlbmd0aF07XG5cbiAgICAgIHZhciBzdGVwcGVkO1xuXG4gICAgICBkbyB7XG4gICAgICAgIHN0ZXBwZWQgPSBzZXNzaW9uLnN0ZXBOZXh0KCk7XG5cbiAgICAgICAgbGV0IGN1cnJlbnREZXB0aCA9IHNlc3Npb24udmlldyhfc2VsZWN0b3JzMi5kZWZhdWx0LmN1cnJlbnQuY2FsbHN0YWNrKS5sZW5ndGg7XG4gICAgICAgIGxldCBsYXN0S25vd24gPSBhY3R1YWxTZXF1ZW5jZVthY3R1YWxTZXF1ZW5jZS5sZW5ndGggLSAxXTtcblxuICAgICAgICBpZiAoY3VycmVudERlcHRoICE9PSBsYXN0S25vd24pIHtcbiAgICAgICAgICBhY3R1YWxTZXF1ZW5jZS5wdXNoKGN1cnJlbnREZXB0aCk7XG4gICAgICAgIH1cbiAgICAgIH0gd2hpbGUgKHN0ZXBwZWQpO1xuXG4gICAgICBfY2hhaS5hc3NlcnQuZGVlcEVxdWFsKGFjdHVhbFNlcXVlbmNlLCBleHBlY3RlZERlcHRoU2VxdWVuY2UpO1xuICAgIH0pKTtcbiAgfSk7XG59KTtcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi90ZXN0L2V2bS5qcyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2FzeW5jVG9HZW5lcmF0b3IyID0gcmVxdWlyZShcImJhYmVsLXJ1bnRpbWUvaGVscGVycy9hc3luY1RvR2VuZXJhdG9yXCIpO1xuXG52YXIgX2FzeW5jVG9HZW5lcmF0b3IzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfYXN5bmNUb0dlbmVyYXRvcjIpO1xuXG52YXIgX2RlYnVnID0gcmVxdWlyZShcImRlYnVnXCIpO1xuXG52YXIgX2RlYnVnMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2RlYnVnKTtcblxudmFyIF9jaGFpID0gcmVxdWlyZShcImNoYWlcIik7XG5cbnZhciBfZ2FuYWNoZUNsaSA9IHJlcXVpcmUoXCJnYW5hY2hlLWNsaVwiKTtcblxudmFyIF9nYW5hY2hlQ2xpMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2dhbmFjaGVDbGkpO1xuXG52YXIgX3dlYiA9IHJlcXVpcmUoXCJ3ZWIzXCIpO1xuXG52YXIgX3dlYjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF93ZWIpO1xuXG52YXIgX2hlbHBlcnMgPSByZXF1aXJlKFwiLi9oZWxwZXJzXCIpO1xuXG52YXIgX2RlYnVnZ2VyID0gcmVxdWlyZShcImxpYi9kZWJ1Z2dlclwiKTtcblxudmFyIF9kZWJ1Z2dlcjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9kZWJ1Z2dlcik7XG5cbnZhciBfc2VsZWN0b3JzID0gcmVxdWlyZShcImxpYi9zb2xpZGl0eS9zZWxlY3RvcnNcIik7XG5cbnZhciBfc2VsZWN0b3JzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3NlbGVjdG9ycyk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmNvbnN0IGRlYnVnID0gKDAsIF9kZWJ1ZzIuZGVmYXVsdCkoXCJ0ZXN0OnNvbGlkaXR5XCIpO1xuXG5jb25zdCBfX1NJTkdMRV9DQUxMID0gYFxucHJhZ21hIHNvbGlkaXR5IF4wLjQuMTg7XG5cbmNvbnRyYWN0IFNpbmdsZUNhbGwge1xuICBldmVudCBDYWxsZWQoKTtcblxuICBmdW5jdGlvbiBydW4oKSBwdWJsaWMge1xuICAgIGVtaXQgQ2FsbGVkKCk7XG4gIH1cbn1cbmA7XG5cbmNvbnN0IF9fTkVTVEVEX0NBTEwgPSBgcHJhZ21hIHNvbGlkaXR5IF4wLjQuMTg7XG5cbmNvbnRyYWN0IE5lc3RlZENhbGwge1xuICBldmVudCBGaXJzdCgpO1xuICBldmVudCBTZWNvbmQoKTtcblxuICAvLyBydW4oKVxuICAvLyAgIGZpcnN0KCkgICAgMVxuICAvLyAgICAgaW5uZXIoKSAgMlxuICAvLyAgICAgICBldmVudCAgM1xuICAvLyAgICAgICAgICAgICAgMlxuICAvLyAgIHNlY29uZCAgICAgMVxuICAvLyAgICAgZXZlbnQgICAgMlxuICAvLyAgICAgICAgICAgICAgMVxuICBmdW5jdGlvbiBydW4oKSBwdWJsaWMge1xuICAgIGZpcnN0KCk7XG4gICAgc2Vjb25kKCk7XG4gIH1cblxuICBmdW5jdGlvbiBmaXJzdCgpIHB1YmxpYyB7XG4gICAgaW5uZXIoKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGlubmVyKCkgcHVibGljIHtcbiAgICBlbWl0IEZpcnN0KCk7XG4gIH1cblxuICBmdW5jdGlvbiBzZWNvbmQoKSBwdWJsaWMge1xuICAgIGVtaXQgU2Vjb25kKCk7XG4gIH1cblxufVxuYDtcblxubGV0IHNvdXJjZXMgPSB7XG4gIFwiU2luZ2xlQ2FsbC5zb2xcIjogX19TSU5HTEVfQ0FMTCxcbiAgXCJOZXN0ZWRDYWxsLnNvbFwiOiBfX05FU1RFRF9DQUxMXG59O1xuXG5kZXNjcmliZShcIlNvbGlkaXR5IERlYnVnZ2luZ1wiLCBmdW5jdGlvbiAoKSB7XG4gIHZhciBwcm92aWRlcjtcbiAgdmFyIHdlYjM7XG5cbiAgdmFyIGFic3RyYWN0aW9ucztcbiAgdmFyIGFydGlmYWN0cztcbiAgdmFyIGZpbGVzO1xuXG4gIGJlZm9yZShcIkNyZWF0ZSBQcm92aWRlclwiLCAoMCwgX2FzeW5jVG9HZW5lcmF0b3IzLmRlZmF1bHQpKGZ1bmN0aW9uKiAoKSB7XG4gICAgcHJvdmlkZXIgPSBfZ2FuYWNoZUNsaTIuZGVmYXVsdC5wcm92aWRlcih7IHNlZWQ6IFwiZGVidWdnZXJcIiwgZ2FzTGltaXQ6IDcwMDAwMDAgfSk7XG4gICAgd2ViMyA9IG5ldyBfd2ViMi5kZWZhdWx0KHByb3ZpZGVyKTtcbiAgfSkpO1xuXG4gIGJlZm9yZShcIlByZXBhcmUgY29udHJhY3RzIGFuZCBhcnRpZmFjdHNcIiwgKDAsIF9hc3luY1RvR2VuZXJhdG9yMy5kZWZhdWx0KShmdW5jdGlvbiogKCkge1xuICAgIHRoaXMudGltZW91dCgzMDAwMCk7XG5cbiAgICBsZXQgcHJlcGFyZWQgPSB5aWVsZCAoMCwgX2hlbHBlcnMucHJlcGFyZUNvbnRyYWN0cykocHJvdmlkZXIsIHNvdXJjZXMpO1xuICAgIGFic3RyYWN0aW9ucyA9IHByZXBhcmVkLmFic3RyYWN0aW9ucztcbiAgICBhcnRpZmFjdHMgPSBwcmVwYXJlZC5hcnRpZmFjdHM7XG4gICAgZmlsZXMgPSBwcmVwYXJlZC5maWxlcztcbiAgfSkpO1xuXG4gIGl0KFwiZXhwb3NlcyBmdW5jdGlvbmFsaXR5IHRvIHN0b3AgYXQgYnJlYWtwb2ludHNcIiwgKDAsIF9hc3luY1RvR2VuZXJhdG9yMy5kZWZhdWx0KShmdW5jdGlvbiogKCkge1xuICAgIC8vIHByZXBhcmVcbiAgICBsZXQgaW5zdGFuY2UgPSB5aWVsZCBhYnN0cmFjdGlvbnMuTmVzdGVkQ2FsbC5kZXBsb3llZCgpO1xuICAgIGxldCByZWNlaXB0ID0geWllbGQgaW5zdGFuY2UucnVuKCk7XG4gICAgbGV0IHR4SGFzaCA9IHJlY2VpcHQudHg7XG5cbiAgICBsZXQgYnVnZ2VyID0geWllbGQgX2RlYnVnZ2VyMi5kZWZhdWx0LmZvclR4KHR4SGFzaCwge1xuICAgICAgcHJvdmlkZXIsXG4gICAgICBmaWxlcyxcbiAgICAgIGNvbnRyYWN0czogYXJ0aWZhY3RzXG4gICAgfSk7XG5cbiAgICBsZXQgc2Vzc2lvbiA9IGJ1Z2dlci5jb25uZWN0KCk7XG5cbiAgICAvLyBhdCBgc2Vjb25kKCk7YFxuICAgIGxldCBicmVha3BvaW50ID0geyBcImFkZHJlc3NcIjogaW5zdGFuY2UuYWRkcmVzcywgbGluZTogMTYgfTtcbiAgICBsZXQgYnJlYWtwb2ludFN0b3BwZWQgPSBmYWxzZTtcblxuICAgIGRvIHtcbiAgICAgIHNlc3Npb24uY29udGludWVVbnRpbChicmVha3BvaW50KTtcblxuICAgICAgaWYgKCFzZXNzaW9uLmZpbmlzaGVkKSB7XG4gICAgICAgIGxldCByYW5nZSA9IHlpZWxkIHNlc3Npb24udmlldyhfc2VsZWN0b3JzMi5kZWZhdWx0LmN1cnJlbnQuc291cmNlUmFuZ2UpO1xuICAgICAgICBfY2hhaS5hc3NlcnQuZXF1YWwocmFuZ2UubGluZXMuc3RhcnQubGluZSwgMTYpO1xuXG4gICAgICAgIGJyZWFrcG9pbnRTdG9wcGVkID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9IHdoaWxlICghc2Vzc2lvbi5maW5pc2hlZCk7XG4gIH0pKTtcblxuICBkZXNjcmliZShcIkZ1bmN0aW9uIERlcHRoXCIsIGZ1bmN0aW9uICgpIHtcbiAgICBpdChcInJlbWFpbnMgYXQgMSBpbiBhYnNlbmNlIG9mIGlubmVyIGZ1bmN0aW9uIGNhbGxzXCIsICgwLCBfYXN5bmNUb0dlbmVyYXRvcjMuZGVmYXVsdCkoZnVuY3Rpb24qICgpIHtcbiAgICAgIGNvbnN0IG1heEV4cGVjdGVkID0gMTtcblxuICAgICAgbGV0IGluc3RhbmNlID0geWllbGQgYWJzdHJhY3Rpb25zLlNpbmdsZUNhbGwuZGVwbG95ZWQoKTtcbiAgICAgIGxldCByZWNlaXB0ID0geWllbGQgaW5zdGFuY2UucnVuKCk7XG4gICAgICBsZXQgdHhIYXNoID0gcmVjZWlwdC50eDtcblxuICAgICAgbGV0IGJ1Z2dlciA9IHlpZWxkIF9kZWJ1Z2dlcjIuZGVmYXVsdC5mb3JUeCh0eEhhc2gsIHtcbiAgICAgICAgcHJvdmlkZXIsXG4gICAgICAgIGZpbGVzLFxuICAgICAgICBjb250cmFjdHM6IGFydGlmYWN0c1xuICAgICAgfSk7XG5cbiAgICAgIGxldCBzZXNzaW9uID0gYnVnZ2VyLmNvbm5lY3QoKTtcbiAgICAgIHZhciBzdGVwcGVkOyAvLyBzZXNzaW9uIHN0ZXBwZXJzIHJldHVybiBmYWxzZSB3aGVuIGRvbmVcblxuICAgICAgZG8ge1xuICAgICAgICBzdGVwcGVkID0gc2Vzc2lvbi5zdGVwTmV4dCgpO1xuXG4gICAgICAgIGxldCBhY3R1YWwgPSBzZXNzaW9uLnZpZXcoX3NlbGVjdG9yczIuZGVmYXVsdC5jdXJyZW50LmZ1bmN0aW9uRGVwdGgpO1xuXG4gICAgICAgIF9jaGFpLmFzc2VydC5pc0F0TW9zdChhY3R1YWwsIG1heEV4cGVjdGVkKTtcbiAgICAgIH0gd2hpbGUgKHN0ZXBwZWQpO1xuICAgIH0pKTtcblxuICAgIGl0KFwic3BlbHVua3MgY29ycmVjdGx5XCIsICgwLCBfYXN5bmNUb0dlbmVyYXRvcjMuZGVmYXVsdCkoZnVuY3Rpb24qICgpIHtcbiAgICAgIC8vIHByZXBhcmVcbiAgICAgIGxldCBpbnN0YW5jZSA9IHlpZWxkIGFic3RyYWN0aW9ucy5OZXN0ZWRDYWxsLmRlcGxveWVkKCk7XG4gICAgICBsZXQgcmVjZWlwdCA9IHlpZWxkIGluc3RhbmNlLnJ1bigpO1xuICAgICAgbGV0IHR4SGFzaCA9IHJlY2VpcHQudHg7XG5cbiAgICAgIGxldCBidWdnZXIgPSB5aWVsZCBfZGVidWdnZXIyLmRlZmF1bHQuZm9yVHgodHhIYXNoLCB7XG4gICAgICAgIHByb3ZpZGVyLFxuICAgICAgICBmaWxlcyxcbiAgICAgICAgY29udHJhY3RzOiBhcnRpZmFjdHNcbiAgICAgIH0pO1xuXG4gICAgICBsZXQgc2Vzc2lvbiA9IGJ1Z2dlci5jb25uZWN0KCk7XG5cbiAgICAgIC8vIGZvbGxvdyBmdW5jdGlvbkRlcHRoIHZhbHVlcyBpbiBsaXN0XG4gICAgICAvLyBzZWUgc291cmNlIGFib3ZlXG4gICAgICBsZXQgZXhwZWN0ZWREZXB0aFNlcXVlbmNlID0gWzEsIDIsIDMsIDIsIDEsIDIsIDEsIDBdO1xuICAgICAgbGV0IGFjdHVhbFNlcXVlbmNlID0gW3Nlc3Npb24udmlldyhfc2VsZWN0b3JzMi5kZWZhdWx0LmN1cnJlbnQuZnVuY3Rpb25EZXB0aCldO1xuXG4gICAgICB2YXIgc3RlcHBlZDtcblxuICAgICAgZG8ge1xuICAgICAgICBzdGVwcGVkID0gc2Vzc2lvbi5zdGVwTmV4dCgpO1xuXG4gICAgICAgIGxldCBjdXJyZW50RGVwdGggPSBzZXNzaW9uLnZpZXcoX3NlbGVjdG9yczIuZGVmYXVsdC5jdXJyZW50LmZ1bmN0aW9uRGVwdGgpO1xuICAgICAgICBsZXQgbGFzdEtub3duID0gYWN0dWFsU2VxdWVuY2VbYWN0dWFsU2VxdWVuY2UubGVuZ3RoIC0gMV07XG5cbiAgICAgICAgaWYgKGN1cnJlbnREZXB0aCAhPT0gbGFzdEtub3duKSB7XG4gICAgICAgICAgYWN0dWFsU2VxdWVuY2UucHVzaChjdXJyZW50RGVwdGgpO1xuICAgICAgICB9XG4gICAgICB9IHdoaWxlIChzdGVwcGVkKTtcblxuICAgICAgX2NoYWkuYXNzZXJ0LmRlZXBFcXVhbChhY3R1YWxTZXF1ZW5jZSwgZXhwZWN0ZWREZXB0aFNlcXVlbmNlKTtcbiAgICB9KSk7XG4gIH0pO1xufSk7XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vdGVzdC9zb2xpZGl0eS5qcyJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQ1ZBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7QUM3REE7Ozs7OztBQ0FBOzs7Ozs7QUNBQTs7Ozs7O0FDQUE7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQ0VBO0FBUUE7QUFZQTtBQUFBO0FBRUE7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQ3RCQTtBQThCQTtBQUVBO0FBUUE7QUFPQTtBQU5BO0FBV0E7QUFYQTtBQWdCQTtBQWhCQTtBQXVCQTtBQXZCQTtBQTRCQTtBQTVCQTtBQW1DQTtBQW5DQTtBQXNDQTtBQUNBO0FBQUE7QUFFQTtBQUFBO0FBQUE7QUFIQTtBQWFBO0FBQ0E7QUFBQTtBQUFBO0FBRUE7QUFUQTtBQW1CQTtBQUNBO0FBQUE7QUFBQTtBQUlBO0FBeEJBO0FBUEE7QUFBQTtBQXZDQTtBQWlGQTtBQUlBO0FBSkE7QUFhQTtBQUpBO0FBU0E7QUFUQTtBQWVBO0FBREE7QUFRQTtBQUFBO0FBVUE7QUFBQTtBQUdBO0FBSEE7QUFHQTtBQUhBO0FBS0E7QUFBQTtBQUFBO0FBSUE7QUFuQkE7QUEv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O0FBQ0E7QUFDQTtBQUNBOzs7Ozs7O0FDVEE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQXdDQTs7Ozs7O0FDeENBOzs7Ozs7QUNBQTs7Ozs7O0FDQUE7Ozs7OztBQ0FBOzs7Ozs7QUNBQTs7Ozs7O0FDQUE7Ozs7OztBQ0FBOzs7Ozs7QUNBQTs7Ozs7O0FDQUE7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQ0VBO0FBb0RBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUVBO0FBQUE7QUFFQTtBQWFBO0FBQUE7QUFjQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFFQTtBQUFBO0FBQUE7QUFBQTtBQUVBO0FBQ0E7QUFOQTtBQURBO0FBdUJBO0FBQUE7QUFNQTtBQWFBO0FBQUE7QUFBQTtBQWRBO0FBc0JBO0FBQUE7QUFBQTtBQU9BO0FBbENBO0FBb0NBO0FBQUE7QUFFQTtBQUNBO0FBQUE7QUF2Q0E7QUE2Q0E7QUFBQTtBQUlBO0FBQUE7QUFJQTtBQUFBO0FBSUE7QUFBQTtBQUlBO0FBQUE7QUFDQTtBQUFBO0FBQUE7QUFEQTtBQVlBO0FBQUE7QUFJQTtBQUFBO0FBSUE7QUFBQTtBQUlBO0FBQUE7QUFJQTtBQUFBO0FBSUE7QUFBQTtBQUlBO0FBQUE7QUEvSUE7QUFBQTs7Ozs7O0FDL0RBOzs7Ozs7QUNBQTs7Ozs7O0FDQUE7Ozs7Ozs7QUNBQTs7Ozs7O0FDRUE7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQ0FBO0FBQUE7QUFBQTtBQUVBO0FBQUE7QUFBQTtBQUVBO0FBRUE7QUFBQTs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FDTkE7QUFRQTtBQUVBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7QUNWQTtBQTZCQTtBQUVBO0FBR0E7QUFLQTtBQUFBO0FBQUE7QUFMQTtBQVNBO0FBQUE7QUFFQTtBQUNBO0FBQUE7QUFBQTtBQURBO0FBQUE7QUFNQTtBQUFBO0FBQ0E7QUFBQTtBQURBO0FBRUE7QUFBQTtBQUFBO0FBTUE7QUFFQTtBQUFBO0FBQ0E7QUFFQTtBQUFBO0FBR0E7QUFBQTtBQUFBO0FBSUE7QUFFQTtBQUZBO0FBY0E7Ozs7OztBQ3ZGQTs7Ozs7O0FDQUE7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQ0VBO0FBNkNBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUVBO0FBQUE7QUFFQTtBQUVBO0FBc0JBO0FBQUE7QUFHQTtBQXpCQTtBQTRDQTtBQUFBO0FBR0E7QUFHQTtBQUNBO0FBQUE7QUFHQTtBQUFBO0FBR0E7QUFBQTtBQUFBO0FBSEE7QUFVQTtBQUFBO0FBQUE7QUFJQTtBQUVBO0FBQUE7QUFHQTtBQUFBO0FBRUE7QUFJQTtBQUFBO0FBQUE7QUFHQTtBQUNBO0FBRUE7QUFBQTtBQUVBO0FBSUE7QUFFQTtBQUFBO0FBSUE7QUFBQTtBQUlBO0FBQUE7QUFFQTs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FDMUpBO0FBK0JBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUVBO0FBQUE7QUFFQTtBQUVBO0FBS0E7QUFDQTtBQUdBO0FBSkE7QUFJQTtBQUFBO0FBQ0E7QUFHQTtBQUpBO0FBQUE7QUFJQTtBQWJBO0FBa0JBO0FBQUE7QUFDQTtBQUFBO0FBQUE7QUFEQTtBQU9BO0FBQUE7QUFBQTtBQVBBO0FBYUE7QUFPQTtBQUFBO0FBTUE7QUFBQTtBQUlBO0FBQUE7QUFHQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFFQTtBQUFBO0FBQUE7QUFMQTtBQVlBO0FBQUE7QUFPQTs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FDeEdBO0FBeUNBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUVBO0FBQUE7QUFFQTtBQUVBO0FBQ0E7QUFBQTtBQUVBO0FBQUE7QUFBQTtBQUVBO0FBQUE7QUFBQTtBQUVBO0FBQUE7QUFBQTtBQUFBO0FBRUE7QUFBQTtBQUFBO0FBQ0E7QUFFQTtBQUFBO0FBSUE7QUFBQTtBQUFBO0FBSkE7QUFVQTtBQUdBO0FBR0E7QUFHQTtBQUdBO0FBR0E7QUFBQTtBQUFBO0FBR0E7QUFHQTtBQUNBO0FBRUE7QUFBQTtBQUFBO0FBRkE7QUFPQTtBQUlBO0FBTUE7QUFBQTtBQUlBO0FBQUE7QUFBQTtBQUpBO0FBYUE7QUFDQTtBQVdBO0FBU0E7QUFBQTtBQUlBO0FBVUE7QUFBQTtBQXFCQTtBQU9BO0FBQUE7QUFTQTtBQUdBO0FBQUE7QUFBQTtBQUhBO0FBZUE7QUFDQTtBQUFBO0FBQUE7QUFEQTtBQUFBO0FBUUE7QUFDQTtBQUFBO0FBQUE7QUFJQTtBQUxBO0FBZUE7QUFBQTtBQVNBO0FBVEE7QUFpQkE7QUFDQTtBQUVBO0FBQUE7QUFBQTtBQUZBO0FBUUE7QUFBQTtBQUFBO0FBUkE7QUFZQTtBQUlBO0FBQUE7QUFBQTtBQUpBO0FBQUE7QUFZQTtBQVVBO0FBQUE7QUFRQTtBQUFBO0FBRUE7QUFJQTtBQUVBO0FBQUE7QUFJQTtBQU1BO0FBQUE7QUFDQTtBQUFBO0FBQUE7QUFLQTtBQVdBO0FBQUE7QUFBQTtBQUlBO0FBR0E7QUFrQkE7QUFBQTtBQUFBO0FBR0E7QUE3Q0E7QUFrREE7QUFBQTtBQUNBO0FBQUE7QUFBQTtBQUlBO0FBQ0E7QUFFQTtBQUdBO0FBR0E7QUFSQTtBQUFBO0FBTkE7QUFvQkE7QUFBQTtBQUFBO0FBcEJBO0FBMkJBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7QUNsWUE7QUFpQkE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBRUE7QUFBQTtBQUVBO0FBVUE7QUFTQTtBQUFBO0FBSUE7QUFBQTtBQUFBO0FBSkE7QUFRQTtBQUFBO0FBQUE7QUFLQTtBQUlBO0FBQUE7QUFBQTtBQUlBO0FBVUE7QUFBQTtBQUlBO0FBSkE7QUFTQTs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FDaEZBO0FBb0JBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUVBO0FBQUE7QUFFQTtBQVVBO0FBQ0E7QUFBQTtBQUVBO0FBQUE7QUFBQTtBQUdBO0FBQUE7QUFBQTtBQUVBO0FBRUE7QUFBQTtBQUNBO0FBUUE7QUFBQTtBQW1DQTtBQUFBO0FBSUE7QUFBQTtBQUFBO0FBSkE7QUFhQTtBQUFBO0FBUUE7QUFyQkE7QUFvQ0E7QUFwQ0E7QUE4Q0E7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQ3RJQTtBQU1BO0FBT0E7QUFDQTtBQUlBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7QUNsQkE7QUFrQ0E7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBRUE7QUFBQTtBQUVBO0FBY0E7QUFDQTtBQWFBO0FBRUE7QUFNQTtBQVlBO0FBQUE7QUFLQTtBQUtBO0FBRUE7QUFBQTtBQUtBO0FBWkE7QUEyQkE7QUFBQTtBQUNBO0FBQUE7QUFBQTtBQURBO0FBT0E7QUFBQTtBQUFBO0FBTUE7QUFLQTtBQUFBO0FBcUJBO0FBQUE7QUFDQTtBQUFBO0FBQUE7QUFNQTtBQUdBO0FBQUE7QUFhQTtBQUFBO0FBTUE7QUFBQTtBQXNCQTtBQUFBO0FBTUE7QUFNQTtBQUFBO0FBTkE7QUFRQTs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FDOU5BO0FBc0JBO0FBRUE7QUFLQTtBQUFBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7QUM3QkE7QUF5QkE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBRUE7QUFBQTtBQUVBO0FBRUE7QUFJQTtBQUFBO0FBSUE7QUFBQTtBQUNBO0FBTUE7QUFFQTtBQUFBO0FBQ0E7QUFBQTtBQUFBO0FBS0E7QUFFQTtBQUFBO0FBSUE7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQzVEQTtBQTJCQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFFQTtBQUFBO0FBRUE7QUFPQTtBQVdBO0FBQUE7QUFFQTtBQUFBO0FBQUE7QUFPQTtBQUVBO0FBQUE7QUFDQTtBQUFBO0FBRUE7QUFHQTtBQUVBO0FBQUE7QUFDQTtBQUlBO0FBQUE7QUFLQTtBQUFBO0FBQUE7QUFLQTtBQUFBO0FBQUE7QUFBQTtBQUdBO0FBQUE7QUFDQTtBQUNBO0FBRUE7QUFBQTtBQUlBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7QUM5RkE7QUF1QkE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBRUE7QUFBQTtBQUVBO0FBRUE7QUFHQTtBQUVBO0FBQUE7QUFMQTtBQWVBO0FBQUE7QUFBQTtBQUtBO0FBQ0E7QUFBQTtBQUFBO0FBckJBO0FBNkJBO0FBQUE7QUFRQTtBQUFBO0FBSUE7QUFBQTtBQUlBO0FBQUE7QUFHQTtBQUlBO0FBTUE7QUFBQTtBQUNBO0FBQUE7QUFHQTtBQUFBO0FBR0E7QUFBQTtBQU9BO0FBQUE7QUFDQTtBQUFBO0FBTUE7QUFBQTtBQVNBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7QUNySEE7QUFXQTtBQU9BO0FBQ0E7QUFPQTtBQUNBO0FBT0E7QUFDQTtBQU9BO0FBQ0E7QUFPQTtBQUNBO0FBT0E7QUFDQTtBQUtBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7QUNoRUE7QUFvQkE7QUFFQTtBQUdBO0FBQUE7QUFJQTtBQUFBO0FBR0E7QUFDQTtBQU1BO0FBQ0E7QUFBQTtBQUFBO0FBREE7QUFFQTtBQUFBO0FBQUE7QUFGQTtBQUxBO0FBREE7QUFEQTtBQWlCQTtBQUFBO0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUFBO0FBREE7QUFBQTtBQURBO0FBREE7QUFXQTtBQUFBO0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUFBO0FBREE7QUFBQTtBQURBO0FBREE7QUFnQkE7QUFBQTtBQUdBO0FBRUE7QUFDQTtBQUNBO0FBQUE7QUFBQTtBQURBO0FBRUE7QUFBQTtBQUFBO0FBRkE7QUFBQTtBQURBO0FBRkE7QUE3REE7QUFBQTs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FDeEJBO0FBNEJBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUVBO0FBQUE7QUFFQTtBQUtBO0FBRUE7QUFHQTtBQUdBO0FBR0E7QUFLQTs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FDckRBO0FBOEJBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUVBO0FBQUE7QUFFQTtBQU1BO0FBTUE7QUFnQkE7QUFjQTtBQUtBO0FBUUE7QUFFQTtBQUVBO0FBREE7QUFRQTtBQUdBO0FBTUE7QUFFQTtBQVVBO0FBS0E7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQzlIQTtBQTBCQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFFQTtBQUFBO0FBRUE7QUFLQTtBQUtBO0FBR0E7QUFBQTtBQUFBO0FBSUE7QUFpQkE7QUFLQTtBQUtBO0FBS0E7QUFLQTtBQUFBO0FBV0E7QUFUQTtBQWdCQTtBQUtBO0FBS0E7QUFFQTtBQUlBO0FBSUE7QUFHQTtBQUtBOzs7Ozs7QUNwSUE7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQ0VBO0FBc0JBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUVBO0FBQUE7QUFFQTtBQUlBO0FBS0E7QUFtQkE7QUFLQTtBQUlBO0FBS0E7QUFpQkE7QUFLQTtBQUtBO0FBQ0E7QUFBQTtBQUdBO0FBR0E7QUFFQTtBQUFBO0FBQ0E7QUFBQTtBQUVBO0FBQUE7QUFBQTtBQUVBO0FBRUE7QUFDQTtBQUVBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7QUNsSEE7QUFZQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFFQTtBQUFBO0FBQ0E7QUFBQTtBQUVBO0FBR0E7QUFFQTtBQUFBO0FBQ0E7QUFBQTtBQUVBO0FBR0E7QUFFQTs7Ozs7OztBQ2hDQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUEwQ0E7Ozs7Ozs7Ozs7QUFzQkE7Ozs7Ozs7Ozs7Ozs7Ozs7QUFZQTs7Ozs7OztBQzVFQTtBQUNBO0FBb0dBO0FBQ0E7Ozs7QUFJQTtBQUNBOztBQUVBO0FBQ0E7Ozs7QUFYQTtBQUNBO0FBb0JBOzs7O0FBSUE7QUFDQTs7QUFFQTtBQUNBOzs7O0FBVkE7QUFDQTtBQW1DQTtBQUNBOzs7Ozs7QUFNQTtBQUNBOzs7O0FBVkE7Ozs7OztBQ3hKQTs7Ozs7O0FDQUE7Ozs7OztBQ0FBOzs7Ozs7O0FDQUE7Ozs7Ozs7QUNBQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBa0NBOzs7Ozs7O0FBdUJBOzs7Ozs7Ozs7Ozs7Ozs7O0FBU0E7Ozs7Ozs7QUNsRUE7Ozs7Ozs7Ozs7QUFrQ0E7QUFDQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQVdBOzs7O0EiLCJzb3VyY2VSb290IjoiIn0=