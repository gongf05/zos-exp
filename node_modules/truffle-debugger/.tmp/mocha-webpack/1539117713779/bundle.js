(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define("Debugger", [], factory);
	else if(typeof exports === 'object')
		exports["Debugger"] = factory();
	else
		root["Debugger"] = factory();
})(typeof self !== 'undefined' ? self : this, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 39);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports) {

module.exports = require("debug");

/***/ }),
/* 1 */
/***/ (function(module, exports) {

module.exports = require("babel-runtime/core-js/object/entries");

/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var cov_1iyo6c3ahx = function () {
  var path = "/Users/gnidan/src/work/truffle/packages/truffle-debugger/lib/solidity/selectors/index.js",
      hash = "824898185633b01c88bfc29c43a42a1ed68ac2ea",
      Function = function () {}.constructor,
      global = new Function('return this')(),
      gcv = "__coverage__",
      coverageData = { path: "/Users/gnidan/src/work/truffle/packages/truffle-debugger/lib/solidity/selectors/index.js", statementMap: { "0": { start: { line: 3, column: 0 }, end: { line: 5, column: 3 } }, "1": { start: { line: 7, column: 16 }, end: { line: 7, column: 56 } }, "2": { start: { line: 9, column: 16 }, end: { line: 9, column: 49 } }, "3": { start: { line: 11, column: 15 }, end: { line: 11, column: 62 } }, "4": { start: { line: 13, column: 16 }, end: { line: 13, column: 48 } }, "5": { start: { line: 15, column: 14 }, end: { line: 15, column: 60 } }, "6": { start: { line: 17, column: 15 }, end: { line: 17, column: 46 } }, "7": { start: { line: 19, column: 13 }, end: { line: 19, column: 29 } }, "8": { start: { line: 21, column: 14 }, end: { line: 21, column: 44 } }, "9": { start: { line: 23, column: 20 }, end: { line: 23, column: 44 } }, "10": { start: { line: 25, column: 28 }, end: { line: 25, column: 61 } }, "11": { start: { line: 27, column: 29 }, end: { line: 27, column: 74 } }, "12": { start: { line: 29, column: 24 }, end: { line: 29, column: 53 } }, "13": { start: { line: 31, column: 25 }, end: { line: 31, column: 66 } }, "14": { start: { line: 33, column: 17 }, end: { line: 33, column: 45 } }, "15": { start: { line: 35, column: 18 }, end: { line: 35, column: 52 } }, "16": { start: { line: 37, column: 39 }, end: { line: 37, column: 93 } }, "17": { start: { line: 39, column: 14 }, end: { line: 39, column: 65 } }, "18": { start: { line: 42, column: 2 }, end: { line: 53, column: 4 } }, "19": { start: { line: 56, column: 15 }, end: { line: 226, column: 2 } }, "20": { start: { line: 60, column: 18 }, end: { line: 60, column: 32 } }, "21": { start: { line: 69, column: 64 }, end: { line: 69, column: 87 } }, "22": { start: { line: 74, column: 67 }, end: { line: 74, column: 98 } }, "23": { start: { line: 85, column: 133 }, end: { line: 85, column: 158 } }, "24": { start: { line: 90, column: 28 }, end: { line: 90, column: 61 } }, "25": { start: { line: 96, column: 6 }, end: { line: 98, column: 7 } }, "26": { start: { line: 97, column: 8 }, end: { line: 97, column: 18 } }, "27": { start: { line: 100, column: 25 }, end: { line: 100, column: 69 } }, "28": { start: { line: 102, column: 6 }, end: { line: 114, column: 7 } }, "29": { start: { line: 110, column: 8 }, end: { line: 110, column: 23 } }, "30": { start: { line: 111, column: 8 }, end: { line: 113, column: 9 } }, "31": { start: { line: 112, column: 10 }, end: { line: 112, column: 46 } }, "32": { start: { line: 116, column: 34 }, end: { line: 118, column: 10 } }, "33": { start: { line: 116, column: 122 }, end: { line: 118, column: 7 } }, "34": { start: { line: 119, column: 35 }, end: { line: 119, column: 102 } }, "35": { start: { line: 121, column: 24 }, end: { line: 121, column: 54 } }, "36": { start: { line: 122, column: 6 }, end: { line: 122, column: 43 } }, "37": { start: { line: 124, column: 6 }, end: { line: 158, column: 9 } }, "38": { start: { line: 129, column: 26 }, end: { line: 129, column: 61 } }, "39": { start: { line: 131, column: 8 }, end: { line: 134, column: 10 } }, "40": { start: { line: 139, column: 68 }, end: { line: 139, column: 77 } }, "41": { start: { line: 140, column: 37 }, end: { line: 140, column: 70 } }, "42": { start: { line: 141, column: 22 }, end: { line: 144, column: 9 } }, "43": { start: { line: 146, column: 8 }, end: { line: 148, column: 9 } }, "44": { start: { line: 147, column: 10 }, end: { line: 147, column: 43 } }, "45": { start: { line: 150, column: 8 }, end: { line: 157, column: 11 } }, "46": { start: { line: 165, column: 16 }, end: { line: 165, column: 18 } }, "47": { start: { line: 166, column: 6 }, end: { line: 168, column: 9 } }, "48": { start: { line: 167, column: 8 }, end: { line: 167, column: 42 } }, "49": { start: { line: 171, column: 21 }, end: { line: 171, column: 25 } }, "50": { start: { line: 172, column: 6 }, end: { line: 178, column: 7 } }, "51": { start: { line: 173, column: 8 }, end: { line: 177, column: 9 } }, "52": { start: { line: 174, column: 10 }, end: { line: 174, column: 33 } }, "53": { start: { line: 176, column: 10 }, end: { line: 176, column: 29 } }, "54": { start: { line: 179, column: 6 }, end: { line: 179, column: 17 } }, "55": { start: { line: 185, column: 144 }, end: { line: 185, column: 157 } }, "56": { start: { line: 190, column: 105 }, end: { line: 190, column: 122 } }, "57": { start: { line: 201, column: 6 }, end: { line: 203, column: 7 } }, "58": { start: { line: 202, column: 8 }, end: { line: 202, column: 20 } }, "59": { start: { line: 205, column: 6 }, end: { line: 205, column: 29 } }, "60": { start: { line: 206, column: 6 }, end: { line: 206, column: 23 } }, "61": { start: { line: 208, column: 6 }, end: { line: 208, column: 103 } }, "62": { start: { line: 214, column: 81 }, end: { line: 214, column: 115 } }, "63": { start: { line: 219, column: 97 }, end: { line: 219, column: 103 } }, "64": { start: { line: 224, column: 80 }, end: { line: 224, column: 93 } }, "65": { start: { line: 228, column: 0 }, end: { line: 228, column: 27 } } }, fnMap: { "0": { name: "_interopRequireDefault", decl: { start: { line: 37, column: 9 }, end: { line: 37, column: 31 } }, loc: { start: { line: 37, column: 37 }, end: { line: 37, column: 95 } }, line: 37 }, "1": { name: "getSourceRange", decl: { start: { line: 41, column: 9 }, end: { line: 41, column: 23 } }, loc: { start: { line: 41, column: 42 }, end: { line: 54, column: 1 } }, line: 41 }, "2": { name: "(anonymous_2)", decl: { start: { line: 60, column: 9 }, end: { line: 60, column: 10 } }, loc: { start: { line: 60, column: 18 }, end: { line: 60, column: 32 } }, line: 60 }, "3": { name: "(anonymous_3)", decl: { start: { line: 69, column: 55 }, end: { line: 69, column: 56 } }, loc: { start: { line: 69, column: 64 }, end: { line: 69, column: 87 } }, line: 69 }, "4": { name: "(anonymous_4)", decl: { start: { line: 74, column: 58 }, end: { line: 74, column: 59 } }, loc: { start: { line: 74, column: 67 }, end: { line: 74, column: 98 } }, line: 74 }, "5": { name: "(anonymous_5)", decl: { start: { line: 85, column: 104 }, end: { line: 85, column: 105 } }, loc: { start: { line: 85, column: 133 }, end: { line: 85, column: 158 } }, line: 85 }, "6": { name: "(anonymous_6)", decl: { start: { line: 90, column: 19 }, end: { line: 90, column: 20 } }, loc: { start: { line: 90, column: 28 }, end: { line: 90, column: 61 } }, line: 90 }, "7": { name: "(anonymous_7)", decl: { start: { line: 95, column: 119 }, end: { line: 95, column: 120 } }, loc: { start: { line: 95, column: 159 }, end: { line: 159, column: 5 } }, line: 95 }, "8": { name: "(anonymous_8)", decl: { start: { line: 116, column: 99 }, end: { line: 116, column: 100 } }, loc: { start: { line: 116, column: 122 }, end: { line: 118, column: 7 } }, line: 116 }, "9": { name: "(anonymous_9)", decl: { start: { line: 124, column: 30 }, end: { line: 124, column: 31 } }, loc: { start: { line: 124, column: 54 }, end: { line: 135, column: 7 } }, line: 124 }, "10": { name: "(anonymous_10)", decl: { start: { line: 135, column: 13 }, end: { line: 135, column: 14 } }, loc: { start: { line: 135, column: 45 }, end: { line: 158, column: 7 } }, line: 135 }, "11": { name: "(anonymous_11)", decl: { start: { line: 164, column: 83 }, end: { line: 164, column: 84 } }, loc: { start: { line: 164, column: 99 }, end: { line: 180, column: 5 } }, line: 164 }, "12": { name: "(anonymous_12)", decl: { start: { line: 166, column: 27 }, end: { line: 166, column: 28 } }, loc: { start: { line: 166, column: 50 }, end: { line: 168, column: 7 } }, line: 166 }, "13": { name: "(anonymous_13)", decl: { start: { line: 185, column: 131 }, end: { line: 185, column: 132 } }, loc: { start: { line: 185, column: 144 }, end: { line: 185, column: 157 } }, line: 185 }, "14": { name: "(anonymous_14)", decl: { start: { line: 190, column: 78 }, end: { line: 190, column: 79 } }, loc: { start: { line: 190, column: 105 }, end: { line: 190, column: 122 } }, line: 190 }, "15": { name: "(anonymous_15)", decl: { start: { line: 200, column: 184 }, end: { line: 200, column: 185 } }, loc: { start: { line: 200, column: 208 }, end: { line: 209, column: 5 } }, line: 200 }, "16": { name: "(anonymous_16)", decl: { start: { line: 214, column: 66 }, end: { line: 214, column: 67 } }, loc: { start: { line: 214, column: 81 }, end: { line: 214, column: 115 } }, line: 214 }, "17": { name: "(anonymous_17)", decl: { start: { line: 219, column: 87 }, end: { line: 219, column: 88 } }, loc: { start: { line: 219, column: 97 }, end: { line: 219, column: 103 } }, line: 219 }, "18": { name: "(anonymous_18)", decl: { start: { line: 224, column: 68 }, end: { line: 224, column: 69 } }, loc: { start: { line: 224, column: 80 }, end: { line: 224, column: 93 } }, line: 224 } }, branchMap: { "0": { loc: { start: { line: 37, column: 46 }, end: { line: 37, column: 92 } }, type: "cond-expr", locations: [{ start: { line: 37, column: 70 }, end: { line: 37, column: 73 } }, { start: { line: 37, column: 76 }, end: { line: 37, column: 92 } }], line: 37 }, "1": { loc: { start: { line: 37, column: 46 }, end: { line: 37, column: 67 } }, type: "binary-expr", locations: [{ start: { line: 37, column: 46 }, end: { line: 37, column: 49 } }, { start: { line: 37, column: 53 }, end: { line: 37, column: 67 } }], line: 37 }, "2": { loc: { start: { line: 41, column: 24 }, end: { line: 41, column: 40 } }, type: "default-arg", locations: [{ start: { line: 41, column: 38 }, end: { line: 41, column: 40 } }], line: 41 }, "3": { loc: { start: { line: 43, column: 11 }, end: { line: 43, column: 33 } }, type: "binary-expr", locations: [{ start: { line: 43, column: 11 }, end: { line: 43, column: 28 } }, { start: { line: 43, column: 32 }, end: { line: 43, column: 33 } }], line: 43 }, "4": { loc: { start: { line: 44, column: 12 }, end: { line: 44, column: 35 } }, type: "binary-expr", locations: [{ start: { line: 44, column: 12 }, end: { line: 44, column: 30 } }, { start: { line: 44, column: 34 }, end: { line: 44, column: 35 } }], line: 44 }, "5": { loc: { start: { line: 45, column: 11 }, end: { line: 52, column: 5 } }, type: "binary-expr", locations: [{ start: { line: 45, column: 11 }, end: { line: 45, column: 28 } }, { start: { line: 45, column: 32 }, end: { line: 52, column: 5 } }], line: 45 }, "6": { loc: { start: { line: 85, column: 133 }, end: { line: 85, column: 158 } }, type: "binary-expr", locations: [{ start: { line: 85, column: 133 }, end: { line: 85, column: 152 } }, { start: { line: 85, column: 156 }, end: { line: 85, column: 158 } }], line: 85 }, "7": { loc: { start: { line: 96, column: 6 }, end: { line: 98, column: 7 } }, type: "if", locations: [{ start: { line: 96, column: 6 }, end: { line: 98, column: 7 } }, { start: { line: 96, column: 6 }, end: { line: 98, column: 7 } }], line: 96 }, "8": { loc: { start: { line: 102, column: 6 }, end: { line: 114, column: 7 } }, type: "if", locations: [{ start: { line: 102, column: 6 }, end: { line: 114, column: 7 } }, { start: { line: 102, column: 6 }, end: { line: 114, column: 7 } }], line: 102 }, "9": { loc: { start: { line: 117, column: 86 }, end: { line: 117, column: 98 } }, type: "binary-expr", locations: [{ start: { line: 117, column: 86 }, end: { line: 117, column: 92 } }, { start: { line: 117, column: 96 }, end: { line: 117, column: 98 } }], line: 117 }, "10": { loc: { start: { line: 129, column: 26 }, end: { line: 129, column: 61 } }, type: "binary-expr", locations: [{ start: { line: 129, column: 26 }, end: { line: 129, column: 55 } }, { start: { line: 129, column: 59 }, end: { line: 129, column: 61 } }], line: 129 }, "11": { loc: { start: { line: 139, column: 22 }, end: { line: 139, column: 31 } }, type: "default-arg", locations: [{ start: { line: 139, column: 30 }, end: { line: 139, column: 31 } }], line: 139 }, "12": { loc: { start: { line: 139, column: 33 }, end: { line: 139, column: 43 } }, type: "default-arg", locations: [{ start: { line: 139, column: 42 }, end: { line: 139, column: 43 } }], line: 139 }, "13": { loc: { start: { line: 139, column: 45 }, end: { line: 139, column: 63 } }, type: "default-arg", locations: [{ start: { line: 139, column: 52 }, end: { line: 139, column: 63 } }], line: 139 }, "14": { loc: { start: { line: 140, column: 37 }, end: { line: 140, column: 70 } }, type: "binary-expr", locations: [{ start: { line: 140, column: 37 }, end: { line: 140, column: 64 } }, { start: { line: 140, column: 68 }, end: { line: 140, column: 70 } }], line: 140 }, "15": { loc: { start: { line: 142, column: 17 }, end: { line: 142, column: 76 } }, type: "binary-expr", locations: [{ start: { line: 142, column: 17 }, end: { line: 142, column: 44 } }, { start: { line: 142, column: 48 }, end: { line: 142, column: 76 } }], line: 142 }, "16": { loc: { start: { line: 143, column: 15 }, end: { line: 143, column: 83 } }, type: "binary-expr", locations: [{ start: { line: 143, column: 15 }, end: { line: 143, column: 51 } }, { start: { line: 143, column: 55 }, end: { line: 143, column: 83 } }], line: 143 }, "17": { loc: { start: { line: 146, column: 8 }, end: { line: 148, column: 9 } }, type: "if", locations: [{ start: { line: 146, column: 8 }, end: { line: 148, column: 9 } }, { start: { line: 146, column: 8 }, end: { line: 148, column: 9 } }], line: 146 }, "18": { loc: { start: { line: 173, column: 8 }, end: { line: 177, column: 9 } }, type: "if", locations: [{ start: { line: 173, column: 8 }, end: { line: 177, column: 9 } }, { start: { line: 173, column: 8 }, end: { line: 177, column: 9 } }], line: 173 }, "19": { loc: { start: { line: 185, column: 144 }, end: { line: 185, column: 157 } }, type: "binary-expr", locations: [{ start: { line: 185, column: 144 }, end: { line: 185, column: 151 } }, { start: { line: 185, column: 155 }, end: { line: 185, column: 157 } }], line: 185 }, "20": { loc: { start: { line: 190, column: 105 }, end: { line: 190, column: 122 } }, type: "binary-expr", locations: [{ start: { line: 190, column: 105 }, end: { line: 190, column: 116 } }, { start: { line: 190, column: 120 }, end: { line: 190, column: 122 } }], line: 190 }, "21": { loc: { start: { line: 201, column: 6 }, end: { line: 203, column: 7 } }, type: "if", locations: [{ start: { line: 201, column: 6 }, end: { line: 203, column: 7 } }, { start: { line: 201, column: 6 }, end: { line: 203, column: 7 } }], line: 201 }, "22": { loc: { start: { line: 208, column: 13 }, end: { line: 208, column: 102 } }, type: "binary-expr", locations: [{ start: { line: 208, column: 13 }, end: { line: 208, column: 40 } }, { start: { line: 208, column: 44 }, end: { line: 208, column: 73 } }, { start: { line: 208, column: 77 }, end: { line: 208, column: 102 } }], line: 208 }, "23": { loc: { start: { line: 224, column: 69 }, end: { line: 224, column: 75 } }, type: "default-arg", locations: [{ start: { line: 224, column: 73 }, end: { line: 224, column: 75 } }], line: 224 }, "24": { loc: { start: { line: 224, column: 80 }, end: { line: 224, column: 93 } }, type: "binary-expr", locations: [{ start: { line: 224, column: 80 }, end: { line: 224, column: 86 } }, { start: { line: 224, column: 90 }, end: { line: 224, column: 93 } }], line: 224 } }, s: { "0": 0, "1": 0, "2": 0, "3": 0, "4": 0, "5": 0, "6": 0, "7": 0, "8": 0, "9": 0, "10": 0, "11": 0, "12": 0, "13": 0, "14": 0, "15": 0, "16": 0, "17": 0, "18": 0, "19": 0, "20": 0, "21": 0, "22": 0, "23": 0, "24": 0, "25": 0, "26": 0, "27": 0, "28": 0, "29": 0, "30": 0, "31": 0, "32": 0, "33": 0, "34": 0, "35": 0, "36": 0, "37": 0, "38": 0, "39": 0, "40": 0, "41": 0, "42": 0, "43": 0, "44": 0, "45": 0, "46": 0, "47": 0, "48": 0, "49": 0, "50": 0, "51": 0, "52": 0, "53": 0, "54": 0, "55": 0, "56": 0, "57": 0, "58": 0, "59": 0, "60": 0, "61": 0, "62": 0, "63": 0, "64": 0, "65": 0 }, f: { "0": 0, "1": 0, "2": 0, "3": 0, "4": 0, "5": 0, "6": 0, "7": 0, "8": 0, "9": 0, "10": 0, "11": 0, "12": 0, "13": 0, "14": 0, "15": 0, "16": 0, "17": 0, "18": 0 }, b: { "0": [0, 0], "1": [0, 0], "2": [0], "3": [0, 0], "4": [0, 0], "5": [0, 0], "6": [0, 0], "7": [0, 0], "8": [0, 0], "9": [0, 0], "10": [0, 0], "11": [0], "12": [0], "13": [0], "14": [0, 0], "15": [0, 0], "16": [0, 0], "17": [0, 0], "18": [0, 0], "19": [0, 0], "20": [0, 0], "21": [0, 0], "22": [0, 0, 0], "23": [0], "24": [0, 0] }, inputSourceMap: { version: 3, sources: ["lib/solidity/selectors/index.js"], names: ["debug", "getSourceRange", "instruction", "start", "length", "lines", "range", "line", "column", "end", "solidity", "state", "info", "sources", "byId", "sourceMaps", "byContext", "current", "sourceMap", "evm", "context", "functionDepth", "proc", "instructions", "binary", "CodeUtils", "parseCode", "i", "lineAndColumnMappings", "map", "id", "source", "SolidityUtils", "getCharacterOffsetToLineAndColumnMapping", "humanReadableSourceMap", "getHumanReadableSourceMap", "primaryFile", "file", "index", "jump", "lineAndColumnMapping", "instructionAtProgramCounter", "forEach", "pc", "lastSeen", "entries", "step", "programCounter", "sourceRange", "isSourceRangeFinal", "next", "isMultiline", "willJump", "isJump", "jumpDirection"], mappings: "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", file: "index.js", sourceRoot: "/Users/gnidan/src/work/truffle/packages/truffle-debugger", sourcesContent: ["import debugModule from \"debug\";\nconst debug = debugModule(\"debugger:solidity:selectors\");\n\nimport { createSelectorTree, createLeaf } from \"reselect-tree\";\nimport SolidityUtils from \"truffle-solidity-utils\";\nimport CodeUtils from \"truffle-code-utils\";\n\nimport evm from \"lib/evm/selectors\";\n\nfunction getSourceRange(instruction = {}) {\n  return {\n    start: instruction.start || 0,\n    length: instruction.length || 0,\n    lines: instruction.range || {\n      start: {\n        line: 0, column: 0\n      },\n      end: {\n        line: 0, column: 0\n      }\n    }\n  };\n}\n\nlet solidity = createSelectorTree({\n  /**\n   * solidity.state\n   */\n  state: (state) => state.solidity,\n\n  /**\n   * solidity.info\n   */\n  info: {\n    /**\n     * solidity.info.sources\n     */\n    sources: createLeaf(['/state'], (state) => state.info.sources.byId),\n\n    /**\n     * solidity.info.sourceMaps\n     */\n    sourceMaps: createLeaf(['/state'], (state) => state.info.sourceMaps.byContext)\n  },\n\n  /**\n   * solidity.current\n   */\n  current: {\n\n    /**\n     * solidity.current.sourceMap\n     */\n    sourceMap: createLeaf(\n      [evm.current.context, \"/info/sourceMaps\"],\n\n      ({context}, sourceMaps) => sourceMaps[context] || {}\n    ),\n\n    /**\n     * solidity.current.functionDepth\n     */\n    functionDepth: (state) => state.solidity.proc.functionDepth,\n\n    /**\n     * solidity.current.instructions\n     */\n    instructions: createLeaf(\n      [\"/info/sources\", evm.current.context, \"./sourceMap\"],\n\n      (sources, {binary}, {sourceMap}) => {\n        if (!binary) {\n          return [];\n        }\n\n        let instructions = CodeUtils.parseCode(binary);\n\n        if (!sourceMap) {\n          // Let's create a source map to use since none exists. This source map\n          // maps just as many ranges as there are instructions, and ensures every\n          // instruction is marked as \"jumping out\". This will ensure all\n          // available debugger commands step one instruction at a time.\n          //\n          // This is kindof a hack; perhaps this should be broken out into separate\n          // context types. TODO\n          sourceMap = \"\";\n          for (var i = 0; i < instructions.length; i++) {\n            sourceMap += i + \":\" + i + \":1:-1;\";\n          }\n        }\n\n        var lineAndColumnMappings = Object.assign({},\n          ...Object.entries(sources).map(\n            ([id, {source}]) => ({\n              [id]: SolidityUtils.getCharacterOffsetToLineAndColumnMapping(source || \"\")\n            })\n          )\n        );\n        var humanReadableSourceMap = SolidityUtils.getHumanReadableSourceMap(sourceMap);\n\n        let primaryFile = humanReadableSourceMap[0].file;\n        debug(\"primaryFile %o\", primaryFile);\n\n        return instructions\n          .map( (instruction, index) => {\n            // lookup source map by index and add `index` property to\n            // instruction\n            //\n\n            const sourceMap = humanReadableSourceMap[index] || {};\n\n            return {\n              instruction: { ...instruction, index },\n              sourceMap,\n            };\n          })\n          .map( ({ instruction, sourceMap}) => {\n            // add source map information to instruction, or defaults\n            //\n\n            const { jump, start = 0, length = 0, file = primaryFile } = sourceMap;\n            const lineAndColumnMapping = lineAndColumnMappings[file] || {};\n            const range = {\n              start: lineAndColumnMapping[start] ||\n                { line: null, column: null },\n              end: lineAndColumnMapping[start + length] ||\n                { line: null, column: null }\n            };\n\n            if (range.start.line === null) {\n              debug(\"sourceMap %o\", sourceMap);\n            }\n\n            return {\n              ...instruction,\n\n              jump,\n              start,\n              length,\n              file,\n              range\n            }\n          });\n      }\n    ),\n\n    /**\n     * solidity.current.instructionAtProgramCounter\n     */\n    instructionAtProgramCounter: createLeaf(\n      [\"./instructions\"],\n\n      (instructions) => {\n        let map = [];\n        instructions.forEach(function(instruction) {\n          map[instruction.pc] = instruction;\n        });\n\n        // fill in gaps in map by defaulting to the last known instruction\n        let lastSeen = null;\n        for (let [pc, instruction] of map.entries()) {\n          if (instruction) {\n            lastSeen = instruction;\n          } else {\n            map[pc] = lastSeen;\n          }\n        }\n        return map;\n      }\n    ),\n\n    /**\n     * solidity.current.instruction\n     */\n    instruction: createLeaf(\n      [\"./instructionAtProgramCounter\", evm.current.step.programCounter],\n\n      (map, pc) => map[pc] || {}\n    ),\n\n    /**\n     * solidity.current.source\n     */\n    source: createLeaf(\n      [\"/info/sources\", \"./instruction\"],\n\n      (sources, {file: id}) => sources[id] || {}\n    ),\n\n    /**\n     * solidity.current.sourceRange\n     */\n    sourceRange: createLeaf([\"./instruction\"], getSourceRange),\n\n    /**\n     * solidity.current.isSourceRangeFinal\n     */\n    isSourceRangeFinal: createLeaf(\n      [\n        \"./instructionAtProgramCounter\",\n        evm.current.step.programCounter,\n        evm.next.step.programCounter\n      ],\n\n      (map, current, next) => {\n        if (!map[next]) {\n          return true;\n        }\n\n        current = map[current];\n        next = map[next];\n\n        return (\n          current.start != next.start ||\n          current.length != next.length ||\n          current.file != next.file\n        );\n      }\n    ),\n\n    /**\n     * solidity.current.isMultiline\n     */\n    isMultiline: createLeaf(\n      [\"./sourceRange\"],\n\n      ( {lines} ) => lines.start.line != lines.end.line\n    ),\n\n    /**\n     * solidity.current.willJump\n     */\n    willJump: createLeaf([evm.current.step.isJump], (isJump) => isJump),\n\n    /**\n     * solidity.current.jumpDirection\n     */\n    jumpDirection: createLeaf(\n      [\"./instruction\"], (i = {}) => (i.jump || \"-\")\n    )\n  }\n});\n\nexport default solidity;\n"] }, _coverageSchema: "332fd63041d2c1bcb487cc26dd0d5f7d97098a6c" },
      coverage = global[gcv] || (global[gcv] = {});if (coverage[path] && coverage[path].hash === hash) {
    return coverage[path];
  }coverageData.hash = hash;return coverage[path] = coverageData;
}();cov_1iyo6c3ahx.s[0]++;Object.defineProperty(exports, "__esModule", { value: true });var _extends2 = (cov_1iyo6c3ahx.s[1]++, __webpack_require__(4));var _extends3 = (cov_1iyo6c3ahx.s[2]++, _interopRequireDefault(_extends2));var _entries = (cov_1iyo6c3ahx.s[3]++, __webpack_require__(1));var _entries2 = (cov_1iyo6c3ahx.s[4]++, _interopRequireDefault(_entries));var _assign = (cov_1iyo6c3ahx.s[5]++, __webpack_require__(5));var _assign2 = (cov_1iyo6c3ahx.s[6]++, _interopRequireDefault(_assign));var _debug = (cov_1iyo6c3ahx.s[7]++, __webpack_require__(0));var _debug2 = (cov_1iyo6c3ahx.s[8]++, _interopRequireDefault(_debug));var _reselectTree = (cov_1iyo6c3ahx.s[9]++, __webpack_require__(9));var _truffleSolidityUtils = (cov_1iyo6c3ahx.s[10]++, __webpack_require__(52));var _truffleSolidityUtils2 = (cov_1iyo6c3ahx.s[11]++, _interopRequireDefault(_truffleSolidityUtils));var _truffleCodeUtils = (cov_1iyo6c3ahx.s[12]++, __webpack_require__(53));var _truffleCodeUtils2 = (cov_1iyo6c3ahx.s[13]++, _interopRequireDefault(_truffleCodeUtils));var _selectors = (cov_1iyo6c3ahx.s[14]++, __webpack_require__(3));var _selectors2 = (cov_1iyo6c3ahx.s[15]++, _interopRequireDefault(_selectors));function _interopRequireDefault(obj) {
  cov_1iyo6c3ahx.f[0]++;cov_1iyo6c3ahx.s[16]++;return (cov_1iyo6c3ahx.b[1][0]++, obj) && (cov_1iyo6c3ahx.b[1][1]++, obj.__esModule) ? (cov_1iyo6c3ahx.b[0][0]++, obj) : (cov_1iyo6c3ahx.b[0][1]++, { default: obj });
}const debug = (cov_1iyo6c3ahx.s[17]++, (0, _debug2.default)("debugger:solidity:selectors"));function getSourceRange(instruction = (cov_1iyo6c3ahx.b[2][0]++, {})) {
  cov_1iyo6c3ahx.f[1]++;cov_1iyo6c3ahx.s[18]++;return { start: (cov_1iyo6c3ahx.b[3][0]++, instruction.start) || (cov_1iyo6c3ahx.b[3][1]++, 0), length: (cov_1iyo6c3ahx.b[4][0]++, instruction.length) || (cov_1iyo6c3ahx.b[4][1]++, 0), lines: (cov_1iyo6c3ahx.b[5][0]++, instruction.range) || (cov_1iyo6c3ahx.b[5][1]++, { start: { line: 0, column: 0 }, end: { line: 0, column: 0 } }) };
}let solidity = (cov_1iyo6c3ahx.s[19]++, (0, _reselectTree.createSelectorTree)({ state: state => {
    cov_1iyo6c3ahx.f[2]++;cov_1iyo6c3ahx.s[20]++;return state.solidity;
  }, info: { sources: (0, _reselectTree.createLeaf)(['/state'], state => {
      cov_1iyo6c3ahx.f[3]++;cov_1iyo6c3ahx.s[21]++;return state.info.sources.byId;
    }), sourceMaps: (0, _reselectTree.createLeaf)(['/state'], state => {
      cov_1iyo6c3ahx.f[4]++;cov_1iyo6c3ahx.s[22]++;return state.info.sourceMaps.byContext;
    }) }, current: { sourceMap: (0, _reselectTree.createLeaf)([_selectors2.default.current.context, "/info/sourceMaps"], ({ context }, sourceMaps) => {
      cov_1iyo6c3ahx.f[5]++;cov_1iyo6c3ahx.s[23]++;return (cov_1iyo6c3ahx.b[6][0]++, sourceMaps[context]) || (cov_1iyo6c3ahx.b[6][1]++, {});
    }), functionDepth: state => {
      cov_1iyo6c3ahx.f[6]++;cov_1iyo6c3ahx.s[24]++;return state.solidity.proc.functionDepth;
    }, instructions: (0, _reselectTree.createLeaf)(["/info/sources", _selectors2.default.current.context, "./sourceMap"], (sources, { binary }, { sourceMap }) => {
      cov_1iyo6c3ahx.f[7]++;cov_1iyo6c3ahx.s[25]++;if (!binary) {
        cov_1iyo6c3ahx.b[7][0]++;cov_1iyo6c3ahx.s[26]++;return [];
      } else {
        cov_1iyo6c3ahx.b[7][1]++;
      }let instructions = (cov_1iyo6c3ahx.s[27]++, _truffleCodeUtils2.default.parseCode(binary));cov_1iyo6c3ahx.s[28]++;if (!sourceMap) {
        cov_1iyo6c3ahx.b[8][0]++;cov_1iyo6c3ahx.s[29]++;sourceMap = "";cov_1iyo6c3ahx.s[30]++;for (var i = 0; i < instructions.length; i++) {
          cov_1iyo6c3ahx.s[31]++;sourceMap += i + ":" + i + ":1:-1;";
        }
      } else {
        cov_1iyo6c3ahx.b[8][1]++;
      }var lineAndColumnMappings = (cov_1iyo6c3ahx.s[32]++, (0, _assign2.default)({}, ...(0, _entries2.default)(sources).map(([id, { source }]) => {
        cov_1iyo6c3ahx.f[8]++;cov_1iyo6c3ahx.s[33]++;return { [id]: _truffleSolidityUtils2.default.getCharacterOffsetToLineAndColumnMapping((cov_1iyo6c3ahx.b[9][0]++, source) || (cov_1iyo6c3ahx.b[9][1]++, "")) };
      })));var humanReadableSourceMap = (cov_1iyo6c3ahx.s[34]++, _truffleSolidityUtils2.default.getHumanReadableSourceMap(sourceMap));let primaryFile = (cov_1iyo6c3ahx.s[35]++, humanReadableSourceMap[0].file);cov_1iyo6c3ahx.s[36]++;debug("primaryFile %o", primaryFile);cov_1iyo6c3ahx.s[37]++;return instructions.map((instruction, index) => {
        cov_1iyo6c3ahx.f[9]++;const sourceMap = (cov_1iyo6c3ahx.s[38]++, (cov_1iyo6c3ahx.b[10][0]++, humanReadableSourceMap[index]) || (cov_1iyo6c3ahx.b[10][1]++, {}));cov_1iyo6c3ahx.s[39]++;return { instruction: (0, _extends3.default)({}, instruction, { index }), sourceMap };
      }).map(({ instruction, sourceMap }) => {
        cov_1iyo6c3ahx.f[10]++;const { jump, start = (cov_1iyo6c3ahx.b[11][0]++, 0), length = (cov_1iyo6c3ahx.b[12][0]++, 0), file = (cov_1iyo6c3ahx.b[13][0]++, primaryFile) } = (cov_1iyo6c3ahx.s[40]++, sourceMap);const lineAndColumnMapping = (cov_1iyo6c3ahx.s[41]++, (cov_1iyo6c3ahx.b[14][0]++, lineAndColumnMappings[file]) || (cov_1iyo6c3ahx.b[14][1]++, {}));const range = (cov_1iyo6c3ahx.s[42]++, { start: (cov_1iyo6c3ahx.b[15][0]++, lineAndColumnMapping[start]) || (cov_1iyo6c3ahx.b[15][1]++, { line: null, column: null }), end: (cov_1iyo6c3ahx.b[16][0]++, lineAndColumnMapping[start + length]) || (cov_1iyo6c3ahx.b[16][1]++, { line: null, column: null }) });cov_1iyo6c3ahx.s[43]++;if (range.start.line === null) {
          cov_1iyo6c3ahx.b[17][0]++;cov_1iyo6c3ahx.s[44]++;debug("sourceMap %o", sourceMap);
        } else {
          cov_1iyo6c3ahx.b[17][1]++;
        }cov_1iyo6c3ahx.s[45]++;return (0, _extends3.default)({}, instruction, { jump, start, length, file, range });
      });
    }), instructionAtProgramCounter: (0, _reselectTree.createLeaf)(["./instructions"], instructions => {
      cov_1iyo6c3ahx.f[11]++;let map = (cov_1iyo6c3ahx.s[46]++, []);cov_1iyo6c3ahx.s[47]++;instructions.forEach(function (instruction) {
        cov_1iyo6c3ahx.f[12]++;cov_1iyo6c3ahx.s[48]++;map[instruction.pc] = instruction;
      });let lastSeen = (cov_1iyo6c3ahx.s[49]++, null);cov_1iyo6c3ahx.s[50]++;for (let [pc, instruction] of map.entries()) {
        cov_1iyo6c3ahx.s[51]++;if (instruction) {
          cov_1iyo6c3ahx.b[18][0]++;cov_1iyo6c3ahx.s[52]++;lastSeen = instruction;
        } else {
          cov_1iyo6c3ahx.b[18][1]++;cov_1iyo6c3ahx.s[53]++;map[pc] = lastSeen;
        }
      }cov_1iyo6c3ahx.s[54]++;return map;
    }), instruction: (0, _reselectTree.createLeaf)(["./instructionAtProgramCounter", _selectors2.default.current.step.programCounter], (map, pc) => {
      cov_1iyo6c3ahx.f[13]++;cov_1iyo6c3ahx.s[55]++;return (cov_1iyo6c3ahx.b[19][0]++, map[pc]) || (cov_1iyo6c3ahx.b[19][1]++, {});
    }), source: (0, _reselectTree.createLeaf)(["/info/sources", "./instruction"], (sources, { file: id }) => {
      cov_1iyo6c3ahx.f[14]++;cov_1iyo6c3ahx.s[56]++;return (cov_1iyo6c3ahx.b[20][0]++, sources[id]) || (cov_1iyo6c3ahx.b[20][1]++, {});
    }), sourceRange: (0, _reselectTree.createLeaf)(["./instruction"], getSourceRange), isSourceRangeFinal: (0, _reselectTree.createLeaf)(["./instructionAtProgramCounter", _selectors2.default.current.step.programCounter, _selectors2.default.next.step.programCounter], (map, current, next) => {
      cov_1iyo6c3ahx.f[15]++;cov_1iyo6c3ahx.s[57]++;if (!map[next]) {
        cov_1iyo6c3ahx.b[21][0]++;cov_1iyo6c3ahx.s[58]++;return true;
      } else {
        cov_1iyo6c3ahx.b[21][1]++;
      }cov_1iyo6c3ahx.s[59]++;current = map[current];cov_1iyo6c3ahx.s[60]++;next = map[next];cov_1iyo6c3ahx.s[61]++;return (cov_1iyo6c3ahx.b[22][0]++, current.start != next.start) || (cov_1iyo6c3ahx.b[22][1]++, current.length != next.length) || (cov_1iyo6c3ahx.b[22][2]++, current.file != next.file);
    }), isMultiline: (0, _reselectTree.createLeaf)(["./sourceRange"], ({ lines }) => {
      cov_1iyo6c3ahx.f[16]++;cov_1iyo6c3ahx.s[62]++;return lines.start.line != lines.end.line;
    }), willJump: (0, _reselectTree.createLeaf)([_selectors2.default.current.step.isJump], isJump => {
      cov_1iyo6c3ahx.f[17]++;cov_1iyo6c3ahx.s[63]++;return isJump;
    }), jumpDirection: (0, _reselectTree.createLeaf)(["./instruction"], (i = (cov_1iyo6c3ahx.b[23][0]++, {})) => {
      cov_1iyo6c3ahx.f[18]++;cov_1iyo6c3ahx.s[64]++;return (cov_1iyo6c3ahx.b[24][0]++, i.jump) || (cov_1iyo6c3ahx.b[24][1]++, "-");
    }) } }));cov_1iyo6c3ahx.s[65]++;exports.default = solidity;

/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var cov_251n154c7v = function () {
  var path = "/Users/gnidan/src/work/truffle/packages/truffle-debugger/lib/evm/selectors/index.js",
      hash = "0e0485c9567132fa8814b8bb60b35bdf41a1a8b6",
      Function = function () {}.constructor,
      global = new Function('return this')(),
      gcv = "__coverage__",
      coverageData = { path: "/Users/gnidan/src/work/truffle/packages/truffle-debugger/lib/evm/selectors/index.js", statementMap: { "0": { start: { line: 3, column: 0 }, end: { line: 5, column: 3 } }, "1": { start: { line: 7, column: 16 }, end: { line: 7, column: 56 } }, "2": { start: { line: 9, column: 16 }, end: { line: 9, column: 49 } }, "3": { start: { line: 11, column: 15 }, end: { line: 11, column: 62 } }, "4": { start: { line: 13, column: 16 }, end: { line: 13, column: 48 } }, "5": { start: { line: 15, column: 14 }, end: { line: 15, column: 60 } }, "6": { start: { line: 17, column: 15 }, end: { line: 17, column: 46 } }, "7": { start: { line: 19, column: 13 }, end: { line: 19, column: 29 } }, "8": { start: { line: 21, column: 14 }, end: { line: 21, column: 44 } }, "9": { start: { line: 23, column: 20 }, end: { line: 23, column: 44 } }, "10": { start: { line: 25, column: 23 }, end: { line: 25, column: 50 } }, "11": { start: { line: 27, column: 24 }, end: { line: 27, column: 64 } }, "12": { start: { line: 29, column: 17 }, end: { line: 29, column: 47 } }, "13": { start: { line: 31, column: 18 }, end: { line: 31, column: 52 } }, "14": { start: { line: 33, column: 39 }, end: { line: 33, column: 93 } }, "15": { start: { line: 35, column: 14 }, end: { line: 35, column: 60 } }, "16": { start: { line: 37, column: 18 }, end: { line: 37, column: 22 } }, "17": { start: { line: 44, column: 13 }, end: { line: 80, column: 3 } }, "18": { start: { line: 50, column: 75 }, end: { line: 50, column: 94 } }, "19": { start: { line: 55, column: 71 }, end: { line: 55, column: 78 } }, "20": { start: { line: 60, column: 63 }, end: { line: 60, column: 116 } }, "21": { start: { line: 67, column: 63 }, end: { line: 67, column: 109 } }, "22": { start: { line: 72, column: 65 }, end: { line: 72, column: 84 } }, "23": { start: { line: 79, column: 66 }, end: { line: 79, column: 106 } }, "24": { start: { line: 82, column: 2 }, end: { line: 119, column: 3 } }, "25": { start: { line: 83, column: 23 }, end: { line: 83, column: 107 } }, "26": { start: { line: 83, column: 31 }, end: { line: 83, column: 107 } }, "27": { start: { line: 85, column: 4 }, end: { line: 87, column: 5 } }, "28": { start: { line: 86, column: 6 }, end: { line: 86, column: 28 } }, "29": { start: { line: 89, column: 4 }, end: { line: 118, column: 7 } }, "30": { start: { line: 96, column: 8 }, end: { line: 96, column: 34 } }, "31": { start: { line: 96, column: 22 }, end: { line: 96, column: 34 } }, "32": { start: { line: 98, column: 22 }, end: { line: 98, column: 45 } }, "33": { start: { line: 99, column: 8 }, end: { line: 99, column: 47 } }, "34": { start: { line: 100, column: 8 }, end: { line: 100, column: 23 } }, "35": { start: { line: 109, column: 8 }, end: { line: 109, column: 34 } }, "36": { start: { line: 109, column: 22 }, end: { line: 109, column: 34 } }, "37": { start: { line: 113, column: 23 }, end: { line: 113, column: 64 } }, "38": { start: { line: 114, column: 23 }, end: { line: 114, column: 64 } }, "39": { start: { line: 116, column: 8 }, end: { line: 116, column: 73 } }, "40": { start: { line: 121, column: 2 }, end: { line: 121, column: 14 } }, "41": { start: { line: 124, column: 12 }, end: { line: 246, column: 2 } }, "42": { start: { line: 128, column: 18 }, end: { line: 128, column: 27 } }, "43": { start: { line: 137, column: 65 }, end: { line: 137, column: 94 } }, "44": { start: { line: 142, column: 66 }, end: { line: 142, column: 96 } }, "45": { start: { line: 148, column: 60 }, end: { line: 148, column: 88 } }, "46": { start: { line: 155, column: 65 }, end: { line: 174, column: 7 } }, "47": { start: { line: 163, column: 26 }, end: { line: 163, column: 30 } }, "48": { start: { line: 165, column: 24 }, end: { line: 168, column: 125 } }, "49": { start: { line: 165, column: 94 }, end: { line: 168, column: 9 } }, "50": { start: { line: 168, column: 37 }, end: { line: 168, column: 74 } }, "51": { start: { line: 168, column: 119 }, end: { line: 168, column: 124 } }, "52": { start: { line: 170, column: 8 }, end: { line: 173, column: 9 } }, "53": { start: { line: 171, column: 30 }, end: { line: 171, column: 40 } }, "54": { start: { line: 172, column: 10 }, end: { line: 172, column: 29 } }, "55": { start: { line: 186, column: 24 }, end: { line: 186, column: 48 } }, "56": { start: { line: 191, column: 66 }, end: { line: 191, column: 109 } }, "57": { start: { line: 198, column: 6 }, end: { line: 206, column: 7 } }, "58": { start: { line: 199, column: 8 }, end: { line: 199, column: 36 } }, "59": { start: { line: 200, column: 8 }, end: { line: 202, column: 9 } }, "60": { start: { line: 201, column: 10 }, end: { line: 201, column: 29 } }, "61": { start: { line: 203, column: 8 }, end: { line: 203, column: 31 } }, "62": { start: { line: 205, column: 8 }, end: { line: 205, column: 32 } }, "63": { start: { line: 208, column: 20 }, end: { line: 208, column: 52 } }, "64": { start: { line: 210, column: 6 }, end: { line: 212, column: 9 } }, "65": { start: { line: 220, column: 110 }, end: { line: 222, column: 5 } }, "66": { start: { line: 221, column: 81 }, end: { line: 221, column: 92 } }, "67": { start: { line: 240, column: 110 }, end: { line: 242, column: 5 } }, "68": { start: { line: 241, column: 81 }, end: { line: 241, column: 92 } }, "69": { start: { line: 248, column: 0 }, end: { line: 248, column: 22 } } }, fnMap: { "0": { name: "_interopRequireDefault", decl: { start: { line: 33, column: 9 }, end: { line: 33, column: 31 } }, loc: { start: { line: 33, column: 37 }, end: { line: 33, column: 95 } }, line: 33 }, "1": { name: "createStepSelectors", decl: { start: { line: 43, column: 9 }, end: { line: 43, column: 28 } }, loc: { start: { line: 43, column: 49 }, end: { line: 122, column: 1 } }, line: 43 }, "2": { name: "(anonymous_2)", decl: { start: { line: 50, column: 49 }, end: { line: 50, column: 50 } }, loc: { start: { line: 50, column: 75 }, end: { line: 50, column: 94 } }, line: 50 }, "3": { name: "(anonymous_3)", decl: { start: { line: 55, column: 63 }, end: { line: 55, column: 64 } }, loc: { start: { line: 55, column: 71 }, end: { line: 55, column: 78 } }, line: 55 }, "4": { name: "(anonymous_4)", decl: { start: { line: 60, column: 55 }, end: { line: 60, column: 56 } }, loc: { start: { line: 60, column: 63 }, end: { line: 60, column: 116 } }, line: 60 }, "5": { name: "(anonymous_5)", decl: { start: { line: 67, column: 55 }, end: { line: 67, column: 56 } }, loc: { start: { line: 67, column: 63 }, end: { line: 67, column: 109 } }, line: 67 }, "6": { name: "(anonymous_6)", decl: { start: { line: 72, column: 57 }, end: { line: 72, column: 58 } }, loc: { start: { line: 72, column: 65 }, end: { line: 72, column: 84 } }, line: 72 }, "7": { name: "(anonymous_7)", decl: { start: { line: 79, column: 58 }, end: { line: 79, column: 59 } }, loc: { start: { line: 79, column: 66 }, end: { line: 79, column: 106 } }, line: 79 }, "8": { name: "(anonymous_8)", decl: { start: { line: 83, column: 23 }, end: { line: 83, column: 24 } }, loc: { start: { line: 83, column: 31 }, end: { line: 83, column: 107 } }, line: 83 }, "9": { name: "(anonymous_9)", decl: { start: { line: 95, column: 81 }, end: { line: 95, column: 82 } }, loc: { start: { line: 95, column: 111 }, end: { line: 101, column: 7 } }, line: 95 }, "10": { name: "(anonymous_10)", decl: { start: { line: 108, column: 84 }, end: { line: 108, column: 85 } }, loc: { start: { line: 108, column: 122 }, end: { line: 117, column: 7 } }, line: 108 }, "11": { name: "(anonymous_11)", decl: { start: { line: 128, column: 9 }, end: { line: 128, column: 10 } }, loc: { start: { line: 128, column: 18 }, end: { line: 128, column: 27 } }, line: 128 }, "12": { name: "(anonymous_12)", decl: { start: { line: 137, column: 56 }, end: { line: 137, column: 57 } }, loc: { start: { line: 137, column: 65 }, end: { line: 137, column: 94 } }, line: 137 }, "13": { name: "(anonymous_13)", decl: { start: { line: 142, column: 57 }, end: { line: 142, column: 58 } }, loc: { start: { line: 142, column: 66 }, end: { line: 142, column: 96 } }, line: 142 }, "14": { name: "(anonymous_14)", decl: { start: { line: 148, column: 51 }, end: { line: 148, column: 52 } }, loc: { start: { line: 148, column: 60 }, end: { line: 148, column: 88 } }, line: 148 }, "15": { name: "(anonymous_15)", decl: { start: { line: 155, column: 53 }, end: { line: 155, column: 54 } }, loc: { start: { line: 155, column: 65 }, end: { line: 174, column: 7 } }, line: 155 }, "16": { name: "(anonymous_16)", decl: { start: { line: 155, column: 65 }, end: { line: 155, column: 66 } }, loc: { start: { line: 155, column: 75 }, end: { line: 174, column: 7 } }, line: 155 }, "17": { name: "(anonymous_17)", decl: { start: { line: 165, column: 61 }, end: { line: 165, column: 62 } }, loc: { start: { line: 165, column: 94 }, end: { line: 168, column: 9 } }, line: 165 }, "18": { name: "(anonymous_18)", decl: { start: { line: 168, column: 19 }, end: { line: 168, column: 20 } }, loc: { start: { line: 168, column: 37 }, end: { line: 168, column: 74 } }, line: 168 }, "19": { name: "(anonymous_19)", decl: { start: { line: 168, column: 81 }, end: { line: 168, column: 82 } }, loc: { start: { line: 168, column: 119 }, end: { line: 168, column: 124 } }, line: 168 }, "20": { name: "(anonymous_20)", decl: { start: { line: 186, column: 15 }, end: { line: 186, column: 16 } }, loc: { start: { line: 186, column: 24 }, end: { line: 186, column: 48 } }, line: 186 }, "21": { name: "(anonymous_21)", decl: { start: { line: 191, column: 57 }, end: { line: 191, column: 58 } }, loc: { start: { line: 191, column: 66 }, end: { line: 191, column: 109 } }, line: 191 }, "22": { name: "(anonymous_22)", decl: { start: { line: 196, column: 117 }, end: { line: 196, column: 118 } }, loc: { start: { line: 196, column: 171 }, end: { line: 213, column: 5 } }, line: 196 }, "23": { name: "(anonymous_23)", decl: { start: { line: 220, column: 100 }, end: { line: 220, column: 101 } }, loc: { start: { line: 220, column: 110 }, end: { line: 222, column: 5 } }, line: 220 }, "24": { name: "(anonymous_24)", decl: { start: { line: 221, column: 73 }, end: { line: 221, column: 74 } }, loc: { start: { line: 221, column: 81 }, end: { line: 221, column: 92 } }, line: 221 }, "25": { name: "(anonymous_25)", decl: { start: { line: 240, column: 100 }, end: { line: 240, column: 101 } }, loc: { start: { line: 240, column: 110 }, end: { line: 242, column: 5 } }, line: 240 }, "26": { name: "(anonymous_26)", decl: { start: { line: 241, column: 73 }, end: { line: 241, column: 74 } }, loc: { start: { line: 241, column: 81 }, end: { line: 241, column: 92 } }, line: 241 } }, branchMap: { "0": { loc: { start: { line: 33, column: 46 }, end: { line: 33, column: 92 } }, type: "cond-expr", locations: [{ start: { line: 33, column: 70 }, end: { line: 33, column: 73 } }, { start: { line: 33, column: 76 }, end: { line: 33, column: 92 } }], line: 33 }, "1": { loc: { start: { line: 33, column: 46 }, end: { line: 33, column: 67 } }, type: "binary-expr", locations: [{ start: { line: 33, column: 46 }, end: { line: 33, column: 49 } }, { start: { line: 33, column: 53 }, end: { line: 33, column: 67 } }], line: 33 }, "2": { loc: { start: { line: 43, column: 35 }, end: { line: 43, column: 47 } }, type: "default-arg", locations: [{ start: { line: 43, column: 43 }, end: { line: 43, column: 47 } }], line: 43 }, "3": { loc: { start: { line: 60, column: 63 }, end: { line: 60, column: 116 } }, type: "binary-expr", locations: [{ start: { line: 60, column: 63 }, end: { line: 60, column: 84 } }, { start: { line: 60, column: 88 }, end: { line: 60, column: 116 } }], line: 60 }, "4": { loc: { start: { line: 67, column: 63 }, end: { line: 67, column: 109 } }, type: "binary-expr", locations: [{ start: { line: 67, column: 63 }, end: { line: 67, column: 80 } }, { start: { line: 67, column: 84 }, end: { line: 67, column: 109 } }], line: 67 }, "5": { loc: { start: { line: 79, column: 66 }, end: { line: 79, column: 106 } }, type: "binary-expr", locations: [{ start: { line: 79, column: 66 }, end: { line: 79, column: 83 } }, { start: { line: 79, column: 87 }, end: { line: 79, column: 106 } }], line: 79 }, "6": { loc: { start: { line: 82, column: 2 }, end: { line: 119, column: 3 } }, type: "if", locations: [{ start: { line: 82, column: 2 }, end: { line: 119, column: 3 } }, { start: { line: 82, column: 2 }, end: { line: 119, column: 3 } }], line: 82 }, "7": { loc: { start: { line: 83, column: 31 }, end: { line: 83, column: 107 } }, type: "binary-expr", locations: [{ start: { line: 83, column: 31 }, end: { line: 83, column: 54 } }, { start: { line: 83, column: 59 }, end: { line: 83, column: 80 } }, { start: { line: 83, column: 84 }, end: { line: 83, column: 106 } }], line: 83 }, "8": { loc: { start: { line: 85, column: 4 }, end: { line: 87, column: 5 } }, type: "if", locations: [{ start: { line: 85, column: 4 }, end: { line: 87, column: 5 } }, { start: { line: 85, column: 4 }, end: { line: 87, column: 5 } }], line: 85 }, "9": { loc: { start: { line: 96, column: 8 }, end: { line: 96, column: 34 } }, type: "if", locations: [{ start: { line: 96, column: 8 }, end: { line: 96, column: 34 } }, { start: { line: 96, column: 8 }, end: { line: 96, column: 34 } }], line: 96 }, "10": { loc: { start: { line: 109, column: 8 }, end: { line: 109, column: 34 } }, type: "if", locations: [{ start: { line: 109, column: 8 }, end: { line: 109, column: 34 } }, { start: { line: 109, column: 8 }, end: { line: 109, column: 34 } }], line: 109 }, "11": { loc: { start: { line: 170, column: 8 }, end: { line: 173, column: 9 } }, type: "if", locations: [{ start: { line: 170, column: 8 }, end: { line: 173, column: 9 } }, { start: { line: 170, column: 8 }, end: { line: 173, column: 9 } }], line: 170 }, "12": { loc: { start: { line: 191, column: 66 }, end: { line: 191, column: 109 } }, type: "cond-expr", locations: [{ start: { line: 191, column: 81 }, end: { line: 191, column: 104 } }, { start: { line: 191, column: 107 }, end: { line: 191, column: 109 } }], line: 191 }, "13": { loc: { start: { line: 198, column: 6 }, end: { line: 206, column: 7 } }, type: "if", locations: [{ start: { line: 198, column: 6 }, end: { line: 206, column: 7 } }, { start: { line: 198, column: 6 }, end: { line: 206, column: 7 } }], line: 198 }, "14": { loc: { start: { line: 200, column: 8 }, end: { line: 202, column: 9 } }, type: "if", locations: [{ start: { line: 200, column: 8 }, end: { line: 202, column: 9 } }, { start: { line: 200, column: 8 }, end: { line: 202, column: 9 } }], line: 200 }, "15": { loc: { start: { line: 208, column: 30 }, end: { line: 208, column: 42 } }, type: "binary-expr", locations: [{ start: { line: 208, column: 30 }, end: { line: 208, column: 36 } }, { start: { line: 208, column: 40 }, end: { line: 208, column: 42 } }], line: 208 } }, s: { "0": 0, "1": 0, "2": 0, "3": 0, "4": 0, "5": 0, "6": 0, "7": 0, "8": 0, "9": 0, "10": 0, "11": 0, "12": 0, "13": 0, "14": 0, "15": 0, "16": 0, "17": 0, "18": 0, "19": 0, "20": 0, "21": 0, "22": 0, "23": 0, "24": 0, "25": 0, "26": 0, "27": 0, "28": 0, "29": 0, "30": 0, "31": 0, "32": 0, "33": 0, "34": 0, "35": 0, "36": 0, "37": 0, "38": 0, "39": 0, "40": 0, "41": 0, "42": 0, "43": 0, "44": 0, "45": 0, "46": 0, "47": 0, "48": 0, "49": 0, "50": 0, "51": 0, "52": 0, "53": 0, "54": 0, "55": 0, "56": 0, "57": 0, "58": 0, "59": 0, "60": 0, "61": 0, "62": 0, "63": 0, "64": 0, "65": 0, "66": 0, "67": 0, "68": 0, "69": 0 }, f: { "0": 0, "1": 0, "2": 0, "3": 0, "4": 0, "5": 0, "6": 0, "7": 0, "8": 0, "9": 0, "10": 0, "11": 0, "12": 0, "13": 0, "14": 0, "15": 0, "16": 0, "17": 0, "18": 0, "19": 0, "20": 0, "21": 0, "22": 0, "23": 0, "24": 0, "25": 0, "26": 0 }, b: { "0": [0, 0], "1": [0, 0], "2": [0], "3": [0, 0], "4": [0, 0], "5": [0, 0], "6": [0, 0], "7": [0, 0, 0], "8": [0, 0], "9": [0, 0], "10": [0, 0], "11": [0, 0], "12": [0, 0], "13": [0, 0], "14": [0, 0], "15": [0, 0] }, inputSourceMap: { version: 3, sources: ["lib/evm/selectors/index.js"], names: ["debug", "WORD_SIZE", "createStepSelectors", "step", "state", "base", "trace", "gasCost", "op", "pc", "programCounter", "isJump", "indexOf", "isCall", "isCreate", "isHalting", "isRelative", "path", "startsWith", "callAddress", "matches", "stack", "address", "length", "substring", "createBinary", "memory", "offset", "parseInt", "join", "evm", "info", "contexts", "byContext", "instances", "byAddress", "binaries", "_", "byBinary", "search", "binary", "threshold", "results", "map", "knownBinary", "context", "distance", "levenshtein", "get", "filter", "sort", "a", "b", "current", "callstack", "proc", "call", "record", "param", "next"], mappings: "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", file: "index.js", sourceRoot: "/Users/gnidan/src/work/truffle/packages/truffle-debugger", sourcesContent: ["import debugModule from \"debug\";\nconst debug = debugModule(\"debugger:evm:selectors\");\n\nimport { createSelectorTree, createLeaf } from \"reselect-tree\";\nimport levenshtein from \"fast-levenshtein\";\n\nimport trace from \"lib/trace/selectors\";\n\nconst WORD_SIZE = 0x20;\n\n/**\n * create EVM-level selectors for a given trace step selector\n * may specify additional selectors to include\n */\nfunction createStepSelectors(step, state = null) {\n  let base = {\n    /**\n     * .trace\n     *\n     * trace step info related to operation\n     */\n    trace: createLeaf(\n      [step], ({gasCost, op, pc}) => ({gasCost, op, pc})\n    ),\n\n    /**\n     * .programCounter\n     */\n    programCounter: createLeaf(\n      [\"./trace\"], (step) => step.pc\n    ),\n\n    /**\n     * .isJump\n     */\n    isJump: createLeaf(\n      [\"./trace\"], (step) => (\n        step.op != \"JUMPDEST\" && step.op.indexOf(\"JUMP\") == 0\n      )\n    ),\n\n    /**\n     * .isCall\n     *\n     * whether the opcode will switch to another calling context\n     */\n    isCall: createLeaf(\n      [\"./trace\"], (step) => step.op == \"CALL\" || step.op == \"DELEGATECALL\"\n    ),\n\n    /**\n     * .isCreate\n     */\n    isCreate: createLeaf(\n      [\"./trace\"], (step) => step.op == \"CREATE\"\n    ),\n\n    /**\n     * .isHalting\n     *\n     * whether the instruction halts or returns from a calling context\n     */\n    isHalting: createLeaf(\n      [\"./trace\"], (step) => step.op == \"STOP\" || step.op == \"RETURN\"\n    )\n  };\n\n  if (state) {\n    const isRelative = (path) => (\n      typeof path == \"string\" && (\n        path.startsWith(\"./\") || path.startsWith(\"../\")\n      )\n    );\n\n    if (isRelative(state)) {\n      state = `../${state}`;\n    }\n\n    Object.assign(base, {\n      /**\n       * .callAddress\n       *\n       * address transferred to by call operation\n       */\n      callAddress: createLeaf(\n        [\"./isCall\", \"./trace\", state],\n\n        (matches, step, {stack}) => {\n          if (!matches) return null;\n\n          let address = stack[stack.length - 2]\n          address = \"0x\" + address.substring(24);\n          return address;\n        }\n      ),\n\n      /**\n       * .createBinary\n       *\n       * binary code to execute via create operation\n       */\n      createBinary: createLeaf(\n        [\"./isCreate\", \"./trace\", state],\n\n        (matches, step, {stack, memory}) => {\n          if (!matches) return null;\n\n          // Get the code that's going to be created from memory.\n          // Note we multiply by 2 because these offsets are in bytes.\n          const offset = parseInt(stack[stack.length - 2], 16) * 2;\n          const length = parseInt(stack[stack.length - 3], 16) * 2;\n\n          return \"0x\" + memory.join(\"\").substring(offset, offset + length);\n        }\n      )\n    });\n  }\n\n  return base;\n}\n\nconst evm = createSelectorTree({\n  /**\n   * evm.state\n   */\n  state: (state) => state.evm,\n\n  /**\n   * evm.info\n   */\n  info: {\n    /**\n     * evm.info.contexts\n     */\n    contexts: createLeaf(['/state'], (state) => state.info.contexts.byContext),\n\n    /**\n     * evm.info.instances\n     */\n    instances: createLeaf(['/state'], (state) => state.info.instances.byAddress),\n\n    /**\n     * evm.info.binaries\n     */\n    binaries: {\n      _: createLeaf(['/state'], (state) => state.info.contexts.byBinary),\n\n      /**\n       * evm.info.binaries.search\n       *\n       * returns function (binary) => context\n       */\n      search: createLeaf(['./_'], (binaries) =>\n        (binary) => {\n          // search for a given binary based on levenshtein distances to\n          // existing (known) context binaries.\n          //\n          // levenshtein distance is the number of textual modifications\n          // (insert, change, delete) required to convert string a to b\n          //\n          // filter by a percentage threshold\n          const threshold = 0.25;\n\n          const results = Object.entries(binaries)\n            .map( ([ knownBinary, { context }]) => ({\n              context,\n              distance: levenshtein.get(knownBinary, binary)\n            }))\n            .filter( ({ distance }) => distance <= binary.length * threshold )\n            .sort( ({distance: a}, {distance: b}) => a - b );\n\n          if (results[0]) {\n            const { context } = results[0];\n            return { context };\n          }\n        }\n      )\n    }\n  },\n\n  /**\n   * evm.current\n   */\n  current: {\n\n    /**\n     * evm.current.callstack\n     */\n    callstack: (state) => state.evm.proc.callstack,\n\n    /**\n     * evm.current.call\n     */\n    call: createLeaf(\n      [\"./callstack\"],\n\n      (stack) => stack.length ? stack[stack.length - 1] : {}\n    ),\n\n    /**\n     * evm.current.context\n     */\n    context: createLeaf(\n      [\"./call\", \"/info/instances\", \"/info/binaries/search\", \"/info/contexts\"],\n\n      ({address, binary}, instances, search, contexts) => {\n        let record;\n        if (address) {\n          record = instances[address];\n          if (!record) {\n            return { address };\n          }\n          binary = record.binary\n        } else {\n          record = search(binary);\n        }\n\n        let context = contexts[(record || {}).context];\n\n        return {\n          ...context,\n          binary\n        }\n      }\n    ),\n\n    /**\n     * evm.current.state\n     *\n     * evm state info: as of last operation, before op defined in step\n     */\n    state: Object.assign({}, ...(\n      [\n        \"depth\",\n        \"error\",\n        \"gas\",\n        \"memory\",\n        \"stack\",\n        \"storage\"\n      ].map( (param) => ({\n        [param]: createLeaf([trace.step], (step) => step[param])\n      }))\n    )),\n\n    /**\n     * evm.current.step\n     */\n    step: createStepSelectors(trace.step, \"./state\")\n  },\n\n  /**\n   * evm.next\n   */\n  next: {\n\n    /**\n     * evm.next.state\n     *\n     * evm state as a result of next step operation\n     */\n    state: Object.assign({}, ...(\n      [\n        \"depth\",\n        \"error\",\n        \"gas\",\n        \"memory\",\n        \"stack\",\n        \"storage\"\n      ].map( (param) => ({\n        [param]: createLeaf([trace.next], (step) => step[param])\n      }))\n    )),\n\n    step: createStepSelectors(trace.next, \"./state\")\n  }\n});\n\nexport default evm;\n"] }, _coverageSchema: "332fd63041d2c1bcb487cc26dd0d5f7d97098a6c" },
      coverage = global[gcv] || (global[gcv] = {});if (coverage[path] && coverage[path].hash === hash) {
    return coverage[path];
  }coverageData.hash = hash;return coverage[path] = coverageData;
}();cov_251n154c7v.s[0]++;Object.defineProperty(exports, "__esModule", { value: true });var _extends2 = (cov_251n154c7v.s[1]++, __webpack_require__(4));var _extends3 = (cov_251n154c7v.s[2]++, _interopRequireDefault(_extends2));var _entries = (cov_251n154c7v.s[3]++, __webpack_require__(1));var _entries2 = (cov_251n154c7v.s[4]++, _interopRequireDefault(_entries));var _assign = (cov_251n154c7v.s[5]++, __webpack_require__(5));var _assign2 = (cov_251n154c7v.s[6]++, _interopRequireDefault(_assign));var _debug = (cov_251n154c7v.s[7]++, __webpack_require__(0));var _debug2 = (cov_251n154c7v.s[8]++, _interopRequireDefault(_debug));var _reselectTree = (cov_251n154c7v.s[9]++, __webpack_require__(9));var _fastLevenshtein = (cov_251n154c7v.s[10]++, __webpack_require__(51));var _fastLevenshtein2 = (cov_251n154c7v.s[11]++, _interopRequireDefault(_fastLevenshtein));var _selectors = (cov_251n154c7v.s[12]++, __webpack_require__(19));var _selectors2 = (cov_251n154c7v.s[13]++, _interopRequireDefault(_selectors));function _interopRequireDefault(obj) {
  cov_251n154c7v.f[0]++;cov_251n154c7v.s[14]++;return (cov_251n154c7v.b[1][0]++, obj) && (cov_251n154c7v.b[1][1]++, obj.__esModule) ? (cov_251n154c7v.b[0][0]++, obj) : (cov_251n154c7v.b[0][1]++, { default: obj });
}const debug = (cov_251n154c7v.s[15]++, (0, _debug2.default)("debugger:evm:selectors"));const WORD_SIZE = (cov_251n154c7v.s[16]++, 0x20);function createStepSelectors(step, state = (cov_251n154c7v.b[2][0]++, null)) {
  cov_251n154c7v.f[1]++;let base = (cov_251n154c7v.s[17]++, { trace: (0, _reselectTree.createLeaf)([step], ({ gasCost, op, pc }) => {
      cov_251n154c7v.f[2]++;cov_251n154c7v.s[18]++;return { gasCost, op, pc };
    }), programCounter: (0, _reselectTree.createLeaf)(["./trace"], step => {
      cov_251n154c7v.f[3]++;cov_251n154c7v.s[19]++;return step.pc;
    }), isJump: (0, _reselectTree.createLeaf)(["./trace"], step => {
      cov_251n154c7v.f[4]++;cov_251n154c7v.s[20]++;return (cov_251n154c7v.b[3][0]++, step.op != "JUMPDEST") && (cov_251n154c7v.b[3][1]++, step.op.indexOf("JUMP") == 0);
    }), isCall: (0, _reselectTree.createLeaf)(["./trace"], step => {
      cov_251n154c7v.f[5]++;cov_251n154c7v.s[21]++;return (cov_251n154c7v.b[4][0]++, step.op == "CALL") || (cov_251n154c7v.b[4][1]++, step.op == "DELEGATECALL");
    }), isCreate: (0, _reselectTree.createLeaf)(["./trace"], step => {
      cov_251n154c7v.f[6]++;cov_251n154c7v.s[22]++;return step.op == "CREATE";
    }), isHalting: (0, _reselectTree.createLeaf)(["./trace"], step => {
      cov_251n154c7v.f[7]++;cov_251n154c7v.s[23]++;return (cov_251n154c7v.b[5][0]++, step.op == "STOP") || (cov_251n154c7v.b[5][1]++, step.op == "RETURN");
    }) });cov_251n154c7v.s[24]++;if (state) {
    cov_251n154c7v.b[6][0]++;cov_251n154c7v.s[25]++;const isRelative = path => {
      cov_251n154c7v.f[8]++;cov_251n154c7v.s[26]++;return (cov_251n154c7v.b[7][0]++, typeof path == "string") && ((cov_251n154c7v.b[7][1]++, path.startsWith("./")) || (cov_251n154c7v.b[7][2]++, path.startsWith("../")));
    };cov_251n154c7v.s[27]++;if (isRelative(state)) {
      cov_251n154c7v.b[8][0]++;cov_251n154c7v.s[28]++;state = `../${state}`;
    } else {
      cov_251n154c7v.b[8][1]++;
    }cov_251n154c7v.s[29]++;(0, _assign2.default)(base, { callAddress: (0, _reselectTree.createLeaf)(["./isCall", "./trace", state], (matches, step, { stack }) => {
        cov_251n154c7v.f[9]++;cov_251n154c7v.s[30]++;if (!matches) {
          cov_251n154c7v.b[9][0]++;cov_251n154c7v.s[31]++;return null;
        } else {
          cov_251n154c7v.b[9][1]++;
        }let address = (cov_251n154c7v.s[32]++, stack[stack.length - 2]);cov_251n154c7v.s[33]++;address = "0x" + address.substring(24);cov_251n154c7v.s[34]++;return address;
      }), createBinary: (0, _reselectTree.createLeaf)(["./isCreate", "./trace", state], (matches, step, { stack, memory }) => {
        cov_251n154c7v.f[10]++;cov_251n154c7v.s[35]++;if (!matches) {
          cov_251n154c7v.b[10][0]++;cov_251n154c7v.s[36]++;return null;
        } else {
          cov_251n154c7v.b[10][1]++;
        }const offset = (cov_251n154c7v.s[37]++, parseInt(stack[stack.length - 2], 16) * 2);const length = (cov_251n154c7v.s[38]++, parseInt(stack[stack.length - 3], 16) * 2);cov_251n154c7v.s[39]++;return "0x" + memory.join("").substring(offset, offset + length);
      }) });
  } else {
    cov_251n154c7v.b[6][1]++;
  }cov_251n154c7v.s[40]++;return base;
}const evm = (cov_251n154c7v.s[41]++, (0, _reselectTree.createSelectorTree)({ state: state => {
    cov_251n154c7v.f[11]++;cov_251n154c7v.s[42]++;return state.evm;
  }, info: { contexts: (0, _reselectTree.createLeaf)(['/state'], state => {
      cov_251n154c7v.f[12]++;cov_251n154c7v.s[43]++;return state.info.contexts.byContext;
    }), instances: (0, _reselectTree.createLeaf)(['/state'], state => {
      cov_251n154c7v.f[13]++;cov_251n154c7v.s[44]++;return state.info.instances.byAddress;
    }), binaries: { _: (0, _reselectTree.createLeaf)(['/state'], state => {
        cov_251n154c7v.f[14]++;cov_251n154c7v.s[45]++;return state.info.contexts.byBinary;
      }), search: (0, _reselectTree.createLeaf)(['./_'], binaries => {
        cov_251n154c7v.f[15]++;cov_251n154c7v.s[46]++;return binary => {
          cov_251n154c7v.f[16]++;const threshold = (cov_251n154c7v.s[47]++, 0.25);const results = (cov_251n154c7v.s[48]++, (0, _entries2.default)(binaries).map(([knownBinary, { context }]) => {
            cov_251n154c7v.f[17]++;cov_251n154c7v.s[49]++;return { context, distance: _fastLevenshtein2.default.get(knownBinary, binary) };
          }).filter(({ distance }) => {
            cov_251n154c7v.f[18]++;cov_251n154c7v.s[50]++;return distance <= binary.length * threshold;
          }).sort(({ distance: a }, { distance: b }) => {
            cov_251n154c7v.f[19]++;cov_251n154c7v.s[51]++;return a - b;
          }));cov_251n154c7v.s[52]++;if (results[0]) {
            cov_251n154c7v.b[11][0]++;const { context } = (cov_251n154c7v.s[53]++, results[0]);cov_251n154c7v.s[54]++;return { context };
          } else {
            cov_251n154c7v.b[11][1]++;
          }
        };
      }) } }, current: { callstack: state => {
      cov_251n154c7v.f[20]++;cov_251n154c7v.s[55]++;return state.evm.proc.callstack;
    }, call: (0, _reselectTree.createLeaf)(["./callstack"], stack => {
      cov_251n154c7v.f[21]++;cov_251n154c7v.s[56]++;return stack.length ? (cov_251n154c7v.b[12][0]++, stack[stack.length - 1]) : (cov_251n154c7v.b[12][1]++, {});
    }), context: (0, _reselectTree.createLeaf)(["./call", "/info/instances", "/info/binaries/search", "/info/contexts"], ({ address, binary }, instances, search, contexts) => {
      cov_251n154c7v.f[22]++;let record;cov_251n154c7v.s[57]++;if (address) {
        cov_251n154c7v.b[13][0]++;cov_251n154c7v.s[58]++;record = instances[address];cov_251n154c7v.s[59]++;if (!record) {
          cov_251n154c7v.b[14][0]++;cov_251n154c7v.s[60]++;return { address };
        } else {
          cov_251n154c7v.b[14][1]++;
        }cov_251n154c7v.s[61]++;binary = record.binary;
      } else {
        cov_251n154c7v.b[13][1]++;cov_251n154c7v.s[62]++;record = search(binary);
      }let context = (cov_251n154c7v.s[63]++, contexts[((cov_251n154c7v.b[15][0]++, record) || (cov_251n154c7v.b[15][1]++, {})).context]);cov_251n154c7v.s[64]++;return (0, _extends3.default)({}, context, { binary });
    }), state: (0, _assign2.default)({}, ...["depth", "error", "gas", "memory", "stack", "storage"].map(param => {
      cov_251n154c7v.f[23]++;cov_251n154c7v.s[65]++;return { [param]: (0, _reselectTree.createLeaf)([_selectors2.default.step], step => {
          cov_251n154c7v.f[24]++;cov_251n154c7v.s[66]++;return step[param];
        }) };
    })), step: createStepSelectors(_selectors2.default.step, "./state") }, next: { state: (0, _assign2.default)({}, ...["depth", "error", "gas", "memory", "stack", "storage"].map(param => {
      cov_251n154c7v.f[25]++;cov_251n154c7v.s[67]++;return { [param]: (0, _reselectTree.createLeaf)([_selectors2.default.next], step => {
          cov_251n154c7v.f[26]++;cov_251n154c7v.s[68]++;return step[param];
        }) };
    })), step: createStepSelectors(_selectors2.default.next, "./state") } }));cov_251n154c7v.s[69]++;exports.default = evm;

/***/ }),
/* 4 */
/***/ (function(module, exports) {

module.exports = require("babel-runtime/helpers/extends");

/***/ }),
/* 5 */
/***/ (function(module, exports) {

module.exports = require("babel-runtime/core-js/object/assign");

/***/ }),
/* 6 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var cov_e1asadkir = function () {
  var path = "/Users/gnidan/src/work/truffle/packages/truffle-debugger/lib/helpers/index.js",
      hash = "39423b8623e3006be2a8ba785163e4b92ed2d27b",
      Function = function () {}.constructor,
      global = new Function('return this')(),
      gcv = "__coverage__",
      coverageData = { path: "/Users/gnidan/src/work/truffle/packages/truffle-debugger/lib/helpers/index.js", statementMap: { "0": { start: { line: 3, column: 0 }, end: { line: 5, column: 3 } }, "1": { start: { line: 6, column: 0 }, end: { line: 6, column: 32 } }, "2": { start: { line: 7, column: 0 }, end: { line: 7, column: 30 } }, "3": { start: { line: 9, column: 13 }, end: { line: 9, column: 45 } }, "4": { start: { line: 12, column: 2 }, end: { line: 15, column: 5 } }, "5": { start: { line: 17, column: 2 }, end: { line: 17, column: 12 } }, "6": { start: { line: 24, column: 2 }, end: { line: 24, column: 65 } } }, fnMap: { "0": { name: "prefixName", decl: { start: { line: 11, column: 9 }, end: { line: 11, column: 19 } }, loc: { start: { line: 11, column: 32 }, end: { line: 18, column: 1 } }, line: 11 }, "1": { name: "keccak256", decl: { start: { line: 23, column: 9 }, end: { line: 23, column: 18 } }, loc: { start: { line: 23, column: 28 }, end: { line: 25, column: 1 } }, line: 23 } }, branchMap: {}, s: { "0": 0, "1": 0, "2": 0, "3": 0, "4": 0, "5": 0, "6": 0 }, f: { "0": 0, "1": 0 }, b: {}, inputSourceMap: { version: 3, sources: ["lib/helpers/index.js"], names: ["prefixName", "keccak256", "prefix", "fn", "Object", "defineProperty", "value", "name", "configurable", "args"], mappings: ";;;;;QAEgBA,U,GAAAA,U;QAYAC,S,GAAAA,S;;AAdhB;;AAEO,SAASD,UAAT,CAAoBE,MAApB,EAA4BC,EAA5B,EAAgC;AACrCC,SAAOC,cAAP,CAAsBF,EAAtB,EAA0B,MAA1B,EAAkC;AAChCG,WAAQ,GAAEJ,MAAO,IAAGC,GAAGI,IAAK,EADI;AAEhCC,kBAAc;AAFkB,GAAlC;;AAKA,SAAOL,EAAP;AACD;;AAED;;;AAGO,SAASF,SAAT,CAAmB,GAAGQ,IAAtB,EAA4B;AACjC,SAAO,wBAAY,sBAAW,GAAGA,IAAd,CAAZ,CAAP;AACD", file: "index.js", sourceRoot: "/Users/gnidan/src/work/truffle/packages/truffle-debugger", sourcesContent: ["import { keccak256 as _keccak256, toHexString } from \"lib/data/decode/utils\";\n\nexport function prefixName(prefix, fn) {\n  Object.defineProperty(fn, 'name', {\n    value: `${prefix}.${fn.name}`,\n    configurable: true\n  });\n\n  return fn;\n}\n\n/**\n * @return 0x-prefix string of keccak256 hash\n */\nexport function keccak256(...args) {\n  return toHexString(_keccak256(...args));\n}\n"] }, _coverageSchema: "332fd63041d2c1bcb487cc26dd0d5f7d97098a6c" },
      coverage = global[gcv] || (global[gcv] = {});if (coverage[path] && coverage[path].hash === hash) {
    return coverage[path];
  }coverageData.hash = hash;return coverage[path] = coverageData;
}();cov_e1asadkir.s[0]++;Object.defineProperty(exports, "__esModule", { value: true });cov_e1asadkir.s[1]++;exports.prefixName = prefixName;cov_e1asadkir.s[2]++;exports.keccak256 = keccak256;var _utils = (cov_e1asadkir.s[3]++, __webpack_require__(11));function prefixName(prefix, fn) {
  cov_e1asadkir.f[0]++;cov_e1asadkir.s[4]++;Object.defineProperty(fn, 'name', { value: `${prefix}.${fn.name}`, configurable: true });cov_e1asadkir.s[5]++;return fn;
}function keccak256(...args) {
  cov_e1asadkir.f[1]++;cov_e1asadkir.s[6]++;return (0, _utils.toHexString)((0, _utils.keccak256)(...args));
}

/***/ }),
/* 7 */
/***/ (function(module, exports) {

module.exports = require("babel-runtime/helpers/asyncToGenerator");

/***/ }),
/* 8 */
/***/ (function(module, exports) {

module.exports = require("web3");

/***/ }),
/* 9 */
/***/ (function(module, exports) {

module.exports = require("reselect-tree");

/***/ }),
/* 10 */
/***/ (function(module, exports) {

module.exports = require("redux-saga/effects");

/***/ }),
/* 11 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var cov_1cqg3qhd2j = function () {
  var path = "/Users/gnidan/src/work/truffle/packages/truffle-debugger/lib/data/decode/utils.js",
      hash = "caba9726ce143966fe2036c2b99ef8bb908c4736",
      Function = function () {}.constructor,
      global = new Function('return this')(),
      gcv = "__coverage__",
      coverageData = { path: "/Users/gnidan/src/work/truffle/packages/truffle-debugger/lib/data/decode/utils.js", statementMap: { "0": { start: { line: 3, column: 0 }, end: { line: 5, column: 3 } }, "1": { start: { line: 6, column: 0 }, end: { line: 6, column: 49 } }, "2": { start: { line: 8, column: 15 }, end: { line: 8, column: 62 } }, "3": { start: { line: 10, column: 16 }, end: { line: 10, column: 48 } }, "4": { start: { line: 12, column: 14 }, end: { line: 12, column: 60 } }, "5": { start: { line: 14, column: 15 }, end: { line: 14, column: 46 } }, "6": { start: { line: 16, column: 0 }, end: { line: 16, column: 42 } }, "7": { start: { line: 17, column: 0 }, end: { line: 17, column: 40 } }, "8": { start: { line: 18, column: 0 }, end: { line: 18, column: 30 } }, "9": { start: { line: 19, column: 0 }, end: { line: 19, column: 52 } }, "10": { start: { line: 20, column: 0 }, end: { line: 20, column: 38 } }, "11": { start: { line: 21, column: 0 }, end: { line: 21, column: 38 } }, "12": { start: { line: 22, column: 0 }, end: { line: 22, column: 34 } }, "13": { start: { line: 23, column: 0 }, end: { line: 23, column: 30 } }, "14": { start: { line: 24, column: 0 }, end: { line: 24, column: 34 } }, "15": { start: { line: 25, column: 0 }, end: { line: 25, column: 38 } }, "16": { start: { line: 26, column: 0 }, end: { line: 26, column: 40 } }, "17": { start: { line: 27, column: 0 }, end: { line: 27, column: 34 } }, "18": { start: { line: 28, column: 0 }, end: { line: 28, column: 46 } }, "19": { start: { line: 29, column: 0 }, end: { line: 29, column: 34 } }, "20": { start: { line: 30, column: 0 }, end: { line: 30, column: 26 } }, "21": { start: { line: 31, column: 0 }, end: { line: 31, column: 30 } }, "22": { start: { line: 32, column: 0 }, end: { line: 32, column: 44 } }, "23": { start: { line: 33, column: 0 }, end: { line: 33, column: 42 } }, "24": { start: { line: 34, column: 0 }, end: { line: 34, column: 48 } }, "25": { start: { line: 36, column: 13 }, end: { line: 36, column: 29 } }, "26": { start: { line: 38, column: 14 }, end: { line: 38, column: 44 } }, "27": { start: { line: 40, column: 17 }, end: { line: 40, column: 40 } }, "28": { start: { line: 42, column: 11 }, end: { line: 42, column: 26 } }, "29": { start: { line: 44, column: 12 }, end: { line: 44, column: 40 } }, "30": { start: { line: 46, column: 39 }, end: { line: 46, column: 93 } }, "31": { start: { line: 48, column: 14 }, end: { line: 48, column: 64 } }, "32": { start: { line: 50, column: 18 }, end: { line: 50, column: 42 } }, "33": { start: { line: 51, column: 17 }, end: { line: 51, column: 81 } }, "34": { start: { line: 57, column: 2 }, end: { line: 65, column: 3 } }, "35": { start: { line: 58, column: 4 }, end: { line: 58, column: 28 } }, "36": { start: { line: 59, column: 9 }, end: { line: 65, column: 3 } }, "37": { start: { line: 60, column: 4 }, end: { line: 60, column: 54 } }, "38": { start: { line: 60, column: 30 }, end: { line: 60, column: 52 } }, "39": { start: { line: 61, column: 9 }, end: { line: 65, column: 3 } }, "40": { start: { line: 62, column: 4 }, end: { line: 62, column: 130 } }, "41": { start: { line: 62, column: 93 }, end: { line: 62, column: 126 } }, "42": { start: { line: 64, column: 4 }, end: { line: 64, column: 17 } }, "43": { start: { line: 69, column: 2 }, end: { line: 69, column: 52 } }, "44": { start: { line: 79, column: 2 }, end: { line: 79, column: 62 } }, "45": { start: { line: 88, column: 2 }, end: { line: 88, column: 29 } }, "46": { start: { line: 90, column: 2 }, end: { line: 97, column: 3 } }, "47": { start: { line: 92, column: 4 }, end: { line: 95, column: 6 } }, "48": { start: { line: 96, column: 4 }, end: { line: 96, column: 26 } }, "49": { start: { line: 99, column: 19 }, end: { line: 99, column: 37 } }, "50": { start: { line: 100, column: 17 }, end: { line: 100, column: 47 } }, "51": { start: { line: 101, column: 16 }, end: { line: 101, column: 18 } }, "52": { start: { line: 103, column: 2 }, end: { line: 115, column: 3 } }, "53": { start: { line: 104, column: 39 }, end: { line: 104, column: 90 } }, "54": { start: { line: 106, column: 4 }, end: { line: 106, column: 67 } }, "55": { start: { line: 107, column: 4 }, end: { line: 109, column: 5 } }, "56": { start: { line: 108, column: 6 }, end: { line: 108, column: 50 } }, "57": { start: { line: 111, column: 4 }, end: { line: 111, column: 21 } }, "58": { start: { line: 112, column: 4 }, end: { line: 112, column: 23 } }, "59": { start: { line: 114, column: 4 }, end: { line: 114, column: 55 } }, "60": { start: { line: 117, column: 2 }, end: { line: 123, column: 3 } }, "61": { start: { line: 118, column: 4 }, end: { line: 121, column: 6 } }, "62": { start: { line: 122, column: 4 }, end: { line: 122, column: 26 } }, "63": { start: { line: 125, column: 2 }, end: { line: 130, column: 4 } }, "64": { start: { line: 134, column: 13 }, end: { line: 140, column: 3 } }, "65": { start: { line: 142, column: 11 }, end: { line: 142, column: 61 } }, "66": { start: { line: 144, column: 13 }, end: { line: 150, column: 48 } }, "67": { start: { line: 152, column: 2 }, end: { line: 152, column: 28 } }, "68": { start: { line: 156, column: 19 }, end: { line: 156, column: 50 } }, "69": { start: { line: 157, column: 17 }, end: { line: 157, column: 40 } }, "70": { start: { line: 159, column: 2 }, end: { line: 161, column: 3 } }, "71": { start: { line: 160, column: 4 }, end: { line: 160, column: 48 } }, "72": { start: { line: 163, column: 15 }, end: { line: 163, column: 62 } }, "73": { start: { line: 164, column: 2 }, end: { line: 164, column: 30 } }, "74": { start: { line: 166, column: 15 }, end: { line: 166, column: 78 } }, "75": { start: { line: 167, column: 2 }, end: { line: 167, column: 36 } }, "76": { start: { line: 168, column: 2 }, end: { line: 168, column: 16 } }, "77": { start: { line: 175, column: 2 }, end: { line: 180, column: 3 } }, "78": { start: { line: 176, column: 4 }, end: { line: 179, column: 6 } }, "79": { start: { line: 182, column: 2 }, end: { line: 185, column: 4 } }, "80": { start: { line: 193, column: 18 }, end: { line: 193, column: 70 } }, "81": { start: { line: 195, column: 2 }, end: { line: 197, column: 3 } }, "82": { start: { line: 196, column: 4 }, end: { line: 196, column: 16 } }, "83": { start: { line: 199, column: 12 }, end: { line: 199, column: 24 } }, "84": { start: { line: 201, column: 2 }, end: { line: 211, column: 3 } }, "85": { start: { line: 204, column: 6 }, end: { line: 204, column: 21 } }, "86": { start: { line: 207, column: 6 }, end: { line: 207, column: 17 } }, "87": { start: { line: 210, column: 6 }, end: { line: 210, column: 83 } }, "88": { start: { line: 215, column: 2 }, end: { line: 235, column: 3 } }, "89": { start: { line: 217, column: 6 }, end: { line: 217, column: 15 } }, "90": { start: { line: 220, column: 6 }, end: { line: 220, column: 16 } }, "91": { start: { line: 225, column: 6 }, end: { line: 225, column: 73 } }, "92": { start: { line: 230, column: 6 }, end: { line: 230, column: 23 } }, "93": { start: { line: 234, column: 6 }, end: { line: 234, column: 23 } }, "94": { start: { line: 239, column: 2 }, end: { line: 239, column: 64 } }, "95": { start: { line: 243, column: 2 }, end: { line: 243, column: 79 } }, "96": { start: { line: 247, column: 2 }, end: { line: 247, column: 65 } }, "97": { start: { line: 251, column: 23 }, end: { line: 254, column: 37 } }, "98": { start: { line: 258, column: 2 }, end: { line: 260, column: 3 } }, "99": { start: { line: 259, column: 4 }, end: { line: 259, column: 45 } }, "100": { start: { line: 263, column: 2 }, end: { line: 267, column: 4 } }, "101": { start: { line: 271, column: 2 }, end: { line: 279, column: 3 } }, "102": { start: { line: 272, column: 4 }, end: { line: 272, column: 21 } }, "103": { start: { line: 273, column: 9 }, end: { line: 279, column: 3 } }, "104": { start: { line: 274, column: 4 }, end: { line: 274, column: 47 } }, "105": { start: { line: 275, column: 9 }, end: { line: 279, column: 3 } }, "106": { start: { line: 276, column: 4 }, end: { line: 276, column: 43 } }, "107": { start: { line: 277, column: 9 }, end: { line: 279, column: 3 } }, "108": { start: { line: 278, column: 4 }, end: { line: 278, column: 97 } }, "109": { start: { line: 278, column: 39 }, end: { line: 278, column: 66 } }, "110": { start: { line: 283, column: 2 }, end: { line: 288, column: 3 } }, "111": { start: { line: 285, column: 4 }, end: { line: 285, column: 30 } }, "112": { start: { line: 287, column: 4 }, end: { line: 287, column: 67 } }, "113": { start: { line: 287, column: 38 }, end: { line: 287, column: 46 } }, "114": { start: { line: 297, column: 2 }, end: { line: 300, column: 3 } }, "115": { start: { line: 298, column: 4 }, end: { line: 298, column: 18 } }, "116": { start: { line: 299, column: 4 }, end: { line: 299, column: 15 } }, "117": { start: { line: 302, column: 2 }, end: { line: 304, column: 3 } }, "118": { start: { line: 303, column: 4 }, end: { line: 303, column: 27 } }, "119": { start: { line: 306, column: 14 }, end: { line: 306, column: 55 } }, "120": { start: { line: 306, column: 19 }, end: { line: 306, column: 55 } }, "121": { start: { line: 314, column: 2 }, end: { line: 319, column: 3 } }, "122": { start: { line: 315, column: 16 }, end: { line: 315, column: 21 } }, "123": { start: { line: 316, column: 4 }, end: { line: 316, column: 35 } }, "124": { start: { line: 318, column: 4 }, end: { line: 318, column: 44 } }, "125": { start: { line: 321, column: 2 }, end: { line: 321, column: 28 } }, "126": { start: { line: 323, column: 15 }, end: { line: 323, column: 81 } }, "127": { start: { line: 323, column: 43 }, end: { line: 323, column: 76 } }, "128": { start: { line: 325, column: 2 }, end: { line: 327, column: 3 } }, "129": { start: { line: 326, column: 4 }, end: { line: 326, column: 42 } }, "130": { start: { line: 329, column: 2 }, end: { line: 331, column: 3 } }, "131": { start: { line: 330, column: 4 }, end: { line: 330, column: 18 } }, "132": { start: { line: 333, column: 2 }, end: { line: 333, column: 23 } }, "133": { start: { line: 337, column: 2 }, end: { line: 339, column: 3 } }, "134": { start: { line: 338, column: 4 }, end: { line: 338, column: 14 } }, "135": { start: { line: 341, column: 12 }, end: { line: 341, column: 31 } }, "136": { start: { line: 342, column: 2 }, end: { line: 344, column: 3 } }, "137": { start: { line: 343, column: 4 }, end: { line: 343, column: 20 } }, "138": { start: { line: 346, column: 14 }, end: { line: 346, column: 80 } }, "139": { start: { line: 346, column: 60 }, end: { line: 346, column: 78 } }, "140": { start: { line: 348, column: 2 }, end: { line: 352, column: 3 } }, "141": { start: { line: 349, column: 16 }, end: { line: 349, column: 21 } }, "142": { start: { line: 350, column: 4 }, end: { line: 350, column: 35 } }, "143": { start: { line: 351, column: 4 }, end: { line: 351, column: 44 } }, "144": { start: { line: 354, column: 2 }, end: { line: 354, column: 15 } }, "145": { start: { line: 358, column: 13 }, end: { line: 358, column: 32 } }, "146": { start: { line: 360, column: 2 }, end: { line: 360, column: 25 } }, "147": { start: { line: 362, column: 12 }, end: { line: 362, column: 44 } }, "148": { start: { line: 363, column: 2 }, end: { line: 363, column: 23 } }, "149": { start: { line: 364, column: 2 }, end: { line: 364, column: 26 } }, "150": { start: { line: 370, column: 2 }, end: { line: 370, column: 26 } }, "151": { start: { line: 374, column: 2 }, end: { line: 374, column: 43 } }, "152": { start: { line: 378, column: 2 }, end: { line: 378, column: 43 } } }, fnMap: { "0": { name: "_interopRequireDefault", decl: { start: { line: 46, column: 9 }, end: { line: 46, column: 31 } }, loc: { start: { line: 46, column: 37 }, end: { line: 46, column: 95 } }, line: 46 }, "1": { name: "cleanBigNumbers", decl: { start: { line: 56, column: 9 }, end: { line: 56, column: 24 } }, loc: { start: { line: 56, column: 32 }, end: { line: 66, column: 1 } }, line: 56 }, "2": { name: "(anonymous_2)", decl: { start: { line: 60, column: 21 }, end: { line: 60, column: 22 } }, loc: { start: { line: 60, column: 30 }, end: { line: 60, column: 52 } }, line: 60 }, "3": { name: "(anonymous_3)", decl: { start: { line: 62, column: 74 }, end: { line: 62, column: 75 } }, loc: { start: { line: 62, column: 93 }, end: { line: 62, column: 126 } }, line: 62 }, "4": { name: "typeIdentifier", decl: { start: { line: 68, column: 9 }, end: { line: 68, column: 23 } }, loc: { start: { line: 68, column: 36 }, end: { line: 70, column: 1 } }, line: 68 }, "5": { name: "typeClass", decl: { start: { line: 78, column: 9 }, end: { line: 78, column: 18 } }, loc: { start: { line: 78, column: 31 }, end: { line: 80, column: 1 } }, line: 78 }, "6": { name: "allocateDeclarations", decl: { start: { line: 87, column: 9 }, end: { line: 87, column: 29 } }, loc: { start: { line: 87, column: 83 }, end: { line: 131, column: 1 } }, line: 87 }, "7": { name: "allocateValue", decl: { start: { line: 133, column: 9 }, end: { line: 133, column: 22 } }, loc: { start: { line: 133, column: 43 }, end: { line: 153, column: 1 } }, line: 133 }, "8": { name: "allocateDeclaration", decl: { start: { line: 155, column: 9 }, end: { line: 155, column: 28 } }, loc: { start: { line: 155, column: 61 }, end: { line: 169, column: 1 } }, line: 155 }, "9": { name: "normalizeSlot", decl: { start: { line: 174, column: 9 }, end: { line: 174, column: 22 } }, loc: { start: { line: 174, column: 29 }, end: { line: 186, column: 1 } }, line: 174 }, "10": { name: "specifiedSize", decl: { start: { line: 192, column: 9 }, end: { line: 192, column: 22 } }, loc: { start: { line: 192, column: 35 }, end: { line: 212, column: 1 } }, line: 192 }, "11": { name: "storageSize", decl: { start: { line: 214, column: 9 }, end: { line: 214, column: 20 } }, loc: { start: { line: 214, column: 33 }, end: { line: 236, column: 1 } }, line: 214 }, "12": { name: "isMapping", decl: { start: { line: 238, column: 9 }, end: { line: 238, column: 18 } }, loc: { start: { line: 238, column: 31 }, end: { line: 240, column: 1 } }, line: 238 }, "13": { name: "isReference", decl: { start: { line: 242, column: 9 }, end: { line: 242, column: 20 } }, loc: { start: { line: 242, column: 33 }, end: { line: 244, column: 1 } }, line: 242 }, "14": { name: "referenceType", decl: { start: { line: 246, column: 9 }, end: { line: 246, column: 22 } }, loc: { start: { line: 246, column: 35 }, end: { line: 248, column: 1 } }, line: 246 }, "15": { name: "baseDefinition", decl: { start: { line: 250, column: 9 }, end: { line: 250, column: 23 } }, loc: { start: { line: 250, column: 36 }, end: { line: 268, column: 1 } }, line: 250 }, "16": { name: "toBigNumber", decl: { start: { line: 270, column: 9 }, end: { line: 270, column: 20 } }, loc: { start: { line: 270, column: 28 }, end: { line: 280, column: 1 } }, line: 270 }, "17": { name: "(anonymous_17)", decl: { start: { line: 278, column: 24 }, end: { line: 278, column: 25 } }, loc: { start: { line: 278, column: 39 }, end: { line: 278, column: 66 } }, line: 278 }, "18": { name: "toSignedBigNumber", decl: { start: { line: 282, column: 9 }, end: { line: 282, column: 26 } }, loc: { start: { line: 282, column: 34 }, end: { line: 289, column: 1 } }, line: 282 }, "19": { name: "(anonymous_19)", decl: { start: { line: 287, column: 33 }, end: { line: 287, column: 34 } }, loc: { start: { line: 287, column: 38 }, end: { line: 287, column: 46 } }, line: 287 }, "20": { name: "toHexString", decl: { start: { line: 296, column: 9 }, end: { line: 296, column: 20 } }, loc: { start: { line: 296, column: 54 }, end: { line: 334, column: 1 } }, line: 296 }, "21": { name: "(anonymous_21)", decl: { start: { line: 306, column: 14 }, end: { line: 306, column: 15 } }, loc: { start: { line: 306, column: 19 }, end: { line: 306, column: 55 } }, line: 306 }, "22": { name: "(anonymous_22)", decl: { start: { line: 323, column: 28 }, end: { line: 323, column: 29 } }, loc: { start: { line: 323, column: 43 }, end: { line: 323, column: 76 } }, line: 323 }, "23": { name: "toBytes", decl: { start: { line: 336, column: 9 }, end: { line: 336, column: 16 } }, loc: { start: { line: 336, column: 37 }, end: { line: 355, column: 1 } }, line: 336 }, "24": { name: "(anonymous_24)", decl: { start: { line: 346, column: 52 }, end: { line: 346, column: 53 } }, loc: { start: { line: 346, column: 60 }, end: { line: 346, column: 78 } }, line: 346 }, "25": { name: "keccak256", decl: { start: { line: 357, column: 9 }, end: { line: 357, column: 18 } }, loc: { start: { line: 357, column: 28 }, end: { line: 365, column: 1 } }, line: 357 }, "26": { name: "augmentWithDepth", decl: { start: { line: 367, column: 9 }, end: { line: 367, column: 25 } }, loc: { start: { line: 367, column: 41 }, end: { line: 371, column: 1 } }, line: 367 }, "27": { name: "idFromAugmented", decl: { start: { line: 373, column: 9 }, end: { line: 373, column: 24 } }, loc: { start: { line: 373, column: 38 }, end: { line: 375, column: 1 } }, line: 373 }, "28": { name: "depthFromAugmented", decl: { start: { line: 377, column: 9 }, end: { line: 377, column: 27 } }, loc: { start: { line: 377, column: 41 }, end: { line: 379, column: 1 } }, line: 377 } }, branchMap: { "0": { loc: { start: { line: 46, column: 46 }, end: { line: 46, column: 92 } }, type: "cond-expr", locations: [{ start: { line: 46, column: 70 }, end: { line: 46, column: 73 } }, { start: { line: 46, column: 76 }, end: { line: 46, column: 92 } }], line: 46 }, "1": { loc: { start: { line: 46, column: 46 }, end: { line: 46, column: 67 } }, type: "binary-expr", locations: [{ start: { line: 46, column: 46 }, end: { line: 46, column: 49 } }, { start: { line: 46, column: 53 }, end: { line: 46, column: 67 } }], line: 46 }, "2": { loc: { start: { line: 57, column: 2 }, end: { line: 65, column: 3 } }, type: "if", locations: [{ start: { line: 57, column: 2 }, end: { line: 65, column: 3 } }, { start: { line: 57, column: 2 }, end: { line: 65, column: 3 } }], line: 57 }, "3": { loc: { start: { line: 59, column: 9 }, end: { line: 65, column: 3 } }, type: "if", locations: [{ start: { line: 59, column: 9 }, end: { line: 65, column: 3 } }, { start: { line: 59, column: 9 }, end: { line: 65, column: 3 } }], line: 59 }, "4": { loc: { start: { line: 59, column: 13 }, end: { line: 59, column: 44 } }, type: "binary-expr", locations: [{ start: { line: 59, column: 13 }, end: { line: 59, column: 18 } }, { start: { line: 59, column: 22 }, end: { line: 59, column: 44 } }], line: 59 }, "5": { loc: { start: { line: 61, column: 9 }, end: { line: 65, column: 3 } }, type: "if", locations: [{ start: { line: 61, column: 9 }, end: { line: 65, column: 3 } }, { start: { line: 61, column: 9 }, end: { line: 65, column: 3 } }], line: 61 }, "6": { loc: { start: { line: 61, column: 13 }, end: { line: 61, column: 46 } }, type: "binary-expr", locations: [{ start: { line: 61, column: 13 }, end: { line: 61, column: 18 } }, { start: { line: 61, column: 22 }, end: { line: 61, column: 46 } }], line: 61 }, "7": { loc: { start: { line: 87, column: 50 }, end: { line: 87, column: 58 } }, type: "default-arg", locations: [{ start: { line: 87, column: 57 }, end: { line: 87, column: 58 } }], line: 87 }, "8": { loc: { start: { line: 87, column: 60 }, end: { line: 87, column: 81 } }, type: "default-arg", locations: [{ start: { line: 87, column: 68 }, end: { line: 87, column: 81 } }], line: 87 }, "9": { loc: { start: { line: 90, column: 2 }, end: { line: 97, column: 3 } }, type: "if", locations: [{ start: { line: 90, column: 2 }, end: { line: 97, column: 3 } }, { start: { line: 90, column: 2 }, end: { line: 97, column: 3 } }], line: 90 }, "10": { loc: { start: { line: 107, column: 4 }, end: { line: 109, column: 5 } }, type: "if", locations: [{ start: { line: 107, column: 4 }, end: { line: 109, column: 5 } }, { start: { line: 107, column: 4 }, end: { line: 109, column: 5 } }], line: 107 }, "11": { loc: { start: { line: 117, column: 2 }, end: { line: 123, column: 3 } }, type: "if", locations: [{ start: { line: 117, column: 2 }, end: { line: 123, column: 3 } }, { start: { line: 117, column: 2 }, end: { line: 123, column: 3 } }], line: 117 }, "12": { loc: { start: { line: 134, column: 13 }, end: { line: 140, column: 3 } }, type: "cond-expr", locations: [{ start: { line: 134, column: 38 }, end: { line: 134, column: 72 } }, { start: { line: 134, column: 75 }, end: { line: 140, column: 3 } }], line: 134 }, "13": { loc: { start: { line: 144, column: 13 }, end: { line: 150, column: 48 } }, type: "cond-expr", locations: [{ start: { line: 144, column: 31 }, end: { line: 150, column: 3 } }, { start: { line: 150, column: 6 }, end: { line: 150, column: 48 } }], line: 144 }, "14": { loc: { start: { line: 159, column: 2 }, end: { line: 161, column: 3 } }, type: "if", locations: [{ start: { line: 159, column: 2 }, end: { line: 161, column: 3 } }, { start: { line: 159, column: 2 }, end: { line: 161, column: 3 } }], line: 159 }, "15": { loc: { start: { line: 166, column: 36 }, end: { line: 166, column: 58 } }, type: "binary-expr", locations: [{ start: { line: 166, column: 36 }, end: { line: 166, column: 52 } }, { start: { line: 166, column: 56 }, end: { line: 166, column: 58 } }], line: 166 }, "16": { loc: { start: { line: 175, column: 2 }, end: { line: 180, column: 3 } }, type: "if", locations: [{ start: { line: 175, column: 2 }, end: { line: 180, column: 3 } }, { start: { line: 175, column: 2 }, end: { line: 180, column: 3 } }], line: 175 }, "17": { loc: { start: { line: 175, column: 6 }, end: { line: 175, column: 55 } }, type: "binary-expr", locations: [{ start: { line: 175, column: 6 }, end: { line: 175, column: 29 } }, { start: { line: 175, column: 33 }, end: { line: 175, column: 55 } }], line: 175 }, "18": { loc: { start: { line: 178, column: 14 }, end: { line: 178, column: 30 } }, type: "binary-expr", locations: [{ start: { line: 178, column: 14 }, end: { line: 178, column: 25 } }, { start: { line: 178, column: 29 }, end: { line: 178, column: 30 } }], line: 178 }, "19": { loc: { start: { line: 195, column: 2 }, end: { line: 197, column: 3 } }, type: "if", locations: [{ start: { line: 195, column: 2 }, end: { line: 197, column: 3 } }, { start: { line: 195, column: 2 }, end: { line: 197, column: 3 } }], line: 195 }, "20": { loc: { start: { line: 201, column: 2 }, end: { line: 211, column: 3 } }, type: "switch", locations: [{ start: { line: 202, column: 4 }, end: { line: 202, column: 15 } }, { start: { line: 203, column: 4 }, end: { line: 204, column: 21 } }, { start: { line: 206, column: 4 }, end: { line: 207, column: 17 } }, { start: { line: 209, column: 4 }, end: { line: 210, column: 83 } }], line: 201 }, "21": { loc: { start: { line: 215, column: 2 }, end: { line: 235, column: 3 } }, type: "switch", locations: [{ start: { line: 216, column: 4 }, end: { line: 217, column: 15 } }, { start: { line: 219, column: 4 }, end: { line: 220, column: 16 } }, { start: { line: 222, column: 4 }, end: { line: 222, column: 15 } }, { start: { line: 223, column: 4 }, end: { line: 225, column: 73 } }, { start: { line: 227, column: 4 }, end: { line: 227, column: 18 } }, { start: { line: 228, column: 4 }, end: { line: 228, column: 17 } }, { start: { line: 229, column: 4 }, end: { line: 230, column: 23 } }, { start: { line: 232, column: 4 }, end: { line: 234, column: 23 } }], line: 215 }, "22": { loc: { start: { line: 258, column: 2 }, end: { line: 260, column: 3 } }, type: "if", locations: [{ start: { line: 258, column: 2 }, end: { line: 260, column: 3 } }, { start: { line: 258, column: 2 }, end: { line: 260, column: 3 } }], line: 258 }, "23": { loc: { start: { line: 271, column: 2 }, end: { line: 279, column: 3 } }, type: "if", locations: [{ start: { line: 271, column: 2 }, end: { line: 279, column: 3 } }, { start: { line: 271, column: 2 }, end: { line: 279, column: 3 } }], line: 271 }, "24": { loc: { start: { line: 273, column: 9 }, end: { line: 279, column: 3 } }, type: "if", locations: [{ start: { line: 273, column: 9 }, end: { line: 279, column: 3 } }, { start: { line: 273, column: 9 }, end: { line: 279, column: 3 } }], line: 273 }, "25": { loc: { start: { line: 275, column: 9 }, end: { line: 279, column: 3 } }, type: "if", locations: [{ start: { line: 275, column: 9 }, end: { line: 279, column: 3 } }, { start: { line: 275, column: 9 }, end: { line: 279, column: 3 } }], line: 275 }, "26": { loc: { start: { line: 275, column: 13 }, end: { line: 275, column: 80 } }, type: "binary-expr", locations: [{ start: { line: 275, column: 13 }, end: { line: 275, column: 37 } }, { start: { line: 275, column: 41 }, end: { line: 275, column: 80 } }], line: 275 }, "27": { loc: { start: { line: 277, column: 9 }, end: { line: 279, column: 3 } }, type: "if", locations: [{ start: { line: 277, column: 9 }, end: { line: 279, column: 3 } }, { start: { line: 277, column: 9 }, end: { line: 279, column: 3 } }], line: 277 }, "28": { loc: { start: { line: 283, column: 2 }, end: { line: 288, column: 3 } }, type: "if", locations: [{ start: { line: 283, column: 2 }, end: { line: 288, column: 3 } }, { start: { line: 283, column: 2 }, end: { line: 288, column: 3 } }], line: 283 }, "29": { loc: { start: { line: 296, column: 28 }, end: { line: 296, column: 38 } }, type: "default-arg", locations: [{ start: { line: 296, column: 37 }, end: { line: 296, column: 38 } }], line: 296 }, "30": { loc: { start: { line: 296, column: 40 }, end: { line: 296, column: 52 } }, type: "default-arg", locations: [{ start: { line: 296, column: 47 }, end: { line: 296, column: 52 } }], line: 296 }, "31": { loc: { start: { line: 297, column: 2 }, end: { line: 300, column: 3 } }, type: "if", locations: [{ start: { line: 297, column: 2 }, end: { line: 300, column: 3 } }, { start: { line: 297, column: 2 }, end: { line: 300, column: 3 } }], line: 297 }, "32": { loc: { start: { line: 302, column: 2 }, end: { line: 304, column: 3 } }, type: "if", locations: [{ start: { line: 302, column: 2 }, end: { line: 304, column: 3 } }, { start: { line: 302, column: 2 }, end: { line: 304, column: 3 } }], line: 302 }, "33": { loc: { start: { line: 314, column: 2 }, end: { line: 319, column: 3 } }, type: "if", locations: [{ start: { line: 314, column: 2 }, end: { line: 319, column: 3 } }, { start: { line: 314, column: 2 }, end: { line: 319, column: 3 } }], line: 314 }, "34": { loc: { start: { line: 325, column: 2 }, end: { line: 327, column: 3 } }, type: "if", locations: [{ start: { line: 325, column: 2 }, end: { line: 327, column: 3 } }, { start: { line: 325, column: 2 }, end: { line: 327, column: 3 } }], line: 325 }, "35": { loc: { start: { line: 329, column: 2 }, end: { line: 331, column: 3 } }, type: "if", locations: [{ start: { line: 329, column: 2 }, end: { line: 331, column: 3 } }, { start: { line: 329, column: 2 }, end: { line: 331, column: 3 } }], line: 329 }, "36": { loc: { start: { line: 336, column: 25 }, end: { line: 336, column: 35 } }, type: "default-arg", locations: [{ start: { line: 336, column: 34 }, end: { line: 336, column: 35 } }], line: 336 }, "37": { loc: { start: { line: 337, column: 2 }, end: { line: 339, column: 3 } }, type: "if", locations: [{ start: { line: 337, column: 2 }, end: { line: 339, column: 3 } }, { start: { line: 337, column: 2 }, end: { line: 339, column: 3 } }], line: 337 }, "38": { loc: { start: { line: 337, column: 6 }, end: { line: 337, column: 33 } }, type: "binary-expr", locations: [{ start: { line: 337, column: 6 }, end: { line: 337, column: 16 } }, { start: { line: 337, column: 20 }, end: { line: 337, column: 33 } }], line: 337 }, "39": { loc: { start: { line: 342, column: 2 }, end: { line: 344, column: 3 } }, type: "if", locations: [{ start: { line: 342, column: 2 }, end: { line: 344, column: 3 } }, { start: { line: 342, column: 2 }, end: { line: 344, column: 3 } }], line: 342 }, "40": { loc: { start: { line: 348, column: 2 }, end: { line: 352, column: 3 } }, type: "if", locations: [{ start: { line: 348, column: 2 }, end: { line: 352, column: 3 } }, { start: { line: 348, column: 2 }, end: { line: 352, column: 3 } }], line: 348 }, "41": { loc: { start: { line: 367, column: 30 }, end: { line: 367, column: 39 } }, type: "default-arg", locations: [{ start: { line: 367, column: 38 }, end: { line: 367, column: 39 } }], line: 367 } }, s: { "0": 0, "1": 0, "2": 0, "3": 0, "4": 0, "5": 0, "6": 0, "7": 0, "8": 0, "9": 0, "10": 0, "11": 0, "12": 0, "13": 0, "14": 0, "15": 0, "16": 0, "17": 0, "18": 0, "19": 0, "20": 0, "21": 0, "22": 0, "23": 0, "24": 0, "25": 0, "26": 0, "27": 0, "28": 0, "29": 0, "30": 0, "31": 0, "32": 0, "33": 0, "34": 0, "35": 0, "36": 0, "37": 0, "38": 0, "39": 0, "40": 0, "41": 0, "42": 0, "43": 0, "44": 0, "45": 0, "46": 0, "47": 0, "48": 0, "49": 0, "50": 0, "51": 0, "52": 0, "53": 0, "54": 0, "55": 0, "56": 0, "57": 0, "58": 0, "59": 0, "60": 0, "61": 0, "62": 0, "63": 0, "64": 0, "65": 0, "66": 0, "67": 0, "68": 0, "69": 0, "70": 0, "71": 0, "72": 0, "73": 0, "74": 0, "75": 0, "76": 0, "77": 0, "78": 0, "79": 0, "80": 0, "81": 0, "82": 0, "83": 0, "84": 0, "85": 0, "86": 0, "87": 0, "88": 0, "89": 0, "90": 0, "91": 0, "92": 0, "93": 0, "94": 0, "95": 0, "96": 0, "97": 0, "98": 0, "99": 0, "100": 0, "101": 0, "102": 0, "103": 0, "104": 0, "105": 0, "106": 0, "107": 0, "108": 0, "109": 0, "110": 0, "111": 0, "112": 0, "113": 0, "114": 0, "115": 0, "116": 0, "117": 0, "118": 0, "119": 0, "120": 0, "121": 0, "122": 0, "123": 0, "124": 0, "125": 0, "126": 0, "127": 0, "128": 0, "129": 0, "130": 0, "131": 0, "132": 0, "133": 0, "134": 0, "135": 0, "136": 0, "137": 0, "138": 0, "139": 0, "140": 0, "141": 0, "142": 0, "143": 0, "144": 0, "145": 0, "146": 0, "147": 0, "148": 0, "149": 0, "150": 0, "151": 0, "152": 0 }, f: { "0": 0, "1": 0, "2": 0, "3": 0, "4": 0, "5": 0, "6": 0, "7": 0, "8": 0, "9": 0, "10": 0, "11": 0, "12": 0, "13": 0, "14": 0, "15": 0, "16": 0, "17": 0, "18": 0, "19": 0, "20": 0, "21": 0, "22": 0, "23": 0, "24": 0, "25": 0, "26": 0, "27": 0, "28": 0 }, b: { "0": [0, 0], "1": [0, 0], "2": [0, 0], "3": [0, 0], "4": [0, 0], "5": [0, 0], "6": [0, 0], "7": [0], "8": [0], "9": [0, 0], "10": [0, 0], "11": [0, 0], "12": [0, 0], "13": [0, 0], "14": [0, 0], "15": [0, 0], "16": [0, 0], "17": [0, 0], "18": [0, 0], "19": [0, 0], "20": [0, 0, 0, 0], "21": [0, 0, 0, 0, 0, 0, 0, 0], "22": [0, 0], "23": [0, 0], "24": [0, 0], "25": [0, 0], "26": [0, 0], "27": [0, 0], "28": [0, 0], "29": [0], "30": [0], "31": [0, 0], "32": [0, 0], "33": [0, 0], "34": [0, 0], "35": [0, 0], "36": [0], "37": [0, 0], "38": [0, 0], "39": [0, 0], "40": [0, 0], "41": [0] }, inputSourceMap: { version: 3, sources: ["lib/data/decode/utils.js"], names: ["cleanBigNumbers", "typeIdentifier", "typeClass", "allocateDeclarations", "normalizeSlot", "specifiedSize", "storageSize", "isMapping", "isReference", "referenceType", "baseDefinition", "toBigNumber", "toSignedBigNumber", "toHexString", "toBytes", "keccak256", "augmentWithDepth", "idFromAugmented", "depthFromAugmented", "debug", "WORD_SIZE", "MAX_WORD", "BigNumber", "pow", "minus", "value", "isBigNumber", "toNumber", "map", "undefined", "inner", "key", "definition", "typeDescriptions", "match", "declarations", "refs", "slot", "index", "path", "offset", "parentFrom", "parentTo", "mapping", "declaration", "from", "to", "next", "children", "allocateDeclaration", "id", "name", "allocateValue", "bytes", "byteSize", "struct", "typeName", "referencedDeclaration", "result", "variables", "specified", "num", "baseIdentifier", "reduce", "byte", "times", "plus", "b", "negated", "length", "trim", "pad", "s", "slice", "prior", "Uint8Array", "set", "string", "str", "toString", "replace", "number", "hex", "parseInt", "args", "web3", "Web3", "sha", "utils", "soliditySha3", "depth", "augmentedId", "Number", "split"], mappings: "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", file: "utils.js", sourceRoot: "/Users/gnidan/src/work/truffle/packages/truffle-debugger", sourcesContent: ["import debugModule from \"debug\";\nconst debug = debugModule(\"debugger:data:decode:utils\");\n\nimport { BigNumber } from \"bignumber.js\";\nimport Web3 from \"web3\";\n\nexport const WORD_SIZE = 0x20;\nexport const MAX_WORD = new BigNumber(2).pow(256).minus(1);\n\n/**\n * recursively converts big numbers into something nicer to look at\n */\nexport function cleanBigNumbers(value) {\n  if (BigNumber.isBigNumber(value)) {\n    return value.toNumber();\n\n  } else if (value && value.map != undefined) {\n    return value.map( (inner) => cleanBigNumbers(inner) );\n\n  } else if (value && typeof value == \"object\") {\n    return Object.assign(\n      {}, ...Object.entries(value)\n        .map( ([key, inner]) => ({ [key]: cleanBigNumbers(inner) }) )\n    );\n\n  } else {\n    return value;\n  }\n}\n\nexport function typeIdentifier(definition) {\n  return definition.typeDescriptions.typeIdentifier;\n}\n\n/**\n * returns basic type class for a variable definition node\n * e.g.:\n *  `t_uint256` becomes `uint`\n *  `t_struct$_Thing_$20_memory_ptr` becomes `struct`\n */\nexport function typeClass(definition) {\n  return typeIdentifier(definition).match(/t_([^$_0-9]+)/)[1];\n}\n\n/**\n * Allocate storage for given variable declarations\n *\n * Postcondition: starts a new slot and occupies whole slots\n */\nexport function allocateDeclarations(\n  declarations,\n  refs,\n  slot = 0,\n  index = WORD_SIZE - 1,\n) {\n  slot = normalizeSlot(slot);\n\n  if (index < WORD_SIZE - 1) {  // starts a new slot\n    slot = {\n      path: slot,\n      offset: 1\n    };\n    index = WORD_SIZE - 1;\n  }\n\n  let parentFrom = { slot, index: 0 };\n  var parentTo = { slot, index: WORD_SIZE - 1 };\n  let mapping = {};\n\n  for (let declaration of declarations) {\n    let { from, to, next, children } =\n      allocateDeclaration(declaration, refs, slot, index);\n\n    mapping[declaration.id] = { from, to, name: declaration.name };\n    if (children !== undefined) {\n      mapping[declaration.id].children = children;\n    }\n\n    slot = next.slot;\n    index = next.index;\n\n    parentTo = { slot: to.slot, index: WORD_SIZE - 1 };\n  }\n\n  if (index < WORD_SIZE - 1) {\n    slot = {\n      path: slot,\n      offset: 1\n    };\n    index = WORD_SIZE - 1;\n  }\n\n  return {\n    from: parentFrom,\n    to: parentTo,\n    next: { slot, index },\n    children: mapping\n  };\n}\n\nfunction allocateValue(slot, index, bytes) {\n  let from = (index - bytes + 1 >= 0)\n    ? { slot, index: index - bytes + 1 }\n    : {\n        slot: {\n          path: slot.path,\n          offset: slot.offset + 1\n        },\n        index: WORD_SIZE - bytes\n      };\n\n  let to = { slot: from.slot, index: from.index + bytes - 1 };\n\n  let next = (from.index == 0)\n    ? {\n        slot: {\n          path: from.slot.path,\n          offset: from.slot.offset + 1\n        },\n        index: WORD_SIZE - 1\n      }\n    : { slot: from.slot, index: from.index - 1 };\n\n  return { from, to, next };\n}\n\nfunction allocateDeclaration(declaration, refs, slot, index) {\n  let definition = refs[declaration.id].definition;\n  var byteSize = storageSize(definition);  // yum\n\n  if (typeClass(definition) != \"struct\") {\n    return allocateValue(slot, index, byteSize);\n  }\n\n  let struct = refs[definition.typeName.referencedDeclaration];\n  debug(\"struct: %O\", struct);\n\n  let result =  allocateDeclarations(struct.variables || [], refs, slot, index);\n  debug(\"struct result %o\", result);\n  return result;\n}\n\n/**\n * Convert polymorphic slot value into canonical { path, offset } pair.\n */\nexport function normalizeSlot(slot) {\n  if (typeof slot == \"object\" && slot.path != undefined) {\n    return {\n      path: slot.path,\n      offset: slot.offset || 0\n    };\n  }\n\n  return {\n    path: slot,\n    offset: 0\n  };\n}\n\n\n/**\n * e.g. uint48 -> 6\n * @return size in bytes for explicit type size, or `null` if not stated\n */\nexport function specifiedSize(definition) {\n  let specified = typeIdentifier(definition).match(/t_[a-z]+([0-9]+)/);\n\n  if (!specified) {\n    return null;\n  }\n\n  let num = specified[1];\n\n  switch (typeClass(definition)) {\n    case \"int\":\n    case \"uint\":\n      return num / 8;\n\n    case \"bytes\":\n      return num;\n\n    default:\n      debug(\"Unknown type for size specification: %s\", typeIdentifier(definition));\n  }\n}\n\nexport function storageSize(definition) {\n  switch (typeClass(definition)) {\n    case \"bool\":\n      return 1;\n\n    case \"address\":\n      return 20;\n\n    case \"int\":\n    case \"uint\":\n      // is this a HACK? (\"256\" / 8)\n      return typeIdentifier(definition).match(/t_[a-z]+([0-9]+)/)[1] / 8;\n\n    case \"string\":\n    case \"bytes\":\n    case \"array\":\n      return WORD_SIZE;\n\n    case \"mapping\":\n      // HACK just to reserve slot. mappings have no size as such\n      return WORD_SIZE;\n  }\n}\n\nexport function isMapping(definition) {\n  return typeIdentifier(definition).match(/^t_mapping/) != null;\n}\n\nexport function isReference(definition) {\n  return typeIdentifier(definition).match(/_(memory|storage)(_ptr)?$/) != null;\n}\n\nexport function referenceType(definition) {\n  return typeIdentifier(definition).match(/_([^_]+)(_ptr)?$/)[1];\n}\n\nexport function baseDefinition(definition) {\n  let baseIdentifier = typeIdentifier(definition)\n    // first dollar sign     last dollar sign\n    //   `---------.       ,---'\n    .match(/^[^$]+\\$_(.+)_\\$[^$]+$/)[1]\n    //              `----' greedy match\n\n  // HACK - internal types for memory or storage also seem to be pointers\n  if (baseIdentifier.match(/_(memory|storage)$/) != null) {\n    baseIdentifier = `${baseIdentifier}_ptr`;\n  }\n\n  // another HACK - we get away with it becausewe're only using that one property\n  return {\n    typeDescriptions: {\n      typeIdentifier: baseIdentifier\n    }\n  };\n}\n\n\nexport function toBigNumber(bytes) {\n  if (bytes == undefined) {\n    return undefined;\n  } else if (typeof bytes == \"string\") {\n    return new BigNumber(bytes, 16);\n  } else if (typeof bytes == \"number\" || BigNumber.isBigNumber(bytes)) {\n    return new BigNumber(bytes);\n  } else if (bytes.reduce) {\n    return bytes.reduce(\n      (num, byte) => num.times(0x100).plus(byte),\n      new BigNumber(0)\n    );\n  }\n}\n\nexport function toSignedBigNumber(bytes) {\n  if (bytes[0] < 0b10000000) {  // first bit is 0\n    return toBigNumber(bytes);\n  } else {\n    return toBigNumber(bytes.map( (b) => 0xff - b )).plus(1).negated();\n  }\n}\n\n/**\n * @param bytes - Uint8Array\n * @param length - desired byte length (pad with zeroes)\n * @param trim - omit leading zeroes\n */\nexport function toHexString(bytes, length = 0, trim = false) {\n  if (typeof length == \"boolean\") {\n    trim = length;\n    length = 0;\n  }\n\n  if (BigNumber.isBigNumber(bytes)) {\n    bytes = toBytes(bytes);\n  }\n\n  const pad = (s) => `${\"00\".slice(0, 2 - s.length)}${s}`\n\n  //                                          0  1  2  3  4\n  //                                 0  1  2  3  4  5  6  7\n  // bytes.length:        5  -  0x(          e5 c2 aa 09 11 )\n  // length (preferred):  8  -  0x( 00 00 00 e5 c2 aa 09 11 )\n  //                                `--.---'\n  //                                     offset 3\n  if (bytes.length < length) {\n    let prior = bytes;\n    bytes = new Uint8Array(length);\n\n    bytes.set(prior, length - prior.length);\n  }\n\n  debug(\"bytes: %o\", bytes);\n\n  let string = bytes.reduce(\n    (str, byte) => `${str}${pad(byte.toString(16))}`, \"\"\n  );\n\n  if (trim) {\n    string = string.replace(/^(00)+/, \"\");\n  }\n\n  if (string.length == 0) {\n    string = \"00\";\n  }\n\n  return `0x${string}`;\n}\n\nexport function toBytes(number, length = 0) {\n  if (number < 0 || number === \"\") {\n    return [];\n  }\n\n  let hex = number.toString(16);\n  if (hex.length % 2 == 1) {\n    hex = `0${hex}`;\n  }\n\n  let bytes = new Uint8Array(\n    hex.match(/.{2}/g)\n      .map( (byte) => parseInt(byte, 16) )\n  );\n\n  if (bytes.length < length) {\n    let prior = bytes;\n    bytes = new Uint8Array(length);\n    bytes.set(prior, length - prior.length);\n  }\n\n  return bytes;\n}\n\nexport function keccak256(...args) {\n  let web3 = new Web3();\n\n  debug(\"args %o\", args);\n\n  let sha = web3.utils.soliditySha3(...args);\n  debug(\"sha %o\", sha);\n  return toBigNumber(sha);\n}\n\nexport function augmentWithDepth(id, depth = 0) {\n    //depth 0 indicates not a local variable; real depths start from 1\n    //both arguments are numeric, so a colon should occur in neither\n    return `${depth}:${id}`;\n}\n\nexport function idFromAugmented(augmentedId) {\n    return Number(augmentedId.split(\":\")[1]);\n}\n\nexport function depthFromAugmented(augmentedId) {\n    return Number(augmentedId.split(\":\")[0]);\n}\n"] }, _coverageSchema: "332fd63041d2c1bcb487cc26dd0d5f7d97098a6c" },
      coverage = global[gcv] || (global[gcv] = {});if (coverage[path] && coverage[path].hash === hash) {
    return coverage[path];
  }coverageData.hash = hash;return coverage[path] = coverageData;
}();cov_1cqg3qhd2j.s[0]++;Object.defineProperty(exports, "__esModule", { value: true });cov_1cqg3qhd2j.s[1]++;exports.MAX_WORD = exports.WORD_SIZE = undefined;var _entries = (cov_1cqg3qhd2j.s[2]++, __webpack_require__(1));var _entries2 = (cov_1cqg3qhd2j.s[3]++, _interopRequireDefault(_entries));var _assign = (cov_1cqg3qhd2j.s[4]++, __webpack_require__(5));var _assign2 = (cov_1cqg3qhd2j.s[5]++, _interopRequireDefault(_assign));cov_1cqg3qhd2j.s[6]++;exports.cleanBigNumbers = cleanBigNumbers;cov_1cqg3qhd2j.s[7]++;exports.typeIdentifier = typeIdentifier;cov_1cqg3qhd2j.s[8]++;exports.typeClass = typeClass;cov_1cqg3qhd2j.s[9]++;exports.allocateDeclarations = allocateDeclarations;cov_1cqg3qhd2j.s[10]++;exports.normalizeSlot = normalizeSlot;cov_1cqg3qhd2j.s[11]++;exports.specifiedSize = specifiedSize;cov_1cqg3qhd2j.s[12]++;exports.storageSize = storageSize;cov_1cqg3qhd2j.s[13]++;exports.isMapping = isMapping;cov_1cqg3qhd2j.s[14]++;exports.isReference = isReference;cov_1cqg3qhd2j.s[15]++;exports.referenceType = referenceType;cov_1cqg3qhd2j.s[16]++;exports.baseDefinition = baseDefinition;cov_1cqg3qhd2j.s[17]++;exports.toBigNumber = toBigNumber;cov_1cqg3qhd2j.s[18]++;exports.toSignedBigNumber = toSignedBigNumber;cov_1cqg3qhd2j.s[19]++;exports.toHexString = toHexString;cov_1cqg3qhd2j.s[20]++;exports.toBytes = toBytes;cov_1cqg3qhd2j.s[21]++;exports.keccak256 = keccak256;cov_1cqg3qhd2j.s[22]++;exports.augmentWithDepth = augmentWithDepth;cov_1cqg3qhd2j.s[23]++;exports.idFromAugmented = idFromAugmented;cov_1cqg3qhd2j.s[24]++;exports.depthFromAugmented = depthFromAugmented;var _debug = (cov_1cqg3qhd2j.s[25]++, __webpack_require__(0));var _debug2 = (cov_1cqg3qhd2j.s[26]++, _interopRequireDefault(_debug));var _bignumber = (cov_1cqg3qhd2j.s[27]++, __webpack_require__(20));var _web = (cov_1cqg3qhd2j.s[28]++, __webpack_require__(8));var _web2 = (cov_1cqg3qhd2j.s[29]++, _interopRequireDefault(_web));function _interopRequireDefault(obj) {
  cov_1cqg3qhd2j.f[0]++;cov_1cqg3qhd2j.s[30]++;return (cov_1cqg3qhd2j.b[1][0]++, obj) && (cov_1cqg3qhd2j.b[1][1]++, obj.__esModule) ? (cov_1cqg3qhd2j.b[0][0]++, obj) : (cov_1cqg3qhd2j.b[0][1]++, { default: obj });
}const debug = (cov_1cqg3qhd2j.s[31]++, (0, _debug2.default)("debugger:data:decode:utils"));const WORD_SIZE = (cov_1cqg3qhd2j.s[32]++, exports.WORD_SIZE = 0x20);const MAX_WORD = (cov_1cqg3qhd2j.s[33]++, exports.MAX_WORD = new _bignumber.BigNumber(2).pow(256).minus(1));function cleanBigNumbers(value) {
  cov_1cqg3qhd2j.f[1]++;cov_1cqg3qhd2j.s[34]++;if (_bignumber.BigNumber.isBigNumber(value)) {
    cov_1cqg3qhd2j.b[2][0]++;cov_1cqg3qhd2j.s[35]++;return value.toNumber();
  } else {
    cov_1cqg3qhd2j.b[2][1]++;cov_1cqg3qhd2j.s[36]++;if ((cov_1cqg3qhd2j.b[4][0]++, value) && (cov_1cqg3qhd2j.b[4][1]++, value.map != undefined)) {
      cov_1cqg3qhd2j.b[3][0]++;cov_1cqg3qhd2j.s[37]++;return value.map(inner => {
        cov_1cqg3qhd2j.f[2]++;cov_1cqg3qhd2j.s[38]++;return cleanBigNumbers(inner);
      });
    } else {
      cov_1cqg3qhd2j.b[3][1]++;cov_1cqg3qhd2j.s[39]++;if ((cov_1cqg3qhd2j.b[6][0]++, value) && (cov_1cqg3qhd2j.b[6][1]++, typeof value == "object")) {
        cov_1cqg3qhd2j.b[5][0]++;cov_1cqg3qhd2j.s[40]++;return (0, _assign2.default)({}, ...(0, _entries2.default)(value).map(([key, inner]) => {
          cov_1cqg3qhd2j.f[3]++;cov_1cqg3qhd2j.s[41]++;return { [key]: cleanBigNumbers(inner) };
        }));
      } else {
        cov_1cqg3qhd2j.b[5][1]++;cov_1cqg3qhd2j.s[42]++;return value;
      }
    }
  }
}function typeIdentifier(definition) {
  cov_1cqg3qhd2j.f[4]++;cov_1cqg3qhd2j.s[43]++;return definition.typeDescriptions.typeIdentifier;
}function typeClass(definition) {
  cov_1cqg3qhd2j.f[5]++;cov_1cqg3qhd2j.s[44]++;return typeIdentifier(definition).match(/t_([^$_0-9]+)/)[1];
}function allocateDeclarations(declarations, refs, slot = (cov_1cqg3qhd2j.b[7][0]++, 0), index = (cov_1cqg3qhd2j.b[8][0]++, WORD_SIZE - 1)) {
  cov_1cqg3qhd2j.f[6]++;cov_1cqg3qhd2j.s[45]++;slot = normalizeSlot(slot);cov_1cqg3qhd2j.s[46]++;if (index < WORD_SIZE - 1) {
    cov_1cqg3qhd2j.b[9][0]++;cov_1cqg3qhd2j.s[47]++;slot = { path: slot, offset: 1 };cov_1cqg3qhd2j.s[48]++;index = WORD_SIZE - 1;
  } else {
    cov_1cqg3qhd2j.b[9][1]++;
  }let parentFrom = (cov_1cqg3qhd2j.s[49]++, { slot, index: 0 });var parentTo = (cov_1cqg3qhd2j.s[50]++, { slot, index: WORD_SIZE - 1 });let mapping = (cov_1cqg3qhd2j.s[51]++, {});cov_1cqg3qhd2j.s[52]++;for (let declaration of declarations) {
    let { from, to, next, children } = (cov_1cqg3qhd2j.s[53]++, allocateDeclaration(declaration, refs, slot, index));cov_1cqg3qhd2j.s[54]++;mapping[declaration.id] = { from, to, name: declaration.name };cov_1cqg3qhd2j.s[55]++;if (children !== undefined) {
      cov_1cqg3qhd2j.b[10][0]++;cov_1cqg3qhd2j.s[56]++;mapping[declaration.id].children = children;
    } else {
      cov_1cqg3qhd2j.b[10][1]++;
    }cov_1cqg3qhd2j.s[57]++;slot = next.slot;cov_1cqg3qhd2j.s[58]++;index = next.index;cov_1cqg3qhd2j.s[59]++;parentTo = { slot: to.slot, index: WORD_SIZE - 1 };
  }cov_1cqg3qhd2j.s[60]++;if (index < WORD_SIZE - 1) {
    cov_1cqg3qhd2j.b[11][0]++;cov_1cqg3qhd2j.s[61]++;slot = { path: slot, offset: 1 };cov_1cqg3qhd2j.s[62]++;index = WORD_SIZE - 1;
  } else {
    cov_1cqg3qhd2j.b[11][1]++;
  }cov_1cqg3qhd2j.s[63]++;return { from: parentFrom, to: parentTo, next: { slot, index }, children: mapping };
}function allocateValue(slot, index, bytes) {
  cov_1cqg3qhd2j.f[7]++;let from = (cov_1cqg3qhd2j.s[64]++, index - bytes + 1 >= 0 ? (cov_1cqg3qhd2j.b[12][0]++, { slot, index: index - bytes + 1 }) : (cov_1cqg3qhd2j.b[12][1]++, { slot: { path: slot.path, offset: slot.offset + 1 }, index: WORD_SIZE - bytes }));let to = (cov_1cqg3qhd2j.s[65]++, { slot: from.slot, index: from.index + bytes - 1 });let next = (cov_1cqg3qhd2j.s[66]++, from.index == 0 ? (cov_1cqg3qhd2j.b[13][0]++, { slot: { path: from.slot.path, offset: from.slot.offset + 1 }, index: WORD_SIZE - 1 }) : (cov_1cqg3qhd2j.b[13][1]++, { slot: from.slot, index: from.index - 1 }));cov_1cqg3qhd2j.s[67]++;return { from, to, next };
}function allocateDeclaration(declaration, refs, slot, index) {
  cov_1cqg3qhd2j.f[8]++;let definition = (cov_1cqg3qhd2j.s[68]++, refs[declaration.id].definition);var byteSize = (cov_1cqg3qhd2j.s[69]++, storageSize(definition));cov_1cqg3qhd2j.s[70]++;if (typeClass(definition) != "struct") {
    cov_1cqg3qhd2j.b[14][0]++;cov_1cqg3qhd2j.s[71]++;return allocateValue(slot, index, byteSize);
  } else {
    cov_1cqg3qhd2j.b[14][1]++;
  }let struct = (cov_1cqg3qhd2j.s[72]++, refs[definition.typeName.referencedDeclaration]);cov_1cqg3qhd2j.s[73]++;debug("struct: %O", struct);let result = (cov_1cqg3qhd2j.s[74]++, allocateDeclarations((cov_1cqg3qhd2j.b[15][0]++, struct.variables) || (cov_1cqg3qhd2j.b[15][1]++, []), refs, slot, index));cov_1cqg3qhd2j.s[75]++;debug("struct result %o", result);cov_1cqg3qhd2j.s[76]++;return result;
}function normalizeSlot(slot) {
  cov_1cqg3qhd2j.f[9]++;cov_1cqg3qhd2j.s[77]++;if ((cov_1cqg3qhd2j.b[17][0]++, typeof slot == "object") && (cov_1cqg3qhd2j.b[17][1]++, slot.path != undefined)) {
    cov_1cqg3qhd2j.b[16][0]++;cov_1cqg3qhd2j.s[78]++;return { path: slot.path, offset: (cov_1cqg3qhd2j.b[18][0]++, slot.offset) || (cov_1cqg3qhd2j.b[18][1]++, 0) };
  } else {
    cov_1cqg3qhd2j.b[16][1]++;
  }cov_1cqg3qhd2j.s[79]++;return { path: slot, offset: 0 };
}function specifiedSize(definition) {
  cov_1cqg3qhd2j.f[10]++;let specified = (cov_1cqg3qhd2j.s[80]++, typeIdentifier(definition).match(/t_[a-z]+([0-9]+)/));cov_1cqg3qhd2j.s[81]++;if (!specified) {
    cov_1cqg3qhd2j.b[19][0]++;cov_1cqg3qhd2j.s[82]++;return null;
  } else {
    cov_1cqg3qhd2j.b[19][1]++;
  }let num = (cov_1cqg3qhd2j.s[83]++, specified[1]);cov_1cqg3qhd2j.s[84]++;switch (typeClass(definition)) {case "int":
      cov_1cqg3qhd2j.b[20][0]++;case "uint":
      cov_1cqg3qhd2j.b[20][1]++;cov_1cqg3qhd2j.s[85]++;return num / 8;case "bytes":
      cov_1cqg3qhd2j.b[20][2]++;cov_1cqg3qhd2j.s[86]++;return num;default:
      cov_1cqg3qhd2j.b[20][3]++;cov_1cqg3qhd2j.s[87]++;debug("Unknown type for size specification: %s", typeIdentifier(definition));}
}function storageSize(definition) {
  cov_1cqg3qhd2j.f[11]++;cov_1cqg3qhd2j.s[88]++;switch (typeClass(definition)) {case "bool":
      cov_1cqg3qhd2j.b[21][0]++;cov_1cqg3qhd2j.s[89]++;return 1;case "address":
      cov_1cqg3qhd2j.b[21][1]++;cov_1cqg3qhd2j.s[90]++;return 20;case "int":
      cov_1cqg3qhd2j.b[21][2]++;case "uint":
      cov_1cqg3qhd2j.b[21][3]++;cov_1cqg3qhd2j.s[91]++;return typeIdentifier(definition).match(/t_[a-z]+([0-9]+)/)[1] / 8;case "string":
      cov_1cqg3qhd2j.b[21][4]++;case "bytes":
      cov_1cqg3qhd2j.b[21][5]++;case "array":
      cov_1cqg3qhd2j.b[21][6]++;cov_1cqg3qhd2j.s[92]++;return WORD_SIZE;case "mapping":
      cov_1cqg3qhd2j.b[21][7]++;cov_1cqg3qhd2j.s[93]++;return WORD_SIZE;}
}function isMapping(definition) {
  cov_1cqg3qhd2j.f[12]++;cov_1cqg3qhd2j.s[94]++;return typeIdentifier(definition).match(/^t_mapping/) != null;
}function isReference(definition) {
  cov_1cqg3qhd2j.f[13]++;cov_1cqg3qhd2j.s[95]++;return typeIdentifier(definition).match(/_(memory|storage)(_ptr)?$/) != null;
}function referenceType(definition) {
  cov_1cqg3qhd2j.f[14]++;cov_1cqg3qhd2j.s[96]++;return typeIdentifier(definition).match(/_([^_]+)(_ptr)?$/)[1];
}function baseDefinition(definition) {
  cov_1cqg3qhd2j.f[15]++;let baseIdentifier = (cov_1cqg3qhd2j.s[97]++, typeIdentifier(definition).match(/^[^$]+\$_(.+)_\$[^$]+$/)[1]);cov_1cqg3qhd2j.s[98]++;if (baseIdentifier.match(/_(memory|storage)$/) != null) {
    cov_1cqg3qhd2j.b[22][0]++;cov_1cqg3qhd2j.s[99]++;baseIdentifier = `${baseIdentifier}_ptr`;
  } else {
    cov_1cqg3qhd2j.b[22][1]++;
  }cov_1cqg3qhd2j.s[100]++;return { typeDescriptions: { typeIdentifier: baseIdentifier } };
}function toBigNumber(bytes) {
  cov_1cqg3qhd2j.f[16]++;cov_1cqg3qhd2j.s[101]++;if (bytes == undefined) {
    cov_1cqg3qhd2j.b[23][0]++;cov_1cqg3qhd2j.s[102]++;return undefined;
  } else {
    cov_1cqg3qhd2j.b[23][1]++;cov_1cqg3qhd2j.s[103]++;if (typeof bytes == "string") {
      cov_1cqg3qhd2j.b[24][0]++;cov_1cqg3qhd2j.s[104]++;return new _bignumber.BigNumber(bytes, 16);
    } else {
      cov_1cqg3qhd2j.b[24][1]++;cov_1cqg3qhd2j.s[105]++;if ((cov_1cqg3qhd2j.b[26][0]++, typeof bytes == "number") || (cov_1cqg3qhd2j.b[26][1]++, _bignumber.BigNumber.isBigNumber(bytes))) {
        cov_1cqg3qhd2j.b[25][0]++;cov_1cqg3qhd2j.s[106]++;return new _bignumber.BigNumber(bytes);
      } else {
        cov_1cqg3qhd2j.b[25][1]++;cov_1cqg3qhd2j.s[107]++;if (bytes.reduce) {
          cov_1cqg3qhd2j.b[27][0]++;cov_1cqg3qhd2j.s[108]++;return bytes.reduce((num, byte) => {
            cov_1cqg3qhd2j.f[17]++;cov_1cqg3qhd2j.s[109]++;return num.times(0x100).plus(byte);
          }, new _bignumber.BigNumber(0));
        } else {
          cov_1cqg3qhd2j.b[27][1]++;
        }
      }
    }
  }
}function toSignedBigNumber(bytes) {
  cov_1cqg3qhd2j.f[18]++;cov_1cqg3qhd2j.s[110]++;if (bytes[0] < 0b10000000) {
    cov_1cqg3qhd2j.b[28][0]++;cov_1cqg3qhd2j.s[111]++;return toBigNumber(bytes);
  } else {
    cov_1cqg3qhd2j.b[28][1]++;cov_1cqg3qhd2j.s[112]++;return toBigNumber(bytes.map(b => {
      cov_1cqg3qhd2j.f[19]++;cov_1cqg3qhd2j.s[113]++;return 0xff - b;
    })).plus(1).negated();
  }
}function toHexString(bytes, length = (cov_1cqg3qhd2j.b[29][0]++, 0), trim = (cov_1cqg3qhd2j.b[30][0]++, false)) {
  cov_1cqg3qhd2j.f[20]++;cov_1cqg3qhd2j.s[114]++;if (typeof length == "boolean") {
    cov_1cqg3qhd2j.b[31][0]++;cov_1cqg3qhd2j.s[115]++;trim = length;cov_1cqg3qhd2j.s[116]++;length = 0;
  } else {
    cov_1cqg3qhd2j.b[31][1]++;
  }cov_1cqg3qhd2j.s[117]++;if (_bignumber.BigNumber.isBigNumber(bytes)) {
    cov_1cqg3qhd2j.b[32][0]++;cov_1cqg3qhd2j.s[118]++;bytes = toBytes(bytes);
  } else {
    cov_1cqg3qhd2j.b[32][1]++;
  }cov_1cqg3qhd2j.s[119]++;const pad = s => {
    cov_1cqg3qhd2j.f[21]++;cov_1cqg3qhd2j.s[120]++;return `${"00".slice(0, 2 - s.length)}${s}`;
  };cov_1cqg3qhd2j.s[121]++;if (bytes.length < length) {
    cov_1cqg3qhd2j.b[33][0]++;let prior = (cov_1cqg3qhd2j.s[122]++, bytes);cov_1cqg3qhd2j.s[123]++;bytes = new Uint8Array(length);cov_1cqg3qhd2j.s[124]++;bytes.set(prior, length - prior.length);
  } else {
    cov_1cqg3qhd2j.b[33][1]++;
  }cov_1cqg3qhd2j.s[125]++;debug("bytes: %o", bytes);let string = (cov_1cqg3qhd2j.s[126]++, bytes.reduce((str, byte) => {
    cov_1cqg3qhd2j.f[22]++;cov_1cqg3qhd2j.s[127]++;return `${str}${pad(byte.toString(16))}`;
  }, ""));cov_1cqg3qhd2j.s[128]++;if (trim) {
    cov_1cqg3qhd2j.b[34][0]++;cov_1cqg3qhd2j.s[129]++;string = string.replace(/^(00)+/, "");
  } else {
    cov_1cqg3qhd2j.b[34][1]++;
  }cov_1cqg3qhd2j.s[130]++;if (string.length == 0) {
    cov_1cqg3qhd2j.b[35][0]++;cov_1cqg3qhd2j.s[131]++;string = "00";
  } else {
    cov_1cqg3qhd2j.b[35][1]++;
  }cov_1cqg3qhd2j.s[132]++;return `0x${string}`;
}function toBytes(number, length = (cov_1cqg3qhd2j.b[36][0]++, 0)) {
  cov_1cqg3qhd2j.f[23]++;cov_1cqg3qhd2j.s[133]++;if ((cov_1cqg3qhd2j.b[38][0]++, number < 0) || (cov_1cqg3qhd2j.b[38][1]++, number === "")) {
    cov_1cqg3qhd2j.b[37][0]++;cov_1cqg3qhd2j.s[134]++;return [];
  } else {
    cov_1cqg3qhd2j.b[37][1]++;
  }let hex = (cov_1cqg3qhd2j.s[135]++, number.toString(16));cov_1cqg3qhd2j.s[136]++;if (hex.length % 2 == 1) {
    cov_1cqg3qhd2j.b[39][0]++;cov_1cqg3qhd2j.s[137]++;hex = `0${hex}`;
  } else {
    cov_1cqg3qhd2j.b[39][1]++;
  }let bytes = (cov_1cqg3qhd2j.s[138]++, new Uint8Array(hex.match(/.{2}/g).map(byte => {
    cov_1cqg3qhd2j.f[24]++;cov_1cqg3qhd2j.s[139]++;return parseInt(byte, 16);
  })));cov_1cqg3qhd2j.s[140]++;if (bytes.length < length) {
    cov_1cqg3qhd2j.b[40][0]++;let prior = (cov_1cqg3qhd2j.s[141]++, bytes);cov_1cqg3qhd2j.s[142]++;bytes = new Uint8Array(length);cov_1cqg3qhd2j.s[143]++;bytes.set(prior, length - prior.length);
  } else {
    cov_1cqg3qhd2j.b[40][1]++;
  }cov_1cqg3qhd2j.s[144]++;return bytes;
}function keccak256(...args) {
  cov_1cqg3qhd2j.f[25]++;let web3 = (cov_1cqg3qhd2j.s[145]++, new _web2.default());cov_1cqg3qhd2j.s[146]++;debug("args %o", args);let sha = (cov_1cqg3qhd2j.s[147]++, web3.utils.soliditySha3(...args));cov_1cqg3qhd2j.s[148]++;debug("sha %o", sha);cov_1cqg3qhd2j.s[149]++;return toBigNumber(sha);
}function augmentWithDepth(id, depth = (cov_1cqg3qhd2j.b[41][0]++, 0)) {
  cov_1cqg3qhd2j.f[26]++;cov_1cqg3qhd2j.s[150]++;return `${depth}:${id}`;
}function idFromAugmented(augmentedId) {
  cov_1cqg3qhd2j.f[27]++;cov_1cqg3qhd2j.s[151]++;return Number(augmentedId.split(":")[1]);
}function depthFromAugmented(augmentedId) {
  cov_1cqg3qhd2j.f[28]++;cov_1cqg3qhd2j.s[152]++;return Number(augmentedId.split(":")[0]);
}

/***/ }),
/* 12 */
/***/ (function(module, exports) {

module.exports = require("chai");

/***/ }),
/* 13 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.gatherArtifacts = exports.migrate = exports.compile = exports.defaultMigrations = exports.addMigrations = exports.addContracts = exports.createSandbox = exports.prepareContracts = undefined;

var _promise = __webpack_require__(23);

var _promise2 = _interopRequireDefault(_promise);

var _keys = __webpack_require__(16);

var _keys2 = _interopRequireDefault(_keys);

var _asyncToGenerator2 = __webpack_require__(7);

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

let prepareContracts = exports.prepareContracts = (() => {
  var _ref = (0, _asyncToGenerator3.default)(function* (provider, sources = {}, migrations) {
    let config = yield createSandbox();

    let accounts = yield getAccounts(provider);

    config.networks["debugger"] = {
      provider: provider,
      network_id: "*",
      from: accounts[0]
    };
    config.network = "debugger";

    yield addContracts(config, sources);
    let { contracts, files } = yield compile(config);
    let contractNames = (0, _keys2.default)(contracts);

    if (!migrations) {
      migrations = yield defaultMigrations(contractNames);
    }

    yield addMigrations(config, migrations);
    yield migrate(config);

    let artifacts = yield gatherArtifacts(config);
    debug("artifacts: %o", artifacts.map(function (a) {
      return a.contractName;
    }));

    let abstractions = {};
    contractNames.forEach(function (name) {
      abstractions[name] = config.resolver.require(name);
    });

    return {
      files,
      abstractions,
      artifacts,
      config
    };
  });

  return function prepareContracts(_x) {
    return _ref.apply(this, arguments);
  };
})();

let createSandbox = exports.createSandbox = (() => {
  var _ref2 = (0, _asyncToGenerator3.default)(function* () {
    let config = yield new _promise2.default(function (accept, reject) {
      _truffleBox2.default.sandbox(function (err, result) {
        if (err) return reject(err);
        result.resolver = new _truffleResolver2.default(result);
        result.artifactor = new _truffleArtifactor2.default(result.contracts_build_directory);
        result.networks = {};

        accept(result);
      });
    });

    yield _fsExtra2.default.remove(_path2.default.join(config.contracts_directory, "MetaCoin.sol"));
    yield _fsExtra2.default.remove(_path2.default.join(config.contracts_directory, "ConvertLib.sol"));
    yield _fsExtra2.default.remove(_path2.default.join(config.migrations_directory, "2_deploy_contracts.js"));

    return config;
  });

  return function createSandbox() {
    return _ref2.apply(this, arguments);
  };
})();

let addContracts = exports.addContracts = (() => {
  var _ref3 = (0, _asyncToGenerator3.default)(function* (config, sources = {}) {
    let promises = [];
    for (let filename of (0, _keys2.default)(sources)) {
      let source = sources[filename];
      promises.push(_fsExtra2.default.outputFile(_path2.default.join(config.contracts_directory, filename), source));
    }

    return yield _promise2.default.all(promises);
  });

  return function addContracts(_x2) {
    return _ref3.apply(this, arguments);
  };
})();

let addMigrations = exports.addMigrations = (() => {
  var _ref4 = (0, _asyncToGenerator3.default)(function* (config, migrations = {}) {
    let promises = [];
    for (let filename of (0, _keys2.default)(migrations)) {
      let source = migrations[filename];
      promises.push(_fsExtra2.default.outputFile(_path2.default.join(config.migrations_directory, filename), source));
    }

    return yield _promise2.default.all(promises);
  });

  return function addMigrations(_x3) {
    return _ref4.apply(this, arguments);
  };
})();

let defaultMigrations = exports.defaultMigrations = (() => {
  var _ref5 = (0, _asyncToGenerator3.default)(function* (contractNames) {
    contractNames = contractNames.filter(function (name) {
      return name != "Migrations";
    });

    let migrations = {};

    contractNames.forEach(function (contractName, i) {
      let index = i + 2; // start at 2 cause Migrations migration
      let filename = `${index}_migrate_${contractName}.js`;
      let source = `
      var ${contractName} = artifacts.require("${contractName}");

      module.exports = function(deployer) {
        deployer.deploy(${contractName});
      };
    `;

      migrations[filename] = source;
    });

    return migrations;
  });

  return function defaultMigrations(_x4) {
    return _ref5.apply(this, arguments);
  };
})();

let compile = exports.compile = (() => {
  var _ref6 = (0, _asyncToGenerator3.default)(function* (config) {
    return new _promise2.default(function (accept, reject) {
      _truffleWorkflowCompile2.default.compile(config.with({
        all: true,
        quiet: true
      }), function (err, result) {
        if (err) return reject(err);
        const { contracts, outputs } = result;
        debug("result %O", result);
        return accept({ contracts, files: outputs.solc });
      });
    });
  });

  return function compile(_x5) {
    return _ref6.apply(this, arguments);
  };
})();

let migrate = exports.migrate = (() => {
  var _ref7 = (0, _asyncToGenerator3.default)(function* (config) {
    return new _promise2.default(function (accept, reject) {
      _truffleMigrate2.default.run(config.with({
        quiet: true
      }), function (err, contracts) {
        if (err) return reject(err);
        accept(contracts);
      });
    });
  });

  return function migrate(_x6) {
    return _ref7.apply(this, arguments);
  };
})();

let gatherArtifacts = exports.gatherArtifacts = (() => {
  var _ref8 = (0, _asyncToGenerator3.default)(function* (config) {
    return _truffleDebugUtils2.default.gatherArtifacts(config);
  });

  return function gatherArtifacts(_x7) {
    return _ref8.apply(this, arguments);
  };
})();

exports.getAccounts = getAccounts;

var _debug = __webpack_require__(0);

var _debug2 = _interopRequireDefault(_debug);

var _path = __webpack_require__(41);

var _path2 = _interopRequireDefault(_path);

var _fsExtra = __webpack_require__(42);

var _fsExtra2 = _interopRequireDefault(_fsExtra);

var _async = __webpack_require__(43);

var _async2 = _interopRequireDefault(_async);

var _truffleWorkflowCompile = __webpack_require__(44);

var _truffleWorkflowCompile2 = _interopRequireDefault(_truffleWorkflowCompile);

var _truffleDebugUtils = __webpack_require__(45);

var _truffleDebugUtils2 = _interopRequireDefault(_truffleDebugUtils);

var _truffleArtifactor = __webpack_require__(46);

var _truffleArtifactor2 = _interopRequireDefault(_truffleArtifactor);

var _web = __webpack_require__(8);

var _web2 = _interopRequireDefault(_web);

var _truffleMigrate = __webpack_require__(47);

var _truffleMigrate2 = _interopRequireDefault(_truffleMigrate);

var _truffleBox = __webpack_require__(48);

var _truffleBox2 = _interopRequireDefault(_truffleBox);

var _truffleResolver = __webpack_require__(49);

var _truffleResolver2 = _interopRequireDefault(_truffleResolver);

var _truffleExpect = __webpack_require__(28);

var _truffleExpect2 = _interopRequireDefault(_truffleExpect);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const debug = (0, _debug2.default)("test:helpers");

function getAccounts(provider) {
  let web3 = new _web2.default(provider);
  return new _promise2.default(function (accept, reject) {
    web3.eth.getAccounts(function (err, accounts) {
      if (err) return reject(err);
      accept(accounts);
    });
  });
}

/***/ }),
/* 14 */
/***/ (function(module, exports) {

module.exports = require("redux");

/***/ }),
/* 15 */
/***/ (function(module, exports) {

module.exports = require("ganache-cli");

/***/ }),
/* 16 */
/***/ (function(module, exports) {

module.exports = require("babel-runtime/core-js/object/keys");

/***/ }),
/* 17 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var cov_2dt8u0v6f0 = function () {
  var path = "/Users/gnidan/src/work/truffle/packages/truffle-debugger/lib/debugger.js",
      hash = "0481c0bb6a3998cc58d994044c63fe919f731f74",
      Function = function () {}.constructor,
      global = new Function('return this')(),
      gcv = "__coverage__",
      coverageData = { path: "/Users/gnidan/src/work/truffle/packages/truffle-debugger/lib/debugger.js", statementMap: { "0": { start: { line: 3, column: 0 }, end: { line: 5, column: 3 } }, "1": { start: { line: 7, column: 25 }, end: { line: 7, column: 74 } }, "2": { start: { line: 9, column: 25 }, end: { line: 9, column: 67 } }, "3": { start: { line: 11, column: 13 }, end: { line: 11, column: 29 } }, "4": { start: { line: 13, column: 14 }, end: { line: 13, column: 44 } }, "5": { start: { line: 15, column: 21 }, end: { line: 15, column: 46 } }, "6": { start: { line: 17, column: 22 }, end: { line: 17, column: 60 } }, "7": { start: { line: 19, column: 15 }, end: { line: 19, column: 35 } }, "8": { start: { line: 21, column: 16 }, end: { line: 21, column: 48 } }, "9": { start: { line: 23, column: 20 }, end: { line: 23, column: 44 } }, "10": { start: { line: 25, column: 17 }, end: { line: 25, column: 44 } }, "11": { start: { line: 27, column: 18 }, end: { line: 27, column: 52 } }, "12": { start: { line: 29, column: 18 }, end: { line: 29, column: 44 } }, "13": { start: { line: 31, column: 18 }, end: { line: 31, column: 53 } }, "14": { start: { line: 33, column: 18 }, end: { line: 33, column: 46 } }, "15": { start: { line: 35, column: 18 }, end: { line: 35, column: 53 } }, "16": { start: { line: 37, column: 18 }, end: { line: 37, column: 44 } }, "17": { start: { line: 39, column: 18 }, end: { line: 39, column: 53 } }, "18": { start: { line: 41, column: 18 }, end: { line: 41, column: 49 } }, "19": { start: { line: 43, column: 19 }, end: { line: 43, column: 54 } }, "20": { start: { line: 45, column: 19 }, end: { line: 45, column: 49 } }, "21": { start: { line: 47, column: 19 }, end: { line: 47, column: 55 } }, "22": { start: { line: 49, column: 19 }, end: { line: 49, column: 52 } }, "23": { start: { line: 51, column: 19 }, end: { line: 51, column: 55 } }, "24": { start: { line: 53, column: 39 }, end: { line: 53, column: 93 } }, "25": { start: { line: 55, column: 14 }, end: { line: 55, column: 46 } }, "26": { start: { line: 75, column: 4 }, end: { line: 75, column: 28 } }, "27": { start: { line: 86, column: 16 }, end: { line: 86, column: 20 } }, "28": { start: { line: 88, column: 4 }, end: { line: 100, column: 9 } }, "29": { start: { line: 89, column: 6 }, end: { line: 89, column: 74 } }, "30": { start: { line: 91, column: 20 }, end: { line: 91, column: 101 } }, "31": { start: { line: 93, column: 6 }, end: { line: 97, column: 7 } }, "32": { start: { line: 94, column: 8 }, end: { line: 94, column: 30 } }, "33": { start: { line: 96, column: 8 }, end: { line: 96, column: 16 } }, "34": { start: { line: 99, column: 6 }, end: { line: 99, column: 32 } }, "35": { start: { line: 109, column: 4 }, end: { line: 109, column: 25 } }, "36": { start: { line: 127, column: 4 }, end: { line: 135, column: 7 } }, "37": { start: { line: 139, column: 0 }, end: { line: 139, column: 27 } } }, fnMap: { "0": { name: "_interopRequireDefault", decl: { start: { line: 53, column: 9 }, end: { line: 53, column: 31 } }, loc: { start: { line: 53, column: 37 }, end: { line: 53, column: 95 } }, line: 53 }, "1": { name: "(anonymous_1)", decl: { start: { line: 71, column: 2 }, end: { line: 71, column: 3 } }, loc: { start: { line: 71, column: 23 }, end: { line: 76, column: 3 } }, line: 71 }, "2": { name: "(anonymous_2)", decl: { start: { line: 85, column: 2 }, end: { line: 85, column: 3 } }, loc: { start: { line: 85, column: 37 }, end: { line: 101, column: 3 } }, line: 85 }, "3": { name: "(anonymous_3)", decl: { start: { line: 88, column: 43 }, end: { line: 88, column: 44 } }, loc: { start: { line: 88, column: 56 }, end: { line: 100, column: 5 } }, line: 88 }, "4": { name: "(anonymous_4)", decl: { start: { line: 108, column: 2 }, end: { line: 108, column: 3 } }, loc: { start: { line: 108, column: 12 }, end: { line: 110, column: 3 } }, line: 108 }, "5": { name: "(anonymous_5)", decl: { start: { line: 126, column: 2 }, end: { line: 126, column: 3 } }, loc: { start: { line: 126, column: 25 }, end: { line: 136, column: 3 } }, line: 126 } }, branchMap: { "0": { loc: { start: { line: 53, column: 46 }, end: { line: 53, column: 92 } }, type: "cond-expr", locations: [{ start: { line: 53, column: 70 }, end: { line: 53, column: 73 } }, { start: { line: 53, column: 76 }, end: { line: 53, column: 92 } }], line: 53 }, "1": { loc: { start: { line: 53, column: 46 }, end: { line: 53, column: 67 } }, type: "binary-expr", locations: [{ start: { line: 53, column: 46 }, end: { line: 53, column: 49 } }, { start: { line: 53, column: 53 }, end: { line: 53, column: 67 } }], line: 53 }, "2": { loc: { start: { line: 85, column: 23 }, end: { line: 85, column: 35 } }, type: "default-arg", locations: [{ start: { line: 85, column: 33 }, end: { line: 85, column: 35 } }], line: 85 } }, s: { "0": 0, "1": 0, "2": 0, "3": 0, "4": 0, "5": 0, "6": 0, "7": 0, "8": 0, "9": 0, "10": 0, "11": 0, "12": 0, "13": 0, "14": 0, "15": 0, "16": 0, "17": 0, "18": 0, "19": 0, "20": 0, "21": 0, "22": 0, "23": 0, "24": 0, "25": 0, "26": 0, "27": 0, "28": 0, "29": 0, "30": 0, "31": 0, "32": 0, "33": 0, "34": 0, "35": 0, "36": 0, "37": 0 }, f: { "0": 0, "1": 0, "2": 0, "3": 0, "4": 0, "5": 0 }, b: { "0": [0, 0], "1": [0, 0], "2": [0] }, inputSourceMap: { version: 3, sources: ["lib/debugger.js"], names: ["debug", "Debugger", "constructor", "session", "_session", "forTx", "txHash", "options", "expect", "Session", "contracts", "files", "provider", "ready", "e", "connect", "selectors", "ast", "astSelector", "data", "dataSelector", "trace", "traceSelector", "evm", "evmSelector", "solidity", "soliditySelector", "sessionSelector", "controller", "controllerSelector"], mappings: ";;;;;;;;;;AAAA;;;;AACA;;;;AAEA;;;;AAEA;;AAEA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;AAEA,MAAMA,QAAQ,qBAAY,UAAZ,CAAd;;AAEA;;;;;;;;;AASe,MAAMC,QAAN,CAAe;AAC5B;;;;AAIAC,cAAYC,OAAZ,EAAqB;AACnB;;;AAGA,SAAKC,QAAL,GAAgBD,OAAhB;AACD;;AAED;;;;;;;AAOA,SAAaE,KAAb,CAAmBC,MAAnB,EAA2BC,UAAU,EAArC,EAAyC;AAAA;;AAAA;AACvCC,8BAAOD,OAAP,CAAeA,OAAf,EAAwB,CACtB,WADsB,EAEtB,UAFsB,CAAxB;;AAKA,UAAIJ,UAAU,IAAIM,iBAAJ,CACZF,QAAQG,SADI,EACOH,QAAQI,KADf,EAEZL,MAFY,EAEJC,QAAQK,QAFJ,CAAd;;AAKA,UAAI;AACF,cAAMT,QAAQU,KAAR,EAAN;AACD,OAFD,CAEE,OAAOC,CAAP,EAAU;AACV,cAAMA,CAAN;AACD;;AAED,aAAO,IAAI,KAAJ,CAASX,OAAT,CAAP;AAjBuC;AAkBxC;;AAGD;;;;;AAKAY,YAAU;AACR,WAAO,KAAKX,QAAZ;AACD;;AAED;;;;;;;;;;;;;;AAcA,aAAWY,SAAX,GAAuB;AACrB,WAAO,wCAAqB;AAC1BC,WAAKC,mBADqB;AAE1BC,YAAMC,mBAFoB;AAG1BC,aAAOC,mBAHmB;AAI1BC,WAAKC,mBAJqB;AAK1BC,gBAAUC,oBALgB;AAM1BvB,eAASwB,oBANiB;AAO1BC,kBAAYC;AAPc,KAArB,CAAP;AASD;AAzE2B;;kBAAT5B,Q,EA4ErB", file: "debugger.js", sourceRoot: "/Users/gnidan/src/work/truffle/packages/truffle-debugger", sourcesContent: ["import debugModule from 'debug';\nimport expect from \"truffle-expect\";\n\nimport Session from \"./session\";\n\nimport { createNestedSelector } from \"reselect-tree\";\n\nimport dataSelector from \"./data/selectors\";\nimport astSelector from \"./ast/selectors\";\nimport traceSelector from \"./trace/selectors\";\nimport evmSelector from \"./evm/selectors\";\nimport soliditySelector from \"./solidity/selectors\";\nimport sessionSelector from \"./session/selectors\";\nimport controllerSelector from \"./controller/selectors\";\n\nconst debug = debugModule(\"debugger\");\n\n/**\n * @example\n * let session = Debugger\n *   .forTx(<txHash>, {\n *     contracts: [<contract obj>, ...],\n *     provider: <provider instance>\n *   })\n *   .connect();\n */\nexport default class Debugger {\n  /**\n   * @param {Session} session - debugger session\n   * @private\n   */\n  constructor(session) {\n    /**\n     * @private\n     */\n    this._session = session;\n  }\n\n  /**\n   * Instantiates a Debugger for a given transaction hash.\n   *\n   * @param {String} txHash - transaction hash with leading \"0x\"\n   * @param {{contracts: Array<Contract>, files: Array<String>, provider: Web3Provider}} options -\n   * @return {Debugger} instance\n   */\n  static async forTx(txHash, options = {}) {\n    expect.options(options, [\n      \"contracts\",\n      \"provider\"\n    ]);\n\n    let session = new Session(\n      options.contracts, options.files,\n      txHash, options.provider\n    );\n\n    try {\n      await session.ready();\n    } catch (e) {\n      throw e;\n    }\n\n    return new this(session);\n  }\n\n\n  /**\n   * Connects to the instantiated Debugger.\n   *\n   * @return {Session} session instance\n   */\n  connect() {\n    return this._session;\n  }\n\n  /**\n   * Exported selectors\n   *\n   * See individual selector docs for full listing\n   *\n   * @example\n   * Debugger.selectors.ast.current.tree\n   *\n   * @example\n   * Debugger.selectors.solidity.current.instruction\n   *\n   * @example\n   * Debugger.selectors.trace.steps\n   */\n  static get selectors() {\n    return createNestedSelector({\n      ast: astSelector,\n      data: dataSelector,\n      trace: traceSelector,\n      evm: evmSelector,\n      solidity: soliditySelector,\n      session: sessionSelector,\n      controller: controllerSelector,\n    });\n  }\n}\n\n/**\n * @typedef {Object} Contract\n * @property {string} contractName contract name\n * @property {string} source solidity source code\n * @property {string} sourcePath path to source file\n * @property {string} binary 0x-prefixed hex string with create bytecode\n * @property {string} sourceMap solidity source map for create bytecode\n * @property {Object} ast Abstract Syntax Tree from Solidity\n * @property {string} deployedBinary 0x-prefixed compiled binary (on chain)\n * @property {string} deployedSourceMap solidity source map for on-chain bytecode\n */\n"] }, _coverageSchema: "332fd63041d2c1bcb487cc26dd0d5f7d97098a6c" },
      coverage = global[gcv] || (global[gcv] = {});if (coverage[path] && coverage[path].hash === hash) {
    return coverage[path];
  }coverageData.hash = hash;return coverage[path] = coverageData;
}();cov_2dt8u0v6f0.s[0]++;Object.defineProperty(exports, "__esModule", { value: true });var _asyncToGenerator2 = (cov_2dt8u0v6f0.s[1]++, __webpack_require__(7));var _asyncToGenerator3 = (cov_2dt8u0v6f0.s[2]++, _interopRequireDefault(_asyncToGenerator2));var _debug = (cov_2dt8u0v6f0.s[3]++, __webpack_require__(0));var _debug2 = (cov_2dt8u0v6f0.s[4]++, _interopRequireDefault(_debug));var _truffleExpect = (cov_2dt8u0v6f0.s[5]++, __webpack_require__(28));var _truffleExpect2 = (cov_2dt8u0v6f0.s[6]++, _interopRequireDefault(_truffleExpect));var _session = (cov_2dt8u0v6f0.s[7]++, __webpack_require__(50));var _session2 = (cov_2dt8u0v6f0.s[8]++, _interopRequireDefault(_session));var _reselectTree = (cov_2dt8u0v6f0.s[9]++, __webpack_require__(9));var _selectors = (cov_2dt8u0v6f0.s[10]++, __webpack_require__(27));var _selectors2 = (cov_2dt8u0v6f0.s[11]++, _interopRequireDefault(_selectors));var _selectors3 = (cov_2dt8u0v6f0.s[12]++, __webpack_require__(18));var _selectors4 = (cov_2dt8u0v6f0.s[13]++, _interopRequireDefault(_selectors3));var _selectors5 = (cov_2dt8u0v6f0.s[14]++, __webpack_require__(19));var _selectors6 = (cov_2dt8u0v6f0.s[15]++, _interopRequireDefault(_selectors5));var _selectors7 = (cov_2dt8u0v6f0.s[16]++, __webpack_require__(3));var _selectors8 = (cov_2dt8u0v6f0.s[17]++, _interopRequireDefault(_selectors7));var _selectors9 = (cov_2dt8u0v6f0.s[18]++, __webpack_require__(2));var _selectors10 = (cov_2dt8u0v6f0.s[19]++, _interopRequireDefault(_selectors9));var _selectors11 = (cov_2dt8u0v6f0.s[20]++, __webpack_require__(37));var _selectors12 = (cov_2dt8u0v6f0.s[21]++, _interopRequireDefault(_selectors11));var _selectors13 = (cov_2dt8u0v6f0.s[22]++, __webpack_require__(34));var _selectors14 = (cov_2dt8u0v6f0.s[23]++, _interopRequireDefault(_selectors13));function _interopRequireDefault(obj) {
  cov_2dt8u0v6f0.f[0]++;cov_2dt8u0v6f0.s[24]++;return (cov_2dt8u0v6f0.b[1][0]++, obj) && (cov_2dt8u0v6f0.b[1][1]++, obj.__esModule) ? (cov_2dt8u0v6f0.b[0][0]++, obj) : (cov_2dt8u0v6f0.b[0][1]++, { default: obj });
}const debug = (cov_2dt8u0v6f0.s[25]++, (0, _debug2.default)("debugger"));class Debugger {
  constructor(session) {
    cov_2dt8u0v6f0.f[1]++;cov_2dt8u0v6f0.s[26]++;this._session = session;
  }static forTx(txHash, options = (cov_2dt8u0v6f0.b[2][0]++, {})) {
    cov_2dt8u0v6f0.f[2]++;var _this = (cov_2dt8u0v6f0.s[27]++, this);cov_2dt8u0v6f0.s[28]++;return (0, _asyncToGenerator3.default)(function* () {
      cov_2dt8u0v6f0.f[3]++;cov_2dt8u0v6f0.s[29]++;_truffleExpect2.default.options(options, ["contracts", "provider"]);let session = (cov_2dt8u0v6f0.s[30]++, new _session2.default(options.contracts, options.files, txHash, options.provider));cov_2dt8u0v6f0.s[31]++;try {
        cov_2dt8u0v6f0.s[32]++;yield session.ready();
      } catch (e) {
        cov_2dt8u0v6f0.s[33]++;throw e;
      }cov_2dt8u0v6f0.s[34]++;return new _this(session);
    })();
  }connect() {
    cov_2dt8u0v6f0.f[4]++;cov_2dt8u0v6f0.s[35]++;return this._session;
  }static get selectors() {
    cov_2dt8u0v6f0.f[5]++;cov_2dt8u0v6f0.s[36]++;return (0, _reselectTree.createNestedSelector)({ ast: _selectors4.default, data: _selectors2.default, trace: _selectors6.default, evm: _selectors8.default, solidity: _selectors10.default, session: _selectors12.default, controller: _selectors14.default });
  }
}cov_2dt8u0v6f0.s[37]++;exports.default = Debugger;

/***/ }),
/* 18 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var cov_2o0ye68xt7 = function () {
  var path = "/Users/gnidan/src/work/truffle/packages/truffle-debugger/lib/ast/selectors/index.js",
      hash = "d64d16994fa3701261fdb67da675fecb4915650e",
      Function = function () {}.constructor,
      global = new Function('return this')(),
      gcv = "__coverage__",
      coverageData = { path: "/Users/gnidan/src/work/truffle/packages/truffle-debugger/lib/ast/selectors/index.js", statementMap: { "0": { start: { line: 3, column: 0 }, end: { line: 5, column: 3 } }, "1": { start: { line: 7, column: 13 }, end: { line: 7, column: 29 } }, "2": { start: { line: 9, column: 14 }, end: { line: 9, column: 44 } }, "3": { start: { line: 11, column: 20 }, end: { line: 11, column: 44 } }, "4": { start: { line: 13, column: 19 }, end: { line: 13, column: 42 } }, "5": { start: { line: 15, column: 20 }, end: { line: 15, column: 56 } }, "6": { start: { line: 17, column: 17 }, end: { line: 17, column: 50 } }, "7": { start: { line: 19, column: 18 }, end: { line: 19, column: 52 } }, "8": { start: { line: 21, column: 11 }, end: { line: 21, column: 28 } }, "9": { start: { line: 23, column: 39 }, end: { line: 23, column: 93 } }, "10": { start: { line: 25, column: 14 }, end: { line: 25, column: 60 } }, "11": { start: { line: 30, column: 12 }, end: { line: 75, column: 2 } }, "12": { start: { line: 38, column: 90 }, end: { line: 38, column: 97 } }, "13": { start: { line: 51, column: 91 }, end: { line: 51, column: 94 } }, "14": { start: { line: 58, column: 91 }, end: { line: 58, column: 93 } }, "15": { start: { line: 65, column: 112 }, end: { line: 65, column: 163 } }, "16": { start: { line: 72, column: 83 }, end: { line: 72, column: 169 } }, "17": { start: { line: 77, column: 0 }, end: { line: 77, column: 22 } } }, fnMap: { "0": { name: "_interopRequireDefault", decl: { start: { line: 23, column: 9 }, end: { line: 23, column: 31 } }, loc: { start: { line: 23, column: 37 }, end: { line: 23, column: 95 } }, line: 23 }, "1": { name: "(anonymous_1)", decl: { start: { line: 38, column: 79 }, end: { line: 38, column: 80 } }, loc: { start: { line: 38, column: 90 }, end: { line: 38, column: 97 } }, line: 38 }, "2": { name: "(anonymous_2)", decl: { start: { line: 51, column: 78 }, end: { line: 51, column: 79 } }, loc: { start: { line: 51, column: 91 }, end: { line: 51, column: 94 } }, line: 51 }, "3": { name: "(anonymous_3)", decl: { start: { line: 58, column: 79 }, end: { line: 58, column: 80 } }, loc: { start: { line: 58, column: 91 }, end: { line: 58, column: 93 } }, line: 58 }, "4": { name: "(anonymous_4)", decl: { start: { line: 65, column: 96 }, end: { line: 65, column: 97 } }, loc: { start: { line: 65, column: 112 }, end: { line: 65, column: 163 } }, line: 65 }, "5": { name: "(anonymous_5)", decl: { start: { line: 72, column: 65 }, end: { line: 72, column: 66 } }, loc: { start: { line: 72, column: 83 }, end: { line: 72, column: 169 } }, line: 72 } }, branchMap: { "0": { loc: { start: { line: 23, column: 46 }, end: { line: 23, column: 92 } }, type: "cond-expr", locations: [{ start: { line: 23, column: 70 }, end: { line: 23, column: 73 } }, { start: { line: 23, column: 76 }, end: { line: 23, column: 92 } }], line: 23 }, "1": { loc: { start: { line: 23, column: 46 }, end: { line: 23, column: 67 } }, type: "binary-expr", locations: [{ start: { line: 23, column: 46 }, end: { line: 23, column: 49 } }, { start: { line: 23, column: 53 }, end: { line: 23, column: 67 } }], line: 23 }, "2": { loc: { start: { line: 72, column: 83 }, end: { line: 72, column: 169 } }, type: "cond-expr", locations: [{ start: { line: 72, column: 93 }, end: { line: 72, column: 132 } }, { start: { line: 72, column: 135 }, end: { line: 72, column: 169 } }], line: 72 } }, s: { "0": 0, "1": 0, "2": 0, "3": 0, "4": 0, "5": 0, "6": 0, "7": 0, "8": 0, "9": 0, "10": 0, "11": 0, "12": 0, "13": 0, "14": 0, "15": 0, "16": 0, "17": 0 }, f: { "0": 0, "1": 0, "2": 0, "3": 0, "4": 0, "5": 0 }, b: { "0": [0, 0], "1": [0, 0], "2": [0, 0] }, inputSourceMap: { version: 3, sources: ["lib/ast/selectors/index.js"], names: ["debug", "ast", "views", "sources", "solidity", "info", "current", "tree", "source", "index", "id", "pointer", "sourceRange", "range", "start", "length", "node", "jsonpointer", "get"], mappings: ";;;;;;AAAA;;;;AAGA;;AACA;;;;AAEA;;;;AAEA;;;;AAPA,MAAMA,QAAQ,qBAAY,wBAAZ,CAAd;;AAUA;;;AAGA,MAAMC,MAAM,sCAAmB;AAC7B;;;AAGAC,SAAO;AACL;;;AAGAC,aAAS,8BAAW,CAACC,oBAASC,IAAT,CAAcF,OAAf,CAAX,EAAoCA,WAAWA,OAA/C;AAJJ,GAJsB;;AAW7B;;;AAGAG,WAAS;;AAEP;;;;;AAKAC,UAAM,8BACJ,CAACH,oBAASE,OAAT,CAAiBE,MAAlB,CADI,EACuB,CAAC,EAACP,GAAD,EAAD,KAAWA,GADlC,CAPC;;AAWP;;;;;AAKAQ,WAAO,8BACL,CAACL,oBAASE,OAAT,CAAiBE,MAAlB,CADK,EACsB,CAAC,EAACE,EAAD,EAAD,KAAUA,EADhC,CAhBA;;AAoBP;;;;;AAKAC,aAAS,8BACP,CAAC,QAAD,EAAWP,oBAASE,OAAT,CAAiBM,WAA5B,CADO,EAGP,CAACX,GAAD,EAAMY,KAAN,KAAgB,oBAAUZ,GAAV,EAAeY,MAAMC,KAArB,EAA4BD,MAAME,MAAlC,CAHT,CAzBF;;AA+BP;;;;;AAKAC,UAAM,8BACJ,CAAC,QAAD,EAAW,WAAX,CADI,EACqB,CAACf,GAAD,EAAMU,OAAN,KACtBA,OAAD,GACIM,sBAAYC,GAAZ,CAAgBjB,GAAhB,EAAqBU,OAArB,CADJ,GAEIM,sBAAYC,GAAZ,CAAgBjB,GAAhB,EAAqB,EAArB,CAJF;;AApCC;AAdoB,CAAnB,CAAZ;;kBA4DeA,G", file: "index.js", sourceRoot: "/Users/gnidan/src/work/truffle/packages/truffle-debugger", sourcesContent: ["import debugModule from \"debug\";\nconst debug = debugModule(\"debugger:ast:selectors\");\n\nimport { createSelectorTree, createLeaf } from \"reselect-tree\";\nimport jsonpointer from \"json-pointer\";\n\nimport solidity from \"lib/solidity/selectors\";\n\nimport { findRange } from \"../map\";\n\n\n/**\n * ast\n */\nconst ast = createSelectorTree({\n  /**\n   * ast.views\n   */\n  views: {\n    /**\n     * ast.views.sources\n     */\n    sources: createLeaf([solidity.info.sources], sources => sources)\n  },\n\n  /**\n   * ast.current\n   */\n  current: {\n\n    /**\n     * ast.current.tree\n     *\n     * ast for current source\n     */\n    tree: createLeaf(\n      [solidity.current.source], ({ast}) => ast\n    ),\n\n    /**\n     * ast.current.index\n     *\n     * source ID\n     */\n    index: createLeaf(\n      [solidity.current.source], ({id}) => id\n    ),\n\n    /**\n     * ast.current.pointer\n     *\n     * jsonpointer for current ast node\n     */\n    pointer: createLeaf(\n      [\"./tree\", solidity.current.sourceRange],\n\n      (ast, range) => findRange(ast, range.start, range.length)\n    ),\n\n    /**\n     * ast.current.node\n     *\n     * current ast node to execute\n     */\n    node: createLeaf(\n      [\"./tree\", \"./pointer\"], (ast, pointer) =>\n        (pointer)\n          ? jsonpointer.get(ast, pointer)\n          : jsonpointer.get(ast, \"\")\n    ),\n\n  }\n});\n\nexport default ast;\n"] }, _coverageSchema: "332fd63041d2c1bcb487cc26dd0d5f7d97098a6c" },
      coverage = global[gcv] || (global[gcv] = {});if (coverage[path] && coverage[path].hash === hash) {
    return coverage[path];
  }coverageData.hash = hash;return coverage[path] = coverageData;
}();cov_2o0ye68xt7.s[0]++;Object.defineProperty(exports, "__esModule", { value: true });var _debug = (cov_2o0ye68xt7.s[1]++, __webpack_require__(0));var _debug2 = (cov_2o0ye68xt7.s[2]++, _interopRequireDefault(_debug));var _reselectTree = (cov_2o0ye68xt7.s[3]++, __webpack_require__(9));var _jsonPointer = (cov_2o0ye68xt7.s[4]++, __webpack_require__(24));var _jsonPointer2 = (cov_2o0ye68xt7.s[5]++, _interopRequireDefault(_jsonPointer));var _selectors = (cov_2o0ye68xt7.s[6]++, __webpack_require__(2));var _selectors2 = (cov_2o0ye68xt7.s[7]++, _interopRequireDefault(_selectors));var _map = (cov_2o0ye68xt7.s[8]++, __webpack_require__(30));function _interopRequireDefault(obj) {
  cov_2o0ye68xt7.f[0]++;cov_2o0ye68xt7.s[9]++;return (cov_2o0ye68xt7.b[1][0]++, obj) && (cov_2o0ye68xt7.b[1][1]++, obj.__esModule) ? (cov_2o0ye68xt7.b[0][0]++, obj) : (cov_2o0ye68xt7.b[0][1]++, { default: obj });
}const debug = (cov_2o0ye68xt7.s[10]++, (0, _debug2.default)("debugger:ast:selectors"));const ast = (cov_2o0ye68xt7.s[11]++, (0, _reselectTree.createSelectorTree)({ views: { sources: (0, _reselectTree.createLeaf)([_selectors2.default.info.sources], sources => {
      cov_2o0ye68xt7.f[1]++;cov_2o0ye68xt7.s[12]++;return sources;
    }) }, current: { tree: (0, _reselectTree.createLeaf)([_selectors2.default.current.source], ({ ast }) => {
      cov_2o0ye68xt7.f[2]++;cov_2o0ye68xt7.s[13]++;return ast;
    }), index: (0, _reselectTree.createLeaf)([_selectors2.default.current.source], ({ id }) => {
      cov_2o0ye68xt7.f[3]++;cov_2o0ye68xt7.s[14]++;return id;
    }), pointer: (0, _reselectTree.createLeaf)(["./tree", _selectors2.default.current.sourceRange], (ast, range) => {
      cov_2o0ye68xt7.f[4]++;cov_2o0ye68xt7.s[15]++;return (0, _map.findRange)(ast, range.start, range.length);
    }), node: (0, _reselectTree.createLeaf)(["./tree", "./pointer"], (ast, pointer) => {
      cov_2o0ye68xt7.f[5]++;cov_2o0ye68xt7.s[16]++;return pointer ? (cov_2o0ye68xt7.b[2][0]++, _jsonPointer2.default.get(ast, pointer)) : (cov_2o0ye68xt7.b[2][1]++, _jsonPointer2.default.get(ast, ""));
    }) } }));cov_2o0ye68xt7.s[17]++;exports.default = ast;

/***/ }),
/* 19 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var cov_j8ygwqmex = function () {
  var path = "/Users/gnidan/src/work/truffle/packages/truffle-debugger/lib/trace/selectors/index.js",
      hash = "4dc959dec63dc1a2cad54a4aca9234add1bf2795",
      Function = function () {}.constructor,
      global = new Function('return this')(),
      gcv = "__coverage__",
      coverageData = { path: "/Users/gnidan/src/work/truffle/packages/truffle-debugger/lib/trace/selectors/index.js", statementMap: { "0": { start: { line: 3, column: 0 }, end: { line: 5, column: 3 } }, "1": { start: { line: 7, column: 20 }, end: { line: 7, column: 44 } }, "2": { start: { line: 9, column: 12 }, end: { line: 44, column: 2 } }, "3": { start: { line: 15, column: 18 }, end: { line: 15, column: 40 } }, "4": { start: { line: 22, column: 18 }, end: { line: 22, column: 40 } }, "5": { start: { line: 29, column: 90 }, end: { line: 29, column: 110 } }, "6": { start: { line: 36, column: 80 }, end: { line: 36, column: 92 } }, "7": { start: { line: 43, column: 80 }, end: { line: 43, column: 128 } }, "8": { start: { line: 46, column: 0 }, end: { line: 46, column: 24 } } }, fnMap: { "0": { name: "(anonymous_0)", decl: { start: { line: 15, column: 9 }, end: { line: 15, column: 10 } }, loc: { start: { line: 15, column: 18 }, end: { line: 15, column: 40 } }, line: 15 }, "1": { name: "(anonymous_1)", decl: { start: { line: 22, column: 9 }, end: { line: 22, column: 10 } }, loc: { start: { line: 22, column: 18 }, end: { line: 22, column: 40 } }, line: 22 }, "2": { name: "(anonymous_2)", decl: { start: { line: 29, column: 72 }, end: { line: 29, column: 73 } }, loc: { start: { line: 29, column: 90 }, end: { line: 29, column: 110 } }, line: 29 }, "3": { name: "(anonymous_3)", decl: { start: { line: 36, column: 62 }, end: { line: 36, column: 63 } }, loc: { start: { line: 36, column: 80 }, end: { line: 36, column: 92 } }, line: 36 }, "4": { name: "(anonymous_4)", decl: { start: { line: 43, column: 62 }, end: { line: 43, column: 63 } }, loc: { start: { line: 43, column: 80 }, end: { line: 43, column: 128 } }, line: 43 } }, branchMap: { "0": { loc: { start: { line: 43, column: 80 }, end: { line: 43, column: 128 } }, type: "cond-expr", locations: [{ start: { line: 43, column: 107 }, end: { line: 43, column: 123 } }, { start: { line: 43, column: 126 }, end: { line: 43, column: 128 } }], line: 43 } }, s: { "0": 0, "1": 0, "2": 0, "3": 0, "4": 0, "5": 0, "6": 0, "7": 0, "8": 0 }, f: { "0": 0, "1": 0, "2": 0, "3": 0, "4": 0 }, b: { "0": [0, 0] }, inputSourceMap: { version: 3, sources: ["lib/trace/selectors/index.js"], names: ["trace", "index", "state", "proc", "steps", "info", "stepsRemaining", "length", "step", "next"], mappings: ";;;;;;AAAA;;AAEA,IAAIA,QAAQ,sCAAmB;AAC7B;;;;;AAKAC,SAAQC,KAAD,IAAWA,MAAMF,KAAN,CAAYG,IAAZ,CAAiBF,KANN;;AAQ7B;;;;;AAKAG,SAAQF,KAAD,IAAWA,MAAMF,KAAN,CAAYK,IAAZ,CAAiBD,KAbN;;AAe7B;;;;;AAKAE,kBAAgB,8BACd,CAAC,SAAD,EAAY,SAAZ,CADc,EACU,CAACF,KAAD,EAAQH,KAAR,KAAkBG,MAAMG,MAAN,GAAeN,KAD3C,CApBa;;AAwB7B;;;;;AAKAO,QAAM,8BACJ,CAAC,SAAD,EAAY,SAAZ,CADI,EACoB,CAACJ,KAAD,EAAQH,KAAR,KAAkBG,MAAMH,KAAN,CADtC,CA7BuB;;AAiC7B;;;;;AAKAQ,QAAM,8BACJ,CAAC,SAAD,EAAY,SAAZ,CADI,EACoB,CAACL,KAAD,EAAQH,KAAR,KACtBA,QAAQG,MAAMG,MAAN,GAAe,CAAvB,GAA2BH,MAAMH,QAAQ,CAAd,CAA3B,GAA8C,EAF5C;AAtCuB,CAAnB,CAAZ;;kBA4CeD,K", file: "index.js", sourceRoot: "/Users/gnidan/src/work/truffle/packages/truffle-debugger", sourcesContent: ["import { createSelectorTree, createLeaf } from \"reselect-tree\";\n\nlet trace = createSelectorTree({\n  /**\n   * trace.index\n   *\n   * current step index\n   */\n  index: (state) => state.trace.proc.index,\n\n  /**\n   * trace.steps\n   *\n   * all trace steps\n   */\n  steps: (state) => state.trace.info.steps,\n\n  /**\n   * trace.stepsRemaining\n   *\n   * number of steps remaining in trace\n   */\n  stepsRemaining: createLeaf(\n    [\"./steps\", \"./index\"], (steps, index) => steps.length - index\n  ),\n\n  /**\n   * trace.step\n   *\n   * current trace step\n   */\n  step: createLeaf(\n    [\"./steps\", \"./index\"], (steps, index) => steps[index]\n  ),\n\n  /**\n   * trace.next\n   *\n   * next trace step or {}\n   */\n  next: createLeaf(\n    [\"./steps\", \"./index\"], (steps, index) =>\n      index < steps.length - 1 ? steps[index + 1] : {}\n  )\n});\n\nexport default trace;\n"] }, _coverageSchema: "332fd63041d2c1bcb487cc26dd0d5f7d97098a6c" },
      coverage = global[gcv] || (global[gcv] = {});if (coverage[path] && coverage[path].hash === hash) {
    return coverage[path];
  }coverageData.hash = hash;return coverage[path] = coverageData;
}();cov_j8ygwqmex.s[0]++;Object.defineProperty(exports, "__esModule", { value: true });var _reselectTree = (cov_j8ygwqmex.s[1]++, __webpack_require__(9));let trace = (cov_j8ygwqmex.s[2]++, (0, _reselectTree.createSelectorTree)({ index: state => {
    cov_j8ygwqmex.f[0]++;cov_j8ygwqmex.s[3]++;return state.trace.proc.index;
  }, steps: state => {
    cov_j8ygwqmex.f[1]++;cov_j8ygwqmex.s[4]++;return state.trace.info.steps;
  }, stepsRemaining: (0, _reselectTree.createLeaf)(["./steps", "./index"], (steps, index) => {
    cov_j8ygwqmex.f[2]++;cov_j8ygwqmex.s[5]++;return steps.length - index;
  }), step: (0, _reselectTree.createLeaf)(["./steps", "./index"], (steps, index) => {
    cov_j8ygwqmex.f[3]++;cov_j8ygwqmex.s[6]++;return steps[index];
  }), next: (0, _reselectTree.createLeaf)(["./steps", "./index"], (steps, index) => {
    cov_j8ygwqmex.f[4]++;cov_j8ygwqmex.s[7]++;return index < steps.length - 1 ? (cov_j8ygwqmex.b[0][0]++, steps[index + 1]) : (cov_j8ygwqmex.b[0][1]++, {});
  }) }));cov_j8ygwqmex.s[8]++;exports.default = trace;

/***/ }),
/* 20 */
/***/ (function(module, exports) {

module.exports = require("bignumber.js");

/***/ }),
/* 21 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var cov_abd8euik2 = function () {
  var path = "/Users/gnidan/src/work/truffle/packages/truffle-debugger/lib/trace/actions/index.js",
      hash = "78f939ac24db53f7ebc2de279f26ef5d42d141c3",
      Function = function () {}.constructor,
      global = new Function('return this')(),
      gcv = "__coverage__",
      coverageData = { path: "/Users/gnidan/src/work/truffle/packages/truffle-debugger/lib/trace/actions/index.js", statementMap: { "0": { start: { line: 3, column: 0 }, end: { line: 5, column: 3 } }, "1": { start: { line: 6, column: 0 }, end: { line: 6, column: 30 } }, "2": { start: { line: 7, column: 0 }, end: { line: 7, column: 44 } }, "3": { start: { line: 8, column: 0 }, end: { line: 8, column: 20 } }, "4": { start: { line: 9, column: 0 }, end: { line: 9, column: 20 } }, "5": { start: { line: 10, column: 0 }, end: { line: 10, column: 20 } }, "6": { start: { line: 11, column: 0 }, end: { line: 11, column: 28 } }, "7": { start: { line: 12, column: 19 }, end: { line: 12, column: 52 } }, "8": { start: { line: 14, column: 2 }, end: { line: 17, column: 4 } }, "9": { start: { line: 20, column: 26 }, end: { line: 20, column: 73 } }, "10": { start: { line: 22, column: 2 }, end: { line: 25, column: 4 } }, "11": { start: { line: 28, column: 13 }, end: { line: 28, column: 34 } }, "12": { start: { line: 30, column: 2 }, end: { line: 30, column: 24 } }, "13": { start: { line: 33, column: 13 }, end: { line: 33, column: 34 } }, "14": { start: { line: 35, column: 2 }, end: { line: 35, column: 24 } }, "15": { start: { line: 38, column: 13 }, end: { line: 38, column: 34 } }, "16": { start: { line: 40, column: 2 }, end: { line: 40, column: 24 } }, "17": { start: { line: 43, column: 21 }, end: { line: 43, column: 49 } }, "18": { start: { line: 45, column: 2 }, end: { line: 45, column: 32 } } }, fnMap: { "0": { name: "saveSteps", decl: { start: { line: 13, column: 9 }, end: { line: 13, column: 18 } }, loc: { start: { line: 13, column: 26 }, end: { line: 18, column: 1 } }, line: 13 }, "1": { name: "receiveAddresses", decl: { start: { line: 21, column: 9 }, end: { line: 21, column: 25 } }, loc: { start: { line: 21, column: 37 }, end: { line: 26, column: 1 } }, line: 21 }, "2": { name: "next", decl: { start: { line: 29, column: 9 }, end: { line: 29, column: 13 } }, loc: { start: { line: 29, column: 16 }, end: { line: 31, column: 1 } }, line: 29 }, "3": { name: "tick", decl: { start: { line: 34, column: 9 }, end: { line: 34, column: 13 } }, loc: { start: { line: 34, column: 16 }, end: { line: 36, column: 1 } }, line: 34 }, "4": { name: "tock", decl: { start: { line: 39, column: 9 }, end: { line: 39, column: 13 } }, loc: { start: { line: 39, column: 16 }, end: { line: 41, column: 1 } }, line: 39 }, "5": { name: "endTrace", decl: { start: { line: 44, column: 9 }, end: { line: 44, column: 17 } }, loc: { start: { line: 44, column: 20 }, end: { line: 46, column: 1 } }, line: 44 } }, branchMap: {}, s: { "0": 0, "1": 0, "2": 0, "3": 0, "4": 0, "5": 0, "6": 0, "7": 0, "8": 0, "9": 0, "10": 0, "11": 0, "12": 0, "13": 0, "14": 0, "15": 0, "16": 0, "17": 0, "18": 0 }, f: { "0": 0, "1": 0, "2": 0, "3": 0, "4": 0, "5": 0 }, b: {}, inputSourceMap: { version: 3, sources: ["lib/trace/actions/index.js"], names: ["saveSteps", "receiveAddresses", "next", "tick", "tock", "endTrace", "SAVE_STEPS", "steps", "type", "RECEIVE_ADDRESSES", "addresses", "NEXT", "TICK", "TOCK", "END_OF_TRACE"], mappings: ";;;;;QACgBA,S,GAAAA,S;QAQAC,gB,GAAAA,gB;QAQAC,I,GAAAA,I;QAKAC,I,GAAAA,I;QAKAC,I,GAAAA,I;QAKAC,Q,GAAAA,Q;AAhCT,MAAMC,kCAAa,YAAnB;AACA,SAASN,SAAT,CAAmBO,KAAnB,EAA0B;AAC/B,SAAO;AACLC,UAAMF,UADD;AAELC;AAFK,GAAP;AAID;;AAEM,MAAME,gDAAoB,mBAA1B;AACA,SAASR,gBAAT,CAA0BS,SAA1B,EAAqC;AAC1C,SAAO;AACLF,UAAMC,iBADD;AAELC;AAFK,GAAP;AAID;;AAEM,MAAMC,sBAAO,MAAb;AACA,SAAST,IAAT,GAAgB;AACrB,SAAO,EAACM,MAAMG,IAAP,EAAP;AACD;;AAEM,MAAMC,sBAAO,MAAb;AACA,SAAST,IAAT,GAAgB;AACrB,SAAO,EAACK,MAAMI,IAAP,EAAP;AACD;;AAEM,MAAMC,sBAAO,MAAb;AACA,SAAST,IAAT,GAAgB;AACrB,SAAO,EAACI,MAAMK,IAAP,EAAP;AACD;;AAEM,MAAMC,sCAAe,KAArB;AACA,SAAST,QAAT,GAAoB;AACzB,SAAO,EAACG,MAAMM,YAAP,EAAP;AACD", file: "index.js", sourceRoot: "/Users/gnidan/src/work/truffle/packages/truffle-debugger", sourcesContent: ["export const SAVE_STEPS = \"SAVE_STEPS\";\nexport function saveSteps(steps) {\n  return {\n    type: SAVE_STEPS,\n    steps\n  };\n}\n\nexport const RECEIVE_ADDRESSES = \"RECEIVE_ADDRESSES\";\nexport function receiveAddresses(addresses) {\n  return {\n    type: RECEIVE_ADDRESSES,\n    addresses\n  };\n}\n\nexport const NEXT = \"NEXT\";\nexport function next() {\n  return {type: NEXT};\n}\n\nexport const TICK = \"TICK\";\nexport function tick() {\n  return {type: TICK};\n}\n\nexport const TOCK = \"TOCK\";\nexport function tock() {\n  return {type: TOCK};\n}\n\nexport const END_OF_TRACE = \"EOT\";\nexport function endTrace() {\n  return {type: END_OF_TRACE};\n}\n"] }, _coverageSchema: "332fd63041d2c1bcb487cc26dd0d5f7d97098a6c" },
      coverage = global[gcv] || (global[gcv] = {});if (coverage[path] && coverage[path].hash === hash) {
    return coverage[path];
  }coverageData.hash = hash;return coverage[path] = coverageData;
}();cov_abd8euik2.s[0]++;Object.defineProperty(exports, "__esModule", { value: true });cov_abd8euik2.s[1]++;exports.saveSteps = saveSteps;cov_abd8euik2.s[2]++;exports.receiveAddresses = receiveAddresses;cov_abd8euik2.s[3]++;exports.next = next;cov_abd8euik2.s[4]++;exports.tick = tick;cov_abd8euik2.s[5]++;exports.tock = tock;cov_abd8euik2.s[6]++;exports.endTrace = endTrace;const SAVE_STEPS = (cov_abd8euik2.s[7]++, exports.SAVE_STEPS = "SAVE_STEPS");function saveSteps(steps) {
  cov_abd8euik2.f[0]++;cov_abd8euik2.s[8]++;return { type: SAVE_STEPS, steps };
}const RECEIVE_ADDRESSES = (cov_abd8euik2.s[9]++, exports.RECEIVE_ADDRESSES = "RECEIVE_ADDRESSES");function receiveAddresses(addresses) {
  cov_abd8euik2.f[1]++;cov_abd8euik2.s[10]++;return { type: RECEIVE_ADDRESSES, addresses };
}const NEXT = (cov_abd8euik2.s[11]++, exports.NEXT = "NEXT");function next() {
  cov_abd8euik2.f[2]++;cov_abd8euik2.s[12]++;return { type: NEXT };
}const TICK = (cov_abd8euik2.s[13]++, exports.TICK = "TICK");function tick() {
  cov_abd8euik2.f[3]++;cov_abd8euik2.s[14]++;return { type: TICK };
}const TOCK = (cov_abd8euik2.s[15]++, exports.TOCK = "TOCK");function tock() {
  cov_abd8euik2.f[4]++;cov_abd8euik2.s[16]++;return { type: TOCK };
}const END_OF_TRACE = (cov_abd8euik2.s[17]++, exports.END_OF_TRACE = "EOT");function endTrace() {
  cov_abd8euik2.f[5]++;cov_abd8euik2.s[18]++;return { type: END_OF_TRACE };
}

/***/ }),
/* 22 */
/***/ (function(module, exports) {

module.exports = require("babel-runtime/core-js/set");

/***/ }),
/* 23 */
/***/ (function(module, exports) {

module.exports = require("babel-runtime/core-js/promise");

/***/ }),
/* 24 */
/***/ (function(module, exports) {

module.exports = require("json-pointer");

/***/ }),
/* 25 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var cov_2rf8afohf4 = function () {
  var path = "/Users/gnidan/src/work/truffle/packages/truffle-debugger/lib/controller/actions/index.js",
      hash = "cad6c8d8e78bbd3dd434bd82d37303c66d662471",
      Function = function () {}.constructor,
      global = new Function('return this')(),
      gcv = "__coverage__",
      coverageData = { path: "/Users/gnidan/src/work/truffle/packages/truffle-debugger/lib/controller/actions/index.js", statementMap: { "0": { start: { line: 3, column: 0 }, end: { line: 5, column: 3 } }, "1": { start: { line: 6, column: 0 }, end: { line: 6, column: 30 } }, "2": { start: { line: 7, column: 0 }, end: { line: 7, column: 26 } }, "3": { start: { line: 8, column: 0 }, end: { line: 8, column: 28 } }, "4": { start: { line: 9, column: 0 }, end: { line: 9, column: 28 } }, "5": { start: { line: 10, column: 0 }, end: { line: 10, column: 28 } }, "6": { start: { line: 11, column: 0 }, end: { line: 11, column: 26 } }, "7": { start: { line: 12, column: 0 }, end: { line: 12, column: 30 } }, "8": { start: { line: 13, column: 0 }, end: { line: 13, column: 58 } }, "9": { start: { line: 14, column: 0 }, end: { line: 14, column: 38 } }, "10": { start: { line: 15, column: 0 }, end: { line: 15, column: 44 } }, "11": { start: { line: 16, column: 19 }, end: { line: 16, column: 52 } }, "12": { start: { line: 18, column: 2 }, end: { line: 21, column: 4 } }, "13": { start: { line: 24, column: 16 }, end: { line: 24, column: 43 } }, "14": { start: { line: 26, column: 2 }, end: { line: 26, column: 27 } }, "15": { start: { line: 29, column: 18 }, end: { line: 29, column: 49 } }, "16": { start: { line: 31, column: 2 }, end: { line: 31, column: 29 } }, "17": { start: { line: 34, column: 18 }, end: { line: 34, column: 49 } }, "18": { start: { line: 36, column: 2 }, end: { line: 36, column: 29 } }, "19": { start: { line: 39, column: 18 }, end: { line: 39, column: 49 } }, "20": { start: { line: 41, column: 2 }, end: { line: 41, column: 29 } }, "21": { start: { line: 44, column: 17 }, end: { line: 44, column: 46 } }, "22": { start: { line: 46, column: 2 }, end: { line: 46, column: 28 } }, "23": { start: { line: 49, column: 18 }, end: { line: 49, column: 49 } }, "24": { start: { line: 51, column: 2 }, end: { line: 51, column: 29 } }, "25": { start: { line: 54, column: 17 }, end: { line: 54, column: 46 } }, "26": { start: { line: 57, column: 2 }, end: { line: 57, column: 28 } }, "27": { start: { line: 60, column: 23 }, end: { line: 60, column: 64 } }, "28": { start: { line: 62, column: 2 }, end: { line: 63, column: 17 } }, "29": { start: { line: 66, column: 26 }, end: { line: 66, column: 73 } }, "30": { start: { line: 68, column: 2 }, end: { line: 69, column: 17 } } }, fnMap: { "0": { name: "beginStep", decl: { start: { line: 17, column: 9 }, end: { line: 17, column: 18 } }, loc: { start: { line: 17, column: 25 }, end: { line: 22, column: 1 } }, line: 17 }, "1": { name: "advance", decl: { start: { line: 25, column: 9 }, end: { line: 25, column: 16 } }, loc: { start: { line: 25, column: 19 }, end: { line: 27, column: 1 } }, line: 25 }, "2": { name: "stepNext", decl: { start: { line: 30, column: 9 }, end: { line: 30, column: 17 } }, loc: { start: { line: 30, column: 20 }, end: { line: 32, column: 1 } }, line: 30 }, "3": { name: "stepOver", decl: { start: { line: 35, column: 9 }, end: { line: 35, column: 17 } }, loc: { start: { line: 35, column: 20 }, end: { line: 37, column: 1 } }, line: 35 }, "4": { name: "stepInto", decl: { start: { line: 40, column: 9 }, end: { line: 40, column: 17 } }, loc: { start: { line: 40, column: 20 }, end: { line: 42, column: 1 } }, line: 40 }, "5": { name: "stepOut", decl: { start: { line: 45, column: 9 }, end: { line: 45, column: 16 } }, loc: { start: { line: 45, column: 19 }, end: { line: 47, column: 1 } }, line: 45 }, "6": { name: "interrupt", decl: { start: { line: 50, column: 9 }, end: { line: 50, column: 18 } }, loc: { start: { line: 50, column: 21 }, end: { line: 52, column: 1 } }, line: 50 }, "7": { name: "continueUntilBreakpoint", decl: { start: { line: 55, column: 9 }, end: { line: 55, column: 32 } }, loc: { start: { line: 55, column: 35 }, end: { line: 58, column: 1 } }, line: 55 }, "8": { name: "addBreakpoint", decl: { start: { line: 61, column: 9 }, end: { line: 61, column: 22 } }, loc: { start: { line: 61, column: 35 }, end: { line: 64, column: 1 } }, line: 61 }, "9": { name: "removeBreakpoint", decl: { start: { line: 67, column: 9 }, end: { line: 67, column: 25 } }, loc: { start: { line: 67, column: 38 }, end: { line: 70, column: 1 } }, line: 67 } }, branchMap: {}, s: { "0": 0, "1": 0, "2": 0, "3": 0, "4": 0, "5": 0, "6": 0, "7": 0, "8": 0, "9": 0, "10": 0, "11": 0, "12": 0, "13": 0, "14": 0, "15": 0, "16": 0, "17": 0, "18": 0, "19": 0, "20": 0, "21": 0, "22": 0, "23": 0, "24": 0, "25": 0, "26": 0, "27": 0, "28": 0, "29": 0, "30": 0 }, f: { "0": 0, "1": 0, "2": 0, "3": 0, "4": 0, "5": 0, "6": 0, "7": 0, "8": 0, "9": 0 }, b: {}, inputSourceMap: { version: 3, sources: ["lib/controller/actions/index.js"], names: ["beginStep", "advance", "stepNext", "stepOver", "stepInto", "stepOut", "interrupt", "continueUntilBreakpoint", "addBreakpoint", "removeBreakpoint", "BEGIN_STEP", "type", "stepType", "ADVANCE", "STEP_NEXT", "STEP_OVER", "STEP_INTO", "STEP_OUT", "INTERRUPT", "CONTINUE", "ADD_BREAKPOINT", "breakpoint", "REMOVE_BREAKPOINT"], mappings: ";;;;;QACgBA,S,GAAAA,S;QAQAC,O,GAAAA,O;QAKAC,Q,GAAAA,Q;QAKAC,Q,GAAAA,Q;QAKAC,Q,GAAAA,Q;QAKAC,O,GAAAA,O;QAKAC,S,GAAAA,S;QAKAC,uB,GAAAA,uB;QAKAC,a,GAAAA,a;QAMAC,gB,GAAAA,gB;AAlDT,MAAMC,kCAAa,YAAnB;AACA,SAASV,SAAT,CAAmBW,IAAnB,EAAyB;AAC9B,SAAO;AACLA,UAAMD,UADD;AAELE,cAAUD;AAFL,GAAP;AAID;;AAEM,MAAME,4BAAU,SAAhB;AACA,SAASZ,OAAT,GAAmB;AACxB,SAAO,EAACU,MAAME,OAAP,EAAP;AACD;;AAEM,MAAMC,gCAAY,WAAlB;AACA,SAASZ,QAAT,GAAoB;AACzB,SAAO,EAACS,MAAMG,SAAP,EAAP;AACD;;AAEM,MAAMC,gCAAY,WAAlB;AACA,SAASZ,QAAT,GAAoB;AACzB,SAAO,EAACQ,MAAMI,SAAP,EAAP;AACD;;AAEM,MAAMC,gCAAY,WAAlB;AACA,SAASZ,QAAT,GAAoB;AACzB,SAAO,EAACO,MAAMK,SAAP,EAAP;AACD;;AAEM,MAAMC,8BAAW,UAAjB;AACA,SAASZ,OAAT,GAAmB;AACxB,SAAO,EAACM,MAAMM,QAAP,EAAP;AACD;;AAEM,MAAMC,gCAAY,WAAlB;AACA,SAASZ,SAAT,GAAqB;AAC1B,SAAO,EAACK,MAAMO,SAAP,EAAP;AACD;;AAEM,MAAMC,8BAAW,UAAjB;AACA,SAASZ,uBAAT,GAAmC;AAAE;AAC1C,SAAO,EAAEI,MAAMQ,QAAR,EAAP;AACD;;AAEM,MAAMC,0CAAiB,gBAAvB;AACA,SAASZ,aAAT,CAAuBa,UAAvB,EAAmC;AACxC,SAAO,EAAEV,MAAMS,cAAR;AACLC,cADK,EAAP;AAED;;AAEM,MAAMC,gDAAoB,mBAA1B;AACA,SAASb,gBAAT,CAA0BY,UAA1B,EAAsC;AAC3C,SAAO,EAAEV,MAAMW,iBAAR;AACLD,cADK,EAAP;AAED", file: "index.js", sourceRoot: "/Users/gnidan/src/work/truffle/packages/truffle-debugger", sourcesContent: ["export const BEGIN_STEP = \"BEGIN_STEP\";\nexport function beginStep(type) {\n  return {\n    type: BEGIN_STEP,\n    stepType: type\n  };\n}\n\nexport const ADVANCE = \"ADVANCE\";\nexport function advance() {\n  return {type: ADVANCE};\n}\n\nexport const STEP_NEXT = \"STEP_NEXT\";\nexport function stepNext() {\n  return {type: STEP_NEXT};\n}\n\nexport const STEP_OVER = \"STEP_OVER\";\nexport function stepOver() {\n  return {type: STEP_OVER};\n}\n\nexport const STEP_INTO = \"STEP_INTO\";\nexport function stepInto() {\n  return {type: STEP_INTO};\n}\n\nexport const STEP_OUT = \"STEP_OUT\";\nexport function stepOut() {\n  return {type: STEP_OUT};\n}\n\nexport const INTERRUPT = \"INTERRUPT\";\nexport function interrupt() {\n  return {type: INTERRUPT};\n}\n\nexport const CONTINUE = \"CONTINUE\";\nexport function continueUntilBreakpoint() { //\"continue\" is not a legal name\n  return { type: CONTINUE};\n}\n\nexport const ADD_BREAKPOINT = \"ADD_BREAKPOINT\";\nexport function addBreakpoint(breakpoint) {\n  return { type: ADD_BREAKPOINT,\n    breakpoint};\n}\n\nexport const REMOVE_BREAKPOINT = \"REMOVE_BREAKPOINT\";\nexport function removeBreakpoint(breakpoint) {\n  return { type: REMOVE_BREAKPOINT,\n    breakpoint};\n}\n"] }, _coverageSchema: "332fd63041d2c1bcb487cc26dd0d5f7d97098a6c" },
      coverage = global[gcv] || (global[gcv] = {});if (coverage[path] && coverage[path].hash === hash) {
    return coverage[path];
  }coverageData.hash = hash;return coverage[path] = coverageData;
}();cov_2rf8afohf4.s[0]++;Object.defineProperty(exports, "__esModule", { value: true });cov_2rf8afohf4.s[1]++;exports.beginStep = beginStep;cov_2rf8afohf4.s[2]++;exports.advance = advance;cov_2rf8afohf4.s[3]++;exports.stepNext = stepNext;cov_2rf8afohf4.s[4]++;exports.stepOver = stepOver;cov_2rf8afohf4.s[5]++;exports.stepInto = stepInto;cov_2rf8afohf4.s[6]++;exports.stepOut = stepOut;cov_2rf8afohf4.s[7]++;exports.interrupt = interrupt;cov_2rf8afohf4.s[8]++;exports.continueUntilBreakpoint = continueUntilBreakpoint;cov_2rf8afohf4.s[9]++;exports.addBreakpoint = addBreakpoint;cov_2rf8afohf4.s[10]++;exports.removeBreakpoint = removeBreakpoint;const BEGIN_STEP = (cov_2rf8afohf4.s[11]++, exports.BEGIN_STEP = "BEGIN_STEP");function beginStep(type) {
  cov_2rf8afohf4.f[0]++;cov_2rf8afohf4.s[12]++;return { type: BEGIN_STEP, stepType: type };
}const ADVANCE = (cov_2rf8afohf4.s[13]++, exports.ADVANCE = "ADVANCE");function advance() {
  cov_2rf8afohf4.f[1]++;cov_2rf8afohf4.s[14]++;return { type: ADVANCE };
}const STEP_NEXT = (cov_2rf8afohf4.s[15]++, exports.STEP_NEXT = "STEP_NEXT");function stepNext() {
  cov_2rf8afohf4.f[2]++;cov_2rf8afohf4.s[16]++;return { type: STEP_NEXT };
}const STEP_OVER = (cov_2rf8afohf4.s[17]++, exports.STEP_OVER = "STEP_OVER");function stepOver() {
  cov_2rf8afohf4.f[3]++;cov_2rf8afohf4.s[18]++;return { type: STEP_OVER };
}const STEP_INTO = (cov_2rf8afohf4.s[19]++, exports.STEP_INTO = "STEP_INTO");function stepInto() {
  cov_2rf8afohf4.f[4]++;cov_2rf8afohf4.s[20]++;return { type: STEP_INTO };
}const STEP_OUT = (cov_2rf8afohf4.s[21]++, exports.STEP_OUT = "STEP_OUT");function stepOut() {
  cov_2rf8afohf4.f[5]++;cov_2rf8afohf4.s[22]++;return { type: STEP_OUT };
}const INTERRUPT = (cov_2rf8afohf4.s[23]++, exports.INTERRUPT = "INTERRUPT");function interrupt() {
  cov_2rf8afohf4.f[6]++;cov_2rf8afohf4.s[24]++;return { type: INTERRUPT };
}const CONTINUE = (cov_2rf8afohf4.s[25]++, exports.CONTINUE = "CONTINUE");function continueUntilBreakpoint() {
  cov_2rf8afohf4.f[7]++;cov_2rf8afohf4.s[26]++;return { type: CONTINUE };
}const ADD_BREAKPOINT = (cov_2rf8afohf4.s[27]++, exports.ADD_BREAKPOINT = "ADD_BREAKPOINT");function addBreakpoint(breakpoint) {
  cov_2rf8afohf4.f[8]++;cov_2rf8afohf4.s[28]++;return { type: ADD_BREAKPOINT, breakpoint };
}const REMOVE_BREAKPOINT = (cov_2rf8afohf4.s[29]++, exports.REMOVE_BREAKPOINT = "REMOVE_BREAKPOINT");function removeBreakpoint(breakpoint) {
  cov_2rf8afohf4.f[9]++;cov_2rf8afohf4.s[30]++;return { type: REMOVE_BREAKPOINT, breakpoint };
}

/***/ }),
/* 26 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var cov_2piveyac3q = function () {
  var path = "/Users/gnidan/src/work/truffle/packages/truffle-debugger/lib/session/actions/index.js",
      hash = "b0c0bf12aa89cc7d3b1dc10f217aa7d2ce279892",
      Function = function () {}.constructor,
      global = new Function('return this')(),
      gcv = "__coverage__",
      coverageData = { path: "/Users/gnidan/src/work/truffle/packages/truffle-debugger/lib/session/actions/index.js", statementMap: { "0": { start: { line: 3, column: 0 }, end: { line: 5, column: 3 } }, "1": { start: { line: 6, column: 0 }, end: { line: 6, column: 22 } }, "2": { start: { line: 7, column: 0 }, end: { line: 7, column: 22 } }, "3": { start: { line: 8, column: 0 }, end: { line: 8, column: 22 } }, "4": { start: { line: 9, column: 0 }, end: { line: 9, column: 24 } }, "5": { start: { line: 10, column: 0 }, end: { line: 10, column: 42 } }, "6": { start: { line: 11, column: 14 }, end: { line: 11, column: 45 } }, "7": { start: { line: 13, column: 2 }, end: { line: 16, column: 4 } }, "8": { start: { line: 19, column: 14 }, end: { line: 19, column: 45 } }, "9": { start: { line: 21, column: 2 }, end: { line: 23, column: 4 } }, "10": { start: { line: 26, column: 14 }, end: { line: 26, column: 45 } }, "11": { start: { line: 28, column: 2 }, end: { line: 31, column: 4 } }, "12": { start: { line: 34, column: 15 }, end: { line: 34, column: 48 } }, "13": { start: { line: 36, column: 2 }, end: { line: 38, column: 4 } }, "14": { start: { line: 41, column: 25 }, end: { line: 41, column: 70 } }, "15": { start: { line: 43, column: 2 }, end: { line: 46, column: 4 } } }, fnMap: { "0": { name: "start", decl: { start: { line: 12, column: 9 }, end: { line: 12, column: 14 } }, loc: { start: { line: 12, column: 33 }, end: { line: 17, column: 1 } }, line: 12 }, "1": { name: "ready", decl: { start: { line: 20, column: 9 }, end: { line: 20, column: 14 } }, loc: { start: { line: 20, column: 17 }, end: { line: 24, column: 1 } }, line: 20 }, "2": { name: "error", decl: { start: { line: 27, column: 9 }, end: { line: 27, column: 14 } }, loc: { start: { line: 27, column: 22 }, end: { line: 32, column: 1 } }, line: 27 }, "3": { name: "finish", decl: { start: { line: 35, column: 9 }, end: { line: 35, column: 15 } }, loc: { start: { line: 35, column: 18 }, end: { line: 39, column: 1 } }, line: 35 }, "4": { name: "recordContracts", decl: { start: { line: 42, column: 9 }, end: { line: 42, column: 24 } }, loc: { start: { line: 42, column: 44 }, end: { line: 47, column: 1 } }, line: 42 } }, branchMap: {}, s: { "0": 0, "1": 0, "2": 0, "3": 0, "4": 0, "5": 0, "6": 0, "7": 0, "8": 0, "9": 0, "10": 0, "11": 0, "12": 0, "13": 0, "14": 0, "15": 0 }, f: { "0": 0, "1": 0, "2": 0, "3": 0, "4": 0 }, b: {}, inputSourceMap: { version: 3, sources: ["lib/session/actions/index.js"], names: ["start", "ready", "error", "finish", "recordContracts", "START", "txHash", "provider", "type", "READY", "ERROR", "FINISH", "RECORD_CONTRACTS", "contexts", "sources"], mappings: ";;;;;QACgBA,K,GAAAA,K;QAQAC,K,GAAAA,K;QAOAC,K,GAAAA,K;QAQAC,M,GAAAA,M;QAOAC,e,GAAAA,e;AA/BT,MAAMC,wBAAQ,eAAd;AACA,SAASL,KAAT,CAAeM,MAAf,EAAuBC,QAAvB,EAAiC;AACtC,SAAO;AACLC,UAAMH,KADD;AAELC,UAFK,EAEGC;AAFH,GAAP;AAID;;AAEM,MAAME,wBAAQ,eAAd;AACA,SAASR,KAAT,GAAiB;AACtB,SAAO;AACLO,UAAMC;AADD,GAAP;AAGD;;AAEM,MAAMC,wBAAQ,eAAd;AACA,SAASR,KAAT,CAAeA,KAAf,EAAsB;AAC3B,SAAO;AACLM,UAAME,KADD;AAELR;AAFK,GAAP;AAID;;AAEM,MAAMS,0BAAS,gBAAf;AACA,SAASR,MAAT,GAAkB;AACvB,SAAO;AACLK,UAAMG;AADD,GAAP;AAGD;;AAEM,MAAMC,8CAAmB,kBAAzB;AACA,SAASR,eAAT,CAAyBS,QAAzB,EAAmCC,OAAnC,EAA4C;AACjD,SAAO;AACLN,UAAMI,gBADD;AAELC,YAFK,EAEKC;AAFL,GAAP;AAID", file: "index.js", sourceRoot: "/Users/gnidan/src/work/truffle/packages/truffle-debugger", sourcesContent: ["export const START = \"SESSION_START\";\nexport function start(txHash, provider) {\n  return {\n    type: START,\n    txHash, provider\n  };\n}\n\nexport const READY = \"SESSION_READY\";\nexport function ready() {\n  return {\n    type: READY,\n  };\n}\n\nexport const ERROR = \"SESSION_ERROR\";\nexport function error(error) {\n  return {\n    type: ERROR,\n    error\n  };\n}\n\nexport const FINISH = \"SESSION_FINISH\";\nexport function finish() {\n  return {\n    type: FINISH,\n  };\n}\n\nexport const RECORD_CONTRACTS = \"RECORD_CONTRACTS\";\nexport function recordContracts(contexts, sources) {\n  return {\n    type: RECORD_CONTRACTS,\n    contexts, sources\n  }\n}\n"] }, _coverageSchema: "332fd63041d2c1bcb487cc26dd0d5f7d97098a6c" },
      coverage = global[gcv] || (global[gcv] = {});if (coverage[path] && coverage[path].hash === hash) {
    return coverage[path];
  }coverageData.hash = hash;return coverage[path] = coverageData;
}();cov_2piveyac3q.s[0]++;Object.defineProperty(exports, "__esModule", { value: true });cov_2piveyac3q.s[1]++;exports.start = start;cov_2piveyac3q.s[2]++;exports.ready = ready;cov_2piveyac3q.s[3]++;exports.error = error;cov_2piveyac3q.s[4]++;exports.finish = finish;cov_2piveyac3q.s[5]++;exports.recordContracts = recordContracts;const START = (cov_2piveyac3q.s[6]++, exports.START = "SESSION_START");function start(txHash, provider) {
  cov_2piveyac3q.f[0]++;cov_2piveyac3q.s[7]++;return { type: START, txHash, provider };
}const READY = (cov_2piveyac3q.s[8]++, exports.READY = "SESSION_READY");function ready() {
  cov_2piveyac3q.f[1]++;cov_2piveyac3q.s[9]++;return { type: READY };
}const ERROR = (cov_2piveyac3q.s[10]++, exports.ERROR = "SESSION_ERROR");function error(error) {
  cov_2piveyac3q.f[2]++;cov_2piveyac3q.s[11]++;return { type: ERROR, error };
}const FINISH = (cov_2piveyac3q.s[12]++, exports.FINISH = "SESSION_FINISH");function finish() {
  cov_2piveyac3q.f[3]++;cov_2piveyac3q.s[13]++;return { type: FINISH };
}const RECORD_CONTRACTS = (cov_2piveyac3q.s[14]++, exports.RECORD_CONTRACTS = "RECORD_CONTRACTS");function recordContracts(contexts, sources) {
  cov_2piveyac3q.f[4]++;cov_2piveyac3q.s[15]++;return { type: RECORD_CONTRACTS, contexts, sources };
}

/***/ }),
/* 27 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var cov_rg5m4u2ng = function () {
  var path = "/Users/gnidan/src/work/truffle/packages/truffle-debugger/lib/data/selectors/index.js",
      hash = "40c1fb70342f6852f582d9c1a4de92d421df5cc9",
      Function = function () {}.constructor,
      global = new Function('return this')(),
      gcv = "__coverage__",
      coverageData = { path: "/Users/gnidan/src/work/truffle/packages/truffle-debugger/lib/data/selectors/index.js", statementMap: { "0": { start: { line: 3, column: 0 }, end: { line: 5, column: 3 } }, "1": { start: { line: 7, column: 12 }, end: { line: 7, column: 56 } }, "2": { start: { line: 9, column: 13 }, end: { line: 9, column: 42 } }, "3": { start: { line: 11, column: 16 }, end: { line: 11, column: 56 } }, "4": { start: { line: 13, column: 16 }, end: { line: 13, column: 49 } }, "5": { start: { line: 15, column: 15 }, end: { line: 15, column: 62 } }, "6": { start: { line: 17, column: 16 }, end: { line: 17, column: 48 } }, "7": { start: { line: 19, column: 14 }, end: { line: 19, column: 60 } }, "8": { start: { line: 21, column: 15 }, end: { line: 21, column: 46 } }, "9": { start: { line: 23, column: 13 }, end: { line: 23, column: 29 } }, "10": { start: { line: 25, column: 14 }, end: { line: 25, column: 44 } }, "11": { start: { line: 27, column: 20 }, end: { line: 27, column: 44 } }, "12": { start: { line: 29, column: 19 }, end: { line: 29, column: 42 } }, "13": { start: { line: 31, column: 20 }, end: { line: 31, column: 56 } }, "14": { start: { line: 33, column: 17 }, end: { line: 33, column: 45 } }, "15": { start: { line: 35, column: 18 }, end: { line: 35, column: 52 } }, "16": { start: { line: 37, column: 18 }, end: { line: 37, column: 46 } }, "17": { start: { line: 39, column: 18 }, end: { line: 39, column: 53 } }, "18": { start: { line: 41, column: 18 }, end: { line: 41, column: 51 } }, "19": { start: { line: 43, column: 18 }, end: { line: 43, column: 53 } }, "20": { start: { line: 45, column: 14 }, end: { line: 45, column: 34 } }, "21": { start: { line: 47, column: 15 }, end: { line: 47, column: 46 } }, "22": { start: { line: 49, column: 13 }, end: { line: 49, column: 39 } }, "23": { start: { line: 51, column: 18 }, end: { line: 51, column: 49 } }, "24": { start: { line: 53, column: 17 }, end: { line: 53, column: 40 } }, "25": { start: { line: 55, column: 40 }, end: { line: 55, column: 267 } }, "26": { start: { line: 55, column: 69 }, end: { line: 55, column: 80 } }, "27": { start: { line: 55, column: 103 }, end: { line: 55, column: 105 } }, "28": { start: { line: 55, column: 107 }, end: { line: 55, column: 228 } }, "29": { start: { line: 55, column: 126 }, end: { line: 55, column: 226 } }, "30": { start: { line: 55, column: 149 }, end: { line: 55, column: 224 } }, "31": { start: { line: 55, column: 201 }, end: { line: 55, column: 224 } }, "32": { start: { line: 55, column: 229 }, end: { line: 55, column: 250 } }, "33": { start: { line: 55, column: 251 }, end: { line: 55, column: 265 } }, "34": { start: { line: 57, column: 39 }, end: { line: 57, column: 93 } }, "35": { start: { line: 59, column: 14 }, end: { line: 59, column: 61 } }, "36": { start: { line: 62, column: 2 }, end: { line: 79, column: 4 } }, "37": { start: { line: 66, column: 59 }, end: { line: 66, column: 159 } }, "38": { start: { line: 66, column: 85 }, end: { line: 66, column: 158 } }, "39": { start: { line: 71, column: 61 }, end: { line: 71, column: 148 } }, "40": { start: { line: 71, column: 128 }, end: { line: 71, column: 146 } }, "41": { start: { line: 76, column: 65 }, end: { line: 78, column: 8 } }, "42": { start: { line: 76, column: 152 }, end: { line: 78, column: 5 } }, "43": { start: { line: 77, column: 81 }, end: { line: 77, column: 99 } }, "44": { start: { line: 82, column: 13 }, end: { line: 248, column: 2 } }, "45": { start: { line: 83, column: 18 }, end: { line: 83, column: 28 } }, "46": { start: { line: 89, column: 78 }, end: { line: 89, column: 82 } }, "47": { start: { line: 91, column: 126 }, end: { line: 91, column: 131 } }, "48": { start: { line: 101, column: 118 }, end: { line: 106, column: 10 } }, "49": { start: { line: 101, column: 200 }, end: { line: 106, column: 7 } }, "50": { start: { line: 114, column: 138 }, end: { line: 116, column: 6 } }, "51": { start: { line: 114, column: 159 }, end: { line: 116, column: 6 } }, "52": { start: { line: 127, column: 63 }, end: { line: 127, column: 85 } }, "53": { start: { line: 138, column: 68 }, end: { line: 138, column: 95 } }, "54": { start: { line: 145, column: 68 }, end: { line: 145, column: 95 } }, "55": { start: { line: 161, column: 84 }, end: { line: 161, column: 91 } }, "56": { start: { line: 180, column: 18 }, end: { line: 180, column: 26 } }, "57": { start: { line: 181, column: 24 }, end: { line: 181, column: 26 } }, "58": { start: { line: 183, column: 8 }, end: { line: 187, column: 30 } }, "59": { start: { line: 184, column: 10 }, end: { line: 184, column: 164 } }, "60": { start: { line: 184, column: 100 }, end: { line: 184, column: 130 } }, "61": { start: { line: 184, column: 142 }, end: { line: 184, column: 160 } }, "62": { start: { line: 186, column: 10 }, end: { line: 186, column: 37 } }, "63": { start: { line: 189, column: 8 }, end: { line: 189, column: 25 } }, "64": { start: { line: 197, column: 108 }, end: { line: 201, column: 9 } }, "65": { start: { line: 198, column: 29 }, end: { line: 198, column: 39 } }, "66": { start: { line: 200, column: 8 }, end: { line: 200, column: 44 } }, "67": { start: { line: 209, column: 53 }, end: { line: 228, column: 9 } }, "68": { start: { line: 210, column: 23 }, end: { line: 214, column: 44 } }, "69": { start: { line: 212, column: 31 }, end: { line: 212, column: 78 } }, "70": { start: { line: 219, column: 23 }, end: { line: 219, column: 68 } }, "71": { start: { line: 220, column: 22 }, end: { line: 220, column: 83 } }, "72": { start: { line: 221, column: 8 }, end: { line: 223, column: 9 } }, "73": { start: { line: 222, column: 10 }, end: { line: 222, column: 27 } }, "74": { start: { line: 225, column: 8 }, end: { line: 227, column: 10 } }, "75": { start: { line: 230, column: 123 }, end: { line: 232, column: 10 } }, "76": { start: { line: 230, column: 209 }, end: { line: 232, column: 7 } }, "77": { start: { line: 250, column: 0 }, end: { line: 250, column: 23 } } }, fnMap: { "0": { name: "_interopRequireWildcard", decl: { start: { line: 55, column: 9 }, end: { line: 55, column: 32 } }, loc: { start: { line: 55, column: 38 }, end: { line: 55, column: 269 } }, line: 55 }, "1": { name: "_interopRequireDefault", decl: { start: { line: 57, column: 9 }, end: { line: 57, column: 31 } }, loc: { start: { line: 57, column: 37 }, end: { line: 57, column: 95 } }, line: 57 }, "2": { name: "createStateSelectors", decl: { start: { line: 61, column: 9 }, end: { line: 61, column: 29 } }, loc: { start: { line: 61, column: 58 }, end: { line: 80, column: 1 } }, line: 61 }, "3": { name: "(anonymous_3)", decl: { start: { line: 66, column: 50 }, end: { line: 66, column: 51 } }, loc: { start: { line: 66, column: 59 }, end: { line: 66, column: 159 } }, line: 66 }, "4": { name: "(anonymous_4)", decl: { start: { line: 66, column: 77 }, end: { line: 66, column: 78 } }, loc: { start: { line: 66, column: 85 }, end: { line: 66, column: 158 } }, line: 66 }, "5": { name: "(anonymous_5)", decl: { start: { line: 71, column: 52 }, end: { line: 71, column: 53 } }, loc: { start: { line: 71, column: 61 }, end: { line: 71, column: 148 } }, line: 71 }, "6": { name: "(anonymous_6)", decl: { start: { line: 71, column: 120 }, end: { line: 71, column: 121 } }, loc: { start: { line: 71, column: 128 }, end: { line: 71, column: 146 } }, line: 71 }, "7": { name: "(anonymous_7)", decl: { start: { line: 76, column: 54 }, end: { line: 76, column: 55 } }, loc: { start: { line: 76, column: 65 }, end: { line: 78, column: 8 } }, line: 76 }, "8": { name: "(anonymous_8)", decl: { start: { line: 76, column: 130 }, end: { line: 76, column: 131 } }, loc: { start: { line: 76, column: 152 }, end: { line: 78, column: 5 } }, line: 76 }, "9": { name: "(anonymous_9)", decl: { start: { line: 77, column: 73 }, end: { line: 77, column: 74 } }, loc: { start: { line: 77, column: 81 }, end: { line: 77, column: 99 } }, line: 77 }, "10": { name: "(anonymous_10)", decl: { start: { line: 83, column: 9 }, end: { line: 83, column: 10 } }, loc: { start: { line: 83, column: 18 }, end: { line: 83, column: 28 } }, line: 83 }, "11": { name: "(anonymous_11)", decl: { start: { line: 89, column: 70 }, end: { line: 89, column: 71 } }, loc: { start: { line: 89, column: 78 }, end: { line: 89, column: 82 } }, line: 89 }, "12": { name: "(anonymous_12)", decl: { start: { line: 91, column: 117 }, end: { line: 91, column: 118 } }, loc: { start: { line: 91, column: 126 }, end: { line: 91, column: 131 } }, line: 91 }, "13": { name: "(anonymous_13)", decl: { start: { line: 101, column: 97 }, end: { line: 101, column: 98 } }, loc: { start: { line: 101, column: 118 }, end: { line: 106, column: 10 } }, line: 101 }, "14": { name: "(anonymous_14)", decl: { start: { line: 101, column: 182 }, end: { line: 101, column: 183 } }, loc: { start: { line: 101, column: 200 }, end: { line: 106, column: 7 } }, line: 101 }, "15": { name: "(anonymous_15)", decl: { start: { line: 114, column: 106 }, end: { line: 114, column: 107 } }, loc: { start: { line: 114, column: 138 }, end: { line: 116, column: 6 } }, line: 114 }, "16": { name: "(anonymous_16)", decl: { start: { line: 114, column: 138 }, end: { line: 114, column: 139 } }, loc: { start: { line: 114, column: 159 }, end: { line: 116, column: 6 } }, line: 114 }, "17": { name: "(anonymous_17)", decl: { start: { line: 127, column: 54 }, end: { line: 127, column: 55 } }, loc: { start: { line: 127, column: 63 }, end: { line: 127, column: 85 } }, line: 127 }, "18": { name: "(anonymous_18)", decl: { start: { line: 138, column: 59 }, end: { line: 138, column: 60 } }, loc: { start: { line: 138, column: 68 }, end: { line: 138, column: 95 } }, line: 138 }, "19": { name: "(anonymous_19)", decl: { start: { line: 145, column: 59 }, end: { line: 145, column: 60 } }, loc: { start: { line: 145, column: 68 }, end: { line: 145, column: 95 } }, line: 145 }, "20": { name: "(anonymous_20)", decl: { start: { line: 161, column: 76 }, end: { line: 161, column: 77 } }, loc: { start: { line: 161, column: 84 }, end: { line: 161, column: 91 } }, line: 161 }, "21": { name: "(anonymous_21)", decl: { start: { line: 179, column: 84 }, end: { line: 179, column: 85 } }, loc: { start: { line: 179, column: 103 }, end: { line: 190, column: 7 } }, line: 179 }, "22": { name: "(anonymous_22)", decl: { start: { line: 184, column: 95 }, end: { line: 184, column: 96 } }, loc: { start: { line: 184, column: 100 }, end: { line: 184, column: 130 } }, line: 184 }, "23": { name: "(anonymous_23)", decl: { start: { line: 184, column: 136 }, end: { line: 184, column: 137 } }, loc: { start: { line: 184, column: 142 }, end: { line: 184, column: 160 } }, line: 184 }, "24": { name: "(anonymous_24)", decl: { start: { line: 197, column: 83 }, end: { line: 197, column: 84 } }, loc: { start: { line: 197, column: 108 }, end: { line: 201, column: 9 } }, line: 197 }, "25": { name: "(anonymous_25)", decl: { start: { line: 197, column: 177 }, end: { line: 197, column: 178 } }, loc: { start: { line: 197, column: 199 }, end: { line: 201, column: 7 } }, line: 197 }, "26": { name: "(anonymous_26)", decl: { start: { line: 209, column: 9 }, end: { line: 209, column: 10 } }, loc: { start: { line: 209, column: 53 }, end: { line: 228, column: 9 } }, line: 209 }, "27": { name: "(anonymous_27)", decl: { start: { line: 209, column: 122 }, end: { line: 209, column: 123 } }, loc: { start: { line: 209, column: 144 }, end: { line: 228, column: 7 } }, line: 209 }, "28": { name: "(anonymous_28)", decl: { start: { line: 212, column: 16 }, end: { line: 212, column: 17 } }, loc: { start: { line: 212, column: 31 }, end: { line: 212, column: 78 } }, line: 212 }, "29": { name: "(anonymous_29)", decl: { start: { line: 230, column: 92 }, end: { line: 230, column: 93 } }, loc: { start: { line: 230, column: 123 }, end: { line: 232, column: 10 } }, line: 230 }, "30": { name: "(anonymous_30)", decl: { start: { line: 230, column: 185 }, end: { line: 230, column: 186 } }, loc: { start: { line: 230, column: 209 }, end: { line: 232, column: 7 } }, line: 230 } }, branchMap: { "0": { loc: { start: { line: 55, column: 40 }, end: { line: 55, column: 267 } }, type: "if", locations: [{ start: { line: 55, column: 40 }, end: { line: 55, column: 267 } }, { start: { line: 55, column: 40 }, end: { line: 55, column: 267 } }], line: 55 }, "1": { loc: { start: { line: 55, column: 44 }, end: { line: 55, column: 65 } }, type: "binary-expr", locations: [{ start: { line: 55, column: 44 }, end: { line: 55, column: 47 } }, { start: { line: 55, column: 51 }, end: { line: 55, column: 65 } }], line: 55 }, "2": { loc: { start: { line: 55, column: 107 }, end: { line: 55, column: 228 } }, type: "if", locations: [{ start: { line: 55, column: 107 }, end: { line: 55, column: 228 } }, { start: { line: 55, column: 107 }, end: { line: 55, column: 228 } }], line: 55 }, "3": { loc: { start: { line: 55, column: 149 }, end: { line: 55, column: 224 } }, type: "if", locations: [{ start: { line: 55, column: 149 }, end: { line: 55, column: 224 } }, { start: { line: 55, column: 149 }, end: { line: 55, column: 224 } }], line: 55 }, "4": { loc: { start: { line: 57, column: 46 }, end: { line: 57, column: 92 } }, type: "cond-expr", locations: [{ start: { line: 57, column: 70 }, end: { line: 57, column: 73 } }, { start: { line: 57, column: 76 }, end: { line: 57, column: 92 } }], line: 57 }, "5": { loc: { start: { line: 57, column: 46 }, end: { line: 57, column: 67 } }, type: "binary-expr", locations: [{ start: { line: 57, column: 46 }, end: { line: 57, column: 49 } }, { start: { line: 57, column: 53 }, end: { line: 57, column: 67 } }], line: 57 }, "6": { loc: { start: { line: 66, column: 60 }, end: { line: 66, column: 71 } }, type: "binary-expr", locations: [{ start: { line: 66, column: 60 }, end: { line: 66, column: 65 } }, { start: { line: 66, column: 69 }, end: { line: 66, column: 71 } }], line: 66 }, "7": { loc: { start: { line: 71, column: 77 }, end: { line: 71, column: 114 } }, type: "binary-expr", locations: [{ start: { line: 71, column: 77 }, end: { line: 71, column: 108 } }, { start: { line: 71, column: 112 }, end: { line: 71, column: 114 } }], line: 71 }, "8": { loc: { start: { line: 77, column: 40 }, end: { line: 77, column: 67 } }, type: "binary-expr", locations: [{ start: { line: 77, column: 40 }, end: { line: 77, column: 61 } }, { start: { line: 77, column: 65 }, end: { line: 77, column: 67 } }], line: 77 }, "9": { loc: { start: { line: 184, column: 59 }, end: { line: 184, column: 86 } }, type: "binary-expr", locations: [{ start: { line: 184, column: 59 }, end: { line: 184, column: 80 } }, { start: { line: 184, column: 84 }, end: { line: 184, column: 86 } }], line: 184 }, "10": { loc: { start: { line: 220, column: 22 }, end: { line: 220, column: 83 } }, type: "binary-expr", locations: [{ start: { line: 220, column: 22 }, end: { line: 220, column: 77 } }, { start: { line: 220, column: 81 }, end: { line: 220, column: 83 } }], line: 220 }, "11": { loc: { start: { line: 221, column: 8 }, end: { line: 223, column: 9 } }, type: "if", locations: [{ start: { line: 221, column: 8 }, end: { line: 223, column: 9 } }, { start: { line: 221, column: 8 }, end: { line: 223, column: 9 } }], line: 221 } }, s: { "0": 0, "1": 0, "2": 0, "3": 0, "4": 0, "5": 0, "6": 0, "7": 0, "8": 0, "9": 0, "10": 0, "11": 0, "12": 0, "13": 0, "14": 0, "15": 0, "16": 0, "17": 0, "18": 0, "19": 0, "20": 0, "21": 0, "22": 0, "23": 0, "24": 0, "25": 0, "26": 0, "27": 0, "28": 0, "29": 0, "30": 0, "31": 0, "32": 0, "33": 0, "34": 0, "35": 0, "36": 0, "37": 0, "38": 0, "39": 0, "40": 0, "41": 0, "42": 0, "43": 0, "44": 0, "45": 0, "46": 0, "47": 0, "48": 0, "49": 0, "50": 0, "51": 0, "52": 0, "53": 0, "54": 0, "55": 0, "56": 0, "57": 0, "58": 0, "59": 0, "60": 0, "61": 0, "62": 0, "63": 0, "64": 0, "65": 0, "66": 0, "67": 0, "68": 0, "69": 0, "70": 0, "71": 0, "72": 0, "73": 0, "74": 0, "75": 0, "76": 0, "77": 0 }, f: { "0": 0, "1": 0, "2": 0, "3": 0, "4": 0, "5": 0, "6": 0, "7": 0, "8": 0, "9": 0, "10": 0, "11": 0, "12": 0, "13": 0, "14": 0, "15": 0, "16": 0, "17": 0, "18": 0, "19": 0, "20": 0, "21": 0, "22": 0, "23": 0, "24": 0, "25": 0, "26": 0, "27": 0, "28": 0, "29": 0, "30": 0 }, b: { "0": [0, 0], "1": [0, 0], "2": [0, 0], "3": [0, 0], "4": [0, 0], "5": [0, 0], "6": [0, 0], "7": [0, 0], "8": [0, 0], "9": [0, 0], "10": [0, 0], "11": [0, 0] }, inputSourceMap: { version: 3, sources: ["lib/data/selectors/index.js"], names: ["decodeUtils", "debug", "createStateSelectors", "stack", "memory", "storage", "words", "map", "word", "toBytes", "toBigNumber", "WORD_SIZE", "Uint8Array", "join", "match", "byte", "parseInt", "mapping", "address", "data", "state", "views", "ast", "current", "tree", "atLastInstructionForSourceRange", "solidity", "isSourceRangeFinal", "final", "scopes", "inlined", "info", "sources", "id", "entry", "definition", "jsonpointer", "get", "sourceId", "pointer", "decoder", "mappingKeys", "ref", "byId", "proc", "assignments", "scope", "node", "evm", "identifiers", "_", "cur", "variables", "filter", "v", "name", "undefined", "parentId", "definitions", "identifier", "refs", "functionDepth", "currentDepth", "matchIds", "augmentedId", "idFromAugmented", "depthFromAugmented", "maxMatch", "Math", "min", "max", "augmentWithDepth", "decoded", "decode", "native", "cleanBigNumbers", "next"], mappings: ";;;;;;;;;;;;;;;;;;;;;;AAAA;;;;AAGA;;AACA;;;;AAEA;;;;AACA;;;;AACA;;;;AAEA;;;;AACA;;IAAYA,W;;AAEZ;;;;;;AAZA,MAAMC,QAAQ,qBAAY,yBAAZ,CAAd;;AAcA,SAASC,oBAAT,CAA8B,EAAEC,KAAF,EAASC,MAAT,EAAiBC,OAAjB,EAA9B,EAA0D;AACxD,SAAO;AACL;;;AAGAF,WAAO,8BACL,CAACA,KAAD,CADK,EAGJG,KAAD,IAAW,CAACA,SAAS,EAAV,EAAcC,GAAd,CACRC,IAAD,IAAUR,YAAYS,OAAZ,CAAoBT,YAAYU,WAAZ,CAAwBF,IAAxB,EAA8BR,YAAYW,SAA1C,CAApB,CADD,CAHN,CAJF;;AAYL;;;AAGAP,YAAQ,8BACN,CAACA,MAAD,CADM,EAGLE,KAAD,IAAW,IAAIM,UAAJ,CACT,CAACN,MAAMO,IAAN,CAAW,EAAX,EAAeC,KAAf,CAAqB,SAArB,KAAmC,EAApC,EACGP,GADH,CACSQ,IAAD,IAAUC,SAASD,IAAT,EAAe,EAAf,CADlB,CADS,CAHL,CAfH;;AAwBL;;;AAGAV,aAAS,8BACP,CAACA,OAAD,CADO,EAGNY,OAAD,IAAa,sBACX,EADW,EACP,GAAG,uBAAeA,OAAf,EAAwBV,GAAxB,CAA6B,CAAC,CAAEW,OAAF,EAAWV,IAAX,CAAD,MACjC;AACC,OAAE,KAAIU,OAAQ,EAAd,GAAkB,IAAIN,UAAJ,CAChB,CAACJ,KAAKM,KAAL,CAAW,SAAX,KAAyB,EAA1B,EACGP,GADH,CACSQ,IAAD,IAAUC,SAASD,IAAT,EAAe,EAAf,CADlB,CADgB;AADnB,KADiC,CAA7B,CADI,CAHN;AA3BJ,GAAP;AA0CD;;AAED,MAAMI,OAAO,sCAAmB;AAC9BC,SAAQA,KAAD,IAAWA,MAAMD,IADM;;AAG9B;;;AAGAE,SAAO;AACLC,SAAK,8BACH,CAACA,oBAAIC,OAAL,CADG,EACaC,IAAD,IAAUA,IADtB,CADA;;AAKLC,qCAAiC,8BAC/B,CAACC,oBAASH,OAAT,CAAiBI,kBAAlB,CAD+B,EACSC,KAAD,IAAWA,KADnB,CAL5B;;AASL;;;AAGAC,YAAQ;;AAEN;;;AAGAC,eAAS,8BACP,CAAC,cAAD,EAAiBJ,oBAASK,IAAT,CAAcC,OAA/B,CADO,EAGP,CAACH,MAAD,EAASG,OAAT,KAAqB,sBAAc,EAAd,EACnB,GAAG,uBAAeH,MAAf,EAAuBtB,GAAvB,CACD,CAAC,CAAC0B,EAAD,EAAKC,KAAL,CAAD,MAAkB;AAChB,SAACD,EAAD,8BACKC,KADL;;AAGEC,sBAAYC,sBAAYC,GAAZ,CACVL,QAAQE,MAAMI,QAAd,EAAwBhB,GADd,EACmBY,MAAMK,OADzB;AAHd;AADgB,OAAlB,CADC,CADgB,CAHd;AALH,KAZH;;AAoCL;;;;;AAKAC,aAAS,8BACP,CAAC,uBAAD,EAA0B,aAA1B,EAAyC,mBAAzC,CADO,EAGP,CAACX,MAAD,EAAST,KAAT,EAAgBqB,WAAhB,KACE,CAACN,UAAD,EAAaO,GAAb,KAAqB,sBAAOP,UAAP,EAAmBO,GAAnB,EAAwB;AAC3Cb,YAD2C,EACnCT,KADmC,EAC5BqB;AAD4B,KAAxB,CAJhB;AAzCJ,GANuB;;AAyD9B;;;AAGAV,QAAM;;AAEJ;;;AAGAF,YAAQ,8BAAW,CAAC,QAAD,CAAX,EAAwBT,KAAD,IAAWA,MAAMW,IAAN,CAAWF,MAAX,CAAkBc,IAApD;AALJ,GA5DwB;;AAoE9B;;;AAGAC,QAAM;;AAEJ;;;AAGAC,iBAAa,8BACX,CAAC,QAAD,CADW,EACEzB,KAAD,IAAWA,MAAMwB,IAAN,CAAWC,WAAX,CAAuBF,IADnC,CALT;;AASJ;;;;;AAKAF,iBAAa,8BACX,CAAC,QAAD,CADW,EACErB,KAAD,IAAWA,MAAMwB,IAAN,CAAWH,WAAX,CAAuBE,IADnC;AAdT,GAvEwB;;AA0F9B;;;AAGApB,WAAS;AACP;;;;AAIAuB,WAAO;;AAEL;;;AAGAb,UAAI,8BACF,CAACX,oBAAIC,OAAJ,CAAYwB,IAAb,CADE,EACmBA,IAAD,IAAUA,KAAKd,EADjC;AALC,KALA;;AAeP;;;AAGAb,WAAOlB,qBAAqB8C,oBAAIzB,OAAJ,CAAYH,KAAjC,CAlBA;;AAoBP;;;AAGA6B,iBAAa;;AAEX;;;;;AAKAC,SAAG,8BACD,CACE,uBADF,EAEE,gBAFF,CADC,EAMD,CAACrB,MAAD,EAASiB,KAAT,KAAmB;AACjB,YAAIK,MAAML,MAAMb,EAAhB;AACA,YAAImB,YAAY,EAAhB;;AAEA,WAAG;AACDA,sBAAY,sBACVA,SADU,EAEV,GAAG,CAACvB,OAAOsB,GAAP,EAAYC,SAAZ,IAAyB,EAA1B,EACAC,MADA,CACSC,CAAD,IAAOF,UAAUE,EAAEC,IAAZ,KAAqBC,SADpC,EAEAjD,GAFA,CAEM+C,CAAD,KAAQ,EAAE,CAACA,EAAEC,IAAH,GAAUD,EAAErB,EAAd,EAAR,CAFL,CAFO,CAAZ;;AAOAkB,gBAAMtB,OAAOsB,GAAP,EAAYM,QAAlB;AACD,SATD,QASSN,OAAO,IAThB;;AAWA,eAAOC,SAAP;AACD,OAtBA,CAPQ;;AAgCX;;;;;AAKAM,mBAAa,8BACX,CACE,uBADF,EAEE,KAFF,CADW,EAMX,CAAC7B,MAAD,EAASoB,WAAT,KAAyB,sBAAc,EAAd,EACvB,GAAG,uBAAeA,WAAf,EACA1C,GADA,CACK,CAAC,CAACoD,UAAD,EAAa1B,EAAb,CAAD,KAAsB;AAC1B,YAAI,EAAEE,UAAF,KAAiBN,OAAOI,EAAP,CAArB;;AAEA,eAAO,EAAE,CAAC0B,UAAD,GAAcxB,UAAhB,EAAP;AACD,OALA,CADoB,CANd,CArCF;;AAqDX;;;;;AAKAyB,YAAM,8BACJ,CACE,mBADF,EAEE,KAFF,EAGElC,oBAASH,OAAT,CAAiBsC,aAHnB,CAGiC;AAHjC,OADI,EAOJ,CAAChB,WAAD,EAAcI,WAAd,EAA2Ba,YAA3B,KAA4C,sBAAc,EAAd,EAC1C,GAAG,uBAAeb,WAAf,EACA1C,GADA,CACK,CAAC,CAACoD,UAAD,EAAa1B,EAAb,CAAD,KAAsB;AAC1B,YAAI8B,WAAW,oBAAYlB,WAAZ;AACb;AADa,SAEZQ,MAFY,CAEJW,WAAD,IACNhE,YAAYiE,eAAZ,CAA4BD,WAA5B,MAA6C/B,EAHlC;AAIb;AAJa,SAKZ1B,GALY,CAKRP,YAAYkE,kBALJ,CAAf;;AAOA;AACA;AACA;AACA,YAAIC,WAASC,KAAKC,GAAL,CAASP,YAAT,EAAuBM,KAAKE,GAAL,CAAS,GAAGP,QAAZ,CAAvB,CAAb;AACA,YAAI,EAAErB,GAAF,KACFG,YAAY7C,YAAYuE,gBAAZ,CAA6BtC,EAA7B,EAAiCkC,QAAjC,CAAZ,KAA2D,EAD7D;AAEA,YAAI,CAACzB,GAAL,EAAU;AAAE,iBAAOc,SAAP;AAAkB;;AAE9B,eAAO;AACL,WAACG,UAAD,GAAcjB;AADT,SAAP;AAGD,OApBA,CADuC,CAPxC,CA1DK;;AA0FX8B,eAAS,8BACP,CACE,gBADF,EAEE,eAFF,EAGE,QAHF,CADO,EAOP,CAACC,MAAD,EAASf,WAAT,EAAsBE,IAAtB,KAA+B,sBAAc,EAAd,EAC7B,GAAG,uBAAeA,IAAf,EACArD,GADA,CACK,CAAC,CAACoD,UAAD,EAAajB,GAAb,CAAD,MAAwB;AAC5B,SAACiB,UAAD,GAAcc,OAAOf,YAAYC,UAAZ,CAAP,EAAgCjB,GAAhC;AADc,OAAxB,CADL,CAD0B,CAPxB,CA1FE;;AAyGXgC,cAAQ,8BAAW,CAAC,WAAD,CAAX,EAA0B1E,YAAY2E,eAAtC;AAzGG;AAvBN,GA7FqB;;AAiO9B;;;AAGAC,QAAM;;AAEJ;;;AAGAxD,WAAOlB,qBAAqB8C,oBAAI4B,IAAJ,CAASxD,KAA9B;AALH;AApOwB,CAAnB,CAAb;;kBA6OeD,I", file: "index.js", sourceRoot: "/Users/gnidan/src/work/truffle/packages/truffle-debugger", sourcesContent: ["import debugModule from \"debug\";\nconst debug = debugModule(\"debugger:data:selectors\");\n\nimport { createSelectorTree, createLeaf } from \"reselect-tree\";\nimport jsonpointer from \"json-pointer\";\n\nimport ast from \"lib/ast/selectors\";\nimport evm from \"lib/evm/selectors\";\nimport solidity from \"lib/solidity/selectors\";\n\nimport decode from \"../decode\";\nimport * as decodeUtils from \"../decode/utils\";\n\nimport { BigNumber } from \"bignumber.js\";\n\nfunction createStateSelectors({ stack, memory, storage }) {\n  return {\n    /**\n     * .stack\n     */\n    stack: createLeaf(\n      [stack],\n\n      (words) => (words || []).map(\n        (word) => decodeUtils.toBytes(decodeUtils.toBigNumber(word, decodeUtils.WORD_SIZE))\n      )\n    ),\n\n    /**\n     * .memory\n     */\n    memory: createLeaf(\n      [memory],\n\n      (words) => new Uint8Array(\n        (words.join(\"\").match(/.{1,2}/g) || [])\n          .map( (byte) => parseInt(byte, 16) )\n      )\n    ),\n\n    /**\n     * .storage\n     */\n    storage: createLeaf(\n      [storage],\n\n      (mapping) => Object.assign(\n        {}, ...Object.entries(mapping).map( ([ address, word ]) =>\n          ({\n            [`0x${address}`]: new Uint8Array(\n              (word.match(/.{1,2}/g) || [])\n                .map( (byte) => parseInt(byte, 16) )\n            )\n          })\n        )\n      )\n    )\n  };\n}\n\nconst data = createSelectorTree({\n  state: (state) => state.data,\n\n  /**\n   * data.views\n   */\n  views: {\n    ast: createLeaf(\n      [ast.current], (tree) => tree\n    ),\n\n    atLastInstructionForSourceRange: createLeaf(\n      [solidity.current.isSourceRangeFinal], (final) => final\n    ),\n\n    /**\n     * data.views.scopes\n     */\n    scopes: {\n\n      /**\n       * data.views.scopes.inlined\n       */\n      inlined: createLeaf(\n        [\"/info/scopes\", solidity.info.sources],\n\n        (scopes, sources) => Object.assign({},\n          ...Object.entries(scopes).map(\n            ([id, entry]) => ({\n              [id]: {\n                ...entry,\n\n                definition: jsonpointer.get(\n                  sources[entry.sourceId].ast, entry.pointer\n                )\n              }\n            })\n          )\n        )\n      )\n    },\n\n    /**\n     * data.views.decoder\n     *\n     * selector returns (ast node definition, data reference) => value\n     */\n    decoder: createLeaf(\n      [\"/views/scopes/inlined\", \"/next/state\", \"/proc/mappingKeys\"],\n\n      (scopes, state, mappingKeys) =>\n        (definition, ref) => decode(definition, ref, {\n          scopes, state, mappingKeys\n        })\n    )\n  },\n\n  /**\n   * data.info\n   */\n  info: {\n\n    /**\n     * data.info.scopes\n     */\n    scopes: createLeaf([\"/state\"], (state) => state.info.scopes.byId)\n  },\n\n  /**\n   * data.proc\n   */\n  proc: {\n\n    /**\n     * data.proc.assignments\n     */\n    assignments: createLeaf(\n      [\"/state\"], (state) => state.proc.assignments.byId\n    ),\n\n    /**\n     * data.proc.mappingKeys\n     *\n     * known keys for each mapping (identified by node ID)\n     */\n    mappingKeys: createLeaf(\n      [\"/state\"], (state) => state.proc.mappingKeys.byId\n    )\n  },\n\n  /**\n   * data.current\n   */\n  current: {\n    /**\n     *\n     * data.current.scope\n     */\n    scope: {\n\n      /**\n       * data.current.scope.id\n       */\n      id: createLeaf(\n        [ast.current.node], (node) => node.id\n      )\n    },\n\n    /**\n     * data.current.state\n     */\n    state: createStateSelectors(evm.current.state),\n\n    /**\n     * data.current.identifiers (namespace)\n     */\n    identifiers: {\n\n      /**\n       * data.current.identifiers (selector)\n       *\n       * returns identifers and corresponding definition node ID\n       */\n      _: createLeaf(\n        [\n          \"/views/scopes/inlined\",\n          \"/current/scope\",\n        ],\n\n        (scopes, scope) => {\n          let cur = scope.id;\n          let variables = {};\n\n          do {\n            variables = Object.assign(\n              variables,\n              ...(scopes[cur].variables || [])\n                .filter( (v) => variables[v.name] == undefined )\n                .map( (v) => ({ [v.name]: v.id }) )\n            );\n\n            cur = scopes[cur].parentId;\n          } while (cur != null);\n\n          return variables;\n        }\n      ),\n\n      /**\n       * data.current.identifiers.definitions\n       *\n       * current variable definitions\n       */\n      definitions: createLeaf(\n        [\n          \"/views/scopes/inlined\",\n          \"./_\"\n        ],\n\n        (scopes, identifiers) => Object.assign({},\n          ...Object.entries(identifiers)\n            .map( ([identifier, id]) => {\n              let { definition } = scopes[id];\n\n              return { [identifier]: definition };\n            })\n        )\n      ),\n\n      /**\n       * data.current.identifiers.refs\n       *\n       * current variables' value refs\n       */\n      refs: createLeaf(\n        [\n          \"/proc/assignments\",\n          \"./_\",\n          solidity.current.functionDepth //for pruning things too deep on stack\n        ],\n\n        (assignments, identifiers, currentDepth) => Object.assign({},\n          ...Object.entries(identifiers)\n            .map( ([identifier, id]) => {\n              let matchIds = Object.keys(assignments)\n                //first restrict to the appropriate variable\n                .filter((augmentedId) =>\n                  decodeUtils.idFromAugmented(augmentedId) === id)\n                //then get just the stack frame corresponding to that variable\n                .map(decodeUtils.depthFromAugmented);\n\n              //want innermost but not beyond current depth\n              //note: if no matches, will return -Infinity\n              //however the return value in this case is irrelevant\n              let maxMatch=Math.min(currentDepth, Math.max(...matchIds));\n              let { ref } = (\n                assignments[decodeUtils.augmentWithDepth(id, maxMatch)] || {});\n              if (!ref) { return undefined };\n\n              return {\n                [identifier]: ref\n              };\n            })\n        )\n      ),\n\n      decoded: createLeaf(\n        [\n          \"/views/decoder\",\n          \"./definitions\",\n          \"./refs\",\n        ],\n\n        (decode, definitions, refs) => Object.assign({},\n          ...Object.entries(refs)\n            .map( ([identifier, ref]) => ({\n              [identifier]: decode(definitions[identifier], ref)\n            }) )\n        )\n      ),\n\n      native: createLeaf(['./decoded'], decodeUtils.cleanBigNumbers)\n    }\n  },\n\n  /**\n   * data.next\n   */\n  next: {\n\n    /**\n     * data.next.state\n     */\n    state: createStateSelectors(evm.next.state)\n  }\n});\n\nexport default data;\n"] }, _coverageSchema: "332fd63041d2c1bcb487cc26dd0d5f7d97098a6c" },
      coverage = global[gcv] || (global[gcv] = {});if (coverage[path] && coverage[path].hash === hash) {
    return coverage[path];
  }coverageData.hash = hash;return coverage[path] = coverageData;
}();cov_rg5m4u2ng.s[0]++;Object.defineProperty(exports, "__esModule", { value: true });var _keys = (cov_rg5m4u2ng.s[1]++, __webpack_require__(16));var _keys2 = (cov_rg5m4u2ng.s[2]++, _interopRequireDefault(_keys));var _extends2 = (cov_rg5m4u2ng.s[3]++, __webpack_require__(4));var _extends3 = (cov_rg5m4u2ng.s[4]++, _interopRequireDefault(_extends2));var _entries = (cov_rg5m4u2ng.s[5]++, __webpack_require__(1));var _entries2 = (cov_rg5m4u2ng.s[6]++, _interopRequireDefault(_entries));var _assign = (cov_rg5m4u2ng.s[7]++, __webpack_require__(5));var _assign2 = (cov_rg5m4u2ng.s[8]++, _interopRequireDefault(_assign));var _debug = (cov_rg5m4u2ng.s[9]++, __webpack_require__(0));var _debug2 = (cov_rg5m4u2ng.s[10]++, _interopRequireDefault(_debug));var _reselectTree = (cov_rg5m4u2ng.s[11]++, __webpack_require__(9));var _jsonPointer = (cov_rg5m4u2ng.s[12]++, __webpack_require__(24));var _jsonPointer2 = (cov_rg5m4u2ng.s[13]++, _interopRequireDefault(_jsonPointer));var _selectors = (cov_rg5m4u2ng.s[14]++, __webpack_require__(18));var _selectors2 = (cov_rg5m4u2ng.s[15]++, _interopRequireDefault(_selectors));var _selectors3 = (cov_rg5m4u2ng.s[16]++, __webpack_require__(3));var _selectors4 = (cov_rg5m4u2ng.s[17]++, _interopRequireDefault(_selectors3));var _selectors5 = (cov_rg5m4u2ng.s[18]++, __webpack_require__(2));var _selectors6 = (cov_rg5m4u2ng.s[19]++, _interopRequireDefault(_selectors5));var _decode = (cov_rg5m4u2ng.s[20]++, __webpack_require__(63));var _decode2 = (cov_rg5m4u2ng.s[21]++, _interopRequireDefault(_decode));var _utils = (cov_rg5m4u2ng.s[22]++, __webpack_require__(11));var decodeUtils = (cov_rg5m4u2ng.s[23]++, _interopRequireWildcard(_utils));var _bignumber = (cov_rg5m4u2ng.s[24]++, __webpack_require__(20));function _interopRequireWildcard(obj) {
  cov_rg5m4u2ng.f[0]++;cov_rg5m4u2ng.s[25]++;if ((cov_rg5m4u2ng.b[1][0]++, obj) && (cov_rg5m4u2ng.b[1][1]++, obj.__esModule)) {
    cov_rg5m4u2ng.b[0][0]++;cov_rg5m4u2ng.s[26]++;return obj;
  } else {
    cov_rg5m4u2ng.b[0][1]++;var newObj = (cov_rg5m4u2ng.s[27]++, {});cov_rg5m4u2ng.s[28]++;if (obj != null) {
      cov_rg5m4u2ng.b[2][0]++;cov_rg5m4u2ng.s[29]++;for (var key in obj) {
        cov_rg5m4u2ng.s[30]++;if (Object.prototype.hasOwnProperty.call(obj, key)) {
          cov_rg5m4u2ng.b[3][0]++;cov_rg5m4u2ng.s[31]++;newObj[key] = obj[key];
        } else {
          cov_rg5m4u2ng.b[3][1]++;
        }
      }
    } else {
      cov_rg5m4u2ng.b[2][1]++;
    }cov_rg5m4u2ng.s[32]++;newObj.default = obj;cov_rg5m4u2ng.s[33]++;return newObj;
  }
}function _interopRequireDefault(obj) {
  cov_rg5m4u2ng.f[1]++;cov_rg5m4u2ng.s[34]++;return (cov_rg5m4u2ng.b[5][0]++, obj) && (cov_rg5m4u2ng.b[5][1]++, obj.__esModule) ? (cov_rg5m4u2ng.b[4][0]++, obj) : (cov_rg5m4u2ng.b[4][1]++, { default: obj });
}const debug = (cov_rg5m4u2ng.s[35]++, (0, _debug2.default)("debugger:data:selectors"));function createStateSelectors({ stack, memory, storage }) {
  cov_rg5m4u2ng.f[2]++;cov_rg5m4u2ng.s[36]++;return { stack: (0, _reselectTree.createLeaf)([stack], words => {
      cov_rg5m4u2ng.f[3]++;cov_rg5m4u2ng.s[37]++;return ((cov_rg5m4u2ng.b[6][0]++, words) || (cov_rg5m4u2ng.b[6][1]++, [])).map(word => {
        cov_rg5m4u2ng.f[4]++;cov_rg5m4u2ng.s[38]++;return decodeUtils.toBytes(decodeUtils.toBigNumber(word, decodeUtils.WORD_SIZE));
      });
    }), memory: (0, _reselectTree.createLeaf)([memory], words => {
      cov_rg5m4u2ng.f[5]++;cov_rg5m4u2ng.s[39]++;return new Uint8Array(((cov_rg5m4u2ng.b[7][0]++, words.join("").match(/.{1,2}/g)) || (cov_rg5m4u2ng.b[7][1]++, [])).map(byte => {
        cov_rg5m4u2ng.f[6]++;cov_rg5m4u2ng.s[40]++;return parseInt(byte, 16);
      }));
    }), storage: (0, _reselectTree.createLeaf)([storage], mapping => {
      cov_rg5m4u2ng.f[7]++;cov_rg5m4u2ng.s[41]++;return (0, _assign2.default)({}, ...(0, _entries2.default)(mapping).map(([address, word]) => {
        cov_rg5m4u2ng.f[8]++;cov_rg5m4u2ng.s[42]++;return { [`0x${address}`]: new Uint8Array(((cov_rg5m4u2ng.b[8][0]++, word.match(/.{1,2}/g)) || (cov_rg5m4u2ng.b[8][1]++, [])).map(byte => {
            cov_rg5m4u2ng.f[9]++;cov_rg5m4u2ng.s[43]++;return parseInt(byte, 16);
          })) };
      }));
    }) };
}const data = (cov_rg5m4u2ng.s[44]++, (0, _reselectTree.createSelectorTree)({ state: state => {
    cov_rg5m4u2ng.f[10]++;cov_rg5m4u2ng.s[45]++;return state.data;
  }, views: { ast: (0, _reselectTree.createLeaf)([_selectors2.default.current], tree => {
      cov_rg5m4u2ng.f[11]++;cov_rg5m4u2ng.s[46]++;return tree;
    }), atLastInstructionForSourceRange: (0, _reselectTree.createLeaf)([_selectors6.default.current.isSourceRangeFinal], final => {
      cov_rg5m4u2ng.f[12]++;cov_rg5m4u2ng.s[47]++;return final;
    }), scopes: { inlined: (0, _reselectTree.createLeaf)(["/info/scopes", _selectors6.default.info.sources], (scopes, sources) => {
        cov_rg5m4u2ng.f[13]++;cov_rg5m4u2ng.s[48]++;return (0, _assign2.default)({}, ...(0, _entries2.default)(scopes).map(([id, entry]) => {
          cov_rg5m4u2ng.f[14]++;cov_rg5m4u2ng.s[49]++;return { [id]: (0, _extends3.default)({}, entry, { definition: _jsonPointer2.default.get(sources[entry.sourceId].ast, entry.pointer) }) };
        }));
      }) }, decoder: (0, _reselectTree.createLeaf)(["/views/scopes/inlined", "/next/state", "/proc/mappingKeys"], (scopes, state, mappingKeys) => {
      cov_rg5m4u2ng.f[15]++;cov_rg5m4u2ng.s[50]++;return (definition, ref) => {
        cov_rg5m4u2ng.f[16]++;cov_rg5m4u2ng.s[51]++;return (0, _decode2.default)(definition, ref, { scopes, state, mappingKeys });
      };
    }) }, info: { scopes: (0, _reselectTree.createLeaf)(["/state"], state => {
      cov_rg5m4u2ng.f[17]++;cov_rg5m4u2ng.s[52]++;return state.info.scopes.byId;
    }) }, proc: { assignments: (0, _reselectTree.createLeaf)(["/state"], state => {
      cov_rg5m4u2ng.f[18]++;cov_rg5m4u2ng.s[53]++;return state.proc.assignments.byId;
    }), mappingKeys: (0, _reselectTree.createLeaf)(["/state"], state => {
      cov_rg5m4u2ng.f[19]++;cov_rg5m4u2ng.s[54]++;return state.proc.mappingKeys.byId;
    }) }, current: { scope: { id: (0, _reselectTree.createLeaf)([_selectors2.default.current.node], node => {
        cov_rg5m4u2ng.f[20]++;cov_rg5m4u2ng.s[55]++;return node.id;
      }) }, state: createStateSelectors(_selectors4.default.current.state), identifiers: { _: (0, _reselectTree.createLeaf)(["/views/scopes/inlined", "/current/scope"], (scopes, scope) => {
        cov_rg5m4u2ng.f[21]++;let cur = (cov_rg5m4u2ng.s[56]++, scope.id);let variables = (cov_rg5m4u2ng.s[57]++, {});cov_rg5m4u2ng.s[58]++;do {
          cov_rg5m4u2ng.s[59]++;variables = (0, _assign2.default)(variables, ...((cov_rg5m4u2ng.b[9][0]++, scopes[cur].variables) || (cov_rg5m4u2ng.b[9][1]++, [])).filter(v => {
            cov_rg5m4u2ng.f[22]++;cov_rg5m4u2ng.s[60]++;return variables[v.name] == undefined;
          }).map(v => {
            cov_rg5m4u2ng.f[23]++;cov_rg5m4u2ng.s[61]++;return { [v.name]: v.id };
          }));cov_rg5m4u2ng.s[62]++;cur = scopes[cur].parentId;
        } while (cur != null);cov_rg5m4u2ng.s[63]++;return variables;
      }), definitions: (0, _reselectTree.createLeaf)(["/views/scopes/inlined", "./_"], (scopes, identifiers) => {
        cov_rg5m4u2ng.f[24]++;cov_rg5m4u2ng.s[64]++;return (0, _assign2.default)({}, ...(0, _entries2.default)(identifiers).map(([identifier, id]) => {
          cov_rg5m4u2ng.f[25]++;let { definition } = (cov_rg5m4u2ng.s[65]++, scopes[id]);cov_rg5m4u2ng.s[66]++;return { [identifier]: definition };
        }));
      }), refs: (0, _reselectTree.createLeaf)(["/proc/assignments", "./_", _selectors6.default.current.functionDepth], (assignments, identifiers, currentDepth) => {
        cov_rg5m4u2ng.f[26]++;cov_rg5m4u2ng.s[67]++;return (0, _assign2.default)({}, ...(0, _entries2.default)(identifiers).map(([identifier, id]) => {
          cov_rg5m4u2ng.f[27]++;let matchIds = (cov_rg5m4u2ng.s[68]++, (0, _keys2.default)(assignments).filter(augmentedId => {
            cov_rg5m4u2ng.f[28]++;cov_rg5m4u2ng.s[69]++;return decodeUtils.idFromAugmented(augmentedId) === id;
          }).map(decodeUtils.depthFromAugmented));let maxMatch = (cov_rg5m4u2ng.s[70]++, Math.min(currentDepth, Math.max(...matchIds)));let { ref } = (cov_rg5m4u2ng.s[71]++, (cov_rg5m4u2ng.b[10][0]++, assignments[decodeUtils.augmentWithDepth(id, maxMatch)]) || (cov_rg5m4u2ng.b[10][1]++, {}));cov_rg5m4u2ng.s[72]++;if (!ref) {
            cov_rg5m4u2ng.b[11][0]++;cov_rg5m4u2ng.s[73]++;return undefined;
          } else {
            cov_rg5m4u2ng.b[11][1]++;
          };cov_rg5m4u2ng.s[74]++;return { [identifier]: ref };
        }));
      }), decoded: (0, _reselectTree.createLeaf)(["/views/decoder", "./definitions", "./refs"], (decode, definitions, refs) => {
        cov_rg5m4u2ng.f[29]++;cov_rg5m4u2ng.s[75]++;return (0, _assign2.default)({}, ...(0, _entries2.default)(refs).map(([identifier, ref]) => {
          cov_rg5m4u2ng.f[30]++;cov_rg5m4u2ng.s[76]++;return { [identifier]: decode(definitions[identifier], ref) };
        }));
      }), native: (0, _reselectTree.createLeaf)(['./decoded'], decodeUtils.cleanBigNumbers) } }, next: { state: createStateSelectors(_selectors4.default.next.state) } }));cov_rg5m4u2ng.s[77]++;exports.default = data;

/***/ }),
/* 28 */
/***/ (function(module, exports) {

module.exports = require("truffle-expect");

/***/ }),
/* 29 */
/***/ (function(module, exports) {

module.exports = require("babel-runtime/core-js/object/values");

/***/ }),
/* 30 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var cov_1e4tw6tegl = function () {
  var path = "/Users/gnidan/src/work/truffle/packages/truffle-debugger/lib/ast/map.js",
      hash = "7166507383c0ea0c36795aea8cb5315b0881e100",
      Function = function () {}.constructor,
      global = new Function('return this')(),
      gcv = "__coverage__",
      coverageData = { path: "/Users/gnidan/src/work/truffle/packages/truffle-debugger/lib/ast/map.js", statementMap: { "0": { start: { line: 3, column: 0 }, end: { line: 5, column: 3 } }, "1": { start: { line: 7, column: 12 }, end: { line: 7, column: 56 } }, "2": { start: { line: 9, column: 13 }, end: { line: 9, column: 42 } }, "3": { start: { line: 11, column: 0 }, end: { line: 11, column: 28 } }, "4": { start: { line: 12, column: 0 }, end: { line: 12, column: 32 } }, "5": { start: { line: 13, column: 0 }, end: { line: 13, column: 30 } }, "6": { start: { line: 15, column: 13 }, end: { line: 15, column: 29 } }, "7": { start: { line: 17, column: 14 }, end: { line: 17, column: 44 } }, "8": { start: { line: 19, column: 24 }, end: { line: 19, column: 53 } }, "9": { start: { line: 21, column: 25 }, end: { line: 21, column: 66 } }, "10": { start: { line: 23, column: 39 }, end: { line: 23, column: 93 } }, "11": { start: { line: 25, column: 14 }, end: { line: 25, column: 54 } }, "12": { start: { line: 33, column: 24 }, end: { line: 33, column: 77 } }, "13": { start: { line: 33, column: 65 }, end: { line: 33, column: 76 } }, "14": { start: { line: 35, column: 2 }, end: { line: 35, column: 33 } }, "15": { start: { line: 42, column: 2 }, end: { line: 54, column: 3 } }, "16": { start: { line: 43, column: 4 }, end: { line: 43, column: 82 } }, "17": { start: { line: 43, column: 45 }, end: { line: 43, column: 79 } }, "18": { start: { line: 44, column: 9 }, end: { line: 54, column: 3 } }, "19": { start: { line: 45, column: 18 }, end: { line: 45, column: 20 } }, "20": { start: { line: 47, column: 4 }, end: { line: 49, column: 5 } }, "21": { start: { line: 48, column: 6 }, end: { line: 48, column: 55 } }, "22": { start: { line: 51, column: 4 }, end: { line: 51, column: 111 } }, "23": { start: { line: 51, column: 66 }, end: { line: 51, column: 108 } }, "24": { start: { line: 53, column: 4 }, end: { line: 53, column: 14 } }, "25": { start: { line: 61, column: 15 }, end: { line: 61, column: 31 } }, "26": { start: { line: 62, column: 13 }, end: { line: 62, column: 45 } }, "27": { start: { line: 64, column: 2 }, end: { line: 68, column: 5 } }, "28": { start: { line: 65, column: 23 }, end: { line: 65, column: 28 } }, "29": { start: { line: 67, column: 4 }, end: { line: 67, column: 48 } }, "30": { start: { line: 70, column: 18 }, end: { line: 70, column: 44 } }, "31": { start: { line: 72, column: 20 }, end: { line: 72, column: 55 } }, "32": { start: { line: 76, column: 2 }, end: { line: 76, column: 173 } }, "33": { start: { line: 76, column: 43 }, end: { line: 76, column: 91 } }, "34": { start: { line: 76, column: 114 }, end: { line: 76, column: 121 } }, "35": { start: { line: 76, column: 140 }, end: { line: 76, column: 167 } } }, fnMap: { "0": { name: "_interopRequireDefault", decl: { start: { line: 23, column: 9 }, end: { line: 23, column: 31 } }, loc: { start: { line: 23, column: 37 }, end: { line: 23, column: 95 } }, line: 23 }, "1": { name: "getRange", decl: { start: { line: 30, column: 9 }, end: { line: 30, column: 17 } }, loc: { start: { line: 30, column: 24 }, end: { line: 36, column: 1 } }, line: 30 }, "2": { name: "(anonymous_2)", decl: { start: { line: 33, column: 60 }, end: { line: 33, column: 61 } }, loc: { start: { line: 33, column: 65 }, end: { line: 33, column: 76 } }, line: 33 }, "3": { name: "rangeNodes", decl: { start: { line: 41, column: 9 }, end: { line: 41, column: 19 } }, loc: { start: { line: 41, column: 40 }, end: { line: 55, column: 1 } }, line: 41 }, "4": { name: "(anonymous_4)", decl: { start: { line: 43, column: 33 }, end: { line: 43, column: 34 } }, loc: { start: { line: 43, column: 45 }, end: { line: 43, column: 79 } }, line: 43 }, "5": { name: "(anonymous_5)", decl: { start: { line: 51, column: 59 }, end: { line: 51, column: 60 } }, loc: { start: { line: 51, column: 66 }, end: { line: 51, column: 108 } }, line: 51 }, "6": { name: "findRange", decl: { start: { line: 60, column: 9 }, end: { line: 60, column: 18 } }, loc: { start: { line: 60, column: 52 }, end: { line: 77, column: 1 } }, line: 60 }, "7": { name: "(anonymous_7)", decl: { start: { line: 64, column: 17 }, end: { line: 64, column: 18 } }, loc: { start: { line: 64, column: 41 }, end: { line: 68, column: 3 } }, line: 64 }, "8": { name: "(anonymous_8)", decl: { start: { line: 76, column: 28 }, end: { line: 76, column: 29 } }, loc: { start: { line: 76, column: 43 }, end: { line: 76, column: 91 } }, line: 76 }, "9": { name: "(anonymous_9)", decl: { start: { line: 76, column: 97 }, end: { line: 76, column: 98 } }, loc: { start: { line: 76, column: 114 }, end: { line: 76, column: 121 } }, line: 76 }, "10": { name: "(anonymous_10)", decl: { start: { line: 76, column: 130 }, end: { line: 76, column: 131 } }, loc: { start: { line: 76, column: 140 }, end: { line: 76, column: 167 } }, line: 76 } }, branchMap: { "0": { loc: { start: { line: 23, column: 46 }, end: { line: 23, column: 92 } }, type: "cond-expr", locations: [{ start: { line: 23, column: 70 }, end: { line: 23, column: 73 } }, { start: { line: 23, column: 76 }, end: { line: 23, column: 92 } }], line: 23 }, "1": { loc: { start: { line: 23, column: 46 }, end: { line: 23, column: 67 } }, type: "binary-expr", locations: [{ start: { line: 23, column: 46 }, end: { line: 23, column: 49 } }, { start: { line: 23, column: 53 }, end: { line: 23, column: 67 } }], line: 23 }, "2": { loc: { start: { line: 41, column: 26 }, end: { line: 41, column: 38 } }, type: "default-arg", locations: [{ start: { line: 41, column: 36 }, end: { line: 41, column: 38 } }], line: 41 }, "3": { loc: { start: { line: 42, column: 2 }, end: { line: 54, column: 3 } }, type: "if", locations: [{ start: { line: 42, column: 2 }, end: { line: 54, column: 3 } }, { start: { line: 42, column: 2 }, end: { line: 54, column: 3 } }], line: 42 }, "4": { loc: { start: { line: 44, column: 9 }, end: { line: 54, column: 3 } }, type: "if", locations: [{ start: { line: 44, column: 9 }, end: { line: 54, column: 3 } }, { start: { line: 44, column: 9 }, end: { line: 54, column: 3 } }], line: 44 }, "5": { loc: { start: { line: 47, column: 4 }, end: { line: 49, column: 5 } }, type: "if", locations: [{ start: { line: 47, column: 4 }, end: { line: 49, column: 5 } }, { start: { line: 47, column: 4 }, end: { line: 49, column: 5 } }], line: 47 }, "6": { loc: { start: { line: 76, column: 43 }, end: { line: 76, column: 91 } }, type: "binary-expr", locations: [{ start: { line: 76, column: 43 }, end: { line: 76, column: 66 } }, { start: { line: 76, column: 70 }, end: { line: 76, column: 91 } }], line: 76 }, "7": { loc: { start: { line: 76, column: 140 }, end: { line: 76, column: 167 } }, type: "cond-expr", locations: [{ start: { line: 76, column: 162 }, end: { line: 76, column: 163 } }, { start: { line: 76, column: 166 }, end: { line: 76, column: 167 } }], line: 76 } }, s: { "0": 0, "1": 0, "2": 0, "3": 0, "4": 0, "5": 0, "6": 0, "7": 0, "8": 0, "9": 0, "10": 0, "11": 0, "12": 0, "13": 0, "14": 0, "15": 0, "16": 0, "17": 0, "18": 0, "19": 0, "20": 0, "21": 0, "22": 0, "23": 0, "24": 0, "25": 0, "26": 0, "27": 0, "28": 0, "29": 0, "30": 0, "31": 0, "32": 0, "33": 0, "34": 0, "35": 0 }, f: { "0": 0, "1": 0, "2": 0, "3": 0, "4": 0, "5": 0, "6": 0, "7": 0, "8": 0, "9": 0, "10": 0 }, b: { "0": [0, 0], "1": [0, 0], "2": [0], "3": [0, 0], "4": [0, 0], "5": [0, 0], "6": [0, 0], "7": [0, 0] }, inputSourceMap: { version: 3, sources: ["lib/ast/map.js"], names: ["getRange", "rangeNodes", "findRange", "debug", "node", "start", "length", "src", "split", "slice", "map", "i", "parseInt", "pointer", "Array", "concat", "sub", "Object", "results", "push", "range", "key", "sourceStart", "sourceLength", "ranges", "tree", "IntervalTree", "forEach", "end", "insert", "sourceEnd", "overlapping", "search", "filter", "reduce", "a", "b"], mappings: ";;;;;;;;;;QASgBA,Q,GAAAA,Q;QAcAC,U,GAAAA,U;QAyBAC,S,GAAAA,S;;AAhDhB;;;;AAGA;;;;;;AAFA,MAAMC,QAAQ,qBAAY,kBAAZ,CAAd;;AAKA;;;AAGO,SAASH,QAAT,CAAkBI,IAAlB,EAAwB;AAC7B;AACA;AACA,MAAI,CAACC,KAAD,EAAQC,MAAR,IAAkBF,KAAKG,GAAL,CACnBC,KADmB,CACb,GADa,EAEnBC,KAFmB,CAEb,CAFa,EAEV,CAFU,EAGnBC,GAHmB,CAGbC,CAAD,IAAOC,SAASD,CAAT,CAHO,CAAtB;;AAKA,SAAO,CAACN,KAAD,EAAQA,QAAQC,MAAhB,CAAP;AACD;;AAED;;;AAGO,SAASL,UAAT,CAAoBG,IAApB,EAA0BS,UAAU,EAApC,EAAwC;AAC7C,MAAIT,gBAAgBU,KAApB,EAA2B;AACzB,WAAO,GAAGC,MAAH,CACL,GAAGX,KAAKM,GAAL,CAAU,CAACM,GAAD,EAAML,CAAN,KAAYV,WAAWe,GAAX,EAAiB,GAAEH,OAAQ,IAAGF,CAAE,EAAhC,CAAtB,CADE,CAAP;AAGD,GAJD,MAIO,IAAIP,gBAAgBa,MAApB,EAA4B;AACjC,QAAIC,UAAU,EAAd;;AAEA,QAAId,KAAKG,GAAT,EAAc;AACZW,cAAQC,IAAR,CAAa,EAACN,OAAD,EAAUO,OAAOpB,SAASI,IAAT,CAAjB,EAAb;AACD;;AAED,WAAOc,QAAQH,MAAR,CACL,GAAG,oBAAYX,IAAZ,EAAkBM,GAAlB,CACAW,GAAD,IAASpB,WAAWG,KAAKiB,GAAL,CAAX,EAAuB,GAAER,OAAQ,IAAGQ,GAAI,EAAxC,CADR,CADE,CAAP;AAKD,GAZM,MAYA;AACL,WAAO,EAAP;AACD;AACF;;AAED;;;AAGO,SAASnB,SAAT,CAAmBE,IAAnB,EAAyBkB,WAAzB,EAAsCC,YAAtC,EAAoD;AACzD,MAAIC,SAASvB,WAAWG,IAAX,CAAb;AACA,MAAIqB,OAAO,IAAIC,0BAAJ,EAAX;;AAEAF,SAAOG,OAAP,CAAgB,CAAC,EAACP,KAAD,EAAQP,OAAR,EAAD,KAAsB;AACpC,QAAI,CAACR,KAAD,EAAQuB,GAAR,IAAeR,KAAnB;;AAEAK,SAAKI,MAAL,CAAYxB,KAAZ,EAAmBuB,GAAnB,EAAwB,EAACR,KAAD,EAAQP,OAAR,EAAxB;AACD,GAJD;;AAMA,MAAIiB,YAAYR,cAAcC,YAA9B;;AAEA,MAAIQ,cAAcN,KAAKO,MAAL,CAAYV,WAAZ,EAAyBQ,SAAzB,CAAlB;;AAEA;AACA;AACA,SAAOC,YACJE,MADI,CACI,CAAC,EAACb,KAAD,EAAD,KAAaE,eAAeF,MAAM,CAAN,CAAf,IAA2BU,aAAaV,MAAM,CAAN,CADzD,EAEJV,GAFI,CAEC,CAAC,EAACG,OAAD,EAAD,KAAeA,OAFhB,EAGJqB,MAHI,CAGI,CAACC,CAAD,EAAIC,CAAJ,KAAUD,EAAE7B,MAAF,GAAW8B,EAAE9B,MAAb,GAAsB6B,CAAtB,GAA0BC,CAHxC,EAG2C,EAH3C,CAAP;AAID", file: "map.js", sourceRoot: "/Users/gnidan/src/work/truffle/packages/truffle-debugger", sourcesContent: ["import debugModule from \"debug\";\nconst debug = debugModule(\"debugger:ast:map\");\n\nimport IntervalTree from \"node-interval-tree\";\n\n\n/**\n * @private\n */\nexport function getRange(node) {\n  // src: \"<start>:<length>:<_>\"\n  // returns [start, end]\n  let [start, length] = node.src\n    .split(\":\")\n    .slice(0, 2)\n    .map( (i) => parseInt(i) );\n\n  return [start, start + length];\n}\n\n/**\n * @private\n */\nexport function rangeNodes(node, pointer = \"\") {\n  if (node instanceof Array) {\n    return [].concat(\n      ...node.map( (sub, i) => rangeNodes(sub, `${pointer}/${i}`) )\n    );\n  } else if (node instanceof Object) {\n    let results = [];\n\n    if (node.src) {\n      results.push({pointer, range: getRange(node)});\n    }\n\n    return results.concat(\n      ...Object.keys(node).map(\n        (key) => rangeNodes(node[key], `${pointer}/${key}`)\n      )\n    );\n  } else {\n    return [];\n  }\n}\n\n/**\n * @private\n */\nexport function findRange(node, sourceStart, sourceLength) {\n  let ranges = rangeNodes(node);\n  let tree = new IntervalTree();\n\n  ranges.forEach( ({range, pointer}) => {\n    let [start, end] = range;\n\n    tree.insert(start, end, {range, pointer});\n  });\n\n  let sourceEnd = sourceStart + sourceLength;\n\n  let overlapping = tree.search(sourceStart, sourceEnd);\n\n  // find nodes that fully contain requested range,\n  // return longest pointer\n  return overlapping\n    .filter( ({range}) => sourceStart >= range[0] && sourceEnd <= range[1] )\n    .map( ({pointer}) => pointer )\n    .reduce( (a, b) => a.length > b.length ? a : b, \"\" );\n}\n"] }, _coverageSchema: "332fd63041d2c1bcb487cc26dd0d5f7d97098a6c" },
      coverage = global[gcv] || (global[gcv] = {});if (coverage[path] && coverage[path].hash === hash) {
    return coverage[path];
  }coverageData.hash = hash;return coverage[path] = coverageData;
}();cov_1e4tw6tegl.s[0]++;Object.defineProperty(exports, "__esModule", { value: true });var _keys = (cov_1e4tw6tegl.s[1]++, __webpack_require__(16));var _keys2 = (cov_1e4tw6tegl.s[2]++, _interopRequireDefault(_keys));cov_1e4tw6tegl.s[3]++;exports.getRange = getRange;cov_1e4tw6tegl.s[4]++;exports.rangeNodes = rangeNodes;cov_1e4tw6tegl.s[5]++;exports.findRange = findRange;var _debug = (cov_1e4tw6tegl.s[6]++, __webpack_require__(0));var _debug2 = (cov_1e4tw6tegl.s[7]++, _interopRequireDefault(_debug));var _nodeIntervalTree = (cov_1e4tw6tegl.s[8]++, __webpack_require__(54));var _nodeIntervalTree2 = (cov_1e4tw6tegl.s[9]++, _interopRequireDefault(_nodeIntervalTree));function _interopRequireDefault(obj) {
  cov_1e4tw6tegl.f[0]++;cov_1e4tw6tegl.s[10]++;return (cov_1e4tw6tegl.b[1][0]++, obj) && (cov_1e4tw6tegl.b[1][1]++, obj.__esModule) ? (cov_1e4tw6tegl.b[0][0]++, obj) : (cov_1e4tw6tegl.b[0][1]++, { default: obj });
}const debug = (cov_1e4tw6tegl.s[11]++, (0, _debug2.default)("debugger:ast:map"));function getRange(node) {
  cov_1e4tw6tegl.f[1]++;let [start, length] = (cov_1e4tw6tegl.s[12]++, node.src.split(":").slice(0, 2).map(i => {
    cov_1e4tw6tegl.f[2]++;cov_1e4tw6tegl.s[13]++;return parseInt(i);
  }));cov_1e4tw6tegl.s[14]++;return [start, start + length];
}function rangeNodes(node, pointer = (cov_1e4tw6tegl.b[2][0]++, "")) {
  cov_1e4tw6tegl.f[3]++;cov_1e4tw6tegl.s[15]++;if (node instanceof Array) {
    cov_1e4tw6tegl.b[3][0]++;cov_1e4tw6tegl.s[16]++;return [].concat(...node.map((sub, i) => {
      cov_1e4tw6tegl.f[4]++;cov_1e4tw6tegl.s[17]++;return rangeNodes(sub, `${pointer}/${i}`);
    }));
  } else {
    cov_1e4tw6tegl.b[3][1]++;cov_1e4tw6tegl.s[18]++;if (node instanceof Object) {
      cov_1e4tw6tegl.b[4][0]++;let results = (cov_1e4tw6tegl.s[19]++, []);cov_1e4tw6tegl.s[20]++;if (node.src) {
        cov_1e4tw6tegl.b[5][0]++;cov_1e4tw6tegl.s[21]++;results.push({ pointer, range: getRange(node) });
      } else {
        cov_1e4tw6tegl.b[5][1]++;
      }cov_1e4tw6tegl.s[22]++;return results.concat(...(0, _keys2.default)(node).map(key => {
        cov_1e4tw6tegl.f[5]++;cov_1e4tw6tegl.s[23]++;return rangeNodes(node[key], `${pointer}/${key}`);
      }));
    } else {
      cov_1e4tw6tegl.b[4][1]++;cov_1e4tw6tegl.s[24]++;return [];
    }
  }
}function findRange(node, sourceStart, sourceLength) {
  cov_1e4tw6tegl.f[6]++;let ranges = (cov_1e4tw6tegl.s[25]++, rangeNodes(node));let tree = (cov_1e4tw6tegl.s[26]++, new _nodeIntervalTree2.default());cov_1e4tw6tegl.s[27]++;ranges.forEach(({ range, pointer }) => {
    cov_1e4tw6tegl.f[7]++;let [start, end] = (cov_1e4tw6tegl.s[28]++, range);cov_1e4tw6tegl.s[29]++;tree.insert(start, end, { range, pointer });
  });let sourceEnd = (cov_1e4tw6tegl.s[30]++, sourceStart + sourceLength);let overlapping = (cov_1e4tw6tegl.s[31]++, tree.search(sourceStart, sourceEnd));cov_1e4tw6tegl.s[32]++;return overlapping.filter(({ range }) => {
    cov_1e4tw6tegl.f[8]++;cov_1e4tw6tegl.s[33]++;return (cov_1e4tw6tegl.b[6][0]++, sourceStart >= range[0]) && (cov_1e4tw6tegl.b[6][1]++, sourceEnd <= range[1]);
  }).map(({ pointer }) => {
    cov_1e4tw6tegl.f[9]++;cov_1e4tw6tegl.s[34]++;return pointer;
  }).reduce((a, b) => {
    cov_1e4tw6tegl.f[10]++;cov_1e4tw6tegl.s[35]++;return a.length > b.length ? (cov_1e4tw6tegl.b[7][0]++, a) : (cov_1e4tw6tegl.b[7][1]++, b);
  }, "");
}

/***/ }),
/* 31 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var cov_lonpljgf9 = function () {
  var path = "/Users/gnidan/src/work/truffle/packages/truffle-debugger/lib/data/sagas/index.js",
      hash = "979db436edd147d8160b76c0d0299215141ba333",
      Function = function () {}.constructor,
      global = new Function('return this')(),
      gcv = "__coverage__",
      coverageData = { path: "/Users/gnidan/src/work/truffle/packages/truffle-debugger/lib/data/sagas/index.js", statementMap: { "0": { start: { line: 3, column: 0 }, end: { line: 5, column: 3 } }, "1": { start: { line: 7, column: 16 }, end: { line: 7, column: 56 } }, "2": { start: { line: 9, column: 16 }, end: { line: 9, column: 49 } }, "3": { start: { line: 11, column: 15 }, end: { line: 11, column: 62 } }, "4": { start: { line: 13, column: 16 }, end: { line: 13, column: 48 } }, "5": { start: { line: 15, column: 14 }, end: { line: 15, column: 60 } }, "6": { start: { line: 17, column: 15 }, end: { line: 17, column: 46 } }, "7": { start: { line: 19, column: 0 }, end: { line: 19, column: 22 } }, "8": { start: { line: 20, column: 0 }, end: { line: 20, column: 26 } }, "9": { start: { line: 21, column: 0 }, end: { line: 21, column: 20 } }, "10": { start: { line: 23, column: 13 }, end: { line: 23, column: 29 } }, "11": { start: { line: 25, column: 14 }, end: { line: 25, column: 44 } }, "12": { start: { line: 27, column: 15 }, end: { line: 27, column: 44 } }, "13": { start: { line: 29, column: 19 }, end: { line: 29, column: 42 } }, "14": { start: { line: 31, column: 20 }, end: { line: 31, column: 56 } }, "15": { start: { line: 33, column: 15 }, end: { line: 33, column: 37 } }, "16": { start: { line: 35, column: 15 }, end: { line: 35, column: 43 } }, "17": { start: { line: 37, column: 16 }, end: { line: 37, column: 37 } }, "18": { start: { line: 39, column: 14 }, end: { line: 39, column: 48 } }, "19": { start: { line: 41, column: 17 }, end: { line: 41, column: 40 } }, "20": { start: { line: 43, column: 18 }, end: { line: 43, column: 52 } }, "21": { start: { line: 45, column: 18 }, end: { line: 45, column: 51 } }, "22": { start: { line: 47, column: 18 }, end: { line: 47, column: 53 } }, "23": { start: { line: 49, column: 13 }, end: { line: 49, column: 45 } }, "24": { start: { line: 51, column: 12 }, end: { line: 51, column: 43 } }, "25": { start: { line: 53, column: 40 }, end: { line: 53, column: 267 } }, "26": { start: { line: 53, column: 69 }, end: { line: 53, column: 80 } }, "27": { start: { line: 53, column: 103 }, end: { line: 53, column: 105 } }, "28": { start: { line: 53, column: 107 }, end: { line: 53, column: 228 } }, "29": { start: { line: 53, column: 126 }, end: { line: 53, column: 226 } }, "30": { start: { line: 53, column: 149 }, end: { line: 53, column: 224 } }, "31": { start: { line: 53, column: 201 }, end: { line: 53, column: 224 } }, "32": { start: { line: 53, column: 229 }, end: { line: 53, column: 250 } }, "33": { start: { line: 53, column: 251 }, end: { line: 53, column: 265 } }, "34": { start: { line: 55, column: 39 }, end: { line: 55, column: 93 } }, "35": { start: { line: 57, column: 14 }, end: { line: 57, column: 57 } }, "36": { start: { line: 60, column: 2 }, end: { line: 60, column: 78 } }, "37": { start: { line: 64, column: 2 }, end: { line: 64, column: 49 } }, "38": { start: { line: 73, column: 6 }, end: { line: 73, column: 63 } }, "39": { start: { line: 75, column: 15 }, end: { line: 75, column: 76 } }, "40": { start: { line: 76, column: 15 }, end: { line: 76, column: 74 } }, "41": { start: { line: 77, column: 20 }, end: { line: 77, column: 88 } }, "42": { start: { line: 78, column: 27 }, end: { line: 78, column: 91 } }, "43": { start: { line: 79, column: 21 }, end: { line: 79, column: 90 } }, "44": { start: { line: 81, column: 14 }, end: { line: 81, column: 78 } }, "45": { start: { line: 82, column: 2 }, end: { line: 84, column: 3 } }, "46": { start: { line: 83, column: 4 }, end: { line: 83, column: 11 } }, "47": { start: { line: 86, column: 12 }, end: { line: 86, column: 28 } }, "48": { start: { line: 89, column: 2 }, end: { line: 91, column: 3 } }, "49": { start: { line: 90, column: 4 }, end: { line: 90, column: 11 } }, "50": { start: { line: 100, column: 2 }, end: { line: 102, column: 3 } }, "51": { start: { line: 101, column: 4 }, end: { line: 101, column: 11 } }, "52": { start: { line: 104, column: 2 }, end: { line: 217, column: 3 } }, "53": { start: { line: 107, column: 6 }, end: { line: 107, column: 101 } }, "54": { start: { line: 107, column: 60 }, end: { line: 107, column: 99 } }, "55": { start: { line: 109, column: 6 }, end: { line: 109, column: 119 } }, "56": { start: { line: 109, column: 72 }, end: { line: 109, column: 117 } }, "57": { start: { line: 111, column: 6 }, end: { line: 113, column: 166 } }, "58": { start: { line: 111, column: 81 }, end: { line: 111, column: 124 } }, "59": { start: { line: 113, column: 23 }, end: { line: 113, column: 91 } }, "60": { start: { line: 113, column: 122 }, end: { line: 113, column: 160 } }, "61": { start: { line: 114, column: 6 }, end: { line: 114, column: 40 } }, "62": { start: { line: 115, column: 6 }, end: { line: 115, column: 57 } }, "63": { start: { line: 116, column: 6 }, end: { line: 116, column: 43 } }, "64": { start: { line: 118, column: 6 }, end: { line: 118, column: 67 } }, "65": { start: { line: 119, column: 6 }, end: { line: 119, column: 12 } }, "66": { start: { line: 122, column: 24 }, end: { line: 122, column: 55 } }, "67": { start: { line: 123, column: 17 }, end: { line: 123, column: 18 } }, "68": { start: { line: 124, column: 18 }, end: { line: 124, column: 38 } }, "69": { start: { line: 125, column: 6 }, end: { line: 125, column: 44 } }, "70": { start: { line: 127, column: 23 }, end: { line: 127, column: 75 } }, "71": { start: { line: 128, column: 6 }, end: { line: 128, column: 40 } }, "72": { start: { line: 129, column: 6 }, end: { line: 129, column: 41 } }, "73": { start: { line: 130, column: 6 }, end: { line: 134, column: 11 } }, "74": { start: { line: 130, column: 117 }, end: { line: 134, column: 7 } }, "75": { start: { line: 135, column: 6 }, end: { line: 135, column: 57 } }, "76": { start: { line: 136, column: 6 }, end: { line: 136, column: 43 } }, "77": { start: { line: 138, column: 6 }, end: { line: 138, column: 67 } }, "78": { start: { line: 139, column: 6 }, end: { line: 139, column: 12 } }, "79": { start: { line: 142, column: 18 }, end: { line: 142, column: 61 } }, "80": { start: { line: 143, column: 6 }, end: { line: 143, column: 41 } }, "81": { start: { line: 144, column: 6 }, end: { line: 144, column: 57 } }, "82": { start: { line: 145, column: 6 }, end: { line: 145, column: 61 } }, "83": { start: { line: 146, column: 6 }, end: { line: 148, column: 10 } }, "84": { start: { line: 149, column: 6 }, end: { line: 149, column: 12 } }, "85": { start: { line: 160, column: 10 }, end: { line: 160, column: 14 } }, "86": { start: { line: 162, column: 35 }, end: { line: 162, column: 76 } }, "87": { start: { line: 164, column: 29 }, end: { line: 164, column: 74 } }, "88": { start: { line: 165, column: 6 }, end: { line: 165, column: 33 } }, "89": { start: { line: 166, column: 6 }, end: { line: 166, column: 57 } }, "90": { start: { line: 167, column: 6 }, end: { line: 167, column: 65 } }, "91": { start: { line: 168, column: 6 }, end: { line: 168, column: 53 } }, "92": { start: { line: 170, column: 27 }, end: { line: 173, column: 12 } }, "93": { start: { line: 174, column: 6 }, end: { line: 174, column: 49 } }, "94": { start: { line: 176, column: 27 }, end: { line: 176, column: 68 } }, "95": { start: { line: 178, column: 30 }, end: { line: 178, column: 78 } }, "96": { start: { line: 179, column: 6 }, end: { line: 179, column: 51 } }, "97": { start: { line: 184, column: 6 }, end: { line: 190, column: 7 } }, "98": { start: { line: 185, column: 8 }, end: { line: 185, column: 67 } }, "99": { start: { line: 186, column: 13 }, end: { line: 190, column: 7 } }, "100": { start: { line: 187, column: 8 }, end: { line: 189, column: 11 } }, "101": { start: { line: 192, column: 6 }, end: { line: 192, column: 42 } }, "102": { start: { line: 193, column: 6 }, end: { line: 195, column: 7 } }, "103": { start: { line: 194, column: 8 }, end: { line: 194, column: 84 } }, "104": { start: { line: 197, column: 6 }, end: { line: 197, column: 12 } }, "105": { start: { line: 200, column: 6 }, end: { line: 200, column: 12 } }, "106": { start: { line: 203, column: 6 }, end: { line: 205, column: 7 } }, "107": { start: { line: 204, column: 8 }, end: { line: 204, column: 14 } }, "108": { start: { line: 207, column: 6 }, end: { line: 207, column: 67 } }, "109": { start: { line: 208, column: 20 }, end: { line: 208, column: 30 } }, "110": { start: { line: 210, column: 6 }, end: { line: 210, column: 28 } }, "111": { start: { line: 211, column: 6 }, end: { line: 211, column: 57 } }, "112": { start: { line: 212, column: 6 }, end: { line: 212, column: 65 } }, "113": { start: { line: 213, column: 6 }, end: { line: 215, column: 10 } }, "114": { start: { line: 216, column: 6 }, end: { line: 216, column: 12 } }, "115": { start: { line: 221, column: 2 }, end: { line: 227, column: 5 } }, "116": { start: { line: 222, column: 4 }, end: { line: 226, column: 5 } }, "117": { start: { line: 223, column: 6 }, end: { line: 223, column: 24 } }, "118": { start: { line: 225, column: 6 }, end: { line: 225, column: 15 } }, "119": { start: { line: 230, column: 0 }, end: { line: 230, column: 57 } } }, fnMap: { "0": { name: "_interopRequireWildcard", decl: { start: { line: 53, column: 9 }, end: { line: 53, column: 32 } }, loc: { start: { line: 53, column: 38 }, end: { line: 53, column: 269 } }, line: 53 }, "1": { name: "_interopRequireDefault", decl: { start: { line: 55, column: 9 }, end: { line: 55, column: 31 } }, loc: { start: { line: 55, column: 37 }, end: { line: 55, column: 95 } }, line: 55 }, "2": { name: "scope", decl: { start: { line: 59, column: 10 }, end: { line: 59, column: 15 } }, loc: { start: { line: 59, column: 53 }, end: { line: 61, column: 1 } }, line: 59 }, "3": { name: "declare", decl: { start: { line: 63, column: 10 }, end: { line: 63, column: 17 } }, loc: { start: { line: 63, column: 24 }, end: { line: 65, column: 1 } }, line: 63 }, "4": { name: "tickSaga", decl: { start: { line: 67, column: 10 }, end: { line: 67, column: 18 } }, loc: { start: { line: 67, column: 21 }, end: { line: 218, column: 1 } }, line: 67 }, "5": { name: "(anonymous_5)", decl: { start: { line: 107, column: 50 }, end: { line: 107, column: 51 } }, loc: { start: { line: 107, column: 60 }, end: { line: 107, column: 99 } }, line: 107 }, "6": { name: "(anonymous_6)", decl: { start: { line: 109, column: 62 }, end: { line: 109, column: 63 } }, loc: { start: { line: 109, column: 72 }, end: { line: 109, column: 117 } }, line: 109 }, "7": { name: "(anonymous_7)", decl: { start: { line: 111, column: 70 }, end: { line: 111, column: 71 } }, loc: { start: { line: 111, column: 81 }, end: { line: 111, column: 124 } }, line: 111 }, "8": { name: "(anonymous_8)", decl: { start: { line: 113, column: 11 }, end: { line: 113, column: 12 } }, loc: { start: { line: 113, column: 23 }, end: { line: 113, column: 91 } }, line: 113 }, "9": { name: "(anonymous_9)", decl: { start: { line: 113, column: 101 }, end: { line: 113, column: 102 } }, loc: { start: { line: 113, column: 122 }, end: { line: 113, column: 160 } }, line: 113 }, "10": { name: "(anonymous_10)", decl: { start: { line: 130, column: 97 }, end: { line: 130, column: 98 } }, loc: { start: { line: 130, column: 117 }, end: { line: 134, column: 7 } }, line: 130 }, "11": { name: "saga", decl: { start: { line: 220, column: 10 }, end: { line: 220, column: 14 } }, loc: { start: { line: 220, column: 17 }, end: { line: 228, column: 1 } }, line: 220 }, "12": { name: "(anonymous_12)", decl: { start: { line: 221, column: 47 }, end: { line: 221, column: 48 } }, loc: { start: { line: 221, column: 60 }, end: { line: 227, column: 3 } }, line: 221 } }, branchMap: { "0": { loc: { start: { line: 53, column: 40 }, end: { line: 53, column: 267 } }, type: "if", locations: [{ start: { line: 53, column: 40 }, end: { line: 53, column: 267 } }, { start: { line: 53, column: 40 }, end: { line: 53, column: 267 } }], line: 53 }, "1": { loc: { start: { line: 53, column: 44 }, end: { line: 53, column: 65 } }, type: "binary-expr", locations: [{ start: { line: 53, column: 44 }, end: { line: 53, column: 47 } }, { start: { line: 53, column: 51 }, end: { line: 53, column: 65 } }], line: 53 }, "2": { loc: { start: { line: 53, column: 107 }, end: { line: 53, column: 228 } }, type: "if", locations: [{ start: { line: 53, column: 107 }, end: { line: 53, column: 228 } }, { start: { line: 53, column: 107 }, end: { line: 53, column: 228 } }], line: 53 }, "3": { loc: { start: { line: 53, column: 149 }, end: { line: 53, column: 224 } }, type: "if", locations: [{ start: { line: 53, column: 149 }, end: { line: 53, column: 224 } }, { start: { line: 53, column: 149 }, end: { line: 53, column: 224 } }], line: 53 }, "4": { loc: { start: { line: 55, column: 46 }, end: { line: 55, column: 92 } }, type: "cond-expr", locations: [{ start: { line: 55, column: 70 }, end: { line: 55, column: 73 } }, { start: { line: 55, column: 76 }, end: { line: 55, column: 92 } }], line: 55 }, "5": { loc: { start: { line: 55, column: 46 }, end: { line: 55, column: 67 } }, type: "binary-expr", locations: [{ start: { line: 55, column: 46 }, end: { line: 55, column: 49 } }, { start: { line: 55, column: 53 }, end: { line: 55, column: 67 } }], line: 55 }, "6": { loc: { start: { line: 82, column: 2 }, end: { line: 84, column: 3 } }, type: "if", locations: [{ start: { line: 82, column: 2 }, end: { line: 84, column: 3 } }, { start: { line: 82, column: 2 }, end: { line: 84, column: 3 } }], line: 82 }, "7": { loc: { start: { line: 89, column: 2 }, end: { line: 91, column: 3 } }, type: "if", locations: [{ start: { line: 89, column: 2 }, end: { line: 91, column: 3 } }, { start: { line: 89, column: 2 }, end: { line: 91, column: 3 } }], line: 89 }, "8": { loc: { start: { line: 100, column: 2 }, end: { line: 102, column: 3 } }, type: "if", locations: [{ start: { line: 100, column: 2 }, end: { line: 102, column: 3 } }, { start: { line: 100, column: 2 }, end: { line: 102, column: 3 } }], line: 100 }, "9": { loc: { start: { line: 104, column: 2 }, end: { line: 217, column: 3 } }, type: "switch", locations: [{ start: { line: 106, column: 4 }, end: { line: 119, column: 12 } }, { start: { line: 121, column: 4 }, end: { line: 139, column: 12 } }, { start: { line: 141, column: 4 }, end: { line: 149, column: 12 } }, { start: { line: 151, column: 4 }, end: { line: 197, column: 12 } }, { start: { line: 199, column: 4 }, end: { line: 200, column: 12 } }, { start: { line: 202, column: 4 }, end: { line: 216, column: 12 } }], line: 104 }, "10": { loc: { start: { line: 122, column: 24 }, end: { line: 122, column: 55 } }, type: "binary-expr", locations: [{ start: { line: 122, column: 24 }, end: { line: 122, column: 49 } }, { start: { line: 122, column: 53 }, end: { line: 122, column: 55 } }], line: 122 }, "11": { loc: { start: { line: 131, column: 66 }, end: { line: 131, column: 127 } }, type: "binary-expr", locations: [{ start: { line: 131, column: 66 }, end: { line: 131, column: 112 } }, { start: { line: 131, column: 116 }, end: { line: 131, column: 127 } }], line: 131 }, "12": { loc: { start: { line: 170, column: 28 }, end: { line: 173, column: 7 } }, type: "binary-expr", locations: [{ start: { line: 170, column: 28 }, end: { line: 170, column: 70 } }, { start: { line: 170, column: 74 }, end: { line: 173, column: 7 } }], line: 170 }, "13": { loc: { start: { line: 178, column: 31 }, end: { line: 178, column: 73 } }, type: "binary-expr", locations: [{ start: { line: 178, column: 31 }, end: { line: 178, column: 67 } }, { start: { line: 178, column: 71 }, end: { line: 178, column: 73 } }], line: 178 }, "14": { loc: { start: { line: 184, column: 6 }, end: { line: 190, column: 7 } }, type: "if", locations: [{ start: { line: 184, column: 6 }, end: { line: 190, column: 7 } }, { start: { line: 184, column: 6 }, end: { line: 190, column: 7 } }], line: 184 }, "15": { loc: { start: { line: 186, column: 13 }, end: { line: 190, column: 7 } }, type: "if", locations: [{ start: { line: 186, column: 13 }, end: { line: 190, column: 7 } }, { start: { line: 186, column: 13 }, end: { line: 190, column: 7 } }], line: 186 }, "16": { loc: { start: { line: 193, column: 6 }, end: { line: 195, column: 7 } }, type: "if", locations: [{ start: { line: 193, column: 6 }, end: { line: 195, column: 7 } }, { start: { line: 193, column: 6 }, end: { line: 195, column: 7 } }], line: 193 }, "17": { loc: { start: { line: 203, column: 6 }, end: { line: 205, column: 7 } }, type: "if", locations: [{ start: { line: 203, column: 6 }, end: { line: 205, column: 7 } }, { start: { line: 203, column: 6 }, end: { line: 205, column: 7 } }], line: 203 } }, s: { "0": 0, "1": 0, "2": 0, "3": 0, "4": 0, "5": 0, "6": 0, "7": 0, "8": 0, "9": 0, "10": 0, "11": 0, "12": 0, "13": 0, "14": 0, "15": 0, "16": 0, "17": 0, "18": 0, "19": 0, "20": 0, "21": 0, "22": 0, "23": 0, "24": 0, "25": 0, "26": 0, "27": 0, "28": 0, "29": 0, "30": 0, "31": 0, "32": 0, "33": 0, "34": 0, "35": 0, "36": 0, "37": 0, "38": 0, "39": 0, "40": 0, "41": 0, "42": 0, "43": 0, "44": 0, "45": 0, "46": 0, "47": 0, "48": 0, "49": 0, "50": 0, "51": 0, "52": 0, "53": 0, "54": 0, "55": 0, "56": 0, "57": 0, "58": 0, "59": 0, "60": 0, "61": 0, "62": 0, "63": 0, "64": 0, "65": 0, "66": 0, "67": 0, "68": 0, "69": 0, "70": 0, "71": 0, "72": 0, "73": 0, "74": 0, "75": 0, "76": 0, "77": 0, "78": 0, "79": 0, "80": 0, "81": 0, "82": 0, "83": 0, "84": 0, "85": 0, "86": 0, "87": 0, "88": 0, "89": 0, "90": 0, "91": 0, "92": 0, "93": 0, "94": 0, "95": 0, "96": 0, "97": 0, "98": 0, "99": 0, "100": 0, "101": 0, "102": 0, "103": 0, "104": 0, "105": 0, "106": 0, "107": 0, "108": 0, "109": 0, "110": 0, "111": 0, "112": 0, "113": 0, "114": 0, "115": 0, "116": 0, "117": 0, "118": 0, "119": 0 }, f: { "0": 0, "1": 0, "2": 0, "3": 0, "4": 0, "5": 0, "6": 0, "7": 0, "8": 0, "9": 0, "10": 0, "11": 0, "12": 0 }, b: { "0": [0, 0], "1": [0, 0], "2": [0, 0], "3": [0, 0], "4": [0, 0], "5": [0, 0], "6": [0, 0], "7": [0, 0], "8": [0, 0], "9": [0, 0, 0, 0, 0, 0], "10": [0, 0], "11": [0, 0], "12": [0, 0], "13": [0, 0], "14": [0, 0], "15": [0, 0], "16": [0, 0], "17": [0, 0] }, inputSourceMap: { version: 3, sources: ["lib/data/sagas/index.js"], names: ["scope", "declare", "saga", "actions", "utils", "debug", "nodeId", "pointer", "parentId", "sourceId", "node", "tickSaga", "tree", "id", "treeId", "data", "views", "ast", "decode", "decoder", "scopes", "info", "definitions", "inlined", "currentAssignments", "proc", "assignments", "currentDepth", "solidity", "current", "functionDepth", "stack", "next", "state", "top", "length", "parameters", "returnParameters", "storageVars", "atLastInstructionForSourceRange", "nodeType", "map", "p", "i", "concat", "reverse", "jsonpointer", "get", "augmentWithDepth", "reduce", "acc", "assignment", "assign", "variables", "slot", "index", "WORD_SIZE", "allocation", "allocateDeclarations", "children", "storage", "ref", "varId", "baseExpression", "referencedDeclaration", "baseDeclarationId", "indexExpression", "indexId", "augmentedDeclarationId", "augmentedIndexId", "baseAssignment", "baseDefinition", "definition", "indexAssignment", "indexValue", "typeClass", "toBytes", "hexValue", "undefined", "mapKey", "typeDescriptions", "literal", "TICK", "e"], mappings: "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", file: "index.js", sourceRoot: "/Users/gnidan/src/work/truffle/packages/truffle-debugger", sourcesContent: ["import debugModule from \"debug\";\nconst debug = debugModule(\"debugger:data:sagas\");\n\nimport { put, takeEvery, select } from \"redux-saga/effects\";\nimport jsonpointer from \"json-pointer\";\n\nimport { prefixName } from \"lib/helpers\";\n\nimport { TICK } from \"lib/trace/actions\";\nimport * as actions from \"../actions\";\n\nimport data from \"../selectors\";\nimport solidity from \"lib/solidity/selectors\";\n\nimport { WORD_SIZE } from \"lib/data/decode/utils\";\nimport * as utils from \"lib/data/decode/utils\";\n\nexport function *scope(nodeId, pointer, parentId, sourceId) {\n  yield put(actions.scope(nodeId, pointer, parentId, sourceId));\n}\n\nexport function *declare(node) {\n  yield put(actions.declare(node));\n}\n\nfunction *tickSaga() {\n  let {\n    tree,\n    id: treeId,\n    node,\n    pointer\n  } = yield select(data.views.ast);\n\n  let decode = yield select(data.views.decoder);\n  let scopes = yield select(data.info.scopes);\n  let definitions = yield select(data.views.scopes.inlined);\n  let currentAssignments = yield select(data.proc.assignments);\n  let currentDepth = yield select(solidity.current.functionDepth);\n\n  let stack = yield select(data.next.state.stack);\n  if (!stack) {\n    return;\n  }\n\n  let top = stack.length - 1;\n  var parameters, returnParameters, assignments, storageVars;\n\n  if (!node) {\n    return;\n  }\n\n  // stack is only ready for interpretation after the last step of each\n  // source range\n  //\n  // the data module always looks at the result of a particular opcode\n  // (i.e., the following trace step's stack/memory/storage), so this\n  // asserts that the _current_ operation is the final one before\n  // proceeding\n  if (!(yield select(data.views.atLastInstructionForSourceRange))) {\n    return;\n  }\n\n  switch (node.nodeType) {\n\n    case \"FunctionDefinition\":\n      parameters = node.parameters.parameters\n        .map( (p, i) => `${pointer}/parameters/parameters/${i}` );\n\n      returnParameters = node.returnParameters.parameters\n        .map( (p, i) => `${pointer}/returnParameters/parameters/${i}` );\n\n      assignments = returnParameters.concat(parameters).reverse()\n        .map( (pointer) => jsonpointer.get(tree, pointer).id )\n        //note: depth may be off by 1 but it doesn't matter\n        .map( (id, i) => ({ [utils.augmentWithDepth(id, currentDepth)]:\n                {\"stack\": top - i} }) )\n        .reduce( (acc, assignment) => Object.assign(acc, assignment), {} );\n      debug(\"Function definition case\");\n      debug(\"currentAssignments %O\", currentAssignments);\n      debug(\"assignments %O\", assignments);\n\n      yield put(actions.assign(treeId, assignments));\n      break;\n\n    case \"ContractDefinition\":\n      let storageVars = scopes[node.id].variables || [];\n      let slot = 0;\n      let index = WORD_SIZE - 1;  // cause lower-order\n      debug(\"storage vars %o\", storageVars);\n\n      let allocation = utils.allocateDeclarations(storageVars, definitions);\n      debug(\"Contract definition case\");\n      debug(\"allocation %O\", allocation);\n      assignments = Object.assign(\n        {}, ...Object.entries(allocation.children)\n          .map( ([id, storage]) => ({\n            [utils.augmentWithDepth(id)]: {\n              ...(currentAssignments[utils.augmentWithDepth(id)] || \n                { ref: {} }).ref,\n              storage\n            }\n          }) )\n      );\n      debug(\"currentAssignments %O\", currentAssignments);\n      debug(\"assignments %O\", assignments);\n\n      yield put(actions.assign(treeId, assignments));\n      break;\n\n    case \"VariableDeclaration\":\n      let varId = jsonpointer.get(tree, pointer).id;\n      debug(\"Variable declaration case\");\n      debug(\"currentAssignments %O\", currentAssignments);\n      debug(\"currentDepth %d varId %d\", currentDepth, varId);\n      yield put(actions.assign(treeId, {\n        [utils.augmentWithDepth(varId, currentDepth)]: {\"stack\": top}\n      }));\n      break;\n\n    case \"IndexAccess\":\n      // to track `mapping` types known indexes\n      let {\n        baseExpression: {\n          referencedDeclaration: baseDeclarationId,\n        },\n        indexExpression: {\n          id: indexId,\n        }\n      } = node;\n      //augment declaration Id w/0 to indicate storage\n      let augmentedDeclarationId = utils.augmentWithDepth(baseDeclarationId);\n      //indices, meanwhile, use depth as usual\n      let augmentedIndexId = utils.augmentWithDepth(indexId, currentDepth);\n      debug(\"Index access case\");\n      debug(\"currentAssignments %O\", currentAssignments);\n      debug(\"augmentedDeclarationId %s\", augmentedDeclarationId)\n      debug(\"augmentedIndexId %s\", augmentedIndexId)\n\n      let baseAssignment = (currentAssignments[augmentedDeclarationId] || {\n        //mappings are always global\n        ref: {}\n      }).ref;\n      debug(\"baseAssignment %O\", baseAssignment);\n\n      let baseDefinition = definitions[baseDeclarationId].definition;\n\n      const indexAssignment = (currentAssignments[augmentedIndexId] || {}).ref;\n      debug(\"indexAssignment %O\", indexAssignment);\n      // HACK because string literal AST nodes are not sourcemapped to directly\n      // value appears to be available in `node.indexExpression.hexValue`\n      // [observed with solc v0.4.24]\n      let indexValue;\n      if (indexAssignment) {\n        indexValue = decode(node.indexExpression, indexAssignment)\n      } else if (utils.typeClass(node.indexExpression) == \"stringliteral\") {\n        indexValue = decode(node.indexExpression, {\n          \"literal\": utils.toBytes(node.indexExpression.hexValue)\n        })\n      }\n\n      debug(\"index value %O\", indexValue);\n      if (indexValue != undefined) {\n        yield put(actions.mapKey(augmentedDeclarationId, indexValue));\n      }\n\n      break;\n\n    case \"Assignment\":\n      break;\n\n    default:\n      if (node.typeDescriptions == undefined) {\n        break;\n      }\n\n      debug(\"decoding expression value %O\", node.typeDescriptions);\n      let literal = stack[top];\n\n      debug(\"default case\");\n      debug(\"currentAssignments %O\", currentAssignments);\n      debug(\"currentDepth %d node.id %d\", currentDepth, node.id);\n      yield put(actions.assign(treeId, {\n        [utils.augmentWithDepth(node.id, currentDepth)]: { literal }\n      }));\n      break;\n  }\n}\n\nexport function* saga () {\n  yield takeEvery(TICK, function* () {\n    try {\n      yield *tickSaga();\n    } catch (e) {\n      debug(e);\n    }\n  });\n}\n\nexport default prefixName(\"data\", saga);\n"] }, _coverageSchema: "332fd63041d2c1bcb487cc26dd0d5f7d97098a6c" },
      coverage = global[gcv] || (global[gcv] = {});if (coverage[path] && coverage[path].hash === hash) {
    return coverage[path];
  }coverageData.hash = hash;return coverage[path] = coverageData;
}();cov_lonpljgf9.s[0]++;Object.defineProperty(exports, "__esModule", { value: true });var _extends2 = (cov_lonpljgf9.s[1]++, __webpack_require__(4));var _extends3 = (cov_lonpljgf9.s[2]++, _interopRequireDefault(_extends2));var _entries = (cov_lonpljgf9.s[3]++, __webpack_require__(1));var _entries2 = (cov_lonpljgf9.s[4]++, _interopRequireDefault(_entries));var _assign = (cov_lonpljgf9.s[5]++, __webpack_require__(5));var _assign2 = (cov_lonpljgf9.s[6]++, _interopRequireDefault(_assign));cov_lonpljgf9.s[7]++;exports.scope = scope;cov_lonpljgf9.s[8]++;exports.declare = declare;cov_lonpljgf9.s[9]++;exports.saga = saga;var _debug = (cov_lonpljgf9.s[10]++, __webpack_require__(0));var _debug2 = (cov_lonpljgf9.s[11]++, _interopRequireDefault(_debug));var _effects = (cov_lonpljgf9.s[12]++, __webpack_require__(10));var _jsonPointer = (cov_lonpljgf9.s[13]++, __webpack_require__(24));var _jsonPointer2 = (cov_lonpljgf9.s[14]++, _interopRequireDefault(_jsonPointer));var _helpers = (cov_lonpljgf9.s[15]++, __webpack_require__(6));var _actions = (cov_lonpljgf9.s[16]++, __webpack_require__(21));var _actions2 = (cov_lonpljgf9.s[17]++, __webpack_require__(32));var actions = (cov_lonpljgf9.s[18]++, _interopRequireWildcard(_actions2));var _selectors = (cov_lonpljgf9.s[19]++, __webpack_require__(27));var _selectors2 = (cov_lonpljgf9.s[20]++, _interopRequireDefault(_selectors));var _selectors3 = (cov_lonpljgf9.s[21]++, __webpack_require__(2));var _selectors4 = (cov_lonpljgf9.s[22]++, _interopRequireDefault(_selectors3));var _utils = (cov_lonpljgf9.s[23]++, __webpack_require__(11));var utils = (cov_lonpljgf9.s[24]++, _interopRequireWildcard(_utils));function _interopRequireWildcard(obj) {
  cov_lonpljgf9.f[0]++;cov_lonpljgf9.s[25]++;if ((cov_lonpljgf9.b[1][0]++, obj) && (cov_lonpljgf9.b[1][1]++, obj.__esModule)) {
    cov_lonpljgf9.b[0][0]++;cov_lonpljgf9.s[26]++;return obj;
  } else {
    cov_lonpljgf9.b[0][1]++;var newObj = (cov_lonpljgf9.s[27]++, {});cov_lonpljgf9.s[28]++;if (obj != null) {
      cov_lonpljgf9.b[2][0]++;cov_lonpljgf9.s[29]++;for (var key in obj) {
        cov_lonpljgf9.s[30]++;if (Object.prototype.hasOwnProperty.call(obj, key)) {
          cov_lonpljgf9.b[3][0]++;cov_lonpljgf9.s[31]++;newObj[key] = obj[key];
        } else {
          cov_lonpljgf9.b[3][1]++;
        }
      }
    } else {
      cov_lonpljgf9.b[2][1]++;
    }cov_lonpljgf9.s[32]++;newObj.default = obj;cov_lonpljgf9.s[33]++;return newObj;
  }
}function _interopRequireDefault(obj) {
  cov_lonpljgf9.f[1]++;cov_lonpljgf9.s[34]++;return (cov_lonpljgf9.b[5][0]++, obj) && (cov_lonpljgf9.b[5][1]++, obj.__esModule) ? (cov_lonpljgf9.b[4][0]++, obj) : (cov_lonpljgf9.b[4][1]++, { default: obj });
}const debug = (cov_lonpljgf9.s[35]++, (0, _debug2.default)("debugger:data:sagas"));function* scope(nodeId, pointer, parentId, sourceId) {
  cov_lonpljgf9.f[2]++;cov_lonpljgf9.s[36]++;yield (0, _effects.put)(actions.scope(nodeId, pointer, parentId, sourceId));
}function* declare(node) {
  cov_lonpljgf9.f[3]++;cov_lonpljgf9.s[37]++;yield (0, _effects.put)(actions.declare(node));
}function* tickSaga() {
  cov_lonpljgf9.f[4]++;let { tree, id: treeId, node, pointer } = (cov_lonpljgf9.s[38]++, yield (0, _effects.select)(_selectors2.default.views.ast));let decode = (cov_lonpljgf9.s[39]++, yield (0, _effects.select)(_selectors2.default.views.decoder));let scopes = (cov_lonpljgf9.s[40]++, yield (0, _effects.select)(_selectors2.default.info.scopes));let definitions = (cov_lonpljgf9.s[41]++, yield (0, _effects.select)(_selectors2.default.views.scopes.inlined));let currentAssignments = (cov_lonpljgf9.s[42]++, yield (0, _effects.select)(_selectors2.default.proc.assignments));let currentDepth = (cov_lonpljgf9.s[43]++, yield (0, _effects.select)(_selectors4.default.current.functionDepth));let stack = (cov_lonpljgf9.s[44]++, yield (0, _effects.select)(_selectors2.default.next.state.stack));cov_lonpljgf9.s[45]++;if (!stack) {
    cov_lonpljgf9.b[6][0]++;cov_lonpljgf9.s[46]++;return;
  } else {
    cov_lonpljgf9.b[6][1]++;
  }let top = (cov_lonpljgf9.s[47]++, stack.length - 1);var parameters, returnParameters, assignments, storageVars;cov_lonpljgf9.s[48]++;if (!node) {
    cov_lonpljgf9.b[7][0]++;cov_lonpljgf9.s[49]++;return;
  } else {
    cov_lonpljgf9.b[7][1]++;
  }cov_lonpljgf9.s[50]++;if (!(yield (0, _effects.select)(_selectors2.default.views.atLastInstructionForSourceRange))) {
    cov_lonpljgf9.b[8][0]++;cov_lonpljgf9.s[51]++;return;
  } else {
    cov_lonpljgf9.b[8][1]++;
  }cov_lonpljgf9.s[52]++;switch (node.nodeType) {case "FunctionDefinition":
      cov_lonpljgf9.b[9][0]++;cov_lonpljgf9.s[53]++;parameters = node.parameters.parameters.map((p, i) => {
        cov_lonpljgf9.f[5]++;cov_lonpljgf9.s[54]++;return `${pointer}/parameters/parameters/${i}`;
      });cov_lonpljgf9.s[55]++;returnParameters = node.returnParameters.parameters.map((p, i) => {
        cov_lonpljgf9.f[6]++;cov_lonpljgf9.s[56]++;return `${pointer}/returnParameters/parameters/${i}`;
      });cov_lonpljgf9.s[57]++;assignments = returnParameters.concat(parameters).reverse().map(pointer => {
        cov_lonpljgf9.f[7]++;cov_lonpljgf9.s[58]++;return _jsonPointer2.default.get(tree, pointer).id;
      }).map((id, i) => {
        cov_lonpljgf9.f[8]++;cov_lonpljgf9.s[59]++;return { [utils.augmentWithDepth(id, currentDepth)]: { "stack": top - i } };
      }).reduce((acc, assignment) => {
        cov_lonpljgf9.f[9]++;cov_lonpljgf9.s[60]++;return (0, _assign2.default)(acc, assignment);
      }, {});cov_lonpljgf9.s[61]++;debug("Function definition case");cov_lonpljgf9.s[62]++;debug("currentAssignments %O", currentAssignments);cov_lonpljgf9.s[63]++;debug("assignments %O", assignments);cov_lonpljgf9.s[64]++;yield (0, _effects.put)(actions.assign(treeId, assignments));cov_lonpljgf9.s[65]++;break;case "ContractDefinition":
      cov_lonpljgf9.b[9][1]++;let storageVars = (cov_lonpljgf9.s[66]++, (cov_lonpljgf9.b[10][0]++, scopes[node.id].variables) || (cov_lonpljgf9.b[10][1]++, []));let slot = (cov_lonpljgf9.s[67]++, 0);let index = (cov_lonpljgf9.s[68]++, _utils.WORD_SIZE - 1);cov_lonpljgf9.s[69]++;debug("storage vars %o", storageVars);let allocation = (cov_lonpljgf9.s[70]++, utils.allocateDeclarations(storageVars, definitions));cov_lonpljgf9.s[71]++;debug("Contract definition case");cov_lonpljgf9.s[72]++;debug("allocation %O", allocation);cov_lonpljgf9.s[73]++;assignments = (0, _assign2.default)({}, ...(0, _entries2.default)(allocation.children).map(([id, storage]) => {
        cov_lonpljgf9.f[10]++;cov_lonpljgf9.s[74]++;return { [utils.augmentWithDepth(id)]: (0, _extends3.default)({}, ((cov_lonpljgf9.b[11][0]++, currentAssignments[utils.augmentWithDepth(id)]) || (cov_lonpljgf9.b[11][1]++, { ref: {} })).ref, { storage }) };
      }));cov_lonpljgf9.s[75]++;debug("currentAssignments %O", currentAssignments);cov_lonpljgf9.s[76]++;debug("assignments %O", assignments);cov_lonpljgf9.s[77]++;yield (0, _effects.put)(actions.assign(treeId, assignments));cov_lonpljgf9.s[78]++;break;case "VariableDeclaration":
      cov_lonpljgf9.b[9][2]++;let varId = (cov_lonpljgf9.s[79]++, _jsonPointer2.default.get(tree, pointer).id);cov_lonpljgf9.s[80]++;debug("Variable declaration case");cov_lonpljgf9.s[81]++;debug("currentAssignments %O", currentAssignments);cov_lonpljgf9.s[82]++;debug("currentDepth %d varId %d", currentDepth, varId);cov_lonpljgf9.s[83]++;yield (0, _effects.put)(actions.assign(treeId, { [utils.augmentWithDepth(varId, currentDepth)]: { "stack": top } }));cov_lonpljgf9.s[84]++;break;case "IndexAccess":
      cov_lonpljgf9.b[9][3]++;let { baseExpression: { referencedDeclaration: baseDeclarationId }, indexExpression: { id: indexId } } = (cov_lonpljgf9.s[85]++, node);let augmentedDeclarationId = (cov_lonpljgf9.s[86]++, utils.augmentWithDepth(baseDeclarationId));let augmentedIndexId = (cov_lonpljgf9.s[87]++, utils.augmentWithDepth(indexId, currentDepth));cov_lonpljgf9.s[88]++;debug("Index access case");cov_lonpljgf9.s[89]++;debug("currentAssignments %O", currentAssignments);cov_lonpljgf9.s[90]++;debug("augmentedDeclarationId %s", augmentedDeclarationId);cov_lonpljgf9.s[91]++;debug("augmentedIndexId %s", augmentedIndexId);let baseAssignment = (cov_lonpljgf9.s[92]++, ((cov_lonpljgf9.b[12][0]++, currentAssignments[augmentedDeclarationId]) || (cov_lonpljgf9.b[12][1]++, { ref: {} })).ref);cov_lonpljgf9.s[93]++;debug("baseAssignment %O", baseAssignment);let baseDefinition = (cov_lonpljgf9.s[94]++, definitions[baseDeclarationId].definition);const indexAssignment = (cov_lonpljgf9.s[95]++, ((cov_lonpljgf9.b[13][0]++, currentAssignments[augmentedIndexId]) || (cov_lonpljgf9.b[13][1]++, {})).ref);cov_lonpljgf9.s[96]++;debug("indexAssignment %O", indexAssignment);let indexValue;cov_lonpljgf9.s[97]++;if (indexAssignment) {
        cov_lonpljgf9.b[14][0]++;cov_lonpljgf9.s[98]++;indexValue = decode(node.indexExpression, indexAssignment);
      } else {
        cov_lonpljgf9.b[14][1]++;cov_lonpljgf9.s[99]++;if (utils.typeClass(node.indexExpression) == "stringliteral") {
          cov_lonpljgf9.b[15][0]++;cov_lonpljgf9.s[100]++;indexValue = decode(node.indexExpression, { "literal": utils.toBytes(node.indexExpression.hexValue) });
        } else {
          cov_lonpljgf9.b[15][1]++;
        }
      }cov_lonpljgf9.s[101]++;debug("index value %O", indexValue);cov_lonpljgf9.s[102]++;if (indexValue != undefined) {
        cov_lonpljgf9.b[16][0]++;cov_lonpljgf9.s[103]++;yield (0, _effects.put)(actions.mapKey(augmentedDeclarationId, indexValue));
      } else {
        cov_lonpljgf9.b[16][1]++;
      }cov_lonpljgf9.s[104]++;break;case "Assignment":
      cov_lonpljgf9.b[9][4]++;cov_lonpljgf9.s[105]++;break;default:
      cov_lonpljgf9.b[9][5]++;cov_lonpljgf9.s[106]++;if (node.typeDescriptions == undefined) {
        cov_lonpljgf9.b[17][0]++;cov_lonpljgf9.s[107]++;break;
      } else {
        cov_lonpljgf9.b[17][1]++;
      }cov_lonpljgf9.s[108]++;debug("decoding expression value %O", node.typeDescriptions);let literal = (cov_lonpljgf9.s[109]++, stack[top]);cov_lonpljgf9.s[110]++;debug("default case");cov_lonpljgf9.s[111]++;debug("currentAssignments %O", currentAssignments);cov_lonpljgf9.s[112]++;debug("currentDepth %d node.id %d", currentDepth, node.id);cov_lonpljgf9.s[113]++;yield (0, _effects.put)(actions.assign(treeId, { [utils.augmentWithDepth(node.id, currentDepth)]: { literal } }));cov_lonpljgf9.s[114]++;break;}
}function* saga() {
  cov_lonpljgf9.f[11]++;cov_lonpljgf9.s[115]++;yield (0, _effects.takeEvery)(_actions.TICK, function* () {
    cov_lonpljgf9.f[12]++;cov_lonpljgf9.s[116]++;try {
      cov_lonpljgf9.s[117]++;yield* tickSaga();
    } catch (e) {
      cov_lonpljgf9.s[118]++;debug(e);
    }
  });
}cov_lonpljgf9.s[119]++;exports.default = (0, _helpers.prefixName)("data", saga);

/***/ }),
/* 32 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var cov_1fosgkqbd2 = function () {
  var path = "/Users/gnidan/src/work/truffle/packages/truffle-debugger/lib/data/actions/index.js",
      hash = "9ddfbcd244f6070185ac27cff2a5c8b6cdef3716",
      Function = function () {}.constructor,
      global = new Function('return this')(),
      gcv = "__coverage__",
      coverageData = { path: "/Users/gnidan/src/work/truffle/packages/truffle-debugger/lib/data/actions/index.js", statementMap: { "0": { start: { line: 3, column: 0 }, end: { line: 5, column: 3 } }, "1": { start: { line: 6, column: 0 }, end: { line: 6, column: 22 } }, "2": { start: { line: 7, column: 0 }, end: { line: 7, column: 26 } }, "3": { start: { line: 8, column: 0 }, end: { line: 8, column: 24 } }, "4": { start: { line: 9, column: 0 }, end: { line: 9, column: 24 } }, "5": { start: { line: 10, column: 14 }, end: { line: 10, column: 37 } }, "6": { start: { line: 12, column: 2 }, end: { line: 15, column: 4 } }, "7": { start: { line: 18, column: 16 }, end: { line: 18, column: 52 } }, "8": { start: { line: 20, column: 2 }, end: { line: 23, column: 4 } }, "9": { start: { line: 26, column: 15 }, end: { line: 26, column: 40 } }, "10": { start: { line: 28, column: 2 }, end: { line: 31, column: 4 } }, "11": { start: { line: 34, column: 16 }, end: { line: 34, column: 43 } }, "12": { start: { line: 36, column: 2 }, end: { line: 39, column: 4 } } }, fnMap: { "0": { name: "scope", decl: { start: { line: 11, column: 9 }, end: { line: 11, column: 14 } }, loc: { start: { line: 11, column: 48 }, end: { line: 16, column: 1 } }, line: 11 }, "1": { name: "declare", decl: { start: { line: 19, column: 9 }, end: { line: 19, column: 16 } }, loc: { start: { line: 19, column: 23 }, end: { line: 24, column: 1 } }, line: 19 }, "2": { name: "assign", decl: { start: { line: 27, column: 9 }, end: { line: 27, column: 15 } }, loc: { start: { line: 27, column: 38 }, end: { line: 32, column: 1 } }, line: 27 }, "3": { name: "mapKey", decl: { start: { line: 35, column: 9 }, end: { line: 35, column: 15 } }, loc: { start: { line: 35, column: 25 }, end: { line: 40, column: 1 } }, line: 35 } }, branchMap: {}, s: { "0": 0, "1": 0, "2": 0, "3": 0, "4": 0, "5": 0, "6": 0, "7": 0, "8": 0, "9": 0, "10": 0, "11": 0, "12": 0 }, f: { "0": 0, "1": 0, "2": 0, "3": 0 }, b: {}, inputSourceMap: { version: 3, sources: ["lib/data/actions/index.js"], names: ["scope", "declare", "assign", "mapKey", "SCOPE", "id", "pointer", "parentId", "sourceId", "type", "DECLARE", "node", "ASSIGN", "context", "assignments", "MAP_KEY", "key"], mappings: ";;;;;QACgBA,K,GAAAA,K;QAQAC,O,GAAAA,O;QAQAC,M,GAAAA,M;QAQAC,M,GAAAA,M;AAzBT,MAAMC,wBAAQ,OAAd;AACA,SAASJ,KAAT,CAAeK,EAAf,EAAmBC,OAAnB,EAA4BC,QAA5B,EAAsCC,QAAtC,EAAgD;AACrD,SAAO;AACLC,UAAML,KADD;AAELC,MAFK,EAEDC,OAFC,EAEQC,QAFR,EAEkBC;AAFlB,GAAP;AAID;;AAEM,MAAME,4BAAU,kBAAhB;AACA,SAAST,OAAT,CAAiBU,IAAjB,EAAuB;AAC5B,SAAO;AACLF,UAAMC,OADD;AAELC;AAFK,GAAP;AAID;;AAEM,MAAMC,0BAAS,QAAf;AACA,SAASV,MAAT,CAAgBW,OAAhB,EAAyBC,WAAzB,EAAsC;AAC3C,SAAO;AACLL,UAAMG,MADD;AAELC,WAFK,EAEIC;AAFJ,GAAP;AAID;;AAEM,MAAMC,4BAAU,SAAhB;AACA,SAASZ,MAAT,CAAgBE,EAAhB,EAAoBW,GAApB,EAAyB;AAC9B,SAAO;AACLP,UAAMM,OADD;AAELV,MAFK,EAEDW;AAFC,GAAP;AAID", file: "index.js", sourceRoot: "/Users/gnidan/src/work/truffle/packages/truffle-debugger", sourcesContent: ["export const SCOPE = \"SCOPE\";\nexport function scope(id, pointer, parentId, sourceId) {\n  return {\n    type: SCOPE,\n    id, pointer, parentId, sourceId\n  }\n}\n\nexport const DECLARE = \"DECLARE_VARIABLE\";\nexport function declare(node) {\n  return {\n    type: DECLARE,\n    node\n  }\n}\n\nexport const ASSIGN = \"ASSIGN\";\nexport function assign(context, assignments) {\n  return {\n    type: ASSIGN,\n    context, assignments\n  };\n}\n\nexport const MAP_KEY = \"MAP_KEY\";\nexport function mapKey(id, key) {\n  return {\n    type: MAP_KEY,\n    id, key\n  };\n}\n"] }, _coverageSchema: "332fd63041d2c1bcb487cc26dd0d5f7d97098a6c" },
      coverage = global[gcv] || (global[gcv] = {});if (coverage[path] && coverage[path].hash === hash) {
    return coverage[path];
  }coverageData.hash = hash;return coverage[path] = coverageData;
}();cov_1fosgkqbd2.s[0]++;Object.defineProperty(exports, "__esModule", { value: true });cov_1fosgkqbd2.s[1]++;exports.scope = scope;cov_1fosgkqbd2.s[2]++;exports.declare = declare;cov_1fosgkqbd2.s[3]++;exports.assign = assign;cov_1fosgkqbd2.s[4]++;exports.mapKey = mapKey;const SCOPE = (cov_1fosgkqbd2.s[5]++, exports.SCOPE = "SCOPE");function scope(id, pointer, parentId, sourceId) {
  cov_1fosgkqbd2.f[0]++;cov_1fosgkqbd2.s[6]++;return { type: SCOPE, id, pointer, parentId, sourceId };
}const DECLARE = (cov_1fosgkqbd2.s[7]++, exports.DECLARE = "DECLARE_VARIABLE");function declare(node) {
  cov_1fosgkqbd2.f[1]++;cov_1fosgkqbd2.s[8]++;return { type: DECLARE, node };
}const ASSIGN = (cov_1fosgkqbd2.s[9]++, exports.ASSIGN = "ASSIGN");function assign(context, assignments) {
  cov_1fosgkqbd2.f[2]++;cov_1fosgkqbd2.s[10]++;return { type: ASSIGN, context, assignments };
}const MAP_KEY = (cov_1fosgkqbd2.s[11]++, exports.MAP_KEY = "MAP_KEY");function mapKey(id, key) {
  cov_1fosgkqbd2.f[3]++;cov_1fosgkqbd2.s[12]++;return { type: MAP_KEY, id, key };
}

/***/ }),
/* 33 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var cov_1yv2hwn7tg = function () {
  var path = "/Users/gnidan/src/work/truffle/packages/truffle-debugger/lib/trace/sagas/index.js",
      hash = "7d01b266f31a03e7ce05da9ed53f2cd9f5ba30e7",
      Function = function () {}.constructor,
      global = new Function('return this')(),
      gcv = "__coverage__",
      coverageData = { path: "/Users/gnidan/src/work/truffle/packages/truffle-debugger/lib/trace/sagas/index.js", statementMap: { "0": { start: { line: 3, column: 0 }, end: { line: 5, column: 3 } }, "1": { start: { line: 7, column: 11 }, end: { line: 7, column: 47 } }, "2": { start: { line: 9, column: 12 }, end: { line: 9, column: 40 } }, "3": { start: { line: 11, column: 0 }, end: { line: 11, column: 26 } }, "4": { start: { line: 12, column: 0 }, end: { line: 12, column: 20 } }, "5": { start: { line: 13, column: 0 }, end: { line: 13, column: 36 } }, "6": { start: { line: 14, column: 0 }, end: { line: 14, column: 20 } }, "7": { start: { line: 16, column: 13 }, end: { line: 16, column: 29 } }, "8": { start: { line: 18, column: 14 }, end: { line: 18, column: 44 } }, "9": { start: { line: 20, column: 15 }, end: { line: 20, column: 44 } }, "10": { start: { line: 22, column: 15 }, end: { line: 22, column: 37 } }, "11": { start: { line: 24, column: 15 }, end: { line: 24, column: 36 } }, "12": { start: { line: 26, column: 14 }, end: { line: 26, column: 47 } }, "13": { start: { line: 28, column: 17 }, end: { line: 28, column: 40 } }, "14": { start: { line: 30, column: 18 }, end: { line: 30, column: 52 } }, "15": { start: { line: 32, column: 40 }, end: { line: 32, column: 267 } }, "16": { start: { line: 32, column: 69 }, end: { line: 32, column: 80 } }, "17": { start: { line: 32, column: 103 }, end: { line: 32, column: 105 } }, "18": { start: { line: 32, column: 107 }, end: { line: 32, column: 228 } }, "19": { start: { line: 32, column: 126 }, end: { line: 32, column: 226 } }, "20": { start: { line: 32, column: 149 }, end: { line: 32, column: 224 } }, "21": { start: { line: 32, column: 201 }, end: { line: 32, column: 224 } }, "22": { start: { line: 32, column: 229 }, end: { line: 32, column: 250 } }, "23": { start: { line: 32, column: 251 }, end: { line: 32, column: 265 } }, "24": { start: { line: 34, column: 39 }, end: { line: 34, column: 93 } }, "25": { start: { line: 36, column: 14 }, end: { line: 36, column: 58 } }, "26": { start: { line: 39, column: 18 }, end: { line: 39, column: 62 } }, "27": { start: { line: 41, column: 18 }, end: { line: 41, column: 169 } }, "28": { start: { line: 41, column: 65 }, end: { line: 41, column: 101 } }, "29": { start: { line: 41, column: 122 }, end: { line: 41, column: 166 } }, "30": { start: { line: 43, column: 2 }, end: { line: 43, column: 63 } }, "31": { start: { line: 47, column: 2 }, end: { line: 47, column: 42 } }, "32": { start: { line: 49, column: 2 }, end: { line: 49, column: 41 } }, "33": { start: { line: 53, column: 18 }, end: { line: 53, column: 80 } }, "34": { start: { line: 54, column: 2 }, end: { line: 54, column: 36 } }, "35": { start: { line: 55, column: 14 }, end: { line: 55, column: 67 } }, "36": { start: { line: 56, column: 2 }, end: { line: 56, column: 41 } }, "37": { start: { line: 58, column: 2 }, end: { line: 65, column: 3 } }, "38": { start: { line: 59, column: 4 }, end: { line: 59, column: 26 } }, "39": { start: { line: 61, column: 4 }, end: { line: 61, column: 44 } }, "40": { start: { line: 62, column: 4 }, end: { line: 62, column: 22 } }, "41": { start: { line: 64, column: 4 }, end: { line: 64, column: 16 } }, "42": { start: { line: 67, column: 2 }, end: { line: 75, column: 3 } }, "43": { start: { line: 68, column: 4 }, end: { line: 68, column: 26 } }, "44": { start: { line: 70, column: 4 }, end: { line: 70, column: 44 } }, "45": { start: { line: 71, column: 4 }, end: { line: 71, column: 22 } }, "46": { start: { line: 74, column: 4 }, end: { line: 74, column: 48 } }, "47": { start: { line: 79, column: 2 }, end: { line: 79, column: 49 } }, "48": { start: { line: 83, column: 2 }, end: { line: 83, column: 52 } }, "49": { start: { line: 85, column: 22 }, end: { line: 85, column: 73 } }, "50": { start: { line: 86, column: 2 }, end: { line: 86, column: 30 } }, "51": { start: { line: 88, column: 2 }, end: { line: 88, column: 19 } }, "52": { start: { line: 93, column: 2 }, end: { line: 93, column: 24 } }, "53": { start: { line: 95, column: 2 }, end: { line: 95, column: 52 } }, "54": { start: { line: 98, column: 0 }, end: { line: 98, column: 58 } } }, fnMap: { "0": { name: "_interopRequireWildcard", decl: { start: { line: 32, column: 9 }, end: { line: 32, column: 32 } }, loc: { start: { line: 32, column: 38 }, end: { line: 32, column: 269 } }, line: 32 }, "1": { name: "_interopRequireDefault", decl: { start: { line: 34, column: 9 }, end: { line: 34, column: 31 } }, loc: { start: { line: 34, column: 37 }, end: { line: 34, column: 95 } }, line: 34 }, "2": { name: "waitForTrace", decl: { start: { line: 38, column: 10 }, end: { line: 38, column: 22 } }, loc: { start: { line: 38, column: 25 }, end: { line: 44, column: 1 } }, line: 38 }, "3": { name: "(anonymous_3)", decl: { start: { line: 41, column: 53 }, end: { line: 41, column: 54 } }, loc: { start: { line: 41, column: 65 }, end: { line: 41, column: 101 } }, line: 41 }, "4": { name: "(anonymous_4)", decl: { start: { line: 41, column: 107 }, end: { line: 41, column: 108 } }, loc: { start: { line: 41, column: 122 }, end: { line: 41, column: 166 } }, line: 41 }, "5": { name: "advance", decl: { start: { line: 46, column: 10 }, end: { line: 46, column: 17 } }, loc: { start: { line: 46, column: 20 }, end: { line: 50, column: 1 } }, line: 46 }, "6": { name: "next", decl: { start: { line: 52, column: 10 }, end: { line: 52, column: 14 } }, loc: { start: { line: 52, column: 17 }, end: { line: 76, column: 1 } }, line: 52 }, "7": { name: "wait", decl: { start: { line: 78, column: 10 }, end: { line: 78, column: 14 } }, loc: { start: { line: 78, column: 17 }, end: { line: 80, column: 1 } }, line: 78 }, "8": { name: "processTrace", decl: { start: { line: 82, column: 10 }, end: { line: 82, column: 22 } }, loc: { start: { line: 82, column: 30 }, end: { line: 89, column: 1 } }, line: 82 }, "9": { name: "saga", decl: { start: { line: 91, column: 10 }, end: { line: 91, column: 14 } }, loc: { start: { line: 91, column: 17 }, end: { line: 96, column: 1 } }, line: 91 } }, branchMap: { "0": { loc: { start: { line: 32, column: 40 }, end: { line: 32, column: 267 } }, type: "if", locations: [{ start: { line: 32, column: 40 }, end: { line: 32, column: 267 } }, { start: { line: 32, column: 40 }, end: { line: 32, column: 267 } }], line: 32 }, "1": { loc: { start: { line: 32, column: 44 }, end: { line: 32, column: 65 } }, type: "binary-expr", locations: [{ start: { line: 32, column: 44 }, end: { line: 32, column: 47 } }, { start: { line: 32, column: 51 }, end: { line: 32, column: 65 } }], line: 32 }, "2": { loc: { start: { line: 32, column: 107 }, end: { line: 32, column: 228 } }, type: "if", locations: [{ start: { line: 32, column: 107 }, end: { line: 32, column: 228 } }, { start: { line: 32, column: 107 }, end: { line: 32, column: 228 } }], line: 32 }, "3": { loc: { start: { line: 32, column: 149 }, end: { line: 32, column: 224 } }, type: "if", locations: [{ start: { line: 32, column: 149 }, end: { line: 32, column: 224 } }, { start: { line: 32, column: 149 }, end: { line: 32, column: 224 } }], line: 32 }, "4": { loc: { start: { line: 34, column: 46 }, end: { line: 34, column: 92 } }, type: "cond-expr", locations: [{ start: { line: 34, column: 70 }, end: { line: 34, column: 73 } }, { start: { line: 34, column: 76 }, end: { line: 34, column: 92 } }], line: 34 }, "5": { loc: { start: { line: 34, column: 46 }, end: { line: 34, column: 67 } }, type: "binary-expr", locations: [{ start: { line: 34, column: 46 }, end: { line: 34, column: 49 } }, { start: { line: 34, column: 53 }, end: { line: 34, column: 67 } }], line: 34 }, "6": { loc: { start: { line: 41, column: 65 }, end: { line: 41, column: 101 } }, type: "binary-expr", locations: [{ start: { line: 41, column: 65 }, end: { line: 41, column: 77 } }, { start: { line: 41, column: 81 }, end: { line: 41, column: 101 } }], line: 41 }, "7": { loc: { start: { line: 58, column: 2 }, end: { line: 65, column: 3 } }, type: "if", locations: [{ start: { line: 58, column: 2 }, end: { line: 65, column: 3 } }, { start: { line: 58, column: 2 }, end: { line: 65, column: 3 } }], line: 58 }, "8": { loc: { start: { line: 67, column: 2 }, end: { line: 75, column: 3 } }, type: "if", locations: [{ start: { line: 67, column: 2 }, end: { line: 75, column: 3 } }, { start: { line: 67, column: 2 }, end: { line: 75, column: 3 } }], line: 67 } }, s: { "0": 0, "1": 0, "2": 0, "3": 0, "4": 0, "5": 0, "6": 0, "7": 0, "8": 0, "9": 0, "10": 0, "11": 0, "12": 0, "13": 0, "14": 0, "15": 0, "16": 0, "17": 0, "18": 0, "19": 0, "20": 0, "21": 0, "22": 0, "23": 0, "24": 0, "25": 0, "26": 0, "27": 0, "28": 0, "29": 0, "30": 0, "31": 0, "32": 0, "33": 0, "34": 0, "35": 0, "36": 0, "37": 0, "38": 0, "39": 0, "40": 0, "41": 0, "42": 0, "43": 0, "44": 0, "45": 0, "46": 0, "47": 0, "48": 0, "49": 0, "50": 0, "51": 0, "52": 0, "53": 0, "54": 0 }, f: { "0": 0, "1": 0, "2": 0, "3": 0, "4": 0, "5": 0, "6": 0, "7": 0, "8": 0, "9": 0 }, b: { "0": [0, 0], "1": [0, 0], "2": [0, 0], "3": [0, 0], "4": [0, 0], "5": [0, 0], "6": [0, 0], "7": [0, 0], "8": [0, 0] }, inputSourceMap: { version: 3, sources: ["lib/trace/sagas/index.js"], names: ["advance", "wait", "processTrace", "saga", "actions", "debug", "waitForTrace", "steps", "SAVE_STEPS", "addresses", "filter", "op", "map", "stack", "length", "substring", "receiveAddresses", "next", "TOCK", "remaining", "trace", "stepsRemaining", "tick", "tock", "endTrace", "END_OF_TRACE", "saveSteps", "RECEIVE_ADDRESSES", "NEXT"], mappings: ";;;;;;;;;;QAwBiBA,O,GAAAA,O;QAiCAC,I,GAAAA,I;QAIAC,Y,GAAAA,Y;QASAC,I,GAAAA,I;;AAtEjB;;;;AAGA;;AACA;;AAEA;;IAAYC,O;;AAEZ;;;;;;;;AAPA,MAAMC,QAAQ,qBAAY,sBAAZ,CAAd;;AASA,UAAUC,YAAV,GAAyB;AACvB,MAAI,EAACC,KAAD,KAAU,MAAM,mBAAKH,QAAQI,UAAb,CAApB;;AAEA,MAAIC,YAAY,CACd,GAAG,kBACDF,MACGG,MADH,CACW,CAAC,EAACC,EAAD,EAAD,KAAUA,MAAM,MAAN,IAAgBA,MAAM,cAD3C,EAEGC,GAFH,CAEQ,CAAC,EAACC,KAAD,EAAD,KAAa,OAAOA,MAAMA,MAAMC,MAAN,GAAe,CAArB,EAAwBC,SAAxB,CAAkC,EAAlC,CAF5B,CADC,CADW,CAAhB;;AAQA,QAAM,kBAAIX,QAAQY,gBAAR,CAAyBP,SAAzB,CAAJ,CAAN;AACD;;AAEM,UAAUT,OAAV,GAAoB;AACzB,QAAM,kBAAII,QAAQa,IAAR,EAAJ,CAAN;;AAEA,QAAM,mBAAKb,QAAQc,IAAb,CAAN;AACD;;AAED,UAAUD,IAAV,GAAiB;AACf,MAAIE,YAAY,MAAM,qBAAOC,oBAAMC,cAAb,CAAtB;AACAhB,QAAM,eAAN,EAAuBc,SAAvB;AACA,MAAIZ,QAAQ,MAAM,qBAAOa,oBAAMb,KAAb,CAAlB;AACAF,QAAM,iBAAN,EAAyBE,MAAMO,MAA/B;;AAEA,MAAIK,YAAY,CAAhB,EAAmB;AACjBd,UAAM,cAAN;AACA;AACA,UAAM,kBAAID,QAAQkB,IAAR,EAAJ,CAAN;AACAjB,UAAM,UAAN;;AAEAc,gBANiB,CAMJ;AACd;;AAED,MAAIA,SAAJ,EAAe;AACbd,UAAM,cAAN;AACA;AACA,UAAM,kBAAID,QAAQmB,IAAR,EAAJ,CAAN;AACAlB,UAAM,UAAN;AAED,GAND,MAMO;;AAEL,UAAM,kBAAID,QAAQoB,QAAR,EAAJ,CAAN;AACD;AACF;;AAEM,UAAUvB,IAAV,GAAiB;AACtB,QAAM,mBAAKG,QAAQqB,YAAb,CAAN;AACD;;AAEM,UAAUvB,YAAV,CAAuBkB,KAAvB,EAA8B;AACnC,QAAM,kBAAIhB,QAAQsB,SAAR,CAAkBN,KAAlB,CAAJ,CAAN;;AAEA,MAAI,EAACX,SAAD,KAAc,MAAM,mBAAKL,QAAQuB,iBAAb,CAAxB;AACAtB,QAAM,oBAAN;;AAEA,SAAOI,SAAP;AACD;;AAEM,UAAUN,IAAV,GAAiB;AACtB;AACA,SAAOG,cAAP;;AAEA,QAAM,wBAAUF,QAAQwB,IAAlB,EAAwBX,IAAxB,CAAN;AACD;;kBAEc,yBAAW,OAAX,EAAoBd,IAApB,C", file: "index.js", sourceRoot: "/Users/gnidan/src/work/truffle/packages/truffle-debugger", sourcesContent: ["import debugModule from \"debug\";\nconst debug = debugModule(\"debugger:trace:sagas\");\n\nimport { take, takeEvery, put, select } from \"redux-saga/effects\";\nimport { prefixName } from \"lib/helpers\";\n\nimport * as actions from \"../actions\";\n\nimport trace from \"../selectors\";\n\nfunction *waitForTrace() {\n  let {steps} = yield take(actions.SAVE_STEPS);\n\n  let addresses = [\n    ...new Set(\n      steps\n        .filter( ({op}) => op == \"CALL\" || op == \"DELEGATECALL\" )\n        .map( ({stack}) => \"0x\" + stack[stack.length - 2].substring(24) )\n    )\n  ];\n\n  yield put(actions.receiveAddresses(addresses));\n}\n\nexport function *advance() {\n  yield put(actions.next());\n\n  yield take(actions.TOCK);\n}\n\nfunction* next() {\n  let remaining = yield select(trace.stepsRemaining);\n  debug(\"remaining: %o\", remaining);\n  let steps = yield select(trace.steps);\n  debug(\"total steps: %o\", steps.length);\n\n  if (remaining > 0) {\n    debug(\"putting TICK\");\n    // updates state for current step\n    yield put(actions.tick());\n    debug(\"put TICK\");\n\n    remaining--; // local update, just for convenience\n  }\n\n  if (remaining) {\n    debug(\"putting TOCK\");\n    // updates step to next step in trace\n    yield put(actions.tock());\n    debug(\"put TOCK\");\n\n  } else {\n\n    yield put(actions.endTrace());\n  }\n}\n\nexport function* wait() {\n  yield take(actions.END_OF_TRACE);\n}\n\nexport function *processTrace(trace) {\n  yield put(actions.saveSteps(trace));\n\n  let {addresses} = yield take(actions.RECEIVE_ADDRESSES);\n  debug(\"received addresses\");\n\n  return addresses;\n}\n\nexport function* saga() {\n  // wait for trace to be defined\n  yield *waitForTrace();\n\n  yield takeEvery(actions.NEXT, next);\n}\n\nexport default prefixName(\"trace\", saga);\n"] }, _coverageSchema: "332fd63041d2c1bcb487cc26dd0d5f7d97098a6c" },
      coverage = global[gcv] || (global[gcv] = {});if (coverage[path] && coverage[path].hash === hash) {
    return coverage[path];
  }coverageData.hash = hash;return coverage[path] = coverageData;
}();cov_1yv2hwn7tg.s[0]++;Object.defineProperty(exports, "__esModule", { value: true });var _set = (cov_1yv2hwn7tg.s[1]++, __webpack_require__(22));var _set2 = (cov_1yv2hwn7tg.s[2]++, _interopRequireDefault(_set));cov_1yv2hwn7tg.s[3]++;exports.advance = advance;cov_1yv2hwn7tg.s[4]++;exports.wait = wait;cov_1yv2hwn7tg.s[5]++;exports.processTrace = processTrace;cov_1yv2hwn7tg.s[6]++;exports.saga = saga;var _debug = (cov_1yv2hwn7tg.s[7]++, __webpack_require__(0));var _debug2 = (cov_1yv2hwn7tg.s[8]++, _interopRequireDefault(_debug));var _effects = (cov_1yv2hwn7tg.s[9]++, __webpack_require__(10));var _helpers = (cov_1yv2hwn7tg.s[10]++, __webpack_require__(6));var _actions = (cov_1yv2hwn7tg.s[11]++, __webpack_require__(21));var actions = (cov_1yv2hwn7tg.s[12]++, _interopRequireWildcard(_actions));var _selectors = (cov_1yv2hwn7tg.s[13]++, __webpack_require__(19));var _selectors2 = (cov_1yv2hwn7tg.s[14]++, _interopRequireDefault(_selectors));function _interopRequireWildcard(obj) {
  cov_1yv2hwn7tg.f[0]++;cov_1yv2hwn7tg.s[15]++;if ((cov_1yv2hwn7tg.b[1][0]++, obj) && (cov_1yv2hwn7tg.b[1][1]++, obj.__esModule)) {
    cov_1yv2hwn7tg.b[0][0]++;cov_1yv2hwn7tg.s[16]++;return obj;
  } else {
    cov_1yv2hwn7tg.b[0][1]++;var newObj = (cov_1yv2hwn7tg.s[17]++, {});cov_1yv2hwn7tg.s[18]++;if (obj != null) {
      cov_1yv2hwn7tg.b[2][0]++;cov_1yv2hwn7tg.s[19]++;for (var key in obj) {
        cov_1yv2hwn7tg.s[20]++;if (Object.prototype.hasOwnProperty.call(obj, key)) {
          cov_1yv2hwn7tg.b[3][0]++;cov_1yv2hwn7tg.s[21]++;newObj[key] = obj[key];
        } else {
          cov_1yv2hwn7tg.b[3][1]++;
        }
      }
    } else {
      cov_1yv2hwn7tg.b[2][1]++;
    }cov_1yv2hwn7tg.s[22]++;newObj.default = obj;cov_1yv2hwn7tg.s[23]++;return newObj;
  }
}function _interopRequireDefault(obj) {
  cov_1yv2hwn7tg.f[1]++;cov_1yv2hwn7tg.s[24]++;return (cov_1yv2hwn7tg.b[5][0]++, obj) && (cov_1yv2hwn7tg.b[5][1]++, obj.__esModule) ? (cov_1yv2hwn7tg.b[4][0]++, obj) : (cov_1yv2hwn7tg.b[4][1]++, { default: obj });
}const debug = (cov_1yv2hwn7tg.s[25]++, (0, _debug2.default)("debugger:trace:sagas"));function* waitForTrace() {
  cov_1yv2hwn7tg.f[2]++;let { steps } = (cov_1yv2hwn7tg.s[26]++, yield (0, _effects.take)(actions.SAVE_STEPS));let addresses = (cov_1yv2hwn7tg.s[27]++, [...new _set2.default(steps.filter(({ op }) => {
    cov_1yv2hwn7tg.f[3]++;cov_1yv2hwn7tg.s[28]++;return (cov_1yv2hwn7tg.b[6][0]++, op == "CALL") || (cov_1yv2hwn7tg.b[6][1]++, op == "DELEGATECALL");
  }).map(({ stack }) => {
    cov_1yv2hwn7tg.f[4]++;cov_1yv2hwn7tg.s[29]++;return "0x" + stack[stack.length - 2].substring(24);
  }))]);cov_1yv2hwn7tg.s[30]++;yield (0, _effects.put)(actions.receiveAddresses(addresses));
}function* advance() {
  cov_1yv2hwn7tg.f[5]++;cov_1yv2hwn7tg.s[31]++;yield (0, _effects.put)(actions.next());cov_1yv2hwn7tg.s[32]++;yield (0, _effects.take)(actions.TOCK);
}function* next() {
  cov_1yv2hwn7tg.f[6]++;let remaining = (cov_1yv2hwn7tg.s[33]++, yield (0, _effects.select)(_selectors2.default.stepsRemaining));cov_1yv2hwn7tg.s[34]++;debug("remaining: %o", remaining);let steps = (cov_1yv2hwn7tg.s[35]++, yield (0, _effects.select)(_selectors2.default.steps));cov_1yv2hwn7tg.s[36]++;debug("total steps: %o", steps.length);cov_1yv2hwn7tg.s[37]++;if (remaining > 0) {
    cov_1yv2hwn7tg.b[7][0]++;cov_1yv2hwn7tg.s[38]++;debug("putting TICK");cov_1yv2hwn7tg.s[39]++;yield (0, _effects.put)(actions.tick());cov_1yv2hwn7tg.s[40]++;debug("put TICK");cov_1yv2hwn7tg.s[41]++;remaining--;
  } else {
    cov_1yv2hwn7tg.b[7][1]++;
  }cov_1yv2hwn7tg.s[42]++;if (remaining) {
    cov_1yv2hwn7tg.b[8][0]++;cov_1yv2hwn7tg.s[43]++;debug("putting TOCK");cov_1yv2hwn7tg.s[44]++;yield (0, _effects.put)(actions.tock());cov_1yv2hwn7tg.s[45]++;debug("put TOCK");
  } else {
    cov_1yv2hwn7tg.b[8][1]++;cov_1yv2hwn7tg.s[46]++;yield (0, _effects.put)(actions.endTrace());
  }
}function* wait() {
  cov_1yv2hwn7tg.f[7]++;cov_1yv2hwn7tg.s[47]++;yield (0, _effects.take)(actions.END_OF_TRACE);
}function* processTrace(trace) {
  cov_1yv2hwn7tg.f[8]++;cov_1yv2hwn7tg.s[48]++;yield (0, _effects.put)(actions.saveSteps(trace));let { addresses } = (cov_1yv2hwn7tg.s[49]++, yield (0, _effects.take)(actions.RECEIVE_ADDRESSES));cov_1yv2hwn7tg.s[50]++;debug("received addresses");cov_1yv2hwn7tg.s[51]++;return addresses;
}function* saga() {
  cov_1yv2hwn7tg.f[9]++;cov_1yv2hwn7tg.s[52]++;yield* waitForTrace();cov_1yv2hwn7tg.s[53]++;yield (0, _effects.takeEvery)(actions.NEXT, next);
}cov_1yv2hwn7tg.s[54]++;exports.default = (0, _helpers.prefixName)("trace", saga);

/***/ }),
/* 34 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var cov_kojt2n1xq = function () {
  var path = "/Users/gnidan/src/work/truffle/packages/truffle-debugger/lib/controller/selectors/index.js",
      hash = "6cd08556d92282021e6a1a7adf5934ebbb84525d",
      Function = function () {}.constructor,
      global = new Function('return this')(),
      gcv = "__coverage__",
      coverageData = { path: "/Users/gnidan/src/work/truffle/packages/truffle-debugger/lib/controller/selectors/index.js", statementMap: { "0": { start: { line: 3, column: 0 }, end: { line: 5, column: 3 } }, "1": { start: { line: 7, column: 13 }, end: { line: 7, column: 29 } }, "2": { start: { line: 9, column: 14 }, end: { line: 9, column: 44 } }, "3": { start: { line: 11, column: 20 }, end: { line: 11, column: 44 } }, "4": { start: { line: 13, column: 17 }, end: { line: 13, column: 45 } }, "5": { start: { line: 15, column: 18 }, end: { line: 15, column: 52 } }, "6": { start: { line: 17, column: 18 }, end: { line: 17, column: 51 } }, "7": { start: { line: 19, column: 18 }, end: { line: 19, column: 53 } }, "8": { start: { line: 21, column: 18 }, end: { line: 21, column: 46 } }, "9": { start: { line: 23, column: 18 }, end: { line: 23, column: 53 } }, "10": { start: { line: 25, column: 39 }, end: { line: 25, column: 93 } }, "11": { start: { line: 27, column: 14 }, end: { line: 27, column: 63 } }, "12": { start: { line: 32, column: 17 }, end: { line: 32, column: 23 } }, "13": { start: { line: 32, column: 22 }, end: { line: 32, column: 23 } }, "14": { start: { line: 37, column: 19 }, end: { line: 91, column: 2 } }, "15": { start: { line: 42, column: 18 }, end: { line: 42, column: 34 } }, "16": { start: { line: 90, column: 67 }, end: { line: 90, column: 84 } }, "17": { start: { line: 93, column: 0 }, end: { line: 93, column: 29 } } }, fnMap: { "0": { name: "_interopRequireDefault", decl: { start: { line: 25, column: 9 }, end: { line: 25, column: 31 } }, loc: { start: { line: 25, column: 37 }, end: { line: 25, column: 95 } }, line: 25 }, "1": { name: "(anonymous_1)", decl: { start: { line: 32, column: 17 }, end: { line: 32, column: 18 } }, loc: { start: { line: 32, column: 22 }, end: { line: 32, column: 23 } }, line: 32 }, "2": { name: "(anonymous_2)", decl: { start: { line: 42, column: 9 }, end: { line: 42, column: 10 } }, loc: { start: { line: 42, column: 18 }, end: { line: 42, column: 34 } }, line: 42 }, "3": { name: "(anonymous_3)", decl: { start: { line: 90, column: 58 }, end: { line: 90, column: 59 } }, loc: { start: { line: 90, column: 67 }, end: { line: 90, column: 84 } }, line: 90 } }, branchMap: { "0": { loc: { start: { line: 25, column: 46 }, end: { line: 25, column: 92 } }, type: "cond-expr", locations: [{ start: { line: 25, column: 70 }, end: { line: 25, column: 73 } }, { start: { line: 25, column: 76 }, end: { line: 25, column: 92 } }], line: 25 }, "1": { loc: { start: { line: 25, column: 46 }, end: { line: 25, column: 67 } }, type: "binary-expr", locations: [{ start: { line: 25, column: 46 }, end: { line: 25, column: 49 } }, { start: { line: 25, column: 53 }, end: { line: 25, column: 67 } }], line: 25 } }, s: { "0": 0, "1": 0, "2": 0, "3": 0, "4": 0, "5": 0, "6": 0, "7": 0, "8": 0, "9": 0, "10": 0, "11": 0, "12": 0, "13": 0, "14": 0, "15": 0, "16": 0, "17": 0 }, f: { "0": 0, "1": 0, "2": 0, "3": 0 }, b: { "0": [0, 0], "1": [0, 0] }, inputSourceMap: { version: 3, sources: ["lib/controller/selectors/index.js"], names: ["debug", "identity", "x", "controller", "state", "current", "functionDepth", "solidity", "executionContext", "evm", "call", "willJump", "step", "isJump", "location", "sourceRange", "source", "node", "ast", "isMultiline", "breakpoints"], mappings: ";;;;;;AAAA;;;;AAGA;;AAEA;;;;AACA;;;;AACA;;;;;;AANA,MAAMA,QAAQ,qBAAY,2BAAZ,CAAd;;AAQA;;;AAGA,MAAMC,WAAYC,CAAD,IAAOA,CAAxB;;AAEA;;;AAGA,MAAMC,aAAa,sCAAmB;;AAEpC;;;AAGAC,SAASA,KAAD,IAAWA,MAAMD,UALW;AAMpC;;;AAGAE,WAAS;AACP;;;AAGAC,mBAAe,8BAAW,CAACC,oBAASF,OAAT,CAAiBC,aAAlB,CAAX,EAA6CL,QAA7C,CAJR;;AAMP;;;AAGAO,sBAAkB,8BAAW,CAACC,oBAAIJ,OAAJ,CAAYK,IAAb,CAAX,EAA+BT,QAA/B,CATX;;AAWP;;;AAGAU,cAAU,8BAAW,CAACF,oBAAIJ,OAAJ,CAAYO,IAAZ,CAAiBC,MAAlB,CAAX,EAAsCZ,QAAtC,CAdH;;AAgBP;;;AAGAa,cAAU;AACR;;;AAGAC,mBAAa,8BAAW,CAACR,oBAASF,OAAT,CAAiBU,WAAlB,CAAX,EAA2Cd,QAA3C,CAJL;;AAMR;;;AAGAe,cAAQ,8BAAW,CAACT,oBAASF,OAAT,CAAiBW,MAAlB,CAAX,EAAsCf,QAAtC,CATA;;AAWR;;;AAGAgB,YAAM,8BAAW,CAACC,oBAAIb,OAAJ,CAAYY,IAAb,CAAX,EAA+BhB,QAA/B,CAdE;;AAgBR;;;AAGAkB,mBAAa,8BAAW,CAACZ,oBAASF,OAAT,CAAiBc,WAAlB,CAAX,EAA2ClB,QAA3C;AAnBL;AAnBH,GAT2B;AAkDpC;;;AAGAmB,eAAa,8BAAW,CAAC,SAAD,CAAX,EAAyBhB,KAAD,IAAWA,MAAMgB,WAAzC;AArDuB,CAAnB,CAAnB;;kBAwDejB,U", file: "index.js", sourceRoot: "/Users/gnidan/src/work/truffle/packages/truffle-debugger", sourcesContent: ["import debugModule from \"debug\";\nconst debug = debugModule(\"debugger:controller:sagas\");\n\nimport { createSelectorTree, createLeaf } from \"reselect-tree\";\n\nimport evm from \"lib/evm/selectors\";\nimport solidity from \"lib/solidity/selectors\";\nimport ast from \"lib/ast/selectors\";\n\n/**\n * @private\n */\nconst identity = (x) => x\n\n/**\n * controller\n */\nconst controller = createSelectorTree({\n\n  /**\n   * controller.state\n   */\n  state: ((state) => state.controller),\n  /**\n   * controller.current\n   */\n  current: {\n    /**\n     * controller.current.functionDepth\n     */\n    functionDepth: createLeaf([solidity.current.functionDepth], identity),\n\n    /**\n     * controller.current.executionContext\n     */\n    executionContext: createLeaf([evm.current.call], identity),\n\n    /**\n     * controller.current.willJump\n     */\n    willJump: createLeaf([evm.current.step.isJump], identity),\n\n    /**\n     * controller.current.location\n     */\n    location: {\n      /**\n       * controller.current.location.sourceRange\n       */\n      sourceRange: createLeaf([solidity.current.sourceRange], identity),\n\n      /**\n       * controller.current.location.source\n       */\n      source: createLeaf([solidity.current.source], identity),\n\n      /**\n       * controller.current.location.node\n       */\n      node: createLeaf([ast.current.node], identity),\n\n      /**\n       * controller.current.location.isMultiline\n       */\n      isMultiline: createLeaf([solidity.current.isMultiline], identity),\n    }\n  },\n  /**\n   * controller.breakpoints\n   */\n  breakpoints: createLeaf([\"./state\"], (state) => state.breakpoints)\n});\n\nexport default controller;\n"] }, _coverageSchema: "332fd63041d2c1bcb487cc26dd0d5f7d97098a6c" },
      coverage = global[gcv] || (global[gcv] = {});if (coverage[path] && coverage[path].hash === hash) {
    return coverage[path];
  }coverageData.hash = hash;return coverage[path] = coverageData;
}();cov_kojt2n1xq.s[0]++;Object.defineProperty(exports, "__esModule", { value: true });var _debug = (cov_kojt2n1xq.s[1]++, __webpack_require__(0));var _debug2 = (cov_kojt2n1xq.s[2]++, _interopRequireDefault(_debug));var _reselectTree = (cov_kojt2n1xq.s[3]++, __webpack_require__(9));var _selectors = (cov_kojt2n1xq.s[4]++, __webpack_require__(3));var _selectors2 = (cov_kojt2n1xq.s[5]++, _interopRequireDefault(_selectors));var _selectors3 = (cov_kojt2n1xq.s[6]++, __webpack_require__(2));var _selectors4 = (cov_kojt2n1xq.s[7]++, _interopRequireDefault(_selectors3));var _selectors5 = (cov_kojt2n1xq.s[8]++, __webpack_require__(18));var _selectors6 = (cov_kojt2n1xq.s[9]++, _interopRequireDefault(_selectors5));function _interopRequireDefault(obj) {
  cov_kojt2n1xq.f[0]++;cov_kojt2n1xq.s[10]++;return (cov_kojt2n1xq.b[1][0]++, obj) && (cov_kojt2n1xq.b[1][1]++, obj.__esModule) ? (cov_kojt2n1xq.b[0][0]++, obj) : (cov_kojt2n1xq.b[0][1]++, { default: obj });
}const debug = (cov_kojt2n1xq.s[11]++, (0, _debug2.default)("debugger:controller:sagas"));cov_kojt2n1xq.s[12]++;const identity = x => {
  cov_kojt2n1xq.f[1]++;cov_kojt2n1xq.s[13]++;return x;
};const controller = (cov_kojt2n1xq.s[14]++, (0, _reselectTree.createSelectorTree)({ state: state => {
    cov_kojt2n1xq.f[2]++;cov_kojt2n1xq.s[15]++;return state.controller;
  }, current: { functionDepth: (0, _reselectTree.createLeaf)([_selectors4.default.current.functionDepth], identity), executionContext: (0, _reselectTree.createLeaf)([_selectors2.default.current.call], identity), willJump: (0, _reselectTree.createLeaf)([_selectors2.default.current.step.isJump], identity), location: { sourceRange: (0, _reselectTree.createLeaf)([_selectors4.default.current.sourceRange], identity), source: (0, _reselectTree.createLeaf)([_selectors4.default.current.source], identity), node: (0, _reselectTree.createLeaf)([_selectors6.default.current.node], identity), isMultiline: (0, _reselectTree.createLeaf)([_selectors4.default.current.isMultiline], identity) } }, breakpoints: (0, _reselectTree.createLeaf)(["./state"], state => {
    cov_kojt2n1xq.f[3]++;cov_kojt2n1xq.s[16]++;return state.breakpoints;
  }) }));cov_kojt2n1xq.s[17]++;exports.default = controller;

/***/ }),
/* 35 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var cov_1dtgz8qh4v = function () {
  var path = "/Users/gnidan/src/work/truffle/packages/truffle-debugger/lib/solidity/actions/index.js",
      hash = "3654c31d2b490e313817286884233ea261ca1344",
      Function = function () {}.constructor,
      global = new Function('return this')(),
      gcv = "__coverage__",
      coverageData = { path: "/Users/gnidan/src/work/truffle/packages/truffle-debugger/lib/solidity/actions/index.js", statementMap: { "0": { start: { line: 3, column: 0 }, end: { line: 5, column: 3 } }, "1": { start: { line: 6, column: 0 }, end: { line: 6, column: 30 } }, "2": { start: { line: 7, column: 0 }, end: { line: 7, column: 36 } }, "3": { start: { line: 8, column: 0 }, end: { line: 8, column: 20 } }, "4": { start: { line: 9, column: 19 }, end: { line: 9, column: 61 } }, "5": { start: { line: 11, column: 2 }, end: { line: 14, column: 4 } }, "6": { start: { line: 17, column: 22 }, end: { line: 17, column: 70 } }, "7": { start: { line: 19, column: 2 }, end: { line: 22, column: 4 } }, "8": { start: { line: 25, column: 13 }, end: { line: 25, column: 34 } }, "9": { start: { line: 27, column: 2 }, end: { line: 30, column: 4 } } }, fnMap: { "0": { name: "addSource", decl: { start: { line: 10, column: 9 }, end: { line: 10, column: 18 } }, loc: { start: { line: 10, column: 44 }, end: { line: 15, column: 1 } }, line: 10 }, "1": { name: "addSourceMap", decl: { start: { line: 18, column: 9 }, end: { line: 18, column: 21 } }, loc: { start: { line: 18, column: 41 }, end: { line: 23, column: 1 } }, line: 18 }, "2": { name: "jump", decl: { start: { line: 26, column: 9 }, end: { line: 26, column: 13 } }, loc: { start: { line: 26, column: 29 }, end: { line: 31, column: 1 } }, line: 26 } }, branchMap: {}, s: { "0": 0, "1": 0, "2": 0, "3": 0, "4": 0, "5": 0, "6": 0, "7": 0, "8": 0, "9": 0 }, f: { "0": 0, "1": 0, "2": 0 }, b: {}, inputSourceMap: { version: 3, sources: ["lib/solidity/actions/index.js"], names: ["addSource", "addSourceMap", "jump", "ADD_SOURCE", "source", "sourcePath", "ast", "type", "ADD_SOURCEMAP", "binary", "sourceMap", "JUMP", "jumpDirection"], mappings: ";;;;;QACgBA,S,GAAAA,S;QAQAC,Y,GAAAA,Y;QASAC,I,GAAAA,I;AAlBT,MAAMC,kCAAa,qBAAnB;AACA,SAASH,SAAT,CAAmBI,MAAnB,EAA2BC,UAA3B,EAAuCC,GAAvC,EAA4C;AACjD,SAAO;AACLC,UAAMJ,UADD;AAELC,UAFK,EAEGC,UAFH,EAEeC;AAFf,GAAP;AAID;;AAEM,MAAME,wCAAgB,wBAAtB;AACA,SAASP,YAAT,CAAsBQ,MAAtB,EAA8BC,SAA9B,EAAyC;AAC9C,SAAO;AACLH,UAAMC,aADD;AAELC,UAFK,EAEGC;AAFH,GAAP;AAID;;AAGM,MAAMC,sBAAO,MAAb;AACA,SAAST,IAAT,CAAcU,aAAd,EAA6B;AAClC,SAAO;AACLL,UAAMI,IADD;AAELC;AAFK,GAAP;AAID", file: "index.js", sourceRoot: "/Users/gnidan/src/work/truffle/packages/truffle-debugger", sourcesContent: ["export const ADD_SOURCE = \"SOLIDITY_ADD_SOURCE\";\nexport function addSource(source, sourcePath, ast) {\n  return {\n    type: ADD_SOURCE,\n    source, sourcePath, ast\n  };\n}\n\nexport const ADD_SOURCEMAP = \"SOLIDITY_ADD_SOURCEMAP\";\nexport function addSourceMap(binary, sourceMap) {\n  return {\n    type: ADD_SOURCEMAP,\n    binary, sourceMap\n  };\n}\n\n\nexport const JUMP = \"JUMP\";\nexport function jump(jumpDirection) {\n  return {\n    type: JUMP,\n    jumpDirection\n  };\n}\n"] }, _coverageSchema: "332fd63041d2c1bcb487cc26dd0d5f7d97098a6c" },
      coverage = global[gcv] || (global[gcv] = {});if (coverage[path] && coverage[path].hash === hash) {
    return coverage[path];
  }coverageData.hash = hash;return coverage[path] = coverageData;
}();cov_1dtgz8qh4v.s[0]++;Object.defineProperty(exports, "__esModule", { value: true });cov_1dtgz8qh4v.s[1]++;exports.addSource = addSource;cov_1dtgz8qh4v.s[2]++;exports.addSourceMap = addSourceMap;cov_1dtgz8qh4v.s[3]++;exports.jump = jump;const ADD_SOURCE = (cov_1dtgz8qh4v.s[4]++, exports.ADD_SOURCE = "SOLIDITY_ADD_SOURCE");function addSource(source, sourcePath, ast) {
  cov_1dtgz8qh4v.f[0]++;cov_1dtgz8qh4v.s[5]++;return { type: ADD_SOURCE, source, sourcePath, ast };
}const ADD_SOURCEMAP = (cov_1dtgz8qh4v.s[6]++, exports.ADD_SOURCEMAP = "SOLIDITY_ADD_SOURCEMAP");function addSourceMap(binary, sourceMap) {
  cov_1dtgz8qh4v.f[1]++;cov_1dtgz8qh4v.s[7]++;return { type: ADD_SOURCEMAP, binary, sourceMap };
}const JUMP = (cov_1dtgz8qh4v.s[8]++, exports.JUMP = "JUMP");function jump(jumpDirection) {
  cov_1dtgz8qh4v.f[2]++;cov_1dtgz8qh4v.s[9]++;return { type: JUMP, jumpDirection };
}

/***/ }),
/* 36 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var cov_2sixj2yze = function () {
  var path = "/Users/gnidan/src/work/truffle/packages/truffle-debugger/lib/evm/actions/index.js",
      hash = "b70721a10b1eeb1303330fc1e9777e0d6c6e6811",
      Function = function () {}.constructor,
      global = new Function('return this')(),
      gcv = "__coverage__",
      coverageData = { path: "/Users/gnidan/src/work/truffle/packages/truffle-debugger/lib/evm/actions/index.js", statementMap: { "0": { start: { line: 3, column: 0 }, end: { line: 5, column: 3 } }, "1": { start: { line: 6, column: 0 }, end: { line: 6, column: 32 } }, "2": { start: { line: 7, column: 0 }, end: { line: 7, column: 34 } }, "3": { start: { line: 8, column: 0 }, end: { line: 8, column: 20 } }, "4": { start: { line: 9, column: 0 }, end: { line: 9, column: 24 } }, "5": { start: { line: 10, column: 0 }, end: { line: 10, column: 32 } }, "6": { start: { line: 11, column: 20 }, end: { line: 11, column: 59 } }, "7": { start: { line: 13, column: 2 }, end: { line: 16, column: 4 } }, "8": { start: { line: 19, column: 21 }, end: { line: 19, column: 62 } }, "9": { start: { line: 21, column: 2 }, end: { line: 24, column: 4 } }, "10": { start: { line: 27, column: 13 }, end: { line: 27, column: 34 } }, "11": { start: { line: 29, column: 2 }, end: { line: 32, column: 4 } }, "12": { start: { line: 35, column: 15 }, end: { line: 35, column: 40 } }, "13": { start: { line: 37, column: 2 }, end: { line: 40, column: 4 } }, "14": { start: { line: 43, column: 15 }, end: { line: 43, column: 40 } }, "15": { start: { line: 45, column: 2 }, end: { line: 47, column: 4 } } }, fnMap: { "0": { name: "addContext", decl: { start: { line: 12, column: 9 }, end: { line: 12, column: 19 } }, loc: { start: { line: 12, column: 42 }, end: { line: 17, column: 1 } }, line: 12 }, "1": { name: "addInstance", decl: { start: { line: 20, column: 9 }, end: { line: 20, column: 20 } }, loc: { start: { line: 20, column: 47 }, end: { line: 25, column: 1 } }, line: 20 }, "2": { name: "call", decl: { start: { line: 28, column: 9 }, end: { line: 28, column: 13 } }, loc: { start: { line: 28, column: 23 }, end: { line: 33, column: 1 } }, line: 28 }, "3": { name: "create", decl: { start: { line: 36, column: 9 }, end: { line: 36, column: 15 } }, loc: { start: { line: 36, column: 24 }, end: { line: 41, column: 1 } }, line: 36 }, "4": { name: "returnCall", decl: { start: { line: 44, column: 9 }, end: { line: 44, column: 19 } }, loc: { start: { line: 44, column: 22 }, end: { line: 48, column: 1 } }, line: 44 } }, branchMap: {}, s: { "0": 0, "1": 0, "2": 0, "3": 0, "4": 0, "5": 0, "6": 0, "7": 0, "8": 0, "9": 0, "10": 0, "11": 0, "12": 0, "13": 0, "14": 0, "15": 0 }, f: { "0": 0, "1": 0, "2": 0, "3": 0, "4": 0 }, b: {}, inputSourceMap: { version: 3, sources: ["lib/evm/actions/index.js"], names: ["addContext", "addInstance", "call", "create", "returnCall", "ADD_CONTEXT", "contractName", "binary", "type", "ADD_INSTANCE", "address", "context", "CALL", "CREATE", "RETURN"], mappings: ";;;;;QACgBA,U,GAAAA,U;QAQAC,W,GAAAA,W;QAQAC,I,GAAAA,I;QAQAC,M,GAAAA,M;QAQAC,U,GAAAA,U;AAjCT,MAAMC,oCAAc,iBAApB;AACA,SAASL,UAAT,CAAoBM,YAApB,EAAkCC,MAAlC,EAA0C;AAC/C,SAAO;AACLC,UAAMH,WADD;AAELC,gBAFK,EAESC;AAFT,GAAP;AAID;;AAEM,MAAME,sCAAe,kBAArB;AACA,SAASR,WAAT,CAAqBS,OAArB,EAA8BC,OAA9B,EAAuCJ,MAAvC,EAA+C;AACpD,SAAO;AACLC,UAAMC,YADD;AAELC,WAFK,EAEIC,OAFJ,EAEaJ;AAFb,GAAP;AAID;;AAEM,MAAMK,sBAAO,MAAb;AACA,SAASV,IAAT,CAAcQ,OAAd,EAAuB;AAC5B,SAAO;AACLF,UAAMI,IADD;AAELF;AAFK,GAAP;AAID;;AAEM,MAAMG,0BAAS,QAAf;AACA,SAASV,MAAT,CAAgBI,MAAhB,EAAwB;AAC7B,SAAO;AACLC,UAAMK,MADD;AAELN;AAFK,GAAP;AAID;;AAEM,MAAMO,0BAAS,QAAf;AACA,SAASV,UAAT,GAAsB;AAC3B,SAAO;AACLI,UAAMM;AADD,GAAP;AAGD", file: "index.js", sourceRoot: "/Users/gnidan/src/work/truffle/packages/truffle-debugger", sourcesContent: ["export const ADD_CONTEXT = \"EVM_ADD_CONTEXT\";\nexport function addContext(contractName, binary) {\n  return {\n    type: ADD_CONTEXT,\n    contractName, binary\n  }\n}\n\nexport const ADD_INSTANCE = \"EVM_ADD_INSTANCE\";\nexport function addInstance(address, context, binary) {\n  return {\n    type: ADD_INSTANCE,\n    address, context, binary\n  }\n}\n\nexport const CALL = \"CALL\";\nexport function call(address) {\n  return {\n    type: CALL,\n    address\n  };\n}\n\nexport const CREATE = \"CREATE\";\nexport function create(binary) {\n  return {\n    type: CREATE,\n    binary\n  };\n}\n\nexport const RETURN = \"RETURN\";\nexport function returnCall() {\n  return {\n    type: RETURN\n  }\n}\n"] }, _coverageSchema: "332fd63041d2c1bcb487cc26dd0d5f7d97098a6c" },
      coverage = global[gcv] || (global[gcv] = {});if (coverage[path] && coverage[path].hash === hash) {
    return coverage[path];
  }coverageData.hash = hash;return coverage[path] = coverageData;
}();cov_2sixj2yze.s[0]++;Object.defineProperty(exports, "__esModule", { value: true });cov_2sixj2yze.s[1]++;exports.addContext = addContext;cov_2sixj2yze.s[2]++;exports.addInstance = addInstance;cov_2sixj2yze.s[3]++;exports.call = call;cov_2sixj2yze.s[4]++;exports.create = create;cov_2sixj2yze.s[5]++;exports.returnCall = returnCall;const ADD_CONTEXT = (cov_2sixj2yze.s[6]++, exports.ADD_CONTEXT = "EVM_ADD_CONTEXT");function addContext(contractName, binary) {
  cov_2sixj2yze.f[0]++;cov_2sixj2yze.s[7]++;return { type: ADD_CONTEXT, contractName, binary };
}const ADD_INSTANCE = (cov_2sixj2yze.s[8]++, exports.ADD_INSTANCE = "EVM_ADD_INSTANCE");function addInstance(address, context, binary) {
  cov_2sixj2yze.f[1]++;cov_2sixj2yze.s[9]++;return { type: ADD_INSTANCE, address, context, binary };
}const CALL = (cov_2sixj2yze.s[10]++, exports.CALL = "CALL");function call(address) {
  cov_2sixj2yze.f[2]++;cov_2sixj2yze.s[11]++;return { type: CALL, address };
}const CREATE = (cov_2sixj2yze.s[12]++, exports.CREATE = "CREATE");function create(binary) {
  cov_2sixj2yze.f[3]++;cov_2sixj2yze.s[13]++;return { type: CREATE, binary };
}const RETURN = (cov_2sixj2yze.s[14]++, exports.RETURN = "RETURN");function returnCall() {
  cov_2sixj2yze.f[4]++;cov_2sixj2yze.s[15]++;return { type: RETURN };
}

/***/ }),
/* 37 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var cov_1h116yd0jo = function () {
  var path = "/Users/gnidan/src/work/truffle/packages/truffle-debugger/lib/session/selectors/index.js",
      hash = "93e1661fe5604948e579e53c0781a1bde46417ae",
      Function = function () {}.constructor,
      global = new Function('return this')(),
      gcv = "__coverage__",
      coverageData = { path: "/Users/gnidan/src/work/truffle/packages/truffle-debugger/lib/session/selectors/index.js", statementMap: { "0": { start: { line: 3, column: 0 }, end: { line: 5, column: 3 } }, "1": { start: { line: 7, column: 15 }, end: { line: 7, column: 62 } }, "2": { start: { line: 9, column: 16 }, end: { line: 9, column: 48 } }, "3": { start: { line: 11, column: 14 }, end: { line: 11, column: 60 } }, "4": { start: { line: 13, column: 15 }, end: { line: 13, column: 46 } }, "5": { start: { line: 15, column: 13 }, end: { line: 15, column: 29 } }, "6": { start: { line: 17, column: 14 }, end: { line: 17, column: 44 } }, "7": { start: { line: 19, column: 20 }, end: { line: 19, column: 44 } }, "8": { start: { line: 21, column: 17 }, end: { line: 21, column: 45 } }, "9": { start: { line: 23, column: 18 }, end: { line: 23, column: 52 } }, "10": { start: { line: 25, column: 18 }, end: { line: 25, column: 51 } }, "11": { start: { line: 27, column: 18 }, end: { line: 27, column: 53 } }, "12": { start: { line: 29, column: 39 }, end: { line: 29, column: 93 } }, "13": { start: { line: 31, column: 14 }, end: { line: 31, column: 64 } }, "14": { start: { line: 33, column: 16 }, end: { line: 57, column: 2 } }, "15": { start: { line: 42, column: 243 }, end: { line: 55, column: 7 } }, "16": { start: { line: 43, column: 37 }, end: { line: 43, column: 54 } }, "17": { start: { line: 44, column: 26 }, end: { line: 44, column: 45 } }, "18": { start: { line: 46, column: 23 }, end: { line: 48, column: 63 } }, "19": { start: { line: 50, column: 6 }, end: { line: 54, column: 8 } }, "20": { start: { line: 59, column: 0 }, end: { line: 59, column: 26 } } }, fnMap: { "0": { name: "_interopRequireDefault", decl: { start: { line: 29, column: 9 }, end: { line: 29, column: 31 } }, loc: { start: { line: 29, column: 37 }, end: { line: 29, column: 95 } }, line: 29 }, "1": { name: "(anonymous_1)", decl: { start: { line: 42, column: 197 }, end: { line: 42, column: 198 } }, loc: { start: { line: 42, column: 243 }, end: { line: 55, column: 7 } }, line: 42 }, "2": { name: "(anonymous_2)", decl: { start: { line: 42, column: 310 }, end: { line: 42, column: 311 } }, loc: { start: { line: 42, column: 338 }, end: { line: 55, column: 5 } }, line: 42 } }, branchMap: { "0": { loc: { start: { line: 29, column: 46 }, end: { line: 29, column: 92 } }, type: "cond-expr", locations: [{ start: { line: 29, column: 70 }, end: { line: 29, column: 73 } }, { start: { line: 29, column: 76 }, end: { line: 29, column: 92 } }], line: 29 }, "1": { loc: { start: { line: 29, column: 46 }, end: { line: 29, column: 67 } }, type: "binary-expr", locations: [{ start: { line: 29, column: 46 }, end: { line: 29, column: 49 } }, { start: { line: 29, column: 53 }, end: { line: 29, column: 67 } }], line: 29 }, "2": { loc: { start: { line: 46, column: 23 }, end: { line: 48, column: 63 } }, type: "cond-expr", locations: [{ start: { line: 48, column: 6 }, end: { line: 48, column: 58 } }, { start: { line: 48, column: 61 }, end: { line: 48, column: 63 } }], line: 46 } }, s: { "0": 0, "1": 0, "2": 0, "3": 0, "4": 0, "5": 0, "6": 0, "7": 0, "8": 0, "9": 0, "10": 0, "11": 0, "12": 0, "13": 0, "14": 0, "15": 0, "16": 0, "17": 0, "18": 0, "19": 0, "20": 0 }, f: { "0": 0, "1": 0, "2": 0 }, b: { "0": [0, 0], "1": [0, 0], "2": [0, 0] }, inputSourceMap: { version: 3, sources: ["lib/session/selectors/index.js"], names: ["debug", "session", "info", "affectedInstances", "evm", "instances", "contexts", "solidity", "sources", "sourceMaps", "map", "address", "context", "contractName", "binary", "sourceMap", "source", "match"], mappings: ";;;;;;;;;;;;;;AAAA;;;;AAGA;;AAEA;;;;AACA;;;;;;AALA,MAAMA,QAAQ,qBAAY,4BAAZ,CAAd;;AAOA,MAAMC,UAAU,sCAAmB;AACjC;;;AAGAC,QAAM;;AAEJ;;;AAGAC,uBAAmB,8BACjB,CAACC,oBAAIF,IAAJ,CAASG,SAAV,EAAqBD,oBAAIF,IAAJ,CAASI,QAA9B,EAAwCC,oBAASL,IAAT,CAAcM,OAAtD,EAA+DD,oBAASL,IAAT,CAAcO,UAA7E,CADiB,EAGjB,CAACJ,SAAD,EAAYC,QAAZ,EAAsBE,OAAtB,EAA+BC,UAA/B,KAA8C,sBAAc,EAAd,EAC5C,GAAG,uBAAeJ,SAAf,EAA0BK,GAA1B,CACD,CAAC,CAACC,OAAD,EAAU,EAACC,OAAD,EAAV,CAAD,KAA0B;AACxB,UAAI,EAAEC,YAAF,EAAgBC,MAAhB,KAA2BR,SAASM,OAAT,CAA/B;AACA,UAAI,EAAEG,SAAF,KAAgBN,WAAWG,OAAX,CAApB;;AAEA,UAAI,EAAEI,MAAF,KAAaD;AACf;AACAP,cAAQO,UAAUE,KAAV,CAAgB,uBAAhB,EAAyC,CAAzC,CAAR,CAFe,GAGf,EAHF;;AAKA,aAAO;AACL,SAACN,OAAD,GAAW;AACTE,sBADS,EACKG,MADL,EACaF;AADb;AADN,OAAP;AAKD,KAfA,CADyC,CAH7B;AALf;AAJ2B,CAAnB,CAAhB;;kBAmCeb,O", file: "index.js", sourceRoot: "/Users/gnidan/src/work/truffle/packages/truffle-debugger", sourcesContent: ["import debugModule from \"debug\";\nconst debug = debugModule(\"debugger:session:selectors\");\n\nimport { createSelectorTree, createLeaf } from \"reselect-tree\";\n\nimport evm from \"lib/evm/selectors\";\nimport solidity from \"lib/solidity/selectors\";\n\nconst session = createSelectorTree({\n  /**\n   * session.info\n   */\n  info: {\n\n    /**\n     * session.info.affectedInstances\n     */\n    affectedInstances: createLeaf(\n      [evm.info.instances, evm.info.contexts, solidity.info.sources, solidity.info.sourceMaps],\n\n      (instances, contexts, sources, sourceMaps) => Object.assign({},\n        ...Object.entries(instances).map(\n          ([address, {context}]) => {\n            let { contractName, binary } = contexts[context];\n            let { sourceMap } = sourceMaps[context];\n\n            let { source } = sourceMap ?\n              // look for source ID between second and third colons (HACK)\n              sources[sourceMap.match(/^[^:]+:[^:]+:([^:]+):/)[1]] :\n              {};\n\n            return {\n              [address]: {\n                contractName, source, binary\n              }\n            };\n          }\n        )\n      )\n    )\n  }\n});\n\nexport default session;\n"] }, _coverageSchema: "332fd63041d2c1bcb487cc26dd0d5f7d97098a6c" },
      coverage = global[gcv] || (global[gcv] = {});if (coverage[path] && coverage[path].hash === hash) {
    return coverage[path];
  }coverageData.hash = hash;return coverage[path] = coverageData;
}();cov_1h116yd0jo.s[0]++;Object.defineProperty(exports, "__esModule", { value: true });var _entries = (cov_1h116yd0jo.s[1]++, __webpack_require__(1));var _entries2 = (cov_1h116yd0jo.s[2]++, _interopRequireDefault(_entries));var _assign = (cov_1h116yd0jo.s[3]++, __webpack_require__(5));var _assign2 = (cov_1h116yd0jo.s[4]++, _interopRequireDefault(_assign));var _debug = (cov_1h116yd0jo.s[5]++, __webpack_require__(0));var _debug2 = (cov_1h116yd0jo.s[6]++, _interopRequireDefault(_debug));var _reselectTree = (cov_1h116yd0jo.s[7]++, __webpack_require__(9));var _selectors = (cov_1h116yd0jo.s[8]++, __webpack_require__(3));var _selectors2 = (cov_1h116yd0jo.s[9]++, _interopRequireDefault(_selectors));var _selectors3 = (cov_1h116yd0jo.s[10]++, __webpack_require__(2));var _selectors4 = (cov_1h116yd0jo.s[11]++, _interopRequireDefault(_selectors3));function _interopRequireDefault(obj) {
  cov_1h116yd0jo.f[0]++;cov_1h116yd0jo.s[12]++;return (cov_1h116yd0jo.b[1][0]++, obj) && (cov_1h116yd0jo.b[1][1]++, obj.__esModule) ? (cov_1h116yd0jo.b[0][0]++, obj) : (cov_1h116yd0jo.b[0][1]++, { default: obj });
}const debug = (cov_1h116yd0jo.s[13]++, (0, _debug2.default)("debugger:session:selectors"));const session = (cov_1h116yd0jo.s[14]++, (0, _reselectTree.createSelectorTree)({ info: { affectedInstances: (0, _reselectTree.createLeaf)([_selectors2.default.info.instances, _selectors2.default.info.contexts, _selectors4.default.info.sources, _selectors4.default.info.sourceMaps], (instances, contexts, sources, sourceMaps) => {
      cov_1h116yd0jo.f[1]++;cov_1h116yd0jo.s[15]++;return (0, _assign2.default)({}, ...(0, _entries2.default)(instances).map(([address, { context }]) => {
        cov_1h116yd0jo.f[2]++;let { contractName, binary } = (cov_1h116yd0jo.s[16]++, contexts[context]);let { sourceMap } = (cov_1h116yd0jo.s[17]++, sourceMaps[context]);let { source } = (cov_1h116yd0jo.s[18]++, sourceMap ? (cov_1h116yd0jo.b[2][0]++, sources[sourceMap.match(/^[^:]+:[^:]+:([^:]+):/)[1]]) : (cov_1h116yd0jo.b[2][1]++, {}));cov_1h116yd0jo.s[19]++;return { [address]: { contractName, source, binary } };
      }));
    }) } }));cov_1h116yd0jo.s[20]++;exports.default = session;

/***/ }),
/* 38 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _values = __webpack_require__(29);

var _values2 = _interopRequireDefault(_values);

var _asyncToGenerator2 = __webpack_require__(7);

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

let prepareDebugger = (() => {
  var _ref2 = (0, _asyncToGenerator3.default)(function* (testName, sources) {
    const provider = _ganacheCli2.default.provider({ seed: "debugger", gasLimit: 7000000 });
    const web3 = new _web2.default(provider);

    let { abstractions, artifacts: contracts, files } = yield (0, _helpers.prepareContracts)(provider, sources);

    let instance = yield abstractions[contractName(testName)].deployed();
    let receipt = yield instance.run();
    let txHash = receipt.tx;

    let bugger = yield _debugger2.default.forTx(txHash, { provider, files, contracts });

    let session = bugger.connect();

    let source = sources[fileName(testName)];

    //we'll need the debugger-internal ID of this source
    let debuggerSources = session.view(_selectors4.default.info.sources);
    let matchingSources = (0, _values2.default)(debuggerSources).filter(function (sourceObject) {
      return sourceObject.sourcePath.includes(contractName(testName));
    });
    let sourceId = matchingSources[0].id;

    let breakpoint = {
      sourceId,
      line: lastStatementLine(source)
    };

    session.addBreakpoint(breakpoint, true);

    session.continueUntilBreakpoint();

    return session;
  });

  return function prepareDebugger(_x, _x2) {
    return _ref2.apply(this, arguments);
  };
})();

let getDecode = (() => {
  var _ref3 = (0, _asyncToGenerator3.default)(function* (session) {
    const definitions = session.view(_selectors2.default.current.identifiers.definitions);
    const refs = session.view(_selectors2.default.current.identifiers.refs);

    const decode = session.view(_selectors2.default.views.decoder);
    return function (name) {
      return (0, _utils.cleanBigNumbers)(decode(definitions[name], refs[name]));
    };
  });

  return function getDecode(_x3) {
    return _ref3.apply(this, arguments);
  };
})();

exports.generateUints = generateUints;
exports.describeDecoding = describeDecoding;

var _debug = __webpack_require__(0);

var _debug2 = _interopRequireDefault(_debug);

var _ganacheCli = __webpack_require__(15);

var _ganacheCli2 = _interopRequireDefault(_ganacheCli);

var _web = __webpack_require__(8);

var _web2 = _interopRequireDefault(_web);

var _chai = __webpack_require__(12);

var _changeCase = __webpack_require__(84);

var _changeCase2 = _interopRequireDefault(_changeCase);

var _helpers = __webpack_require__(13);

var _debugger = __webpack_require__(17);

var _debugger2 = _interopRequireDefault(_debugger);

var _utils = __webpack_require__(11);

var _selectors = __webpack_require__(27);

var _selectors2 = _interopRequireDefault(_selectors);

var _selectors3 = __webpack_require__(2);

var _selectors4 = _interopRequireDefault(_selectors3);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const debug = (0, _debug2.default)("test:data:decode");

function* generateUints() {
  let x = 0;
  while (true) {
    yield x;
    x++;
  }
}

function contractName(testName) {
  return testName.replace(/ /g, "");
}

function fileName(testName) {
  return `${contractName(testName)}.sol`;
}

function generateTests(fixtures) {
  for (let _ref of fixtures) {
    let { name, value: expected } = _ref;

    it(`correctly decodes ${name}`, () => {
      _chai.assert.deepEqual(this.decode(name), expected);
    });
  }
}

function lastStatementLine(source) {
  const lines = source.split("\n");
  for (let i = lines.length - 1; i >= 0; i--) {
    let line = lines[i];
    if (line.indexOf(";") != -1) {
      return i;
    }
  }
}

function describeDecoding(testName, fixtures, selector, generateSource) {
  const sources = {
    [fileName(testName)]: generateSource(contractName(testName), fixtures)
  };

  describe(testName, function () {
    var _this = this;

    const testDebug = (0, _debug2.default)(`test:data:decode:${_changeCase2.default.paramCase(testName)}`);

    testDebug("source %s", (0, _values2.default)(sources)[0]);

    this.timeout(30000);

    before("runs and observes debugger", (0, _asyncToGenerator3.default)(function* () {
      const session = yield prepareDebugger(testName, sources);
      _this.decode = yield getDecode(session);

      if (selector) {
        debug("selector %O", session.view(selector));
      }
    }));

    generateTests.bind(this)(fixtures);
  });
}

/***/ }),
/* 39 */
/***/ (function(module, exports, __webpack_require__) {

// runtime helper
function inManifest(id) { return global.__webpackManifest__.indexOf(id) >= 0;}
function run(id) { __webpack_require__(id);}

// modules to execute goes here
var ids = [
/*require.resolve*/(40),/*require.resolve*/(80),/*require.resolve*/(81),/*require.resolve*/(38),/*require.resolve*/(85),/*require.resolve*/(86),/*require.resolve*/(13),/*require.resolve*/(87),/*require.resolve*/(88)
];

ids.filter(inManifest).forEach(run)

/***/ }),
/* 40 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _asyncToGenerator2 = __webpack_require__(7);

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _debug = __webpack_require__(0);

var _debug2 = _interopRequireDefault(_debug);

var _chai = __webpack_require__(12);

var _ganacheCli = __webpack_require__(15);

var _ganacheCli2 = _interopRequireDefault(_ganacheCli);

var _web = __webpack_require__(8);

var _web2 = _interopRequireDefault(_web);

var _helpers = __webpack_require__(13);

var _debugger = __webpack_require__(17);

var _debugger2 = _interopRequireDefault(_debugger);

var _selectors = __webpack_require__(18);

var _selectors2 = _interopRequireDefault(_selectors);

var _selectors3 = __webpack_require__(2);

var _selectors4 = _interopRequireDefault(_selectors3);

var _map = __webpack_require__(30);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const debug = (0, _debug2.default)("test:ast");

const __VARIABLES = `
pragma solidity ^0.4.18;

contract Variables {
  event Result(uint256 result);

  uint256 qux;
  string quux;

  function stack(uint256 foo) public returns (uint256) {
    uint256 bar = foo + 1;
    uint256 baz = innerStack(bar);

    baz += 4;

    qux = baz;

    emit Result(baz);

    return baz;
  }

  function innerStack(uint256 baz) public returns (uint256) {
    uint256 bar = baz + 2;
    return bar;
  }
}
`;

let sources = {
  "Variables.sol": __VARIABLES
};

describe("AST", function () {
  var provider;
  var web3;

  var abstractions;
  var artifacts;
  var files;

  before("Create Provider", (0, _asyncToGenerator3.default)(function* () {
    provider = _ganacheCli2.default.provider({ seed: "debugger", gasLimit: 7000000 });
    web3 = new _web2.default(provider);
  }));

  before("Prepare contracts and artifacts", (0, _asyncToGenerator3.default)(function* () {
    this.timeout(30000);

    let prepared = yield (0, _helpers.prepareContracts)(provider, sources);
    abstractions = prepared.abstractions;
    artifacts = prepared.artifacts;
    files = prepared.files;
  }));

  describe("Node pointer", function () {
    it("traverses", (0, _asyncToGenerator3.default)(function* () {
      this.timeout(0);
      let instance = yield abstractions.Variables.deployed();
      let receipt = yield instance.stack(4);
      let txHash = receipt.tx;

      let bugger = yield _debugger2.default.forTx(txHash, {
        provider,
        files,
        contracts: artifacts
      });

      let session = bugger.connect();
      debug("ast: %O", session.view(_selectors2.default.current.tree));

      do {
        let { start, length } = session.view(_selectors4.default.current.sourceRange);
        let end = start + length;

        let node = session.view(_selectors2.default.current.node);

        let [nodeStart, nodeLength] = (0, _map.getRange)(node);
        let nodeEnd = nodeStart + nodeLength;

        let pointer = session.view(_selectors2.default.current.pointer);

        _chai.assert.isAtMost(nodeStart, start, `Node ${pointer} at should not begin after instruction source range`);
        _chai.assert.isAtLeast(nodeEnd, end, `Node ${pointer} should not end after source`);

        session.stepNext();
      } while (!session.finished);
    }));
  });
});

/***/ }),
/* 41 */
/***/ (function(module, exports) {

module.exports = require("path");

/***/ }),
/* 42 */
/***/ (function(module, exports) {

module.exports = require("fs-extra");

/***/ }),
/* 43 */
/***/ (function(module, exports) {

module.exports = require("async");

/***/ }),
/* 44 */
/***/ (function(module, exports) {

module.exports = require("truffle-workflow-compile");

/***/ }),
/* 45 */
/***/ (function(module, exports) {

module.exports = require("truffle-debug-utils");

/***/ }),
/* 46 */
/***/ (function(module, exports) {

module.exports = require("truffle-artifactor");

/***/ }),
/* 47 */
/***/ (function(module, exports) {

module.exports = require("truffle-migrate");

/***/ }),
/* 48 */
/***/ (function(module, exports) {

module.exports = require("truffle-box");

/***/ }),
/* 49 */
/***/ (function(module, exports) {

module.exports = require("truffle-resolver");

/***/ }),
/* 50 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var cov_18s41jxx88 = function () {
  var path = "/Users/gnidan/src/work/truffle/packages/truffle-debugger/lib/session/index.js",
      hash = "454a4231837e2c48ecccfeebf030b3888c4ed556",
      Function = function () {}.constructor,
      global = new Function('return this')(),
      gcv = "__coverage__",
      coverageData = { path: "/Users/gnidan/src/work/truffle/packages/truffle-debugger/lib/session/index.js", statementMap: { "0": { start: { line: 3, column: 0 }, end: { line: 5, column: 3 } }, "1": { start: { line: 7, column: 14 }, end: { line: 7, column: 60 } }, "2": { start: { line: 9, column: 15 }, end: { line: 9, column: 46 } }, "3": { start: { line: 11, column: 15 }, end: { line: 11, column: 55 } }, "4": { start: { line: 13, column: 16 }, end: { line: 13, column: 48 } }, "5": { start: { line: 15, column: 13 }, end: { line: 15, column: 29 } }, "6": { start: { line: 17, column: 14 }, end: { line: 17, column: 44 } }, "7": { start: { line: 19, column: 17 }, end: { line: 19, column: 47 } }, "8": { start: { line: 21, column: 18 }, end: { line: 21, column: 52 } }, "9": { start: { line: 23, column: 18 }, end: { line: 23, column: 46 } }, "10": { start: { line: 25, column: 18 }, end: { line: 25, column: 53 } }, "11": { start: { line: 27, column: 18 }, end: { line: 27, column: 46 } }, "12": { start: { line: 29, column: 18 }, end: { line: 29, column: 53 } }, "13": { start: { line: 31, column: 18 }, end: { line: 31, column: 51 } }, "14": { start: { line: 33, column: 18 }, end: { line: 33, column: 53 } }, "15": { start: { line: 35, column: 13 }, end: { line: 35, column: 33 } }, "16": { start: { line: 37, column: 14 }, end: { line: 37, column: 44 } }, "17": { start: { line: 39, column: 15 }, end: { line: 39, column: 48 } }, "18": { start: { line: 41, column: 17 }, end: { line: 41, column: 50 } }, "19": { start: { line: 43, column: 16 }, end: { line: 43, column: 36 } }, "20": { start: { line: 45, column: 14 }, end: { line: 45, column: 48 } }, "21": { start: { line: 47, column: 13 }, end: { line: 47, column: 31 } }, "22": { start: { line: 49, column: 14 }, end: { line: 49, column: 44 } }, "23": { start: { line: 51, column: 16 }, end: { line: 51, column: 37 } }, "24": { start: { line: 53, column: 17 }, end: { line: 53, column: 50 } }, "25": { start: { line: 55, column: 40 }, end: { line: 55, column: 267 } }, "26": { start: { line: 55, column: 69 }, end: { line: 55, column: 80 } }, "27": { start: { line: 55, column: 103 }, end: { line: 55, column: 105 } }, "28": { start: { line: 55, column: 107 }, end: { line: 55, column: 228 } }, "29": { start: { line: 55, column: 126 }, end: { line: 55, column: 226 } }, "30": { start: { line: 55, column: 149 }, end: { line: 55, column: 224 } }, "31": { start: { line: 55, column: 201 }, end: { line: 55, column: 224 } }, "32": { start: { line: 55, column: 229 }, end: { line: 55, column: 250 } }, "33": { start: { line: 55, column: 251 }, end: { line: 55, column: 265 } }, "34": { start: { line: 57, column: 39 }, end: { line: 57, column: 93 } }, "35": { start: { line: 59, column: 14 }, end: { line: 59, column: 54 } }, "36": { start: { line: 76, column: 4 }, end: { line: 76, column: 76 } }, "37": { start: { line: 78, column: 32 }, end: { line: 78, column: 67 } }, "38": { start: { line: 81, column: 4 }, end: { line: 81, column: 69 } }, "39": { start: { line: 83, column: 4 }, end: { line: 83, column: 58 } }, "40": { start: { line: 87, column: 4 }, end: { line: 95, column: 7 } }, "41": { start: { line: 88, column: 6 }, end: { line: 94, column: 9 } }, "42": { start: { line: 89, column: 8 }, end: { line: 93, column: 9 } }, "43": { start: { line: 90, column: 10 }, end: { line: 90, column: 19 } }, "44": { start: { line: 91, column: 15 }, end: { line: 93, column: 9 } }, "45": { start: { line: 92, column: 10 }, end: { line: 92, column: 43 } }, "46": { start: { line: 111, column: 24 }, end: { line: 111, column: 26 } }, "47": { start: { line: 112, column: 19 }, end: { line: 112, column: 21 } }, "48": { start: { line: 115, column: 4 }, end: { line: 144, column: 5 } }, "49": { start: { line: 125, column: 10 }, end: { line: 125, column: 18 } }, "50": { start: { line: 127, column: 6 }, end: { line: 127, column: 62 } }, "51": { start: { line: 129, column: 6 }, end: { line: 135, column: 7 } }, "52": { start: { line: 130, column: 8 }, end: { line: 134, column: 11 } }, "53": { start: { line: 137, column: 6 }, end: { line: 143, column: 7 } }, "54": { start: { line: 138, column: 8 }, end: { line: 142, column: 11 } }, "55": { start: { line: 146, column: 4 }, end: { line: 150, column: 5 } }, "56": { start: { line: 147, column: 6 }, end: { line: 147, column: 53 } }, "57": { start: { line: 149, column: 6 }, end: { line: 149, column: 55 } }, "58": { start: { line: 149, column: 34 }, end: { line: 149, column: 53 } }, "59": { start: { line: 152, column: 4 }, end: { line: 152, column: 33 } }, "60": { start: { line: 156, column: 4 }, end: { line: 156, column: 34 } }, "61": { start: { line: 160, column: 4 }, end: { line: 160, column: 32 } }, "62": { start: { line: 164, column: 4 }, end: { line: 164, column: 44 } }, "63": { start: { line: 168, column: 4 }, end: { line: 168, column: 84 } }, "64": { start: { line: 172, column: 4 }, end: { line: 176, column: 5 } }, "65": { start: { line: 173, column: 6 }, end: { line: 173, column: 56 } }, "66": { start: { line: 175, column: 6 }, end: { line: 175, column: 19 } }, "67": { start: { line: 178, column: 4 }, end: { line: 178, column: 33 } }, "68": { start: { line: 180, column: 4 }, end: { line: 180, column: 16 } }, "69": { start: { line: 184, column: 4 }, end: { line: 184, column: 49 } }, "70": { start: { line: 188, column: 4 }, end: { line: 188, column: 47 } }, "71": { start: { line: 192, column: 4 }, end: { line: 192, column: 48 } }, "72": { start: { line: 196, column: 4 }, end: { line: 196, column: 48 } }, "73": { start: { line: 200, column: 4 }, end: { line: 200, column: 48 } }, "74": { start: { line: 204, column: 4 }, end: { line: 204, column: 47 } }, "75": { start: { line: 208, column: 4 }, end: { line: 208, column: 63 } }, "76": { start: { line: 212, column: 4 }, end: { line: 212, column: 63 } }, "77": { start: { line: 216, column: 4 }, end: { line: 216, column: 66 } }, "78": { start: { line: 219, column: 0 }, end: { line: 219, column: 26 } } }, fnMap: { "0": { name: "_interopRequireWildcard", decl: { start: { line: 55, column: 9 }, end: { line: 55, column: 32 } }, loc: { start: { line: 55, column: 38 }, end: { line: 55, column: 269 } }, line: 55 }, "1": { name: "_interopRequireDefault", decl: { start: { line: 57, column: 9 }, end: { line: 57, column: 31 } }, loc: { start: { line: 57, column: 37 }, end: { line: 57, column: 95 } }, line: 57 }, "2": { name: "(anonymous_2)", decl: { start: { line: 72, column: 2 }, end: { line: 72, column: 3 } }, loc: { start: { line: 72, column: 50 }, end: { line: 84, column: 3 } }, line: 72 }, "3": { name: "(anonymous_3)", decl: { start: { line: 86, column: 2 }, end: { line: 86, column: 3 } }, loc: { start: { line: 86, column: 10 }, end: { line: 96, column: 3 } }, line: 86 }, "4": { name: "(anonymous_4)", decl: { start: { line: 87, column: 33 }, end: { line: 87, column: 34 } }, loc: { start: { line: 87, column: 53 }, end: { line: 95, column: 5 } }, line: 87 }, "5": { name: "(anonymous_5)", decl: { start: { line: 88, column: 28 }, end: { line: 88, column: 29 } }, loc: { start: { line: 88, column: 34 }, end: { line: 94, column: 7 } }, line: 88 }, "6": { name: "(anonymous_6)", decl: { start: { line: 110, column: 2 }, end: { line: 110, column: 3 } }, loc: { start: { line: 110, column: 44 }, end: { line: 153, column: 3 } }, line: 110 }, "7": { name: "(anonymous_7)", decl: { start: { line: 149, column: 26 }, end: { line: 149, column: 27 } }, loc: { start: { line: 149, column: 34 }, end: { line: 149, column: 53 } }, line: 149 }, "8": { name: "(anonymous_8)", decl: { start: { line: 155, column: 2 }, end: { line: 155, column: 3 } }, loc: { start: { line: 155, column: 14 }, end: { line: 157, column: 3 } }, line: 155 }, "9": { name: "(anonymous_9)", decl: { start: { line: 159, column: 2 }, end: { line: 159, column: 3 } }, loc: { start: { line: 159, column: 17 }, end: { line: 161, column: 3 } }, line: 159 }, "10": { name: "(anonymous_10)", decl: { start: { line: 163, column: 2 }, end: { line: 163, column: 3 } }, loc: { start: { line: 163, column: 17 }, end: { line: 165, column: 3 } }, line: 163 }, "11": { name: "(anonymous_11)", decl: { start: { line: 167, column: 2 }, end: { line: 167, column: 3 } }, loc: { start: { line: 167, column: 15 }, end: { line: 169, column: 3 } }, line: 167 }, "12": { name: "(anonymous_12)", decl: { start: { line: 171, column: 2 }, end: { line: 171, column: 3 } }, loc: { start: { line: 171, column: 19 }, end: { line: 181, column: 3 } }, line: 171 }, "13": { name: "(anonymous_13)", decl: { start: { line: 183, column: 2 }, end: { line: 183, column: 3 } }, loc: { start: { line: 183, column: 14 }, end: { line: 185, column: 3 } }, line: 183 }, "14": { name: "(anonymous_14)", decl: { start: { line: 187, column: 2 }, end: { line: 187, column: 3 } }, loc: { start: { line: 187, column: 12 }, end: { line: 189, column: 3 } }, line: 187 }, "15": { name: "(anonymous_15)", decl: { start: { line: 191, column: 2 }, end: { line: 191, column: 3 } }, loc: { start: { line: 191, column: 13 }, end: { line: 193, column: 3 } }, line: 191 }, "16": { name: "(anonymous_16)", decl: { start: { line: 195, column: 2 }, end: { line: 195, column: 3 } }, loc: { start: { line: 195, column: 13 }, end: { line: 197, column: 3 } }, line: 195 }, "17": { name: "(anonymous_17)", decl: { start: { line: 199, column: 2 }, end: { line: 199, column: 3 } }, loc: { start: { line: 199, column: 13 }, end: { line: 201, column: 3 } }, line: 199 }, "18": { name: "(anonymous_18)", decl: { start: { line: 203, column: 2 }, end: { line: 203, column: 3 } }, loc: { start: { line: 203, column: 12 }, end: { line: 205, column: 3 } }, line: 203 }, "19": { name: "(anonymous_19)", decl: { start: { line: 207, column: 2 }, end: { line: 207, column: 3 } }, loc: { start: { line: 207, column: 28 }, end: { line: 209, column: 3 } }, line: 207 }, "20": { name: "(anonymous_20)", decl: { start: { line: 211, column: 2 }, end: { line: 211, column: 3 } }, loc: { start: { line: 211, column: 28 }, end: { line: 213, column: 3 } }, line: 211 }, "21": { name: "(anonymous_21)", decl: { start: { line: 215, column: 2 }, end: { line: 215, column: 3 } }, loc: { start: { line: 215, column: 31 }, end: { line: 217, column: 3 } }, line: 215 } }, branchMap: { "0": { loc: { start: { line: 55, column: 40 }, end: { line: 55, column: 267 } }, type: "if", locations: [{ start: { line: 55, column: 40 }, end: { line: 55, column: 267 } }, { start: { line: 55, column: 40 }, end: { line: 55, column: 267 } }], line: 55 }, "1": { loc: { start: { line: 55, column: 44 }, end: { line: 55, column: 65 } }, type: "binary-expr", locations: [{ start: { line: 55, column: 44 }, end: { line: 55, column: 47 } }, { start: { line: 55, column: 51 }, end: { line: 55, column: 65 } }], line: 55 }, "2": { loc: { start: { line: 55, column: 107 }, end: { line: 55, column: 228 } }, type: "if", locations: [{ start: { line: 55, column: 107 }, end: { line: 55, column: 228 } }, { start: { line: 55, column: 107 }, end: { line: 55, column: 228 } }], line: 55 }, "3": { loc: { start: { line: 55, column: 149 }, end: { line: 55, column: 224 } }, type: "if", locations: [{ start: { line: 55, column: 149 }, end: { line: 55, column: 224 } }, { start: { line: 55, column: 149 }, end: { line: 55, column: 224 } }], line: 55 }, "4": { loc: { start: { line: 57, column: 46 }, end: { line: 57, column: 92 } }, type: "cond-expr", locations: [{ start: { line: 57, column: 70 }, end: { line: 57, column: 73 } }, { start: { line: 57, column: 76 }, end: { line: 57, column: 92 } }], line: 57 }, "5": { loc: { start: { line: 57, column: 46 }, end: { line: 57, column: 67 } }, type: "binary-expr", locations: [{ start: { line: 57, column: 46 }, end: { line: 57, column: 49 } }, { start: { line: 57, column: 53 }, end: { line: 57, column: 67 } }], line: 57 }, "6": { loc: { start: { line: 89, column: 8 }, end: { line: 93, column: 9 } }, type: "if", locations: [{ start: { line: 89, column: 8 }, end: { line: 93, column: 9 } }, { start: { line: 89, column: 8 }, end: { line: 93, column: 9 } }], line: 89 }, "7": { loc: { start: { line: 91, column: 15 }, end: { line: 93, column: 9 } }, type: "if", locations: [{ start: { line: 91, column: 15 }, end: { line: 93, column: 9 } }, { start: { line: 91, column: 15 }, end: { line: 93, column: 9 } }], line: 91 }, "8": { loc: { start: { line: 110, column: 30 }, end: { line: 110, column: 42 } }, type: "default-arg", locations: [{ start: { line: 110, column: 38 }, end: { line: 110, column: 42 } }], line: 110 }, "9": { loc: { start: { line: 129, column: 6 }, end: { line: 135, column: 7 } }, type: "if", locations: [{ start: { line: 129, column: 6 }, end: { line: 135, column: 7 } }, { start: { line: 129, column: 6 }, end: { line: 135, column: 7 } }], line: 129 }, "10": { loc: { start: { line: 129, column: 10 }, end: { line: 129, column: 34 } }, type: "binary-expr", locations: [{ start: { line: 129, column: 10 }, end: { line: 129, column: 16 } }, { start: { line: 129, column: 20 }, end: { line: 129, column: 34 } }], line: 129 }, "11": { loc: { start: { line: 137, column: 6 }, end: { line: 143, column: 7 } }, type: "if", locations: [{ start: { line: 137, column: 6 }, end: { line: 143, column: 7 } }, { start: { line: 137, column: 6 }, end: { line: 143, column: 7 } }], line: 137 }, "12": { loc: { start: { line: 137, column: 10 }, end: { line: 137, column: 50 } }, type: "binary-expr", locations: [{ start: { line: 137, column: 10 }, end: { line: 137, column: 24 } }, { start: { line: 137, column: 28 }, end: { line: 137, column: 50 } }], line: 137 }, "13": { loc: { start: { line: 146, column: 4 }, end: { line: 150, column: 5 } }, type: "if", locations: [{ start: { line: 146, column: 4 }, end: { line: 150, column: 5 } }, { start: { line: 146, column: 4 }, end: { line: 150, column: 5 } }], line: 146 }, "14": { loc: { start: { line: 168, column: 11 }, end: { line: 168, column: 83 } }, type: "binary-expr", locations: [{ start: { line: 168, column: 11 }, end: { line: 168, column: 24 } }, { start: { line: 168, column: 28 }, end: { line: 168, column: 83 } }], line: 168 }, "15": { loc: { start: { line: 172, column: 4 }, end: { line: 176, column: 5 } }, type: "if", locations: [{ start: { line: 172, column: 4 }, end: { line: 176, column: 5 } }, { start: { line: 172, column: 4 }, end: { line: 176, column: 5 } }], line: 172 } }, s: { "0": 0, "1": 0, "2": 0, "3": 0, "4": 0, "5": 0, "6": 0, "7": 0, "8": 0, "9": 0, "10": 0, "11": 0, "12": 0, "13": 0, "14": 0, "15": 0, "16": 0, "17": 0, "18": 0, "19": 0, "20": 0, "21": 0, "22": 0, "23": 0, "24": 0, "25": 0, "26": 0, "27": 0, "28": 0, "29": 0, "30": 0, "31": 0, "32": 0, "33": 0, "34": 0, "35": 0, "36": 0, "37": 0, "38": 0, "39": 0, "40": 0, "41": 0, "42": 0, "43": 0, "44": 0, "45": 0, "46": 0, "47": 0, "48": 0, "49": 0, "50": 0, "51": 0, "52": 0, "53": 0, "54": 0, "55": 0, "56": 0, "57": 0, "58": 0, "59": 0, "60": 0, "61": 0, "62": 0, "63": 0, "64": 0, "65": 0, "66": 0, "67": 0, "68": 0, "69": 0, "70": 0, "71": 0, "72": 0, "73": 0, "74": 0, "75": 0, "76": 0, "77": 0, "78": 0 }, f: { "0": 0, "1": 0, "2": 0, "3": 0, "4": 0, "5": 0, "6": 0, "7": 0, "8": 0, "9": 0, "10": 0, "11": 0, "12": 0, "13": 0, "14": 0, "15": 0, "16": 0, "17": 0, "18": 0, "19": 0, "20": 0, "21": 0 }, b: { "0": [0, 0], "1": [0, 0], "2": [0, 0], "3": [0, 0], "4": [0, 0], "5": [0, 0], "6": [0, 0], "7": [0, 0], "8": [0], "9": [0, 0], "10": [0, 0], "11": [0, 0], "12": [0, 0], "13": [0, 0], "14": [0, 0], "15": [0, 0] }, inputSourceMap: { version: 3, sources: ["lib/session/index.js"], names: ["controller", "actions", "debug", "Session", "constructor", "contracts", "files", "txHash", "provider", "_store", "reducer", "rootSaga", "contexts", "sources", "normalize", "dispatch", "recordContracts", "start", "ready", "accept", "reject", "subscribe", "state", "session", "error", "sourcesByPath", "contract", "contractName", "binary", "sourceMap", "deployedBinary", "deployedSourceMap", "sourcePath", "source", "ast", "push", "map", "file", "getState", "view", "selector", "finished", "failed", "evm", "current", "callstack", "length", "action", "interrupt", "advance", "stepNext", "stepOver", "stepInto", "stepOut", "continueUntilBreakpoint", "addBreakpoint", "breakpoint", "removeBreakpoint"], mappings: "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", file: "index.js", sourceRoot: "/Users/gnidan/src/work/truffle/packages/truffle-debugger", sourcesContent: ["import debugModule from \"debug\";\nconst debug = debugModule(\"debugger:session\");\n\nimport trace from \"lib/trace/selectors\";\nimport evm from \"lib/evm/selectors\";\nimport ast from \"lib/ast/selectors\";\nimport solidity from \"lib/solidity/selectors\";\n\nimport configureStore from \"lib/store\";\n\nimport * as controller from \"lib/controller/actions\";\nimport * as actions from \"./actions\";\n\nimport rootSaga from \"./sagas\";\nimport reducer from \"./reducers\";\n\n/**\n * Debugger Session\n */\nexport default class Session {\n  /**\n   * @param {Array<Contract>} contracts - contract definitions\n   * @param {Array<String>} files - array of filenames for sourceMap indexes\n   * @param {string} txHash - transaction hash\n   * @param {Web3Provider} provider - web3 provider\n   * @private\n   */\n  constructor(contracts, files, txHash, provider) {\n    /**\n     * @private\n     */\n    this._store = configureStore(reducer, rootSaga);\n\n    let { contexts, sources } = Session.normalize(contracts, files);\n\n    // record contracts\n    this._store.dispatch(actions.recordContracts(contexts, sources));\n\n    this._store.dispatch(actions.start(txHash, provider));\n  }\n\n  ready() {\n    return new Promise( (accept, reject) => {\n      this._store.subscribe( () => {\n        if (this.state.session == \"ACTIVE\") {\n          accept()\n        } else if (typeof this.state.session == \"object\") {\n          reject(this.state.session.error);\n        }\n      });\n    });\n  }\n\n  /**\n   * Split up artifacts into \"contexts\" and \"sources\", dividing artifact\n   * data into appropriate buckets.\n   *\n   * Multiple contracts can be defined in the same source file, but have\n   * different bytecodes.\n   *\n   * This iterates over the contracts and collects binaries separately\n   * from sources, using the optional `files` argument to force\n   * source ordering.\n   * @private\n   */\n  static normalize(contracts, files = null) {\n    let sourcesByPath = {};\n    let contexts = [];\n    let sources;\n\n    for (let contract of contracts) {\n      let {\n        contractName,\n        binary,\n        sourceMap,\n        deployedBinary,\n        deployedSourceMap,\n        sourcePath,\n        source,\n        ast\n      } = contract;\n\n      sourcesByPath[sourcePath] = { sourcePath, source, ast };\n\n      if (binary && binary != \"0x\") {\n        contexts.push({\n          contractName,\n          binary,\n          sourceMap\n        });\n      }\n\n      if (deployedBinary && deployedBinary != \"0x\") {\n        contexts.push({\n          contractName,\n          binary: deployedBinary,\n          sourceMap: deployedSourceMap\n        });\n      }\n    }\n\n    if (!files) {\n      sources = Object.values(sourcesByPath);\n    } else {\n      sources = files.map(file => sourcesByPath[file]);\n    }\n\n    return { contexts, sources };\n  }\n\n  get state() {\n    return this._store.getState();\n  }\n\n  view(selector) {\n    return selector(this.state);\n  }\n\n  get finished() {\n    return this.state.session == \"FINISHED\";\n  }\n\n  get failed() {\n    return this.finished && this.view(evm.current.callstack).length\n  }\n\n  dispatch(action) {\n    if (this.finished) {\n      debug(\"finished: intercepting action %o\", action);\n\n      return false;\n    }\n\n    this._store.dispatch(action);\n\n    return true;\n  }\n\n  interrupt() {\n    return this.dispatch(controller.interrupt());\n  }\n\n  advance() {\n    return this.dispatch(controller.advance());\n  }\n\n  stepNext() {\n    return this.dispatch(controller.stepNext());\n  }\n\n  stepOver() {\n    return this.dispatch(controller.stepOver());\n  }\n\n  stepInto() {\n    return this.dispatch(controller.stepInto());\n  }\n\n  stepOut() {\n    return this.dispatch(controller.stepOut());\n  }\n\n  continueUntilBreakpoint() {\n    return this.dispatch(controller.continueUntilBreakpoint());\n  }\n\n  addBreakpoint(breakpoint)\n  {\n    return this.dispatch(controller.addBreakpoint(breakpoint));\n  }\n\n  removeBreakpoint(breakpoint){\n    return this.dispatch(controller.removeBreakpoint(breakpoint));\n  }\n}\n"] }, _coverageSchema: "332fd63041d2c1bcb487cc26dd0d5f7d97098a6c" },
      coverage = global[gcv] || (global[gcv] = {});if (coverage[path] && coverage[path].hash === hash) {
    return coverage[path];
  }coverageData.hash = hash;return coverage[path] = coverageData;
}();cov_18s41jxx88.s[0]++;Object.defineProperty(exports, "__esModule", { value: true });var _values = (cov_18s41jxx88.s[1]++, __webpack_require__(29));var _values2 = (cov_18s41jxx88.s[2]++, _interopRequireDefault(_values));var _promise = (cov_18s41jxx88.s[3]++, __webpack_require__(23));var _promise2 = (cov_18s41jxx88.s[4]++, _interopRequireDefault(_promise));var _debug = (cov_18s41jxx88.s[5]++, __webpack_require__(0));var _debug2 = (cov_18s41jxx88.s[6]++, _interopRequireDefault(_debug));var _selectors = (cov_18s41jxx88.s[7]++, __webpack_require__(19));var _selectors2 = (cov_18s41jxx88.s[8]++, _interopRequireDefault(_selectors));var _selectors3 = (cov_18s41jxx88.s[9]++, __webpack_require__(3));var _selectors4 = (cov_18s41jxx88.s[10]++, _interopRequireDefault(_selectors3));var _selectors5 = (cov_18s41jxx88.s[11]++, __webpack_require__(18));var _selectors6 = (cov_18s41jxx88.s[12]++, _interopRequireDefault(_selectors5));var _selectors7 = (cov_18s41jxx88.s[13]++, __webpack_require__(2));var _selectors8 = (cov_18s41jxx88.s[14]++, _interopRequireDefault(_selectors7));var _store = (cov_18s41jxx88.s[15]++, __webpack_require__(56));var _store2 = (cov_18s41jxx88.s[16]++, _interopRequireDefault(_store));var _actions = (cov_18s41jxx88.s[17]++, __webpack_require__(25));var controller = (cov_18s41jxx88.s[18]++, _interopRequireWildcard(_actions));var _actions2 = (cov_18s41jxx88.s[19]++, __webpack_require__(26));var actions = (cov_18s41jxx88.s[20]++, _interopRequireWildcard(_actions2));var _sagas = (cov_18s41jxx88.s[21]++, __webpack_require__(61));var _sagas2 = (cov_18s41jxx88.s[22]++, _interopRequireDefault(_sagas));var _reducers = (cov_18s41jxx88.s[23]++, __webpack_require__(73));var _reducers2 = (cov_18s41jxx88.s[24]++, _interopRequireDefault(_reducers));function _interopRequireWildcard(obj) {
  cov_18s41jxx88.f[0]++;cov_18s41jxx88.s[25]++;if ((cov_18s41jxx88.b[1][0]++, obj) && (cov_18s41jxx88.b[1][1]++, obj.__esModule)) {
    cov_18s41jxx88.b[0][0]++;cov_18s41jxx88.s[26]++;return obj;
  } else {
    cov_18s41jxx88.b[0][1]++;var newObj = (cov_18s41jxx88.s[27]++, {});cov_18s41jxx88.s[28]++;if (obj != null) {
      cov_18s41jxx88.b[2][0]++;cov_18s41jxx88.s[29]++;for (var key in obj) {
        cov_18s41jxx88.s[30]++;if (Object.prototype.hasOwnProperty.call(obj, key)) {
          cov_18s41jxx88.b[3][0]++;cov_18s41jxx88.s[31]++;newObj[key] = obj[key];
        } else {
          cov_18s41jxx88.b[3][1]++;
        }
      }
    } else {
      cov_18s41jxx88.b[2][1]++;
    }cov_18s41jxx88.s[32]++;newObj.default = obj;cov_18s41jxx88.s[33]++;return newObj;
  }
}function _interopRequireDefault(obj) {
  cov_18s41jxx88.f[1]++;cov_18s41jxx88.s[34]++;return (cov_18s41jxx88.b[5][0]++, obj) && (cov_18s41jxx88.b[5][1]++, obj.__esModule) ? (cov_18s41jxx88.b[4][0]++, obj) : (cov_18s41jxx88.b[4][1]++, { default: obj });
}const debug = (cov_18s41jxx88.s[35]++, (0, _debug2.default)("debugger:session"));class Session {
  constructor(contracts, files, txHash, provider) {
    cov_18s41jxx88.f[2]++;cov_18s41jxx88.s[36]++;this._store = (0, _store2.default)(_reducers2.default, _sagas2.default);let { contexts, sources } = (cov_18s41jxx88.s[37]++, Session.normalize(contracts, files));cov_18s41jxx88.s[38]++;this._store.dispatch(actions.recordContracts(contexts, sources));cov_18s41jxx88.s[39]++;this._store.dispatch(actions.start(txHash, provider));
  }ready() {
    cov_18s41jxx88.f[3]++;cov_18s41jxx88.s[40]++;return new _promise2.default((accept, reject) => {
      cov_18s41jxx88.f[4]++;cov_18s41jxx88.s[41]++;this._store.subscribe(() => {
        cov_18s41jxx88.f[5]++;cov_18s41jxx88.s[42]++;if (this.state.session == "ACTIVE") {
          cov_18s41jxx88.b[6][0]++;cov_18s41jxx88.s[43]++;accept();
        } else {
          cov_18s41jxx88.b[6][1]++;cov_18s41jxx88.s[44]++;if (typeof this.state.session == "object") {
            cov_18s41jxx88.b[7][0]++;cov_18s41jxx88.s[45]++;reject(this.state.session.error);
          } else {
            cov_18s41jxx88.b[7][1]++;
          }
        }
      });
    });
  }static normalize(contracts, files = (cov_18s41jxx88.b[8][0]++, null)) {
    cov_18s41jxx88.f[6]++;let sourcesByPath = (cov_18s41jxx88.s[46]++, {});let contexts = (cov_18s41jxx88.s[47]++, []);let sources;cov_18s41jxx88.s[48]++;for (let contract of contracts) {
      let { contractName, binary, sourceMap, deployedBinary, deployedSourceMap, sourcePath, source, ast } = (cov_18s41jxx88.s[49]++, contract);cov_18s41jxx88.s[50]++;sourcesByPath[sourcePath] = { sourcePath, source, ast };cov_18s41jxx88.s[51]++;if ((cov_18s41jxx88.b[10][0]++, binary) && (cov_18s41jxx88.b[10][1]++, binary != "0x")) {
        cov_18s41jxx88.b[9][0]++;cov_18s41jxx88.s[52]++;contexts.push({ contractName, binary, sourceMap });
      } else {
        cov_18s41jxx88.b[9][1]++;
      }cov_18s41jxx88.s[53]++;if ((cov_18s41jxx88.b[12][0]++, deployedBinary) && (cov_18s41jxx88.b[12][1]++, deployedBinary != "0x")) {
        cov_18s41jxx88.b[11][0]++;cov_18s41jxx88.s[54]++;contexts.push({ contractName, binary: deployedBinary, sourceMap: deployedSourceMap });
      } else {
        cov_18s41jxx88.b[11][1]++;
      }
    }cov_18s41jxx88.s[55]++;if (!files) {
      cov_18s41jxx88.b[13][0]++;cov_18s41jxx88.s[56]++;sources = (0, _values2.default)(sourcesByPath);
    } else {
      cov_18s41jxx88.b[13][1]++;cov_18s41jxx88.s[57]++;sources = files.map(file => {
        cov_18s41jxx88.f[7]++;cov_18s41jxx88.s[58]++;return sourcesByPath[file];
      });
    }cov_18s41jxx88.s[59]++;return { contexts, sources };
  }get state() {
    cov_18s41jxx88.f[8]++;cov_18s41jxx88.s[60]++;return this._store.getState();
  }view(selector) {
    cov_18s41jxx88.f[9]++;cov_18s41jxx88.s[61]++;return selector(this.state);
  }get finished() {
    cov_18s41jxx88.f[10]++;cov_18s41jxx88.s[62]++;return this.state.session == "FINISHED";
  }get failed() {
    cov_18s41jxx88.f[11]++;cov_18s41jxx88.s[63]++;return (cov_18s41jxx88.b[14][0]++, this.finished) && (cov_18s41jxx88.b[14][1]++, this.view(_selectors4.default.current.callstack).length);
  }dispatch(action) {
    cov_18s41jxx88.f[12]++;cov_18s41jxx88.s[64]++;if (this.finished) {
      cov_18s41jxx88.b[15][0]++;cov_18s41jxx88.s[65]++;debug("finished: intercepting action %o", action);cov_18s41jxx88.s[66]++;return false;
    } else {
      cov_18s41jxx88.b[15][1]++;
    }cov_18s41jxx88.s[67]++;this._store.dispatch(action);cov_18s41jxx88.s[68]++;return true;
  }interrupt() {
    cov_18s41jxx88.f[13]++;cov_18s41jxx88.s[69]++;return this.dispatch(controller.interrupt());
  }advance() {
    cov_18s41jxx88.f[14]++;cov_18s41jxx88.s[70]++;return this.dispatch(controller.advance());
  }stepNext() {
    cov_18s41jxx88.f[15]++;cov_18s41jxx88.s[71]++;return this.dispatch(controller.stepNext());
  }stepOver() {
    cov_18s41jxx88.f[16]++;cov_18s41jxx88.s[72]++;return this.dispatch(controller.stepOver());
  }stepInto() {
    cov_18s41jxx88.f[17]++;cov_18s41jxx88.s[73]++;return this.dispatch(controller.stepInto());
  }stepOut() {
    cov_18s41jxx88.f[18]++;cov_18s41jxx88.s[74]++;return this.dispatch(controller.stepOut());
  }continueUntilBreakpoint() {
    cov_18s41jxx88.f[19]++;cov_18s41jxx88.s[75]++;return this.dispatch(controller.continueUntilBreakpoint());
  }addBreakpoint(breakpoint) {
    cov_18s41jxx88.f[20]++;cov_18s41jxx88.s[76]++;return this.dispatch(controller.addBreakpoint(breakpoint));
  }removeBreakpoint(breakpoint) {
    cov_18s41jxx88.f[21]++;cov_18s41jxx88.s[77]++;return this.dispatch(controller.removeBreakpoint(breakpoint));
  }
}cov_18s41jxx88.s[78]++;exports.default = Session;

/***/ }),
/* 51 */
/***/ (function(module, exports) {

module.exports = require("fast-levenshtein");

/***/ }),
/* 52 */
/***/ (function(module, exports) {

module.exports = require("truffle-solidity-utils");

/***/ }),
/* 53 */
/***/ (function(module, exports) {

module.exports = require("truffle-code-utils");

/***/ }),
/* 54 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// An augmented AVL Tree where each node maintains a list of records and their search intervals.
// Record is composed of an interval and its underlying data, sent by a client. This allows the
// interval tree to have the same interval inserted multiple times, as long its data is different.
// Both insertion and deletion require O(log n) time. Searching requires O(k*logn) time, where `k`
// is the number of intervals in the output list.
Object.defineProperty(exports, "__esModule", { value: true });
var isSame = __webpack_require__(55);
function height(node) {
    if (node === undefined) {
        return -1;
    }
    else {
        return node.height;
    }
}
var Node = /** @class */ (function () {
    function Node(intervalTree, record) {
        this.intervalTree = intervalTree;
        this.records = [];
        this.height = 0;
        this.key = record.low;
        this.max = record.high;
        // Save the array of all records with the same key for this node
        this.records.push(record);
    }
    // Gets the highest record.high value for this node
    Node.prototype.getNodeHigh = function () {
        var high = this.records[0].high;
        for (var i = 1; i < this.records.length; i++) {
            if (this.records[i].high > high) {
                high = this.records[i].high;
            }
        }
        return high;
    };
    // Updates height value of the node. Called during insertion, rebalance, removal
    Node.prototype.updateHeight = function () {
        this.height = Math.max(height(this.left), height(this.right)) + 1;
    };
    // Updates the max value of all the parents after inserting into already existing node, as well as
    // removing the node completely or removing the record of an already existing node. Starts with
    // the parent of an affected node and bubbles up to root
    Node.prototype.updateMaxOfParents = function () {
        if (this === undefined) {
            return;
        }
        var thisHigh = this.getNodeHigh();
        if (this.left !== undefined && this.right !== undefined) {
            this.max = Math.max(Math.max(this.left.max, this.right.max), thisHigh);
        }
        else if (this.left !== undefined && this.right === undefined) {
            this.max = Math.max(this.left.max, thisHigh);
        }
        else if (this.left === undefined && this.right !== undefined) {
            this.max = Math.max(this.right.max, thisHigh);
        }
        else {
            this.max = thisHigh;
        }
        if (this.parent) {
            this.parent.updateMaxOfParents();
        }
    };
    /*
    Left-Left case:
  
           z                                      y
          / \                                   /   \
         y   T4      Right Rotate (z)          x     z
        / \          - - - - - - - - ->       / \   / \
       x   T3                                T1 T2 T3 T4
      / \
    T1   T2
  
    Left-Right case:
  
         z                               z                           x
        / \                             / \                        /   \
       y   T4  Left Rotate (y)         x  T4  Right Rotate(z)     y     z
      / \      - - - - - - - - ->     / \      - - - - - - - ->  / \   / \
    T1   x                           y  T3                      T1 T2 T3 T4
        / \                         / \
      T2   T3                      T1 T2
    */
    // Handles Left-Left case and Left-Right case after rebalancing AVL tree
    Node.prototype._updateMaxAfterRightRotate = function () {
        var parent = this.parent;
        var left = parent.left;
        // Update max of left sibling (x in first case, y in second)
        var thisParentLeftHigh = left.getNodeHigh();
        if (left.left === undefined && left.right !== undefined) {
            left.max = Math.max(thisParentLeftHigh, left.right.max);
        }
        else if (left.left !== undefined && left.right === undefined) {
            left.max = Math.max(thisParentLeftHigh, left.left.max);
        }
        else if (left.left === undefined && left.right === undefined) {
            left.max = thisParentLeftHigh;
        }
        else {
            left.max = Math.max(Math.max(left.left.max, left.right.max), thisParentLeftHigh);
        }
        // Update max of itself (z)
        var thisHigh = this.getNodeHigh();
        if (this.left === undefined && this.right !== undefined) {
            this.max = Math.max(thisHigh, this.right.max);
        }
        else if (this.left !== undefined && this.right === undefined) {
            this.max = Math.max(thisHigh, this.left.max);
        }
        else if (this.left === undefined && this.right === undefined) {
            this.max = thisHigh;
        }
        else {
            this.max = Math.max(Math.max(this.left.max, this.right.max), thisHigh);
        }
        // Update max of parent (y in first case, x in second)
        parent.max = Math.max(Math.max(parent.left.max, parent.right.max), parent.getNodeHigh());
    };
    /*
    Right-Right case:
  
      z                               y
     / \                            /   \
    T1  y     Left Rotate(z)       z     x
       / \   - - - - - - - ->     / \   / \
      T2  x                      T1 T2 T3 T4
         / \
        T3 T4
  
    Right-Left case:
  
       z                            z                            x
      / \                          / \                         /   \
     T1  y   Right Rotate (y)     T1  x      Left Rotate(z)   z     y
        / \  - - - - - - - - ->      / \   - - - - - - - ->  / \   / \
       x  T4                        T2  y                   T1 T2 T3 T4
      / \                              / \
    T2   T3                           T3 T4
    */
    // Handles Right-Right case and Right-Left case in rebalancing AVL tree
    Node.prototype._updateMaxAfterLeftRotate = function () {
        var parent = this.parent;
        var right = parent.right;
        // Update max of right sibling (x in first case, y in second)
        var thisParentRightHigh = right.getNodeHigh();
        if (right.left === undefined && right.right !== undefined) {
            right.max = Math.max(thisParentRightHigh, right.right.max);
        }
        else if (right.left !== undefined && right.right === undefined) {
            right.max = Math.max(thisParentRightHigh, right.left.max);
        }
        else if (right.left === undefined && right.right === undefined) {
            right.max = thisParentRightHigh;
        }
        else {
            right.max = Math.max(Math.max(right.left.max, right.right.max), thisParentRightHigh);
        }
        // Update max of itself (z)
        var thisHigh = this.getNodeHigh();
        if (this.left === undefined && this.right !== undefined) {
            this.max = Math.max(thisHigh, this.right.max);
        }
        else if (this.left !== undefined && this.right === undefined) {
            this.max = Math.max(thisHigh, this.left.max);
        }
        else if (this.left === undefined && this.right === undefined) {
            this.max = thisHigh;
        }
        else {
            this.max = Math.max(Math.max(this.left.max, this.right.max), thisHigh);
        }
        // Update max of parent (y in first case, x in second)
        parent.max = Math.max(Math.max(parent.left.max, right.max), parent.getNodeHigh());
    };
    Node.prototype._leftRotate = function () {
        var rightChild = this.right;
        rightChild.parent = this.parent;
        if (rightChild.parent === undefined) {
            this.intervalTree.root = rightChild;
        }
        else {
            if (rightChild.parent.left === this) {
                rightChild.parent.left = rightChild;
            }
            else if (rightChild.parent.right === this) {
                rightChild.parent.right = rightChild;
            }
        }
        this.right = rightChild.left;
        if (this.right !== undefined) {
            this.right.parent = this;
        }
        rightChild.left = this;
        this.parent = rightChild;
        this.updateHeight();
        rightChild.updateHeight();
    };
    Node.prototype._rightRotate = function () {
        var leftChild = this.left;
        leftChild.parent = this.parent;
        if (leftChild.parent === undefined) {
            this.intervalTree.root = leftChild;
        }
        else {
            if (leftChild.parent.left === this) {
                leftChild.parent.left = leftChild;
            }
            else if (leftChild.parent.right === this) {
                leftChild.parent.right = leftChild;
            }
        }
        this.left = leftChild.right;
        if (this.left !== undefined) {
            this.left.parent = this;
        }
        leftChild.right = this;
        this.parent = leftChild;
        this.updateHeight();
        leftChild.updateHeight();
    };
    // Rebalances the tree if the height value between two nodes of the same parent is greater than
    // two. There are 4 cases that can happen which are outlined in the graphics above
    Node.prototype._rebalance = function () {
        if (height(this.left) >= 2 + height(this.right)) {
            var left = this.left;
            if (height(left.left) >= height(left.right)) {
                // Left-Left case
                this._rightRotate();
                this._updateMaxAfterRightRotate();
            }
            else {
                // Left-Right case
                left._leftRotate();
                this._rightRotate();
                this._updateMaxAfterRightRotate();
            }
        }
        else if (height(this.right) >= 2 + height(this.left)) {
            var right = this.right;
            if (height(right.right) >= height(right.left)) {
                // Right-Right case
                this._leftRotate();
                this._updateMaxAfterLeftRotate();
            }
            else {
                // Right-Left case
                right._rightRotate();
                this._leftRotate();
                this._updateMaxAfterLeftRotate();
            }
        }
    };
    Node.prototype.insert = function (record) {
        if (record.low < this.key) {
            // Insert into left subtree
            if (this.left === undefined) {
                this.left = new Node(this.intervalTree, record);
                this.left.parent = this;
            }
            else {
                this.left.insert(record);
            }
        }
        else {
            // Insert into right subtree
            if (this.right === undefined) {
                this.right = new Node(this.intervalTree, record);
                this.right.parent = this;
            }
            else {
                this.right.insert(record);
            }
        }
        // Update the max value of this ancestor if needed
        if (this.max < record.high) {
            this.max = record.high;
        }
        // Update height of each node
        this.updateHeight();
        // Rebalance the tree to ensure all operations are executed in O(logn) time. This is especially
        // important in searching, as the tree has a high chance of degenerating without the rebalancing
        this._rebalance();
    };
    Node.prototype._getOverlappingRecords = function (currentNode, low, high) {
        if (currentNode.key <= high && low <= currentNode.getNodeHigh()) {
            // Nodes are overlapping, check if individual records in the node are overlapping
            var tempResults = [];
            for (var i = 0; i < currentNode.records.length; i++) {
                if (currentNode.records[i].high >= low) {
                    tempResults.push(currentNode.records[i]);
                }
            }
            return tempResults;
        }
        return [];
    };
    Node.prototype.search = function (low, high) {
        // Don't search nodes that don't exist
        if (this === undefined) {
            return [];
        }
        var leftSearch = [];
        var ownSearch = [];
        var rightSearch = [];
        // If interval is to the right of the rightmost point of any interval in this node and all its
        // children, there won't be any matches
        if (low > this.max) {
            return [];
        }
        // Search left children
        if (this.left !== undefined && this.left.max >= low) {
            leftSearch = this.left.search(low, high);
        }
        // Check this node
        ownSearch = this._getOverlappingRecords(this, low, high);
        // If interval is to the left of the start of this interval, then it can't be in any child to
        // the right
        if (high < this.key) {
            return leftSearch.concat(ownSearch);
        }
        // Otherwise, search right children
        if (this.right !== undefined) {
            rightSearch = this.right.search(low, high);
        }
        // Return accumulated results, if any
        return leftSearch.concat(ownSearch, rightSearch);
    };
    // Searches for a node by a `key` value
    Node.prototype.searchExisting = function (low) {
        if (this === undefined) {
            return undefined;
        }
        if (this.key === low) {
            return this;
        }
        else if (low < this.key) {
            if (this.left !== undefined) {
                return this.left.searchExisting(low);
            }
        }
        else {
            if (this.right !== undefined) {
                return this.right.searchExisting(low);
            }
        }
        return undefined;
    };
    // Returns the smallest node of the subtree
    Node.prototype._minValue = function () {
        if (this.left === undefined) {
            return this;
        }
        else {
            return this.left._minValue();
        }
    };
    Node.prototype.remove = function (node) {
        var parent = this.parent;
        if (node.key < this.key) {
            // Node to be removed is on the left side
            if (this.left !== undefined) {
                return this.left.remove(node);
            }
            else {
                return undefined;
            }
        }
        else if (node.key > this.key) {
            // Node to be removed is on the right side
            if (this.right !== undefined) {
                return this.right.remove(node);
            }
            else {
                return undefined;
            }
        }
        else {
            if (this.left !== undefined && this.right !== undefined) {
                // Node has two children
                var minValue = this.right._minValue();
                this.key = minValue.key;
                this.records = minValue.records;
                return this.right.remove(this);
            }
            else if (parent.left === this) {
                // One child or no child case on left side
                if (this.right !== undefined) {
                    parent.left = this.right;
                    this.right.parent = parent;
                }
                else {
                    parent.left = this.left;
                    if (this.left !== undefined) {
                        this.left.parent = parent;
                    }
                }
                parent.updateMaxOfParents();
                parent.updateHeight();
                parent._rebalance();
                return this;
            }
            else if (parent.right === this) {
                // One child or no child case on right side
                if (this.right !== undefined) {
                    parent.right = this.right;
                    this.right.parent = parent;
                }
                else {
                    parent.right = this.left;
                    if (this.left !== undefined) {
                        this.left.parent = parent;
                    }
                }
                parent.updateMaxOfParents();
                parent.updateHeight();
                parent._rebalance();
                return this;
            }
        }
    };
    return Node;
}());
exports.Node = Node;
var IntervalTree = /** @class */ (function () {
    function IntervalTree() {
        this.count = 0;
    }
    IntervalTree.prototype.insert = function (record) {
        if (record.low > record.high) {
            throw new Error('`low` value must be lower or equal to `high` value');
        }
        if (this.root === undefined) {
            // Base case: Tree is empty, new node becomes root
            this.root = new Node(this, record);
            this.count++;
            return true;
        }
        else {
            // Otherwise, check if node already exists with the same key
            var node = this.root.searchExisting(record.low);
            if (node !== undefined) {
                // Check the records in this node if there already is the one with same low, high, data
                for (var i = 0; i < node.records.length; i++) {
                    if (isSame(node.records[i], record)) {
                        // This record is same as the one we're trying to insert; return false to indicate
                        // nothing has been inserted
                        return false;
                    }
                }
                // Add the record to the node
                node.records.push(record);
                // Update max of the node and its parents if necessary
                if (record.high > node.max) {
                    node.max = record.high;
                    if (node.parent) {
                        node.parent.updateMaxOfParents();
                    }
                }
                this.count++;
                return true;
            }
            else {
                // Node with this key doesn't already exist. Call insert function on root's node
                this.root.insert(record);
                this.count++;
                return true;
            }
        }
    };
    IntervalTree.prototype.search = function (low, high) {
        if (this.root === undefined) {
            // Tree is empty; return empty array
            return [];
        }
        else {
            return this.root.search(low, high);
        }
    };
    IntervalTree.prototype.remove = function (record) {
        if (this.root === undefined) {
            // Tree is empty; nothing to remove
            return false;
        }
        else {
            var node = this.root.searchExisting(record.low);
            if (node === undefined) {
                return false;
            }
            else if (node.records.length > 1) {
                var removedRecord = void 0;
                // Node with this key has 2 or more records. Find the one we need and remove it
                for (var i = 0; i < node.records.length; i++) {
                    if (isSame(node.records[i], record)) {
                        removedRecord = node.records[i];
                        node.records.splice(i, 1);
                        break;
                    }
                }
                if (removedRecord) {
                    removedRecord = undefined;
                    // Update max of that node and its parents if necessary
                    if (record.high === node.max) {
                        var nodeHigh = node.getNodeHigh();
                        if (node.left !== undefined && node.right !== undefined) {
                            node.max = Math.max(Math.max(node.left.max, node.right.max), nodeHigh);
                        }
                        else if (node.left !== undefined && node.right === undefined) {
                            node.max = Math.max(node.left.max, nodeHigh);
                        }
                        else if (node.left === undefined && node.right !== undefined) {
                            node.max = Math.max(node.right.max, nodeHigh);
                        }
                        else {
                            node.max = nodeHigh;
                        }
                        if (node.parent) {
                            node.parent.updateMaxOfParents();
                        }
                    }
                    this.count--;
                    return true;
                }
                else {
                    return false;
                }
            }
            else if (node.records.length === 1) {
                // Node with this key has only 1 record. Check if the remaining record in this node is
                // actually the one we want to remove
                if (isSame(node.records[0], record)) {
                    // The remaining record is the one we want to remove. Remove the whole node from the tree
                    if (this.root.key === node.key) {
                        // We're removing the root element. Create a dummy node that will temporarily take
                        // root's parent role
                        var rootParent = new Node(this, { low: record.low, high: record.low });
                        rootParent.left = this.root;
                        this.root.parent = rootParent;
                        var removedNode = this.root.remove(node);
                        this.root = rootParent.left;
                        if (this.root !== undefined) {
                            this.root.parent = undefined;
                        }
                        if (removedNode) {
                            removedNode = undefined;
                            this.count--;
                            return true;
                        }
                        else {
                            return false;
                        }
                    }
                    else {
                        var removedNode = this.root.remove(node);
                        if (removedNode) {
                            removedNode = undefined;
                            this.count--;
                            return true;
                        }
                        else {
                            return false;
                        }
                    }
                }
                else {
                    // The remaining record is not the one we want to remove
                    return false;
                }
            }
            else {
                // No records at all in this node?! Shouldn't happen
                return false;
            }
        }
    };
    IntervalTree.prototype.inOrder = function () {
        return new InOrder(this.root);
    };
    IntervalTree.prototype.preOrder = function () {
        return new PreOrder(this.root);
    };
    return IntervalTree;
}());
exports.IntervalTree = IntervalTree;
var DataIntervalTree = /** @class */ (function () {
    function DataIntervalTree() {
        this.tree = new IntervalTree();
    }
    DataIntervalTree.prototype.insert = function (low, high, data) {
        return this.tree.insert({ low: low, high: high, data: data });
    };
    DataIntervalTree.prototype.remove = function (low, high, data) {
        return this.tree.remove({ low: low, high: high, data: data });
    };
    DataIntervalTree.prototype.search = function (low, high) {
        return this.tree.search(low, high).map(function (v) { return v.data; });
    };
    DataIntervalTree.prototype.inOrder = function () {
        return this.tree.inOrder();
    };
    DataIntervalTree.prototype.preOrder = function () {
        return this.tree.preOrder();
    };
    Object.defineProperty(DataIntervalTree.prototype, "count", {
        get: function () {
            return this.tree.count;
        },
        enumerable: true,
        configurable: true
    });
    return DataIntervalTree;
}());
exports.default = DataIntervalTree;
var InOrder = /** @class */ (function () {
    function InOrder(startNode) {
        this.stack = [];
        if (startNode !== undefined) {
            this.push(startNode);
        }
    }
    InOrder.prototype.next = function () {
        // Will only happen if stack is empty and pop is called
        if (this.currentNode === undefined) {
            return {
                done: true,
                value: undefined,
            };
        }
        // Process this node
        if (this.i < this.currentNode.records.length) {
            return {
                done: false,
                value: this.currentNode.records[this.i++],
            };
        }
        if (this.currentNode.right !== undefined) {
            this.push(this.currentNode.right);
        }
        else {
            // Might pop the last and set this.currentNode = undefined
            this.pop();
        }
        return this.next();
    };
    InOrder.prototype.push = function (node) {
        this.currentNode = node;
        this.i = 0;
        while (this.currentNode.left !== undefined) {
            this.stack.push(this.currentNode);
            this.currentNode = this.currentNode.left;
        }
    };
    InOrder.prototype.pop = function () {
        this.currentNode = this.stack.pop();
        this.i = 0;
    };
    return InOrder;
}());
exports.InOrder = InOrder;
if (typeof Symbol === 'function') {
    InOrder.prototype[Symbol.iterator] = function () { return this; };
}
var PreOrder = /** @class */ (function () {
    function PreOrder(startNode) {
        this.stack = [];
        this.i = 0;
        this.currentNode = startNode;
    }
    PreOrder.prototype.next = function () {
        // Will only happen if stack is empty and pop is called,
        // which only happens if there is no right node (i.e we are done)
        if (this.currentNode === undefined) {
            return {
                done: true,
                value: undefined,
            };
        }
        // Process this node
        if (this.i < this.currentNode.records.length) {
            return {
                done: false,
                value: this.currentNode.records[this.i++],
            };
        }
        if (this.currentNode.right !== undefined) {
            this.push(this.currentNode.right);
        }
        if (this.currentNode.left !== undefined) {
            this.push(this.currentNode.left);
        }
        this.pop();
        return this.next();
    };
    PreOrder.prototype.push = function (node) {
        this.stack.push(node);
    };
    PreOrder.prototype.pop = function () {
        this.currentNode = this.stack.pop();
        this.i = 0;
    };
    return PreOrder;
}());
exports.PreOrder = PreOrder;
if (typeof Symbol === 'function') {
    PreOrder.prototype[Symbol.iterator] = function () { return this; };
}
//# sourceMappingURL=index.js.map

/***/ }),
/* 55 */
/***/ (function(module, exports) {

//

module.exports = function shallowEqual(objA, objB, compare, compareContext) {
  var ret = compare ? compare.call(compareContext, objA, objB) : void 0;

  if (ret !== void 0) {
    return !!ret;
  }

  if (objA === objB) {
    return true;
  }

  if (typeof objA !== "object" || !objA || typeof objB !== "object" || !objB) {
    return false;
  }

  var keysA = Object.keys(objA);
  var keysB = Object.keys(objB);

  if (keysA.length !== keysB.length) {
    return false;
  }

  var bHasOwnProperty = Object.prototype.hasOwnProperty.bind(objB);

  // Test for A's keys different from B.
  for (var idx = 0; idx < keysA.length; idx++) {
    var key = keysA[idx];

    if (!bHasOwnProperty(key)) {
      return false;
    }

    var valueA = objA[key];
    var valueB = objB[key];

    ret = compare ? compare.call(compareContext, valueA, valueB, key) : void 0;

    if (ret === false || (ret === void 0 && valueA !== valueB)) {
      return false;
    }
  }

  return true;
};


/***/ }),
/* 56 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var cov_12n7kfeprd = function () {
  var path = "/Users/gnidan/src/work/truffle/packages/truffle-debugger/lib/store/index.js",
      hash = "813d932d6c7a3ac94045c9ff910925d7011fe337",
      Function = function () {}.constructor,
      global = new Function('return this')(),
      gcv = "__coverage__",
      coverageData = { path: "/Users/gnidan/src/work/truffle/packages/truffle-debugger/lib/store/index.js", statementMap: { "0": { start: { line: 3, column: 0 }, end: { line: 9, column: 1 } }, "1": { start: { line: 4, column: 2 }, end: { line: 4, column: 43 } }, "2": { start: { line: 5, column: 7 }, end: { line: 9, column: 1 } }, "3": { start: { line: 6, column: 2 }, end: { line: 6, column: 37 } }, "4": { start: { line: 8, column: 2 }, end: { line: 8, column: 44 } } }, fnMap: {}, branchMap: { "0": { loc: { start: { line: 3, column: 0 }, end: { line: 9, column: 1 } }, type: "if", locations: [{ start: { line: 3, column: 0 }, end: { line: 9, column: 1 } }, { start: { line: 3, column: 0 }, end: { line: 9, column: 1 } }], line: 3 }, "1": { loc: { start: { line: 5, column: 7 }, end: { line: 9, column: 1 } }, type: "if", locations: [{ start: { line: 5, column: 7 }, end: { line: 9, column: 1 } }, { start: { line: 5, column: 7 }, end: { line: 9, column: 1 } }], line: 5 } }, s: { "0": 0, "1": 0, "2": 0, "3": 0, "4": 0 }, f: {}, b: { "0": [0, 0], "1": [0, 0] }, inputSourceMap: { version: 3, sources: ["lib/store/index.js"], names: ["process", "env", "NODE_ENV", "module", "exports", "require"], mappings: ";;AAAA,IAAIA,QAAQC,GAAR,CAAYC,QAAZ,IAAwB,YAA5B,EAA0C;AACxCC,SAAOC,OAAP,GAAiBC,QAAQ,cAAR,CAAjB;AACD,CAFD,MAEO,IAAIL,QAAQC,GAAR,CAAYC,QAAZ,IAAwB,MAA5B,EAAoC;AACzCC,SAAOC,OAAP,GAAiBC,QAAQ,QAAR,CAAjB;AACD,CAFM,MAEA;AACLF,SAAOC,OAAP,GAAiBC,QAAQ,eAAR,CAAjB;AACD", file: "index.js", sourceRoot: "/Users/gnidan/src/work/truffle/packages/truffle-debugger", sourcesContent: ["if (process.env.NODE_ENV == \"production\") {\n  module.exports = require(\"./production\");\n} else if (process.env.NODE_ENV == \"test\") {\n  module.exports = require(\"./test\");\n} else {\n  module.exports = require(\"./development\");\n}\n"] }, _coverageSchema: "332fd63041d2c1bcb487cc26dd0d5f7d97098a6c" },
      coverage = global[gcv] || (global[gcv] = {});if (coverage[path] && coverage[path].hash === hash) {
    return coverage[path];
  }coverageData.hash = hash;return coverage[path] = coverageData;
}();cov_12n7kfeprd.s[0]++;if (false) {
  cov_12n7kfeprd.b[0][0]++;cov_12n7kfeprd.s[1]++;module.exports = require("./production");
} else {
  cov_12n7kfeprd.b[0][1]++;cov_12n7kfeprd.s[2]++;if (true) {
    cov_12n7kfeprd.b[1][0]++;cov_12n7kfeprd.s[3]++;module.exports = __webpack_require__(57);
  } else {
    cov_12n7kfeprd.b[1][1]++;cov_12n7kfeprd.s[4]++;module.exports = require("./development");
  }
}

/***/ }),
/* 57 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var cov_2qhe9lqdcs = function () {
  var path = "/Users/gnidan/src/work/truffle/packages/truffle-debugger/lib/store/test.js",
      hash = "7add4b33a7ce2334dfc46ea41dba63e75bcdfed4",
      Function = function () {}.constructor,
      global = new Function('return this')(),
      gcv = "__coverage__",
      coverageData = { path: "/Users/gnidan/src/work/truffle/packages/truffle-debugger/lib/store/test.js", statementMap: { "0": { start: { line: 3, column: 0 }, end: { line: 5, column: 3 } }, "1": { start: { line: 7, column: 14 }, end: { line: 7, column: 33 } }, "2": { start: { line: 9, column: 15 }, end: { line: 9, column: 46 } }, "3": { start: { line: 11, column: 39 }, end: { line: 11, column: 93 } }, "4": { start: { line: 13, column: 0 }, end: { line: 13, column: 35 } } }, fnMap: { "0": { name: "_interopRequireDefault", decl: { start: { line: 11, column: 9 }, end: { line: 11, column: 31 } }, loc: { start: { line: 11, column: 37 }, end: { line: 11, column: 95 } }, line: 11 } }, branchMap: { "0": { loc: { start: { line: 11, column: 46 }, end: { line: 11, column: 92 } }, type: "cond-expr", locations: [{ start: { line: 11, column: 70 }, end: { line: 11, column: 73 } }, { start: { line: 11, column: 76 }, end: { line: 11, column: 92 } }], line: 11 }, "1": { loc: { start: { line: 11, column: 46 }, end: { line: 11, column: 67 } }, type: "binary-expr", locations: [{ start: { line: 11, column: 46 }, end: { line: 11, column: 49 } }, { start: { line: 11, column: 53 }, end: { line: 11, column: 67 } }], line: 11 } }, s: { "0": 0, "1": 0, "2": 0, "3": 0, "4": 0 }, f: { "0": 0 }, b: { "0": [0, 0], "1": [0, 0] }, inputSourceMap: { version: 3, sources: ["lib/store/test.js"], names: ["configureStore"], mappings: ";;;;;;AAAA;;;;;;kBACeA,gB", file: "test.js", sourceRoot: "/Users/gnidan/src/work/truffle/packages/truffle-debugger", sourcesContent: ["import configureStore from \"./common\";\nexport default configureStore;\n"] }, _coverageSchema: "332fd63041d2c1bcb487cc26dd0d5f7d97098a6c" },
      coverage = global[gcv] || (global[gcv] = {});if (coverage[path] && coverage[path].hash === hash) {
    return coverage[path];
  }coverageData.hash = hash;return coverage[path] = coverageData;
}();cov_2qhe9lqdcs.s[0]++;Object.defineProperty(exports, "__esModule", { value: true });var _common = (cov_2qhe9lqdcs.s[1]++, __webpack_require__(58));var _common2 = (cov_2qhe9lqdcs.s[2]++, _interopRequireDefault(_common));function _interopRequireDefault(obj) {
  cov_2qhe9lqdcs.f[0]++;cov_2qhe9lqdcs.s[3]++;return (cov_2qhe9lqdcs.b[1][0]++, obj) && (cov_2qhe9lqdcs.b[1][1]++, obj.__esModule) ? (cov_2qhe9lqdcs.b[0][0]++, obj) : (cov_2qhe9lqdcs.b[0][1]++, { default: obj });
}cov_2qhe9lqdcs.s[4]++;exports.default = _common2.default;

/***/ }),
/* 58 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var cov_2hrt5b78ac = function () {
  var path = "/Users/gnidan/src/work/truffle/packages/truffle-debugger/lib/store/common.js",
      hash = "6c179ea26f8b371bf31388d795cfe32dfe4a52d7",
      Function = function () {}.constructor,
      global = new Function('return this')(),
      gcv = "__coverage__",
      coverageData = { path: "/Users/gnidan/src/work/truffle/packages/truffle-debugger/lib/store/common.js", statementMap: { "0": { start: { line: 3, column: 0 }, end: { line: 5, column: 3 } }, "1": { start: { line: 7, column: 15 }, end: { line: 7, column: 62 } }, "2": { start: { line: 9, column: 16 }, end: { line: 9, column: 48 } }, "3": { start: { line: 11, column: 14 }, end: { line: 11, column: 60 } }, "4": { start: { line: 13, column: 15 }, end: { line: 13, column: 46 } }, "5": { start: { line: 15, column: 0 }, end: { line: 15, column: 44 } }, "6": { start: { line: 16, column: 0 }, end: { line: 16, column: 33 } }, "7": { start: { line: 18, column: 13 }, end: { line: 18, column: 29 } }, "8": { start: { line: 20, column: 14 }, end: { line: 20, column: 44 } }, "9": { start: { line: 22, column: 13 }, end: { line: 22, column: 29 } }, "10": { start: { line: 24, column: 17 }, end: { line: 24, column: 38 } }, "11": { start: { line: 26, column: 18 }, end: { line: 26, column: 52 } }, "12": { start: { line: 28, column: 22 }, end: { line: 28, column: 49 } }, "13": { start: { line: 30, column: 23 }, end: { line: 30, column: 62 } }, "14": { start: { line: 32, column: 39 }, end: { line: 32, column: 93 } }, "15": { start: { line: 34, column: 14 }, end: { line: 34, column: 59 } }, "16": { start: { line: 35, column: 19 }, end: { line: 35, column: 57 } }, "17": { start: { line: 38, column: 2 }, end: { line: 38, column: 50 } }, "18": { start: { line: 39, column: 2 }, end: { line: 39, column: 47 } }, "19": { start: { line: 40, column: 2 }, end: { line: 40, column: 51 } }, "20": { start: { line: 42, column: 2 }, end: { line: 44, column: 3 } }, "21": { start: { line: 43, column: 4 }, end: { line: 43, column: 17 } }, "22": { start: { line: 46, column: 18 }, end: { line: 46, column: 70 } }, "23": { start: { line: 46, column: 27 }, end: { line: 46, column: 70 } }, "24": { start: { line: 48, column: 2 }, end: { line: 64, column: 3 } }, "25": { start: { line: 49, column: 4 }, end: { line: 51, column: 5 } }, "26": { start: { line: 50, column: 6 }, end: { line: 50, column: 124 } }, "27": { start: { line: 53, column: 4 }, end: { line: 53, column: 30 } }, "28": { start: { line: 54, column: 9 }, end: { line: 64, column: 3 } }, "29": { start: { line: 55, column: 4 }, end: { line: 55, column: 119 } }, "30": { start: { line: 55, column: 87 }, end: { line: 55, column: 115 } }, "31": { start: { line: 56, column: 9 }, end: { line: 64, column: 3 } }, "32": { start: { line: 57, column: 16 }, end: { line: 57, column: 21 } }, "33": { start: { line: 58, column: 24 }, end: { line: 58, column: 64 } }, "34": { start: { line: 59, column: 18 }, end: { line: 59, column: 58 } }, "35": { start: { line: 60, column: 19 }, end: { line: 60, column: 72 } }, "36": { start: { line: 61, column: 4 }, end: { line: 61, column: 43 } }, "37": { start: { line: 63, column: 4 }, end: { line: 63, column: 17 } }, "38": { start: { line: 68, column: 25 }, end: { line: 68, column: 51 } }, "39": { start: { line: 70, column: 2 }, end: { line: 72, column: 3 } }, "40": { start: { line: 71, column: 4 }, end: { line: 71, column: 38 } }, "41": { start: { line: 74, column: 27 }, end: { line: 81, column: 4 } }, "42": { start: { line: 76, column: 31 }, end: { line: 79, column: 6 } }, "43": { start: { line: 83, column: 14 }, end: { line: 83, column: 141 } }, "44": { start: { line: 85, column: 2 }, end: { line: 85, column: 27 } }, "45": { start: { line: 87, column: 2 }, end: { line: 87, column: 15 } } }, fnMap: { "0": { name: "_interopRequireDefault", decl: { start: { line: 32, column: 9 }, end: { line: 32, column: 31 } }, loc: { start: { line: 32, column: 37 }, end: { line: 32, column: 95 } }, line: 32 }, "1": { name: "abbreviateValues", decl: { start: { line: 37, column: 9 }, end: { line: 37, column: 25 } }, loc: { start: { line: 37, column: 58 }, end: { line: 65, column: 1 } }, line: 37 }, "2": { name: "(anonymous_2)", decl: { start: { line: 46, column: 18 }, end: { line: 46, column: 19 } }, loc: { start: { line: 46, column: 27 }, end: { line: 46, column: 70 } }, line: 46 }, "3": { name: "(anonymous_3)", decl: { start: { line: 55, column: 74 }, end: { line: 55, column: 75 } }, loc: { start: { line: 55, column: 87 }, end: { line: 55, column: 115 } }, line: 55 }, "4": { name: "configureStore", decl: { start: { line: 67, column: 9 }, end: { line: 67, column: 23 } }, loc: { start: { line: 67, column: 71 }, end: { line: 88, column: 1 } }, line: 67 }, "5": { name: "(anonymous_5)", decl: { start: { line: 76, column: 22 }, end: { line: 76, column: 23 } }, loc: { start: { line: 76, column: 31 }, end: { line: 79, column: 6 } }, line: 76 } }, branchMap: { "0": { loc: { start: { line: 32, column: 46 }, end: { line: 32, column: 92 } }, type: "cond-expr", locations: [{ start: { line: 32, column: 70 }, end: { line: 32, column: 73 } }, { start: { line: 32, column: 76 }, end: { line: 32, column: 92 } }], line: 32 }, "1": { loc: { start: { line: 32, column: 46 }, end: { line: 32, column: 67 } }, type: "binary-expr", locations: [{ start: { line: 32, column: 46 }, end: { line: 32, column: 49 } }, { start: { line: 32, column: 53 }, end: { line: 32, column: 67 } }], line: 32 }, "2": { loc: { start: { line: 37, column: 33 }, end: { line: 37, column: 45 } }, type: "default-arg", locations: [{ start: { line: 37, column: 43 }, end: { line: 37, column: 45 } }], line: 37 }, "3": { loc: { start: { line: 37, column: 47 }, end: { line: 37, column: 56 } }, type: "default-arg", locations: [{ start: { line: 37, column: 55 }, end: { line: 37, column: 56 } }], line: 37 }, "4": { loc: { start: { line: 38, column: 24 }, end: { line: 38, column: 49 } }, type: "binary-expr", locations: [{ start: { line: 38, column: 24 }, end: { line: 38, column: 43 } }, { start: { line: 38, column: 47 }, end: { line: 38, column: 49 } }], line: 38 }, "5": { loc: { start: { line: 39, column: 23 }, end: { line: 39, column: 46 } }, type: "binary-expr", locations: [{ start: { line: 39, column: 23 }, end: { line: 39, column: 41 } }, { start: { line: 39, column: 45 }, end: { line: 39, column: 46 } }], line: 39 }, "6": { loc: { start: { line: 40, column: 25 }, end: { line: 40, column: 50 } }, type: "binary-expr", locations: [{ start: { line: 40, column: 25 }, end: { line: 40, column: 45 } }, { start: { line: 40, column: 49 }, end: { line: 40, column: 50 } }], line: 40 }, "7": { loc: { start: { line: 42, column: 2 }, end: { line: 44, column: 3 } }, type: "if", locations: [{ start: { line: 42, column: 2 }, end: { line: 44, column: 3 } }, { start: { line: 42, column: 2 }, end: { line: 44, column: 3 } }], line: 42 }, "8": { loc: { start: { line: 48, column: 2 }, end: { line: 64, column: 3 } }, type: "if", locations: [{ start: { line: 48, column: 2 }, end: { line: 64, column: 3 } }, { start: { line: 48, column: 2 }, end: { line: 64, column: 3 } }], line: 48 }, "9": { loc: { start: { line: 49, column: 4 }, end: { line: 51, column: 5 } }, type: "if", locations: [{ start: { line: 49, column: 4 }, end: { line: 51, column: 5 } }, { start: { line: 49, column: 4 }, end: { line: 51, column: 5 } }], line: 49 }, "10": { loc: { start: { line: 54, column: 9 }, end: { line: 64, column: 3 } }, type: "if", locations: [{ start: { line: 54, column: 9 }, end: { line: 64, column: 3 } }, { start: { line: 54, column: 9 }, end: { line: 64, column: 3 } }], line: 54 }, "11": { loc: { start: { line: 56, column: 9 }, end: { line: 64, column: 3 } }, type: "if", locations: [{ start: { line: 56, column: 9 }, end: { line: 64, column: 3 } }, { start: { line: 56, column: 9 }, end: { line: 64, column: 3 } }], line: 56 }, "12": { loc: { start: { line: 56, column: 13 }, end: { line: 56, column: 76 } }, type: "binary-expr", locations: [{ start: { line: 56, column: 13 }, end: { line: 56, column: 38 } }, { start: { line: 56, column: 42 }, end: { line: 56, column: 76 } }], line: 56 }, "13": { loc: { start: { line: 70, column: 2 }, end: { line: 72, column: 3 } }, type: "if", locations: [{ start: { line: 70, column: 2 }, end: { line: 72, column: 3 } }, { start: { line: 70, column: 2 }, end: { line: 72, column: 3 } }], line: 70 } }, s: { "0": 0, "1": 0, "2": 0, "3": 0, "4": 0, "5": 0, "6": 0, "7": 0, "8": 0, "9": 0, "10": 0, "11": 0, "12": 0, "13": 0, "14": 0, "15": 0, "16": 0, "17": 0, "18": 0, "19": 0, "20": 0, "21": 0, "22": 0, "23": 0, "24": 0, "25": 0, "26": 0, "27": 0, "28": 0, "29": 0, "30": 0, "31": 0, "32": 0, "33": 0, "34": 0, "35": 0, "36": 0, "37": 0, "38": 0, "39": 0, "40": 0, "41": 0, "42": 0, "43": 0, "44": 0, "45": 0 }, f: { "0": 0, "1": 0, "2": 0, "3": 0, "4": 0, "5": 0 }, b: { "0": [0, 0], "1": [0, 0], "2": [0], "3": [0], "4": [0, 0], "5": [0, 0], "6": [0, 0], "7": [0, 0], "8": [0, 0], "9": [0, 0], "10": [0, 0], "11": [0, 0], "12": [0, 0], "13": [0, 0] }, inputSourceMap: { version: 3, sources: ["lib/store/common.js"], names: ["abbreviateValues", "configureStore", "debug", "reduxDebug", "value", "options", "depth", "stringLimit", "arrayLimit", "recurseLimit", "recurse", "child", "Array", "length", "slice", "map", "Object", "k", "v", "inner", "extractAmount", "leading", "Math", "ceil", "trailing", "floor", "reducer", "saga", "initialState", "composeEnhancers", "sagaMiddleware", "compose", "loggerMiddleware", "log", "stateTransformer", "state", "actionTransformer", "store", "run"], mappings: ";;;;;;;;;;;;;;QAQgBA,gB,GAAAA,gB;kBAyCQC,c;;AAjDxB;;;;AAIA;;AACA;;;;AACA;;;;;;AALA,MAAMC,QAAQ,qBAAY,uBAAZ,CAAd;AACA,MAAMC,aAAa,qBAAY,gBAAZ,CAAnB;;AAMO,SAASH,gBAAT,CAA0BI,KAA1B,EAAiCC,UAAU,EAA3C,EAA+CC,QAAQ,CAAvD,EAA0D;AAC/DD,UAAQE,WAAR,GAAsBF,QAAQE,WAAR,IAAuB,EAA7C;AACAF,UAAQG,UAAR,GAAqBH,QAAQG,UAAR,IAAsB,CAA3C;AACAH,UAAQI,YAAR,GAAuBJ,QAAQI,YAAR,IAAwB,CAA/C;;AAEA,MAAIH,QAAQD,QAAQI,YAApB,EAAkC;AAChC,WAAO,KAAP;AACD;;AAED,QAAMC,UAAWC,KAAD,IAAWX,iBAAiBW,KAAjB,EAAwBN,OAAxB,EAAiCC,QAAQ,CAAzC,CAA3B;;AAEA,MAAIF,iBAAiBQ,KAArB,EAA4B;AAC1B,QAAIR,MAAMS,MAAN,GAAeR,QAAQG,UAA3B,EAAuC;AACrCJ,cAAQ,CACN,GAAGA,MAAMU,KAAN,CAAY,CAAZ,EAAeT,QAAQG,UAAR,GAAqB,CAApC,CADG,EAEN,KAFM,EAGN,GAAGJ,MAAMU,KAAN,CAAYV,MAAMS,MAAN,GAAeR,QAAQG,UAAR,GAAqB,CAApC,GAAwC,CAApD,CAHG,CAAR;AAKD;;AAED,WAAOJ,MAAMW,GAAN,CAAUL,OAAV,CAAP;AAED,GAXD,MAWO,IAAIN,iBAAiBY,MAArB,EAA6B;AAClC,WAAO,sBAAc,EAAd,EACL,GAAG,uBAAeZ,KAAf,EAAsBW,GAAtB,CACD,CAAC,CAACE,CAAD,EAAIC,CAAJ,CAAD,MAAa,EAAE,CAACR,QAAQO,CAAR,CAAD,GAAcP,QAAQQ,CAAR,CAAhB,EAAb,CADC,CADE,CAAP;AAMD,GAPM,MAOA,IAAI,OAAOd,KAAP,KAAiB,QAAjB,IAA6BA,MAAMS,MAAN,GAAeR,QAAQE,WAAxD,EAAqE;AAC1E,QAAIY,QAAQ,KAAZ;AACA,QAAIC,gBAAgB,CAACf,QAAQE,WAAR,GAAsBY,MAAMN,MAA7B,IAAuC,CAA3D;AACA,QAAIQ,UAAUjB,MAAMU,KAAN,CAAY,CAAZ,EAAeQ,KAAKC,IAAL,CAAUH,aAAV,CAAf,CAAd;AACA,QAAII,WAAWpB,MAAMU,KAAN,CAAYV,MAAMS,MAAN,GAAeS,KAAKG,KAAL,CAAWL,aAAX,CAA3B,CAAf;AACA,WAAQ,GAAEC,OAAQ,GAAEF,KAAM,GAAEK,QAAS,EAArC;AAED,GAPM,MAOA;AACL,WAAOpB,KAAP;AACD;AACF;;AAEc,SAASH,cAAT,CAAyByB,OAAzB,EAAkCC,IAAlC,EAAwCC,YAAxC,EAAsDC,gBAAtD,EAAwE;AACrF,QAAMC,iBAAiB,0BAAvB;;AAEA,MAAI,CAACD,gBAAL,EAAuB;AACrBA,uBAAmBE,cAAnB;AACD;;AAED,QAAMC,mBAAmB,8BAAa;AACpCC,SAAK9B,UAD+B;AAEpC+B,sBAAmBC,KAAD,IAAWnC,iBAAiBmC,KAAjB,EAAwB;AACnD3B,kBAAY,CADuC;AAEnDC,oBAAc;AAFqC,KAAxB,CAFO;AAMpC2B,uBAAmBpC;AANiB,GAAb,CAAzB;;AASA,MAAIqC,QAAQ,wBACVX,OADU,EACDE,YADC,EAGVC,iBACE,4BACEC,cADF,EAEEE,gBAFF,CADF,CAHU,CAAZ;;AAWAF,iBAAeQ,GAAf,CAAmBX,IAAnB;;AAEA,SAAOU,KAAP;AACD", file: "common.js", sourceRoot: "/Users/gnidan/src/work/truffle/packages/truffle-debugger", sourcesContent: ["import debugModule from \"debug\";\nconst debug = debugModule(\"debugger:store:common\");\nconst reduxDebug = debugModule(\"debugger:redux\");\n\nimport { compose, createStore, applyMiddleware } from \"redux\";\nimport createSagaMiddleware from \"redux-saga\";\nimport createLogger from \"redux-cli-logger\";\n\nexport function abbreviateValues(value, options = {}, depth = 0) {\n  options.stringLimit = options.stringLimit || 66;\n  options.arrayLimit = options.arrayLimit || 8;\n  options.recurseLimit = options.recurseLimit || 4;\n\n  if (depth > options.recurseLimit) {\n    return \"...\";\n  }\n\n  const recurse = (child) => abbreviateValues(child, options, depth + 1);\n\n  if (value instanceof Array) {\n    if (value.length > options.arrayLimit) {\n      value = [\n        ...value.slice(0, options.arrayLimit / 2),\n        \"...\",\n        ...value.slice(value.length - options.arrayLimit / 2 + 1)\n      ];\n    }\n\n    return value.map(recurse);\n\n  } else if (value instanceof Object) {\n    return Object.assign({},\n      ...Object.entries(value).map(\n        ([k, v]) => ({ [recurse(k)]: recurse(v) })\n      )\n    );\n\n  } else if (typeof value === \"string\" && value.length > options.stringLimit) {\n    let inner = \"...\";\n    let extractAmount = (options.stringLimit - inner.length) / 2;\n    let leading = value.slice(0, Math.ceil(extractAmount));\n    let trailing = value.slice(value.length - Math.floor(extractAmount));\n    return `${leading}${inner}${trailing}`;\n\n  } else {\n    return value;\n  }\n}\n\nexport default function configureStore (reducer, saga, initialState, composeEnhancers) {\n  const sagaMiddleware = createSagaMiddleware();\n\n  if (!composeEnhancers) {\n    composeEnhancers = compose;\n  }\n\n  const loggerMiddleware = createLogger({\n    log: reduxDebug,\n    stateTransformer: (state) => abbreviateValues(state, {\n      arrayLimit: 4,\n      recurseLimit: 3\n    }),\n    actionTransformer: abbreviateValues,\n  });\n\n  let store = createStore(\n    reducer, initialState,\n\n    composeEnhancers(\n      applyMiddleware(\n        sagaMiddleware,\n        loggerMiddleware\n      )\n    )\n  );\n\n  sagaMiddleware.run(saga);\n\n  return store;\n}\n"] }, _coverageSchema: "332fd63041d2c1bcb487cc26dd0d5f7d97098a6c" },
      coverage = global[gcv] || (global[gcv] = {});if (coverage[path] && coverage[path].hash === hash) {
    return coverage[path];
  }coverageData.hash = hash;return coverage[path] = coverageData;
}();cov_2hrt5b78ac.s[0]++;Object.defineProperty(exports, "__esModule", { value: true });var _entries = (cov_2hrt5b78ac.s[1]++, __webpack_require__(1));var _entries2 = (cov_2hrt5b78ac.s[2]++, _interopRequireDefault(_entries));var _assign = (cov_2hrt5b78ac.s[3]++, __webpack_require__(5));var _assign2 = (cov_2hrt5b78ac.s[4]++, _interopRequireDefault(_assign));cov_2hrt5b78ac.s[5]++;exports.abbreviateValues = abbreviateValues;cov_2hrt5b78ac.s[6]++;exports.default = configureStore;var _debug = (cov_2hrt5b78ac.s[7]++, __webpack_require__(0));var _debug2 = (cov_2hrt5b78ac.s[8]++, _interopRequireDefault(_debug));var _redux = (cov_2hrt5b78ac.s[9]++, __webpack_require__(14));var _reduxSaga = (cov_2hrt5b78ac.s[10]++, __webpack_require__(59));var _reduxSaga2 = (cov_2hrt5b78ac.s[11]++, _interopRequireDefault(_reduxSaga));var _reduxCliLogger = (cov_2hrt5b78ac.s[12]++, __webpack_require__(60));var _reduxCliLogger2 = (cov_2hrt5b78ac.s[13]++, _interopRequireDefault(_reduxCliLogger));function _interopRequireDefault(obj) {
  cov_2hrt5b78ac.f[0]++;cov_2hrt5b78ac.s[14]++;return (cov_2hrt5b78ac.b[1][0]++, obj) && (cov_2hrt5b78ac.b[1][1]++, obj.__esModule) ? (cov_2hrt5b78ac.b[0][0]++, obj) : (cov_2hrt5b78ac.b[0][1]++, { default: obj });
}const debug = (cov_2hrt5b78ac.s[15]++, (0, _debug2.default)("debugger:store:common"));const reduxDebug = (cov_2hrt5b78ac.s[16]++, (0, _debug2.default)("debugger:redux"));function abbreviateValues(value, options = (cov_2hrt5b78ac.b[2][0]++, {}), depth = (cov_2hrt5b78ac.b[3][0]++, 0)) {
  cov_2hrt5b78ac.f[1]++;cov_2hrt5b78ac.s[17]++;options.stringLimit = (cov_2hrt5b78ac.b[4][0]++, options.stringLimit) || (cov_2hrt5b78ac.b[4][1]++, 66);cov_2hrt5b78ac.s[18]++;options.arrayLimit = (cov_2hrt5b78ac.b[5][0]++, options.arrayLimit) || (cov_2hrt5b78ac.b[5][1]++, 8);cov_2hrt5b78ac.s[19]++;options.recurseLimit = (cov_2hrt5b78ac.b[6][0]++, options.recurseLimit) || (cov_2hrt5b78ac.b[6][1]++, 4);cov_2hrt5b78ac.s[20]++;if (depth > options.recurseLimit) {
    cov_2hrt5b78ac.b[7][0]++;cov_2hrt5b78ac.s[21]++;return "...";
  } else {
    cov_2hrt5b78ac.b[7][1]++;
  }cov_2hrt5b78ac.s[22]++;const recurse = child => {
    cov_2hrt5b78ac.f[2]++;cov_2hrt5b78ac.s[23]++;return abbreviateValues(child, options, depth + 1);
  };cov_2hrt5b78ac.s[24]++;if (value instanceof Array) {
    cov_2hrt5b78ac.b[8][0]++;cov_2hrt5b78ac.s[25]++;if (value.length > options.arrayLimit) {
      cov_2hrt5b78ac.b[9][0]++;cov_2hrt5b78ac.s[26]++;value = [...value.slice(0, options.arrayLimit / 2), "...", ...value.slice(value.length - options.arrayLimit / 2 + 1)];
    } else {
      cov_2hrt5b78ac.b[9][1]++;
    }cov_2hrt5b78ac.s[27]++;return value.map(recurse);
  } else {
    cov_2hrt5b78ac.b[8][1]++;cov_2hrt5b78ac.s[28]++;if (value instanceof Object) {
      cov_2hrt5b78ac.b[10][0]++;cov_2hrt5b78ac.s[29]++;return (0, _assign2.default)({}, ...(0, _entries2.default)(value).map(([k, v]) => {
        cov_2hrt5b78ac.f[3]++;cov_2hrt5b78ac.s[30]++;return { [recurse(k)]: recurse(v) };
      }));
    } else {
      cov_2hrt5b78ac.b[10][1]++;cov_2hrt5b78ac.s[31]++;if ((cov_2hrt5b78ac.b[12][0]++, typeof value === "string") && (cov_2hrt5b78ac.b[12][1]++, value.length > options.stringLimit)) {
        cov_2hrt5b78ac.b[11][0]++;let inner = (cov_2hrt5b78ac.s[32]++, "...");let extractAmount = (cov_2hrt5b78ac.s[33]++, (options.stringLimit - inner.length) / 2);let leading = (cov_2hrt5b78ac.s[34]++, value.slice(0, Math.ceil(extractAmount)));let trailing = (cov_2hrt5b78ac.s[35]++, value.slice(value.length - Math.floor(extractAmount)));cov_2hrt5b78ac.s[36]++;return `${leading}${inner}${trailing}`;
      } else {
        cov_2hrt5b78ac.b[11][1]++;cov_2hrt5b78ac.s[37]++;return value;
      }
    }
  }
}function configureStore(reducer, saga, initialState, composeEnhancers) {
  cov_2hrt5b78ac.f[4]++;const sagaMiddleware = (cov_2hrt5b78ac.s[38]++, (0, _reduxSaga2.default)());cov_2hrt5b78ac.s[39]++;if (!composeEnhancers) {
    cov_2hrt5b78ac.b[13][0]++;cov_2hrt5b78ac.s[40]++;composeEnhancers = _redux.compose;
  } else {
    cov_2hrt5b78ac.b[13][1]++;
  }const loggerMiddleware = (cov_2hrt5b78ac.s[41]++, (0, _reduxCliLogger2.default)({ log: reduxDebug, stateTransformer: state => {
      cov_2hrt5b78ac.f[5]++;cov_2hrt5b78ac.s[42]++;return abbreviateValues(state, { arrayLimit: 4, recurseLimit: 3 });
    }, actionTransformer: abbreviateValues }));let store = (cov_2hrt5b78ac.s[43]++, (0, _redux.createStore)(reducer, initialState, composeEnhancers((0, _redux.applyMiddleware)(sagaMiddleware, loggerMiddleware))));cov_2hrt5b78ac.s[44]++;sagaMiddleware.run(saga);cov_2hrt5b78ac.s[45]++;return store;
}

/***/ }),
/* 59 */
/***/ (function(module, exports) {

module.exports = require("redux-saga");

/***/ }),
/* 60 */
/***/ (function(module, exports) {

module.exports = require("redux-cli-logger");

/***/ }),
/* 61 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var cov_28pw6pvqnu = function () {
  var path = "/Users/gnidan/src/work/truffle/packages/truffle-debugger/lib/session/sagas/index.js",
      hash = "32c6e5c0db1e8199efa346bdeafb7d4901e135ce",
      Function = function () {}.constructor,
      global = new Function('return this')(),
      gcv = "__coverage__",
      coverageData = { path: "/Users/gnidan/src/work/truffle/packages/truffle-debugger/lib/session/sagas/index.js", statementMap: { "0": { start: { line: 3, column: 0 }, end: { line: 5, column: 3 } }, "1": { start: { line: 6, column: 0 }, end: { line: 6, column: 20 } }, "2": { start: { line: 8, column: 13 }, end: { line: 8, column: 29 } }, "3": { start: { line: 10, column: 14 }, end: { line: 10, column: 44 } }, "4": { start: { line: 12, column: 15 }, end: { line: 12, column: 44 } }, "5": { start: { line: 14, column: 15 }, end: { line: 14, column: 37 } }, "6": { start: { line: 16, column: 13 }, end: { line: 16, column: 37 } }, "7": { start: { line: 18, column: 10 }, end: { line: 18, column: 41 } }, "8": { start: { line: 20, column: 14 }, end: { line: 20, column: 45 } }, "9": { start: { line: 22, column: 17 }, end: { line: 22, column: 49 } }, "10": { start: { line: 24, column: 14 }, end: { line: 24, column: 43 } }, "11": { start: { line: 26, column: 15 }, end: { line: 26, column: 47 } }, "12": { start: { line: 28, column: 14 }, end: { line: 28, column: 38 } }, "13": { start: { line: 30, column: 10 }, end: { line: 30, column: 42 } }, "14": { start: { line: 32, column: 14 }, end: { line: 32, column: 40 } }, "15": { start: { line: 34, column: 12 }, end: { line: 34, column: 44 } }, "16": { start: { line: 36, column: 14 }, end: { line: 36, column: 39 } }, "17": { start: { line: 38, column: 11 }, end: { line: 38, column: 43 } }, "18": { start: { line: 40, column: 14 }, end: { line: 40, column: 39 } }, "19": { start: { line: 42, column: 11 }, end: { line: 42, column: 43 } }, "20": { start: { line: 44, column: 15 }, end: { line: 44, column: 36 } }, "21": { start: { line: 46, column: 14 }, end: { line: 46, column: 47 } }, "22": { start: { line: 48, column: 40 }, end: { line: 48, column: 267 } }, "23": { start: { line: 48, column: 69 }, end: { line: 48, column: 80 } }, "24": { start: { line: 48, column: 103 }, end: { line: 48, column: 105 } }, "25": { start: { line: 48, column: 107 }, end: { line: 48, column: 228 } }, "26": { start: { line: 48, column: 126 }, end: { line: 48, column: 226 } }, "27": { start: { line: 48, column: 149 }, end: { line: 48, column: 224 } }, "28": { start: { line: 48, column: 201 }, end: { line: 48, column: 224 } }, "29": { start: { line: 48, column: 229 }, end: { line: 48, column: 250 } }, "30": { start: { line: 48, column: 251 }, end: { line: 48, column: 265 } }, "31": { start: { line: 50, column: 39 }, end: { line: 50, column: 93 } }, "32": { start: { line: 52, column: 14 }, end: { line: 52, column: 60 } }, "33": { start: { line: 55, column: 2 }, end: { line: 55, column: 30 } }, "34": { start: { line: 56, column: 18 }, end: { line: 56, column: 40 } }, "35": { start: { line: 59, column: 2 }, end: { line: 59, column: 44 } }, "36": { start: { line: 60, column: 30 }, end: { line: 60, column: 80 } }, "37": { start: { line: 62, column: 2 }, end: { line: 62, column: 39 } }, "38": { start: { line: 63, column: 2 }, end: { line: 63, column: 37 } }, "39": { start: { line: 65, column: 2 }, end: { line: 65, column: 38 } }, "40": { start: { line: 66, column: 2 }, end: { line: 66, column: 35 } }, "41": { start: { line: 68, column: 2 }, end: { line: 68, column: 29 } }, "42": { start: { line: 70, column: 29 }, end: { line: 70, column: 68 } }, "43": { start: { line: 71, column: 2 }, end: { line: 71, column: 20 } }, "44": { start: { line: 74, column: 2 }, end: { line: 74, column: 37 } }, "45": { start: { line: 75, column: 12 }, end: { line: 75, column: 44 } }, "46": { start: { line: 76, column: 2 }, end: { line: 95, column: 3 } }, "47": { start: { line: 77, column: 4 }, end: { line: 77, column: 27 } }, "48": { start: { line: 78, column: 4 }, end: { line: 78, column: 22 } }, "49": { start: { line: 80, column: 4 }, end: { line: 80, column: 27 } }, "50": { start: { line: 82, column: 4 }, end: { line: 82, column: 26 } }, "51": { start: { line: 84, column: 4 }, end: { line: 84, column: 22 } }, "52": { start: { line: 86, column: 4 }, end: { line: 86, column: 19 } }, "53": { start: { line: 88, column: 4 }, end: { line: 88, column: 35 } }, "54": { start: { line: 90, column: 4 }, end: { line: 90, column: 24 } }, "55": { start: { line: 92, column: 4 }, end: { line: 92, column: 23 } }, "56": { start: { line: 94, column: 4 }, end: { line: 94, column: 46 } }, "57": { start: { line: 97, column: 2 }, end: { line: 97, column: 30 } }, "58": { start: { line: 98, column: 2 }, end: { line: 98, column: 77 } }, "59": { start: { line: 98, column: 48 }, end: { line: 98, column: 74 } }, "60": { start: { line: 101, column: 0 }, end: { line: 101, column: 60 } }, "61": { start: { line: 105, column: 2 }, end: { line: 105, column: 127 } }, "62": { start: { line: 105, column: 96 }, end: { line: 105, column: 124 } }, "63": { start: { line: 109, column: 15 }, end: { line: 109, column: 63 } }, "64": { start: { line: 111, column: 2 }, end: { line: 113, column: 3 } }, "65": { start: { line: 112, column: 4 }, end: { line: 112, column: 24 } }, "66": { start: { line: 115, column: 2 }, end: { line: 115, column: 27 } }, "67": { start: { line: 117, column: 18 }, end: { line: 117, column: 57 } }, "68": { start: { line: 118, column: 2 }, end: { line: 120, column: 3 } }, "69": { start: { line: 119, column: 4 }, end: { line: 119, column: 35 } }, "70": { start: { line: 122, column: 17 }, end: { line: 122, column: 54 } }, "71": { start: { line: 124, column: 2 }, end: { line: 124, column: 115 } }, "72": { start: { line: 124, column: 56 }, end: { line: 124, column: 112 } }, "73": { start: { line: 128, column: 2 }, end: { line: 136, column: 3 } }, "74": { start: { line: 129, column: 46 }, end: { line: 129, column: 50 } }, "75": { start: { line: 131, column: 4 }, end: { line: 131, column: 48 } }, "76": { start: { line: 133, column: 4 }, end: { line: 135, column: 5 } }, "77": { start: { line: 134, column: 6 }, end: { line: 134, column: 54 } }, "78": { start: { line: 140, column: 2 }, end: { line: 144, column: 3 } }, "79": { start: { line: 141, column: 38 }, end: { line: 141, column: 43 } }, "80": { start: { line: 143, column: 4 }, end: { line: 143, column: 55 } }, "81": { start: { line: 148, column: 2 }, end: { line: 148, column: 42 } }, "82": { start: { line: 152, column: 2 }, end: { line: 152, column: 43 } }, "83": { start: { line: 156, column: 2 }, end: { line: 156, column: 46 } } }, fnMap: { "0": { name: "_interopRequireWildcard", decl: { start: { line: 48, column: 9 }, end: { line: 48, column: 32 } }, loc: { start: { line: 48, column: 38 }, end: { line: 48, column: 269 } }, line: 48 }, "1": { name: "_interopRequireDefault", decl: { start: { line: 50, column: 9 }, end: { line: 50, column: 31 } }, loc: { start: { line: 50, column: 37 }, end: { line: 50, column: 95 } }, line: 50 }, "2": { name: "saga", decl: { start: { line: 54, column: 10 }, end: { line: 54, column: 14 } }, loc: { start: { line: 54, column: 17 }, end: { line: 99, column: 1 } }, line: 54 }, "3": { name: "(anonymous_3)", decl: { start: { line: 98, column: 40 }, end: { line: 98, column: 41 } }, loc: { start: { line: 98, column: 48 }, end: { line: 98, column: 74 } }, line: 98 }, "4": { name: "forkListeners", decl: { start: { line: 104, column: 10 }, end: { line: 104, column: 23 } }, loc: { start: { line: 104, column: 26 }, end: { line: 106, column: 1 } }, line: 104 }, "5": { name: "(anonymous_5)", decl: { start: { line: 105, column: 89 }, end: { line: 105, column: 90 } }, loc: { start: { line: 105, column: 96 }, end: { line: 105, column: 124 } }, line: 105 }, "6": { name: "fetchTx", decl: { start: { line: 108, column: 10 }, end: { line: 108, column: 17 } }, loc: { start: { line: 108, column: 36 }, end: { line: 125, column: 1 } }, line: 108 }, "7": { name: "(anonymous_7)", decl: { start: { line: 124, column: 40 }, end: { line: 124, column: 41 } }, loc: { start: { line: 124, column: 56 }, end: { line: 124, column: 112 } }, line: 124 }, "8": { name: "recordContexts", decl: { start: { line: 127, column: 10 }, end: { line: 127, column: 24 } }, loc: { start: { line: 127, column: 38 }, end: { line: 137, column: 1 } }, line: 127 }, "9": { name: "recordSources", decl: { start: { line: 139, column: 10 }, end: { line: 139, column: 23 } }, loc: { start: { line: 139, column: 36 }, end: { line: 145, column: 1 } }, line: 139 }, "10": { name: "recordInstance", decl: { start: { line: 147, column: 10 }, end: { line: 147, column: 24 } }, loc: { start: { line: 147, column: 42 }, end: { line: 149, column: 1 } }, line: 147 }, "11": { name: "ready", decl: { start: { line: 151, column: 10 }, end: { line: 151, column: 15 } }, loc: { start: { line: 151, column: 18 }, end: { line: 153, column: 1 } }, line: 151 }, "12": { name: "error", decl: { start: { line: 155, column: 10 }, end: { line: 155, column: 15 } }, loc: { start: { line: 155, column: 21 }, end: { line: 157, column: 1 } }, line: 155 } }, branchMap: { "0": { loc: { start: { line: 48, column: 40 }, end: { line: 48, column: 267 } }, type: "if", locations: [{ start: { line: 48, column: 40 }, end: { line: 48, column: 267 } }, { start: { line: 48, column: 40 }, end: { line: 48, column: 267 } }], line: 48 }, "1": { loc: { start: { line: 48, column: 44 }, end: { line: 48, column: 65 } }, type: "binary-expr", locations: [{ start: { line: 48, column: 44 }, end: { line: 48, column: 47 } }, { start: { line: 48, column: 51 }, end: { line: 48, column: 65 } }], line: 48 }, "2": { loc: { start: { line: 48, column: 107 }, end: { line: 48, column: 228 } }, type: "if", locations: [{ start: { line: 48, column: 107 }, end: { line: 48, column: 228 } }, { start: { line: 48, column: 107 }, end: { line: 48, column: 228 } }], line: 48 }, "3": { loc: { start: { line: 48, column: 149 }, end: { line: 48, column: 224 } }, type: "if", locations: [{ start: { line: 48, column: 149 }, end: { line: 48, column: 224 } }, { start: { line: 48, column: 149 }, end: { line: 48, column: 224 } }], line: 48 }, "4": { loc: { start: { line: 50, column: 46 }, end: { line: 50, column: 92 } }, type: "cond-expr", locations: [{ start: { line: 50, column: 70 }, end: { line: 50, column: 73 } }, { start: { line: 50, column: 76 }, end: { line: 50, column: 92 } }], line: 50 }, "5": { loc: { start: { line: 50, column: 46 }, end: { line: 50, column: 67 } }, type: "binary-expr", locations: [{ start: { line: 50, column: 46 }, end: { line: 50, column: 49 } }, { start: { line: 50, column: 53 }, end: { line: 50, column: 67 } }], line: 50 }, "6": { loc: { start: { line: 76, column: 2 }, end: { line: 95, column: 3 } }, type: "if", locations: [{ start: { line: 76, column: 2 }, end: { line: 95, column: 3 } }, { start: { line: 76, column: 2 }, end: { line: 95, column: 3 } }], line: 76 }, "7": { loc: { start: { line: 111, column: 2 }, end: { line: 113, column: 3 } }, type: "if", locations: [{ start: { line: 111, column: 2 }, end: { line: 113, column: 3 } }, { start: { line: 111, column: 2 }, end: { line: 113, column: 3 } }], line: 111 }, "8": { loc: { start: { line: 118, column: 2 }, end: { line: 120, column: 3 } }, type: "if", locations: [{ start: { line: 118, column: 2 }, end: { line: 120, column: 3 } }, { start: { line: 118, column: 2 }, end: { line: 120, column: 3 } }], line: 118 }, "9": { loc: { start: { line: 118, column: 6 }, end: { line: 118, column: 63 } }, type: "binary-expr", locations: [{ start: { line: 118, column: 6 }, end: { line: 118, column: 20 } }, { start: { line: 118, column: 24 }, end: { line: 118, column: 63 } }], line: 118 }, "10": { loc: { start: { line: 133, column: 4 }, end: { line: 135, column: 5 } }, type: "if", locations: [{ start: { line: 133, column: 4 }, end: { line: 135, column: 5 } }, { start: { line: 133, column: 4 }, end: { line: 135, column: 5 } }], line: 133 } }, s: { "0": 0, "1": 0, "2": 0, "3": 0, "4": 0, "5": 0, "6": 0, "7": 0, "8": 0, "9": 0, "10": 0, "11": 0, "12": 0, "13": 0, "14": 0, "15": 0, "16": 0, "17": 0, "18": 0, "19": 0, "20": 0, "21": 0, "22": 0, "23": 0, "24": 0, "25": 0, "26": 0, "27": 0, "28": 0, "29": 0, "30": 0, "31": 0, "32": 0, "33": 0, "34": 0, "35": 0, "36": 0, "37": 0, "38": 0, "39": 0, "40": 0, "41": 0, "42": 0, "43": 0, "44": 0, "45": 0, "46": 0, "47": 0, "48": 0, "49": 0, "50": 0, "51": 0, "52": 0, "53": 0, "54": 0, "55": 0, "56": 0, "57": 0, "58": 0, "59": 0, "60": 0, "61": 0, "62": 0, "63": 0, "64": 0, "65": 0, "66": 0, "67": 0, "68": 0, "69": 0, "70": 0, "71": 0, "72": 0, "73": 0, "74": 0, "75": 0, "76": 0, "77": 0, "78": 0, "79": 0, "80": 0, "81": 0, "82": 0, "83": 0 }, f: { "0": 0, "1": 0, "2": 0, "3": 0, "4": 0, "5": 0, "6": 0, "7": 0, "8": 0, "9": 0, "10": 0, "11": 0, "12": 0 }, b: { "0": [0, 0], "1": [0, 0], "2": [0, 0], "3": [0, 0], "4": [0, 0], "5": [0, 0], "6": [0, 0], "7": [0, 0], "8": [0, 0], "9": [0, 0], "10": [0, 0] }, inputSourceMap: { version: 3, sources: ["lib/session/sagas/index.js"], names: ["saga", "ast", "controller", "solidity", "evm", "trace", "data", "web3", "actions", "debug", "listeners", "forkListeners", "contexts", "sources", "RECORD_CONTRACTS", "recordContexts", "recordSources", "txHash", "provider", "START", "err", "fetchTx", "error", "visitAll", "ready", "wait", "finish", "map", "task", "app", "result", "inspectTransaction", "begin", "addresses", "processTrace", "address", "indexOf", "push", "binaries", "obtainBinaries", "i", "recordInstance", "contractName", "binary", "sourceMap", "addContext", "addSourceMap", "sourcePath", "source", "addSource", "addInstance"], mappings: "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", file: "index.js", sourceRoot: "/Users/gnidan/src/work/truffle/packages/truffle-debugger", sourcesContent: ["import debugModule from \"debug\";\nconst debug = debugModule(\"debugger:session:sagas\");\n\nimport { cancel, call, all, fork, take, put } from 'redux-saga/effects';\n\nimport { prefixName } from \"lib/helpers\";\n\nimport * as ast from \"lib/ast/sagas\";\nimport * as controller from \"lib/controller/sagas\";\nimport * as solidity from \"lib/solidity/sagas\";\nimport * as evm from \"lib/evm/sagas\";\nimport * as trace from \"lib/trace/sagas\";\nimport * as data from \"lib/data/sagas\";\nimport * as web3 from \"lib/web3/sagas\";\n\nimport * as actions from \"../actions\";\n\nexport function *saga () {\n  debug(\"starting listeners\");\n  let listeners = yield *forkListeners();\n\n  // receiving & saving contracts into state\n  debug(\"waiting for contract information\");\n  let { contexts, sources } = yield take(actions.RECORD_CONTRACTS);\n\n  debug(\"recording contract binaries\");\n  yield *recordContexts(...contexts);\n\n  debug(\"recording contract sources\");\n  yield *recordSources(...sources);\n\n  debug(\"waiting for start\");\n  // wait for start signal\n  let {txHash, provider} = yield take(actions.START);\n  debug(\"starting\");\n\n  // process transaction\n  debug(\"fetching transaction info\");\n  let err = yield *fetchTx(txHash, provider);\n  if (err) {\n    debug(\"error %o\", err);\n    yield *error(err);\n\n  } else {\n    debug(\"visiting ASTs\");\n    // visit asts\n    yield *ast.visitAll();\n\n    debug(\"readying\");\n    // signal that stepping can begin\n    yield *ready();\n\n    debug(\"waiting for trace EOT\");\n    // wait until trace hits EOT\n    yield *trace.wait();\n\n    debug(\"finishing\");\n    // finish\n    yield put(actions.finish());\n  }\n\n  debug(\"stopping listeners\");\n  yield all(\n    listeners.map(task => cancel(task))\n  );\n}\n\nexport default prefixName(\"session\", saga);\n\n\nfunction *forkListeners() {\n  return yield all(\n    [ast, controller, data, evm, solidity, trace, web3]\n      .map( app => fork(app.saga) )\n  );\n}\n\nfunction* fetchTx(txHash, provider) {\n  let result = yield *web3.inspectTransaction(txHash, provider);\n\n  if (result.error) {\n    return result.error;\n  }\n\n  yield *evm.begin(result);\n\n  let addresses = yield *trace.processTrace(result.trace);\n  if (result.address && addresses.indexOf(result.address) == -1) {\n    addresses.push(result.address);\n  }\n\n  let binaries = yield *web3.obtainBinaries(addresses);\n\n  yield all(\n    addresses.map( (address, i) => call(recordInstance, address, binaries[i]) )\n  );\n}\n\nfunction* recordContexts(...contexts) {\n  for (let { contractName, binary, sourceMap } of contexts) {\n    yield *evm.addContext(contractName, binary);\n\n    if (sourceMap) {\n      yield *solidity.addSourceMap(binary, sourceMap);\n    }\n  }\n}\n\nfunction* recordSources(...sources) {\n  for (let { sourcePath, source, ast } of sources) {\n    yield *solidity.addSource(source, sourcePath, ast);\n  }\n}\n\nfunction *recordInstance(address, binary) {\n  yield *evm.addInstance(address, binary);\n}\n\nfunction *ready() {\n  yield put(actions.ready());\n}\n\nfunction *error(err) {\n  yield put(actions.error(err));\n}\n"] }, _coverageSchema: "332fd63041d2c1bcb487cc26dd0d5f7d97098a6c" },
      coverage = global[gcv] || (global[gcv] = {});if (coverage[path] && coverage[path].hash === hash) {
    return coverage[path];
  }coverageData.hash = hash;return coverage[path] = coverageData;
}();cov_28pw6pvqnu.s[0]++;Object.defineProperty(exports, "__esModule", { value: true });cov_28pw6pvqnu.s[1]++;exports.saga = saga;var _debug = (cov_28pw6pvqnu.s[2]++, __webpack_require__(0));var _debug2 = (cov_28pw6pvqnu.s[3]++, _interopRequireDefault(_debug));var _effects = (cov_28pw6pvqnu.s[4]++, __webpack_require__(10));var _helpers = (cov_28pw6pvqnu.s[5]++, __webpack_require__(6));var _sagas = (cov_28pw6pvqnu.s[6]++, __webpack_require__(62));var ast = (cov_28pw6pvqnu.s[7]++, _interopRequireWildcard(_sagas));var _sagas2 = (cov_28pw6pvqnu.s[8]++, __webpack_require__(67));var controller = (cov_28pw6pvqnu.s[9]++, _interopRequireWildcard(_sagas2));var _sagas3 = (cov_28pw6pvqnu.s[10]++, __webpack_require__(68));var solidity = (cov_28pw6pvqnu.s[11]++, _interopRequireWildcard(_sagas3));var _sagas4 = (cov_28pw6pvqnu.s[12]++, __webpack_require__(69));var evm = (cov_28pw6pvqnu.s[13]++, _interopRequireWildcard(_sagas4));var _sagas5 = (cov_28pw6pvqnu.s[14]++, __webpack_require__(33));var trace = (cov_28pw6pvqnu.s[15]++, _interopRequireWildcard(_sagas5));var _sagas6 = (cov_28pw6pvqnu.s[16]++, __webpack_require__(31));var data = (cov_28pw6pvqnu.s[17]++, _interopRequireWildcard(_sagas6));var _sagas7 = (cov_28pw6pvqnu.s[18]++, __webpack_require__(70));var web3 = (cov_28pw6pvqnu.s[19]++, _interopRequireWildcard(_sagas7));var _actions = (cov_28pw6pvqnu.s[20]++, __webpack_require__(26));var actions = (cov_28pw6pvqnu.s[21]++, _interopRequireWildcard(_actions));function _interopRequireWildcard(obj) {
  cov_28pw6pvqnu.f[0]++;cov_28pw6pvqnu.s[22]++;if ((cov_28pw6pvqnu.b[1][0]++, obj) && (cov_28pw6pvqnu.b[1][1]++, obj.__esModule)) {
    cov_28pw6pvqnu.b[0][0]++;cov_28pw6pvqnu.s[23]++;return obj;
  } else {
    cov_28pw6pvqnu.b[0][1]++;var newObj = (cov_28pw6pvqnu.s[24]++, {});cov_28pw6pvqnu.s[25]++;if (obj != null) {
      cov_28pw6pvqnu.b[2][0]++;cov_28pw6pvqnu.s[26]++;for (var key in obj) {
        cov_28pw6pvqnu.s[27]++;if (Object.prototype.hasOwnProperty.call(obj, key)) {
          cov_28pw6pvqnu.b[3][0]++;cov_28pw6pvqnu.s[28]++;newObj[key] = obj[key];
        } else {
          cov_28pw6pvqnu.b[3][1]++;
        }
      }
    } else {
      cov_28pw6pvqnu.b[2][1]++;
    }cov_28pw6pvqnu.s[29]++;newObj.default = obj;cov_28pw6pvqnu.s[30]++;return newObj;
  }
}function _interopRequireDefault(obj) {
  cov_28pw6pvqnu.f[1]++;cov_28pw6pvqnu.s[31]++;return (cov_28pw6pvqnu.b[5][0]++, obj) && (cov_28pw6pvqnu.b[5][1]++, obj.__esModule) ? (cov_28pw6pvqnu.b[4][0]++, obj) : (cov_28pw6pvqnu.b[4][1]++, { default: obj });
}const debug = (cov_28pw6pvqnu.s[32]++, (0, _debug2.default)("debugger:session:sagas"));function* saga() {
  cov_28pw6pvqnu.f[2]++;cov_28pw6pvqnu.s[33]++;debug("starting listeners");let listeners = (cov_28pw6pvqnu.s[34]++, yield* forkListeners());cov_28pw6pvqnu.s[35]++;debug("waiting for contract information");let { contexts, sources } = (cov_28pw6pvqnu.s[36]++, yield (0, _effects.take)(actions.RECORD_CONTRACTS));cov_28pw6pvqnu.s[37]++;debug("recording contract binaries");cov_28pw6pvqnu.s[38]++;yield* recordContexts(...contexts);cov_28pw6pvqnu.s[39]++;debug("recording contract sources");cov_28pw6pvqnu.s[40]++;yield* recordSources(...sources);cov_28pw6pvqnu.s[41]++;debug("waiting for start");let { txHash, provider } = (cov_28pw6pvqnu.s[42]++, yield (0, _effects.take)(actions.START));cov_28pw6pvqnu.s[43]++;debug("starting");cov_28pw6pvqnu.s[44]++;debug("fetching transaction info");let err = (cov_28pw6pvqnu.s[45]++, yield* fetchTx(txHash, provider));cov_28pw6pvqnu.s[46]++;if (err) {
    cov_28pw6pvqnu.b[6][0]++;cov_28pw6pvqnu.s[47]++;debug("error %o", err);cov_28pw6pvqnu.s[48]++;yield* error(err);
  } else {
    cov_28pw6pvqnu.b[6][1]++;cov_28pw6pvqnu.s[49]++;debug("visiting ASTs");cov_28pw6pvqnu.s[50]++;yield* ast.visitAll();cov_28pw6pvqnu.s[51]++;debug("readying");cov_28pw6pvqnu.s[52]++;yield* ready();cov_28pw6pvqnu.s[53]++;debug("waiting for trace EOT");cov_28pw6pvqnu.s[54]++;yield* trace.wait();cov_28pw6pvqnu.s[55]++;debug("finishing");cov_28pw6pvqnu.s[56]++;yield (0, _effects.put)(actions.finish());
  }cov_28pw6pvqnu.s[57]++;debug("stopping listeners");cov_28pw6pvqnu.s[58]++;yield (0, _effects.all)(listeners.map(task => {
    cov_28pw6pvqnu.f[3]++;cov_28pw6pvqnu.s[59]++;return (0, _effects.cancel)(task);
  }));
}cov_28pw6pvqnu.s[60]++;exports.default = (0, _helpers.prefixName)("session", saga);function* forkListeners() {
  cov_28pw6pvqnu.f[4]++;cov_28pw6pvqnu.s[61]++;return yield (0, _effects.all)([ast, controller, data, evm, solidity, trace, web3].map(app => {
    cov_28pw6pvqnu.f[5]++;cov_28pw6pvqnu.s[62]++;return (0, _effects.fork)(app.saga);
  }));
}function* fetchTx(txHash, provider) {
  cov_28pw6pvqnu.f[6]++;let result = (cov_28pw6pvqnu.s[63]++, yield* web3.inspectTransaction(txHash, provider));cov_28pw6pvqnu.s[64]++;if (result.error) {
    cov_28pw6pvqnu.b[7][0]++;cov_28pw6pvqnu.s[65]++;return result.error;
  } else {
    cov_28pw6pvqnu.b[7][1]++;
  }cov_28pw6pvqnu.s[66]++;yield* evm.begin(result);let addresses = (cov_28pw6pvqnu.s[67]++, yield* trace.processTrace(result.trace));cov_28pw6pvqnu.s[68]++;if ((cov_28pw6pvqnu.b[9][0]++, result.address) && (cov_28pw6pvqnu.b[9][1]++, addresses.indexOf(result.address) == -1)) {
    cov_28pw6pvqnu.b[8][0]++;cov_28pw6pvqnu.s[69]++;addresses.push(result.address);
  } else {
    cov_28pw6pvqnu.b[8][1]++;
  }let binaries = (cov_28pw6pvqnu.s[70]++, yield* web3.obtainBinaries(addresses));cov_28pw6pvqnu.s[71]++;yield (0, _effects.all)(addresses.map((address, i) => {
    cov_28pw6pvqnu.f[7]++;cov_28pw6pvqnu.s[72]++;return (0, _effects.call)(recordInstance, address, binaries[i]);
  }));
}function* recordContexts(...contexts) {
  cov_28pw6pvqnu.f[8]++;cov_28pw6pvqnu.s[73]++;for (let _ref of contexts) {
    let { contractName, binary, sourceMap } = (cov_28pw6pvqnu.s[74]++, _ref);cov_28pw6pvqnu.s[75]++;yield* evm.addContext(contractName, binary);cov_28pw6pvqnu.s[76]++;if (sourceMap) {
      cov_28pw6pvqnu.b[10][0]++;cov_28pw6pvqnu.s[77]++;yield* solidity.addSourceMap(binary, sourceMap);
    } else {
      cov_28pw6pvqnu.b[10][1]++;
    }
  }
}function* recordSources(...sources) {
  cov_28pw6pvqnu.f[9]++;cov_28pw6pvqnu.s[78]++;for (let _ref2 of sources) {
    let { sourcePath, source, ast } = (cov_28pw6pvqnu.s[79]++, _ref2);cov_28pw6pvqnu.s[80]++;yield* solidity.addSource(source, sourcePath, ast);
  }
}function* recordInstance(address, binary) {
  cov_28pw6pvqnu.f[10]++;cov_28pw6pvqnu.s[81]++;yield* evm.addInstance(address, binary);
}function* ready() {
  cov_28pw6pvqnu.f[11]++;cov_28pw6pvqnu.s[82]++;yield (0, _effects.put)(actions.ready());
}function* error(err) {
  cov_28pw6pvqnu.f[12]++;cov_28pw6pvqnu.s[83]++;yield (0, _effects.put)(actions.error(err));
}

/***/ }),
/* 62 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var cov_aeme5kur4 = function () {
  var path = "/Users/gnidan/src/work/truffle/packages/truffle-debugger/lib/ast/sagas/index.js",
      hash = "1701bd9849c80cfb55009309caf6ffaa48f5bc48",
      Function = function () {}.constructor,
      global = new Function('return this')(),
      gcv = "__coverage__",
      coverageData = { path: "/Users/gnidan/src/work/truffle/packages/truffle-debugger/lib/ast/sagas/index.js", statementMap: { "0": { start: { line: 3, column: 0 }, end: { line: 5, column: 3 } }, "1": { start: { line: 7, column: 15 }, end: { line: 7, column: 62 } }, "2": { start: { line: 9, column: 16 }, end: { line: 9, column: 48 } }, "3": { start: { line: 11, column: 0 }, end: { line: 11, column: 28 } }, "4": { start: { line: 12, column: 0 }, end: { line: 12, column: 20 } }, "5": { start: { line: 14, column: 13 }, end: { line: 14, column: 29 } }, "6": { start: { line: 16, column: 14 }, end: { line: 16, column: 44 } }, "7": { start: { line: 18, column: 15 }, end: { line: 18, column: 44 } }, "8": { start: { line: 20, column: 15 }, end: { line: 20, column: 37 } }, "9": { start: { line: 22, column: 13 }, end: { line: 22, column: 38 } }, "10": { start: { line: 24, column: 11 }, end: { line: 24, column: 42 } }, "11": { start: { line: 26, column: 15 }, end: { line: 26, column: 36 } }, "12": { start: { line: 28, column: 14 }, end: { line: 28, column: 47 } }, "13": { start: { line: 30, column: 17 }, end: { line: 30, column: 40 } }, "14": { start: { line: 32, column: 18 }, end: { line: 32, column: 52 } }, "15": { start: { line: 34, column: 40 }, end: { line: 34, column: 267 } }, "16": { start: { line: 34, column: 69 }, end: { line: 34, column: 80 } }, "17": { start: { line: 34, column: 103 }, end: { line: 34, column: 105 } }, "18": { start: { line: 34, column: 107 }, end: { line: 34, column: 228 } }, "19": { start: { line: 34, column: 126 }, end: { line: 34, column: 226 } }, "20": { start: { line: 34, column: 149 }, end: { line: 34, column: 224 } }, "21": { start: { line: 34, column: 201 }, end: { line: 34, column: 224 } }, "22": { start: { line: 34, column: 229 }, end: { line: 34, column: 250 } }, "23": { start: { line: 34, column: 251 }, end: { line: 34, column: 265 } }, "24": { start: { line: 36, column: 39 }, end: { line: 36, column: 93 } }, "25": { start: { line: 38, column: 14 }, end: { line: 38, column: 56 } }, "26": { start: { line: 41, column: 2 }, end: { line: 41, column: 40 } }, "27": { start: { line: 43, column: 2 }, end: { line: 43, column: 56 } }, "28": { start: { line: 45, column: 2 }, end: { line: 53, column: 3 } }, "29": { start: { line: 46, column: 4 }, end: { line: 48, column: 5 } }, "30": { start: { line: 47, column: 6 }, end: { line: 47, column: 83 } }, "31": { start: { line: 49, column: 9 }, end: { line: 53, column: 3 } }, "32": { start: { line: 50, column: 4 }, end: { line: 52, column: 5 } }, "33": { start: { line: 51, column: 6 }, end: { line: 51, column: 84 } }, "34": { start: { line: 55, column: 2 }, end: { line: 55, column: 45 } }, "35": { start: { line: 59, column: 2 }, end: { line: 61, column: 3 } }, "36": { start: { line: 60, column: 4 }, end: { line: 60, column: 11 } }, "37": { start: { line: 63, column: 2 }, end: { line: 63, column: 32 } }, "38": { start: { line: 65, column: 2 }, end: { line: 68, column: 3 } }, "39": { start: { line: 66, column: 4 }, end: { line: 66, column: 53 } }, "40": { start: { line: 67, column: 4 }, end: { line: 67, column: 60 } }, "41": { start: { line: 70, column: 2 }, end: { line: 75, column: 3 } }, "42": { start: { line: 72, column: 6 }, end: { line: 72, column: 55 } }, "43": { start: { line: 73, column: 6 }, end: { line: 73, column: 32 } }, "44": { start: { line: 74, column: 6 }, end: { line: 74, column: 12 } }, "45": { start: { line: 79, column: 2 }, end: { line: 79, column: 31 } }, "46": { start: { line: 85, column: 2 }, end: { line: 85, column: 28 } }, "47": { start: { line: 89, column: 16 }, end: { line: 89, column: 77 } }, "48": { start: { line: 91, column: 14 }, end: { line: 91, column: 195 } }, "49": { start: { line: 91, column: 96 }, end: { line: 91, column: 101 } }, "50": { start: { line: 91, column: 126 }, end: { line: 91, column: 193 } }, "51": { start: { line: 91, column: 151 }, end: { line: 91, column: 192 } }, "52": { start: { line: 93, column: 2 }, end: { line: 95, column: 3 } }, "53": { start: { line: 94, column: 4 }, end: { line: 94, column: 39 } }, "54": { start: { line: 97, column: 2 }, end: { line: 97, column: 50 } }, "55": { start: { line: 101, column: 2 }, end: { line: 104, column: 5 } }, "56": { start: { line: 107, column: 0 }, end: { line: 107, column: 56 } } }, fnMap: { "0": { name: "_interopRequireWildcard", decl: { start: { line: 34, column: 9 }, end: { line: 34, column: 32 } }, loc: { start: { line: 34, column: 38 }, end: { line: 34, column: 269 } }, line: 34 }, "1": { name: "_interopRequireDefault", decl: { start: { line: 36, column: 9 }, end: { line: 36, column: 31 } }, loc: { start: { line: 36, column: 37 }, end: { line: 36, column: 95 } }, line: 36 }, "2": { name: "walk", decl: { start: { line: 40, column: 10 }, end: { line: 40, column: 14 } }, loc: { start: { line: 40, column: 62 }, end: { line: 56, column: 1 } }, line: 40 }, "3": { name: "handleEnter", decl: { start: { line: 58, column: 10 }, end: { line: 58, column: 21 } }, loc: { start: { line: 58, column: 57 }, end: { line: 76, column: 1 } }, line: 58 }, "4": { name: "handleExit", decl: { start: { line: 78, column: 10 }, end: { line: 78, column: 20 } }, loc: { start: { line: 78, column: 46 }, end: { line: 82, column: 1 } }, line: 78 }, "5": { name: "walkSaga", decl: { start: { line: 84, column: 10 }, end: { line: 84, column: 18 } }, loc: { start: { line: 84, column: 38 }, end: { line: 86, column: 1 } }, line: 84 }, "6": { name: "visitAll", decl: { start: { line: 88, column: 10 }, end: { line: 88, column: 18 } }, loc: { start: { line: 88, column: 24 }, end: { line: 98, column: 1 } }, line: 88 }, "7": { name: "(anonymous_7)", decl: { start: { line: 91, column: 77 }, end: { line: 91, column: 78 } }, loc: { start: { line: 91, column: 96 }, end: { line: 91, column: 101 } }, line: 91 }, "8": { name: "(anonymous_8)", decl: { start: { line: 91, column: 107 }, end: { line: 91, column: 108 } }, loc: { start: { line: 91, column: 126 }, end: { line: 91, column: 193 } }, line: 91 }, "9": { name: "(anonymous_9)", decl: { start: { line: 91, column: 145 }, end: { line: 91, column: 146 } }, loc: { start: { line: 91, column: 151 }, end: { line: 91, column: 192 } }, line: 91 }, "10": { name: "saga", decl: { start: { line: 100, column: 10 }, end: { line: 100, column: 14 } }, loc: { start: { line: 100, column: 17 }, end: { line: 105, column: 1 } }, line: 100 } }, branchMap: { "0": { loc: { start: { line: 34, column: 40 }, end: { line: 34, column: 267 } }, type: "if", locations: [{ start: { line: 34, column: 40 }, end: { line: 34, column: 267 } }, { start: { line: 34, column: 40 }, end: { line: 34, column: 267 } }], line: 34 }, "1": { loc: { start: { line: 34, column: 44 }, end: { line: 34, column: 65 } }, type: "binary-expr", locations: [{ start: { line: 34, column: 44 }, end: { line: 34, column: 47 } }, { start: { line: 34, column: 51 }, end: { line: 34, column: 65 } }], line: 34 }, "2": { loc: { start: { line: 34, column: 107 }, end: { line: 34, column: 228 } }, type: "if", locations: [{ start: { line: 34, column: 107 }, end: { line: 34, column: 228 } }, { start: { line: 34, column: 107 }, end: { line: 34, column: 228 } }], line: 34 }, "3": { loc: { start: { line: 34, column: 149 }, end: { line: 34, column: 224 } }, type: "if", locations: [{ start: { line: 34, column: 149 }, end: { line: 34, column: 224 } }, { start: { line: 34, column: 149 }, end: { line: 34, column: 224 } }], line: 34 }, "4": { loc: { start: { line: 36, column: 46 }, end: { line: 36, column: 92 } }, type: "cond-expr", locations: [{ start: { line: 36, column: 70 }, end: { line: 36, column: 73 } }, { start: { line: 36, column: 76 }, end: { line: 36, column: 92 } }], line: 36 }, "5": { loc: { start: { line: 36, column: 46 }, end: { line: 36, column: 67 } }, type: "binary-expr", locations: [{ start: { line: 36, column: 46 }, end: { line: 36, column: 49 } }, { start: { line: 36, column: 53 }, end: { line: 36, column: 67 } }], line: 36 }, "6": { loc: { start: { line: 40, column: 31 }, end: { line: 40, column: 43 } }, type: "default-arg", locations: [{ start: { line: 40, column: 41 }, end: { line: 40, column: 43 } }], line: 40 }, "7": { loc: { start: { line: 40, column: 45 }, end: { line: 40, column: 60 } }, type: "default-arg", locations: [{ start: { line: 40, column: 56 }, end: { line: 40, column: 60 } }], line: 40 }, "8": { loc: { start: { line: 45, column: 2 }, end: { line: 53, column: 3 } }, type: "if", locations: [{ start: { line: 45, column: 2 }, end: { line: 53, column: 3 } }, { start: { line: 45, column: 2 }, end: { line: 53, column: 3 } }], line: 45 }, "9": { loc: { start: { line: 49, column: 9 }, end: { line: 53, column: 3 } }, type: "if", locations: [{ start: { line: 49, column: 9 }, end: { line: 53, column: 3 } }, { start: { line: 49, column: 9 }, end: { line: 53, column: 3 } }], line: 49 }, "10": { loc: { start: { line: 59, column: 2 }, end: { line: 61, column: 3 } }, type: "if", locations: [{ start: { line: 59, column: 2 }, end: { line: 61, column: 3 } }, { start: { line: 59, column: 2 }, end: { line: 61, column: 3 } }], line: 59 }, "11": { loc: { start: { line: 65, column: 2 }, end: { line: 68, column: 3 } }, type: "if", locations: [{ start: { line: 65, column: 2 }, end: { line: 68, column: 3 } }, { start: { line: 65, column: 2 }, end: { line: 68, column: 3 } }], line: 65 }, "12": { loc: { start: { line: 70, column: 2 }, end: { line: 75, column: 3 } }, type: "switch", locations: [{ start: { line: 71, column: 4 }, end: { line: 74, column: 12 } }], line: 70 }, "13": { loc: { start: { line: 93, column: 2 }, end: { line: 95, column: 3 } }, type: "if", locations: [{ start: { line: 93, column: 2 }, end: { line: 95, column: 3 } }, { start: { line: 93, column: 2 }, end: { line: 95, column: 3 } }], line: 93 } }, s: { "0": 0, "1": 0, "2": 0, "3": 0, "4": 0, "5": 0, "6": 0, "7": 0, "8": 0, "9": 0, "10": 0, "11": 0, "12": 0, "13": 0, "14": 0, "15": 0, "16": 0, "17": 0, "18": 0, "19": 0, "20": 0, "21": 0, "22": 0, "23": 0, "24": 0, "25": 0, "26": 0, "27": 0, "28": 0, "29": 0, "30": 0, "31": 0, "32": 0, "33": 0, "34": 0, "35": 0, "36": 0, "37": 0, "38": 0, "39": 0, "40": 0, "41": 0, "42": 0, "43": 0, "44": 0, "45": 0, "46": 0, "47": 0, "48": 0, "49": 0, "50": 0, "51": 0, "52": 0, "53": 0, "54": 0, "55": 0, "56": 0 }, f: { "0": 0, "1": 0, "2": 0, "3": 0, "4": 0, "5": 0, "6": 0, "7": 0, "8": 0, "9": 0, "10": 0 }, b: { "0": [0, 0], "1": [0, 0], "2": [0, 0], "3": [0, 0], "4": [0, 0], "5": [0, 0], "6": [0], "7": [0], "8": [0, 0], "9": [0, 0], "10": [0, 0], "11": [0, 0], "12": [0], "13": [0, 0] }, inputSourceMap: { version: 3, sources: ["lib/ast/sagas/index.js"], names: ["visitAll", "saga", "data", "actions", "debug", "walk", "sourceId", "node", "pointer", "parentId", "handleEnter", "Array", "i", "child", "entries", "Object", "key", "id", "handleExit", "undefined", "scope", "nodeType", "declare", "walkSaga", "ast", "idx", "sources", "views", "tasks", "filter", "map", "visit", "length", "doneVisiting", "visitor", "VISIT", "done", "DONE_VISITING"], mappings: "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", file: "index.js", sourceRoot: "/Users/gnidan/src/work/truffle/packages/truffle-debugger", sourcesContent: ["import debugModule from \"debug\";\nconst debug = debugModule(\"debugger:ast:sagas\");\n\nimport { all, call, race, fork, join, take, takeEvery, put, select } from \"redux-saga/effects\";\n\nimport { prefixName } from \"lib/helpers\";\n\nimport * as data from \"lib/data/sagas\";\n\nimport * as actions from \"../actions\";\n\nimport ast from \"../selectors\";\n\n\nfunction *walk(sourceId, node, pointer = \"\", parentId = null) {\n  debug(\"walking %o %o\", pointer, node);\n\n  yield *handleEnter(sourceId, node, pointer, parentId);\n\n  if (node instanceof Array) {\n    for (let [i, child] of node.entries()) {\n      yield call(walk, sourceId, child, `${pointer}/${i}`, parentId);\n    }\n  } else if (node instanceof Object) {\n    for (let [key, child] of Object.entries(node)) {\n      yield call(walk, sourceId, child, `${pointer}/${key}`, node.id);\n    }\n  }\n\n  yield *handleExit(sourceId, node, pointer);\n}\n\nfunction *handleEnter(sourceId, node, pointer, parentId) {\n  if (!(node instanceof Object)) {\n    return;\n  }\n\n  debug(\"entering %s\", pointer);\n\n  if (node.id !== undefined) {\n    debug(\"%s recording scope %s\", pointer, node.id);\n    yield *data.scope(node.id, pointer, parentId, sourceId);\n  }\n\n  switch (node.nodeType) {\n    case \"VariableDeclaration\":\n      debug(\"%s recording variable %o\", pointer, node);\n      yield *data.declare(node);\n      break;\n  }\n}\n\nfunction *handleExit(sourceId, node, pointer) {\n  debug(\"exiting %s\", pointer);\n\n  // no-op right now\n}\n\nfunction *walkSaga({sourceId, ast}) {\n  yield walk(sourceId, ast);\n}\n\nexport function *visitAll(idx) {\n  let sources = yield select(ast.views.sources);\n\n  let tasks = yield all(\n    Object.entries(sources)\n      .filter( ([id, {ast}]) => !!ast )\n      .map( ([id, {ast}]) => fork( () => put(actions.visit(id, ast))) )\n  )\n\n  if (tasks.length > 0) {\n    yield join(...tasks);\n  }\n\n  yield put(actions.doneVisiting());\n}\n\nexport function* saga() {\n  yield race({\n    visitor: takeEvery(actions.VISIT, walkSaga),\n    done: take(actions.DONE_VISITING)\n  });\n}\n\nexport default prefixName(\"ast\", saga);\n"] }, _coverageSchema: "332fd63041d2c1bcb487cc26dd0d5f7d97098a6c" },
      coverage = global[gcv] || (global[gcv] = {});if (coverage[path] && coverage[path].hash === hash) {
    return coverage[path];
  }coverageData.hash = hash;return coverage[path] = coverageData;
}();cov_aeme5kur4.s[0]++;Object.defineProperty(exports, "__esModule", { value: true });var _entries = (cov_aeme5kur4.s[1]++, __webpack_require__(1));var _entries2 = (cov_aeme5kur4.s[2]++, _interopRequireDefault(_entries));cov_aeme5kur4.s[3]++;exports.visitAll = visitAll;cov_aeme5kur4.s[4]++;exports.saga = saga;var _debug = (cov_aeme5kur4.s[5]++, __webpack_require__(0));var _debug2 = (cov_aeme5kur4.s[6]++, _interopRequireDefault(_debug));var _effects = (cov_aeme5kur4.s[7]++, __webpack_require__(10));var _helpers = (cov_aeme5kur4.s[8]++, __webpack_require__(6));var _sagas = (cov_aeme5kur4.s[9]++, __webpack_require__(31));var data = (cov_aeme5kur4.s[10]++, _interopRequireWildcard(_sagas));var _actions = (cov_aeme5kur4.s[11]++, __webpack_require__(66));var actions = (cov_aeme5kur4.s[12]++, _interopRequireWildcard(_actions));var _selectors = (cov_aeme5kur4.s[13]++, __webpack_require__(18));var _selectors2 = (cov_aeme5kur4.s[14]++, _interopRequireDefault(_selectors));function _interopRequireWildcard(obj) {
  cov_aeme5kur4.f[0]++;cov_aeme5kur4.s[15]++;if ((cov_aeme5kur4.b[1][0]++, obj) && (cov_aeme5kur4.b[1][1]++, obj.__esModule)) {
    cov_aeme5kur4.b[0][0]++;cov_aeme5kur4.s[16]++;return obj;
  } else {
    cov_aeme5kur4.b[0][1]++;var newObj = (cov_aeme5kur4.s[17]++, {});cov_aeme5kur4.s[18]++;if (obj != null) {
      cov_aeme5kur4.b[2][0]++;cov_aeme5kur4.s[19]++;for (var key in obj) {
        cov_aeme5kur4.s[20]++;if (Object.prototype.hasOwnProperty.call(obj, key)) {
          cov_aeme5kur4.b[3][0]++;cov_aeme5kur4.s[21]++;newObj[key] = obj[key];
        } else {
          cov_aeme5kur4.b[3][1]++;
        }
      }
    } else {
      cov_aeme5kur4.b[2][1]++;
    }cov_aeme5kur4.s[22]++;newObj.default = obj;cov_aeme5kur4.s[23]++;return newObj;
  }
}function _interopRequireDefault(obj) {
  cov_aeme5kur4.f[1]++;cov_aeme5kur4.s[24]++;return (cov_aeme5kur4.b[5][0]++, obj) && (cov_aeme5kur4.b[5][1]++, obj.__esModule) ? (cov_aeme5kur4.b[4][0]++, obj) : (cov_aeme5kur4.b[4][1]++, { default: obj });
}const debug = (cov_aeme5kur4.s[25]++, (0, _debug2.default)("debugger:ast:sagas"));function* walk(sourceId, node, pointer = (cov_aeme5kur4.b[6][0]++, ""), parentId = (cov_aeme5kur4.b[7][0]++, null)) {
  cov_aeme5kur4.f[2]++;cov_aeme5kur4.s[26]++;debug("walking %o %o", pointer, node);cov_aeme5kur4.s[27]++;yield* handleEnter(sourceId, node, pointer, parentId);cov_aeme5kur4.s[28]++;if (node instanceof Array) {
    cov_aeme5kur4.b[8][0]++;cov_aeme5kur4.s[29]++;for (let [i, child] of node.entries()) {
      cov_aeme5kur4.s[30]++;yield (0, _effects.call)(walk, sourceId, child, `${pointer}/${i}`, parentId);
    }
  } else {
    cov_aeme5kur4.b[8][1]++;cov_aeme5kur4.s[31]++;if (node instanceof Object) {
      cov_aeme5kur4.b[9][0]++;cov_aeme5kur4.s[32]++;for (let [key, child] of (0, _entries2.default)(node)) {
        cov_aeme5kur4.s[33]++;yield (0, _effects.call)(walk, sourceId, child, `${pointer}/${key}`, node.id);
      }
    } else {
      cov_aeme5kur4.b[9][1]++;
    }
  }cov_aeme5kur4.s[34]++;yield* handleExit(sourceId, node, pointer);
}function* handleEnter(sourceId, node, pointer, parentId) {
  cov_aeme5kur4.f[3]++;cov_aeme5kur4.s[35]++;if (!(node instanceof Object)) {
    cov_aeme5kur4.b[10][0]++;cov_aeme5kur4.s[36]++;return;
  } else {
    cov_aeme5kur4.b[10][1]++;
  }cov_aeme5kur4.s[37]++;debug("entering %s", pointer);cov_aeme5kur4.s[38]++;if (node.id !== undefined) {
    cov_aeme5kur4.b[11][0]++;cov_aeme5kur4.s[39]++;debug("%s recording scope %s", pointer, node.id);cov_aeme5kur4.s[40]++;yield* data.scope(node.id, pointer, parentId, sourceId);
  } else {
    cov_aeme5kur4.b[11][1]++;
  }cov_aeme5kur4.s[41]++;switch (node.nodeType) {case "VariableDeclaration":
      cov_aeme5kur4.b[12][0]++;cov_aeme5kur4.s[42]++;debug("%s recording variable %o", pointer, node);cov_aeme5kur4.s[43]++;yield* data.declare(node);cov_aeme5kur4.s[44]++;break;}
}function* handleExit(sourceId, node, pointer) {
  cov_aeme5kur4.f[4]++;cov_aeme5kur4.s[45]++;debug("exiting %s", pointer);
}function* walkSaga({ sourceId, ast }) {
  cov_aeme5kur4.f[5]++;cov_aeme5kur4.s[46]++;yield walk(sourceId, ast);
}function* visitAll(idx) {
  cov_aeme5kur4.f[6]++;let sources = (cov_aeme5kur4.s[47]++, yield (0, _effects.select)(_selectors2.default.views.sources));let tasks = (cov_aeme5kur4.s[48]++, yield (0, _effects.all)((0, _entries2.default)(sources).filter(([id, { ast }]) => {
    cov_aeme5kur4.f[7]++;cov_aeme5kur4.s[49]++;return !!ast;
  }).map(([id, { ast }]) => {
    cov_aeme5kur4.f[8]++;cov_aeme5kur4.s[50]++;return (0, _effects.fork)(() => {
      cov_aeme5kur4.f[9]++;cov_aeme5kur4.s[51]++;return (0, _effects.put)(actions.visit(id, ast));
    });
  })));cov_aeme5kur4.s[52]++;if (tasks.length > 0) {
    cov_aeme5kur4.b[13][0]++;cov_aeme5kur4.s[53]++;yield (0, _effects.join)(...tasks);
  } else {
    cov_aeme5kur4.b[13][1]++;
  }cov_aeme5kur4.s[54]++;yield (0, _effects.put)(actions.doneVisiting());
}function* saga() {
  cov_aeme5kur4.f[10]++;cov_aeme5kur4.s[55]++;yield (0, _effects.race)({ visitor: (0, _effects.takeEvery)(actions.VISIT, walkSaga), done: (0, _effects.take)(actions.DONE_VISITING) });
}cov_aeme5kur4.s[56]++;exports.default = (0, _helpers.prefixName)("ast", saga);

/***/ }),
/* 63 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var cov_2h0rawf57g = function () {
  var path = "/Users/gnidan/src/work/truffle/packages/truffle-debugger/lib/data/decode/index.js",
      hash = "e7348fddad4e86862e7273742aca8d83c89d1f7b",
      Function = function () {}.constructor,
      global = new Function('return this')(),
      gcv = "__coverage__",
      coverageData = { path: "/Users/gnidan/src/work/truffle/packages/truffle-debugger/lib/data/decode/index.js", statementMap: { "0": { start: { line: 3, column: 0 }, end: { line: 5, column: 3 } }, "1": { start: { line: 7, column: 15 }, end: { line: 7, column: 62 } }, "2": { start: { line: 9, column: 16 }, end: { line: 9, column: 48 } }, "3": { start: { line: 11, column: 16 }, end: { line: 11, column: 56 } }, "4": { start: { line: 13, column: 16 }, end: { line: 13, column: 49 } }, "5": { start: { line: 15, column: 14 }, end: { line: 15, column: 60 } }, "6": { start: { line: 17, column: 15 }, end: { line: 17, column: 46 } }, "7": { start: { line: 19, column: 0 }, end: { line: 19, column: 20 } }, "8": { start: { line: 20, column: 0 }, end: { line: 20, column: 34 } }, "9": { start: { line: 21, column: 0 }, end: { line: 21, column: 54 } }, "10": { start: { line: 22, column: 0 }, end: { line: 22, column: 56 } }, "11": { start: { line: 23, column: 0 }, end: { line: 23, column: 38 } }, "12": { start: { line: 24, column: 0 }, end: { line: 24, column: 25 } }, "13": { start: { line: 26, column: 13 }, end: { line: 26, column: 29 } }, "14": { start: { line: 28, column: 14 }, end: { line: 28, column: 44 } }, "15": { start: { line: 30, column: 17 }, end: { line: 30, column: 40 } }, "16": { start: { line: 32, column: 14 }, end: { line: 32, column: 33 } }, "17": { start: { line: 34, column: 13 }, end: { line: 34, column: 45 } }, "18": { start: { line: 36, column: 15 }, end: { line: 36, column: 35 } }, "19": { start: { line: 38, column: 14 }, end: { line: 38, column: 47 } }, "20": { start: { line: 40, column: 13 }, end: { line: 40, column: 31 } }, "21": { start: { line: 42, column: 12 }, end: { line: 42, column: 43 } }, "22": { start: { line: 44, column: 40 }, end: { line: 44, column: 267 } }, "23": { start: { line: 44, column: 69 }, end: { line: 44, column: 80 } }, "24": { start: { line: 44, column: 103 }, end: { line: 44, column: 105 } }, "25": { start: { line: 44, column: 107 }, end: { line: 44, column: 228 } }, "26": { start: { line: 44, column: 126 }, end: { line: 44, column: 226 } }, "27": { start: { line: 44, column: 149 }, end: { line: 44, column: 224 } }, "28": { start: { line: 44, column: 201 }, end: { line: 44, column: 224 } }, "29": { start: { line: 44, column: 229 }, end: { line: 44, column: 250 } }, "30": { start: { line: 44, column: 251 }, end: { line: 44, column: 265 } }, "31": { start: { line: 46, column: 39 }, end: { line: 46, column: 93 } }, "32": { start: { line: 48, column: 14 }, end: { line: 48, column: 58 } }, "33": { start: { line: 51, column: 2 }, end: { line: 59, column: 3 } }, "34": { start: { line: 52, column: 4 }, end: { line: 52, column: 38 } }, "35": { start: { line: 53, column: 9 }, end: { line: 59, column: 3 } }, "36": { start: { line: 54, column: 4 }, end: { line: 54, column: 61 } }, "37": { start: { line: 55, column: 9 }, end: { line: 59, column: 3 } }, "38": { start: { line: 56, column: 4 }, end: { line: 56, column: 87 } }, "39": { start: { line: 57, column: 9 }, end: { line: 59, column: 3 } }, "40": { start: { line: 58, column: 4 }, end: { line: 58, column: 27 } }, "41": { start: { line: 63, column: 20 }, end: { line: 63, column: 24 } }, "42": { start: { line: 64, column: 2 }, end: { line: 64, column: 92 } }, "43": { start: { line: 65, column: 14 }, end: { line: 65, column: 34 } }, "44": { start: { line: 66, column: 2 }, end: { line: 69, column: 3 } }, "45": { start: { line: 67, column: 4 }, end: { line: 67, column: 61 } }, "46": { start: { line: 68, column: 4 }, end: { line: 68, column: 21 } }, "47": { start: { line: 71, column: 2 }, end: { line: 108, column: 3 } }, "48": { start: { line: 73, column: 6 }, end: { line: 73, column: 48 } }, "49": { start: { line: 76, column: 6 }, end: { line: 76, column: 38 } }, "50": { start: { line: 79, column: 6 }, end: { line: 79, column: 44 } }, "51": { start: { line: 82, column: 6 }, end: { line: 82, column: 44 } }, "52": { start: { line: 85, column: 6 }, end: { line: 85, column: 77 } }, "53": { start: { line: 87, column: 6 }, end: { line: 89, column: 7 } }, "54": { start: { line: 88, column: 8 }, end: { line: 88, column: 21 } }, "55": { start: { line: 90, column: 19 }, end: { line: 90, column: 50 } }, "56": { start: { line: 91, column: 6 }, end: { line: 91, column: 46 } }, "57": { start: { line: 95, column: 6 }, end: { line: 95, column: 77 } }, "58": { start: { line: 96, column: 6 }, end: { line: 98, column: 7 } }, "59": { start: { line: 97, column: 8 }, end: { line: 97, column: 21 } }, "60": { start: { line: 99, column: 6 }, end: { line: 99, column: 57 } }, "61": { start: { line: 102, column: 6 }, end: { line: 102, column: 77 } }, "62": { start: { line: 103, column: 6 }, end: { line: 103, column: 38 } }, "63": { start: { line: 106, column: 6 }, end: { line: 106, column: 72 } }, "64": { start: { line: 107, column: 6 }, end: { line: 107, column: 23 } }, "65": { start: { line: 112, column: 20 }, end: { line: 112, column: 24 } }, "66": { start: { line: 113, column: 2 }, end: { line: 113, column: 31 } }, "67": { start: { line: 114, column: 17 }, end: { line: 114, column: 37 } }, "68": { start: { line: 115, column: 2 }, end: { line: 117, column: 3 } }, "69": { start: { line: 116, column: 4 }, end: { line: 116, column: 21 } }, "70": { start: { line: 119, column: 2 }, end: { line: 119, column: 52 } }, "71": { start: { line: 122, column: 2 }, end: { line: 184, column: 3 } }, "72": { start: { line: 126, column: 6 }, end: { line: 128, column: 16 } }, "73": { start: { line: 130, column: 25 }, end: { line: 132, column: 7 } }, "74": { start: { line: 134, column: 6 }, end: { line: 134, column: 57 } }, "75": { start: { line: 137, column: 6 }, end: { line: 139, column: 28 } }, "76": { start: { line: 141, column: 6 }, end: { line: 143, column: 20 } }, "77": { start: { line: 145, column: 6 }, end: { line: 147, column: 16 } }, "78": { start: { line: 145, column: 64 }, end: { line: 147, column: 14 } }, "79": { start: { line: 150, column: 25 }, end: { line: 150, column: 29 } }, "80": { start: { line: 155, column: 36 }, end: { line: 155, column: 145 } }, "81": { start: { line: 157, column: 26 }, end: { line: 157, column: 61 } }, "82": { start: { line: 159, column: 6 }, end: { line: 178, column: 10 } }, "83": { start: { line: 160, column: 31 }, end: { line: 160, column: 52 } }, "84": { start: { line: 161, column: 28 }, end: { line: 163, column: 9 } }, "85": { start: { line: 167, column: 8 }, end: { line: 173, column: 11 } }, "86": { start: { line: 175, column: 8 }, end: { line: 177, column: 10 } }, "87": { start: { line: 181, column: 6 }, end: { line: 181, column: 83 } }, "88": { start: { line: 182, column: 6 }, end: { line: 182, column: 23 } }, "89": { start: { line: 193, column: 20 }, end: { line: 193, column: 24 } }, "90": { start: { line: 195, column: 2 }, end: { line: 309, column: 3 } }, "91": { start: { line: 197, column: 6 }, end: { line: 197, column: 42 } }, "92": { start: { line: 198, column: 6 }, end: { line: 198, column: 34 } }, "93": { start: { line: 199, column: 6 }, end: { line: 201, column: 7 } }, "94": { start: { line: 200, column: 8 }, end: { line: 200, column: 25 } }, "95": { start: { line: 203, column: 6 }, end: { line: 203, column: 50 } }, "96": { start: { line: 204, column: 6 }, end: { line: 204, column: 33 } }, "97": { start: { line: 206, column: 23 }, end: { line: 206, column: 74 } }, "98": { start: { line: 207, column: 22 }, end: { line: 207, column: 61 } }, "99": { start: { line: 208, column: 6 }, end: { line: 208, column: 37 } }, "100": { start: { line: 209, column: 6 }, end: { line: 209, column: 35 } }, "101": { start: { line: 211, column: 21 }, end: { line: 217, column: 7 } }, "102": { start: { line: 212, column: 8 }, end: { line: 214, column: 9 } }, "103": { start: { line: 213, column: 10 }, end: { line: 213, column: 19 } }, "104": { start: { line: 216, column: 8 }, end: { line: 216, column: 59 } }, "105": { start: { line: 219, column: 20 }, end: { line: 226, column: 7 } }, "106": { start: { line: 220, column: 8 }, end: { line: 222, column: 9 } }, "107": { start: { line: 221, column: 10 }, end: { line: 221, column: 45 } }, "108": { start: { line: 224, column: 25 }, end: { line: 224, column: 50 } }, "109": { start: { line: 225, column: 8 }, end: { line: 225, column: 35 } }, "110": { start: { line: 228, column: 17 }, end: { line: 231, column: 7 } }, "111": { start: { line: 233, column: 6 }, end: { line: 233, column: 36 } }, "112": { start: { line: 234, column: 6 }, end: { line: 249, column: 9 } }, "113": { start: { line: 235, column: 24 }, end: { line: 241, column: 9 } }, "114": { start: { line: 242, column: 8 }, end: { line: 242, column: 25 } }, "115": { start: { line: 244, column: 8 }, end: { line: 244, column: 50 } }, "116": { start: { line: 245, column: 8 }, end: { line: 248, column: 21 } }, "117": { start: { line: 253, column: 6 }, end: { line: 253, column: 34 } }, "118": { start: { line: 254, column: 6 }, end: { line: 256, column: 7 } }, "119": { start: { line: 255, column: 8 }, end: { line: 255, column: 25 } }, "120": { start: { line: 258, column: 6 }, end: { line: 258, column: 29 } }, "121": { start: { line: 259, column: 23 }, end: { line: 259, column: 49 } }, "122": { start: { line: 260, column: 6 }, end: { line: 262, column: 7 } }, "123": { start: { line: 261, column: 8 }, end: { line: 261, column: 23 } }, "124": { start: { line: 264, column: 6 }, end: { line: 284, column: 7 } }, "125": { start: { line: 266, column: 8 }, end: { line: 266, column: 32 } }, "126": { start: { line: 267, column: 8 }, end: { line: 267, column: 44 } }, "127": { start: { line: 268, column: 8 }, end: { line: 270, column: 9 } }, "128": { start: { line: 269, column: 10 }, end: { line: 269, column: 20 } }, "129": { start: { line: 272, column: 8 }, end: { line: 275, column: 21 } }, "130": { start: { line: 277, column: 8 }, end: { line: 277, column: 68 } }, "131": { start: { line: 278, column: 8 }, end: { line: 278, column: 45 } }, "132": { start: { line: 280, column: 8 }, end: { line: 283, column: 21 } }, "133": { start: { line: 287, column: 25 }, end: { line: 287, column: 29 } }, "134": { start: { line: 289, column: 36 }, end: { line: 289, column: 134 } }, "135": { start: { line: 291, column: 24 }, end: { line: 291, column: 77 } }, "136": { start: { line: 294, column: 6 }, end: { line: 298, column: 7 } }, "137": { start: { line: 295, column: 8 }, end: { line: 295, column: 41 } }, "138": { start: { line: 297, column: 8 }, end: { line: 297, column: 76 } }, "139": { start: { line: 300, column: 25 }, end: { line: 300, column: 76 } }, "140": { start: { line: 302, column: 6 }, end: { line: 304, column: 11 } }, "141": { start: { line: 302, column: 115 }, end: { line: 304, column: 7 } }, "142": { start: { line: 307, column: 6 }, end: { line: 307, column: 84 } }, "143": { start: { line: 308, column: 6 }, end: { line: 308, column: 23 } }, "144": { start: { line: 313, column: 2 }, end: { line: 316, column: 3 } }, "145": { start: { line: 315, column: 4 }, end: { line: 315, column: 21 } }, "146": { start: { line: 318, column: 26 }, end: { line: 318, column: 30 } }, "147": { start: { line: 320, column: 2 }, end: { line: 320, column: 31 } }, "148": { start: { line: 321, column: 2 }, end: { line: 321, column: 45 } }, "149": { start: { line: 322, column: 13 }, end: { line: 322, column: 69 } }, "150": { start: { line: 323, column: 2 }, end: { line: 323, column: 31 } }, "151": { start: { line: 325, column: 22 }, end: { line: 325, column: 49 } }, "152": { start: { line: 326, column: 24 }, end: { line: 326, column: 53 } }, "153": { start: { line: 328, column: 17 }, end: { line: 328, column: 42 } }, "154": { start: { line: 329, column: 2 }, end: { line: 331, column: 3 } }, "155": { start: { line: 330, column: 4 }, end: { line: 330, column: 26 } }, "156": { start: { line: 333, column: 16 }, end: { line: 333, column: 18 } }, "157": { start: { line: 334, column: 2 }, end: { line: 334, column: 31 } }, "158": { start: { line: 335, column: 2 }, end: { line: 357, column: 3 } }, "159": { start: { line: 336, column: 21 }, end: { line: 336, column: 39 } }, "160": { start: { line: 337, column: 23 }, end: { line: 348, column: 5 } }, "161": { start: { line: 349, column: 4 }, end: { line: 349, column: 39 } }, "162": { start: { line: 352, column: 19 }, end: { line: 352, column: 58 } }, "163": { start: { line: 353, column: 4 }, end: { line: 353, column: 35 } }, "164": { start: { line: 354, column: 4 }, end: { line: 356, column: 5 } }, "165": { start: { line: 355, column: 6 }, end: { line: 355, column: 81 } }, "166": { start: { line: 359, column: 2 }, end: { line: 359, column: 17 } }, "167": { start: { line: 363, column: 2 }, end: { line: 365, column: 3 } }, "168": { start: { line: 364, column: 4 }, end: { line: 364, column: 50 } }, "169": { start: { line: 367, column: 21 }, end: { line: 367, column: 53 } }, "170": { start: { line: 368, column: 2 }, end: { line: 380, column: 3 } }, "171": { start: { line: 369, column: 4 }, end: { line: 379, column: 5 } }, "172": { start: { line: 371, column: 8 }, end: { line: 371, column: 65 } }, "173": { start: { line: 372, column: 8 }, end: { line: 372, column: 64 } }, "174": { start: { line: 374, column: 8 }, end: { line: 374, column: 66 } }, "175": { start: { line: 375, column: 8 }, end: { line: 375, column: 65 } }, "176": { start: { line: 377, column: 8 }, end: { line: 377, column: 82 } }, "177": { start: { line: 378, column: 8 }, end: { line: 378, column: 25 } }, "178": { start: { line: 382, column: 2 }, end: { line: 385, column: 3 } }, "179": { start: { line: 383, column: 4 }, end: { line: 383, column: 52 } }, "180": { start: { line: 384, column: 4 }, end: { line: 384, column: 52 } }, "181": { start: { line: 387, column: 2 }, end: { line: 387, column: 48 } }, "182": { start: { line: 388, column: 2 }, end: { line: 388, column: 48 } } }, fnMap: { "0": { name: "_interopRequireWildcard", decl: { start: { line: 44, column: 9 }, end: { line: 44, column: 32 } }, loc: { start: { line: 44, column: 38 }, end: { line: 44, column: 269 } }, line: 44 }, "1": { name: "_interopRequireDefault", decl: { start: { line: 46, column: 9 }, end: { line: 46, column: 31 } }, loc: { start: { line: 46, column: 37 }, end: { line: 46, column: 95 } }, line: 46 }, "2": { name: "read", decl: { start: { line: 50, column: 9 }, end: { line: 50, column: 13 } }, loc: { start: { line: 50, column: 30 }, end: { line: 60, column: 1 } }, line: 50 }, "3": { name: "decodeValue", decl: { start: { line: 62, column: 9 }, end: { line: 62, column: 20 } }, loc: { start: { line: 62, column: 48 }, end: { line: 109, column: 1 } }, line: 62 }, "4": { name: "decodeMemoryReference", decl: { start: { line: 111, column: 9 }, end: { line: 111, column: 30 } }, loc: { start: { line: 111, column: 58 }, end: { line: 185, column: 1 } }, line: 111 }, "5": { name: "(anonymous_5)", decl: { start: { line: 145, column: 55 }, end: { line: 145, column: 56 } }, loc: { start: { line: 145, column: 64 }, end: { line: 147, column: 14 } }, line: 145 }, "6": { name: "(anonymous_6)", decl: { start: { line: 159, column: 64 }, end: { line: 159, column: 65 } }, loc: { start: { line: 159, column: 85 }, end: { line: 178, column: 7 } }, line: 159 }, "7": { name: "decodeStorageReference", decl: { start: { line: 187, column: 9 }, end: { line: 187, column: 31 } }, loc: { start: { line: 187, column: 59 }, end: { line: 310, column: 1 } }, line: 187 }, "8": { name: "(anonymous_8)", decl: { start: { line: 211, column: 21 }, end: { line: 211, column: 22 } }, loc: { start: { line: 211, column: 26 }, end: { line: 217, column: 7 } }, line: 211 }, "9": { name: "(anonymous_9)", decl: { start: { line: 219, column: 20 }, end: { line: 219, column: 21 } }, loc: { start: { line: 219, column: 25 }, end: { line: 226, column: 7 } }, line: 219 }, "10": { name: "(anonymous_10)", decl: { start: { line: 234, column: 43 }, end: { line: 234, column: 44 } }, loc: { start: { line: 234, column: 48 }, end: { line: 243, column: 7 } }, line: 234 }, "11": { name: "(anonymous_11)", decl: { start: { line: 243, column: 13 }, end: { line: 243, column: 14 } }, loc: { start: { line: 243, column: 33 }, end: { line: 249, column: 7 } }, line: 243 }, "12": { name: "(anonymous_12)", decl: { start: { line: 302, column: 90 }, end: { line: 302, column: 91 } }, loc: { start: { line: 302, column: 115 }, end: { line: 304, column: 7 } }, line: 302 }, "13": { name: "decodeMapping", decl: { start: { line: 312, column: 9 }, end: { line: 312, column: 22 } }, loc: { start: { line: 312, column: 50 }, end: { line: 360, column: 1 } }, line: 312 }, "14": { name: "decode", decl: { start: { line: 362, column: 9 }, end: { line: 362, column: 15 } }, loc: { start: { line: 362, column: 43 }, end: { line: 389, column: 1 } }, line: 362 } }, branchMap: { "0": { loc: { start: { line: 44, column: 40 }, end: { line: 44, column: 267 } }, type: "if", locations: [{ start: { line: 44, column: 40 }, end: { line: 44, column: 267 } }, { start: { line: 44, column: 40 }, end: { line: 44, column: 267 } }], line: 44 }, "1": { loc: { start: { line: 44, column: 44 }, end: { line: 44, column: 65 } }, type: "binary-expr", locations: [{ start: { line: 44, column: 44 }, end: { line: 44, column: 47 } }, { start: { line: 44, column: 51 }, end: { line: 44, column: 65 } }], line: 44 }, "2": { loc: { start: { line: 44, column: 107 }, end: { line: 44, column: 228 } }, type: "if", locations: [{ start: { line: 44, column: 107 }, end: { line: 44, column: 228 } }, { start: { line: 44, column: 107 }, end: { line: 44, column: 228 } }], line: 44 }, "3": { loc: { start: { line: 44, column: 149 }, end: { line: 44, column: 224 } }, type: "if", locations: [{ start: { line: 44, column: 149 }, end: { line: 44, column: 224 } }, { start: { line: 44, column: 149 }, end: { line: 44, column: 224 } }], line: 44 }, "4": { loc: { start: { line: 46, column: 46 }, end: { line: 46, column: 92 } }, type: "cond-expr", locations: [{ start: { line: 46, column: 70 }, end: { line: 46, column: 73 } }, { start: { line: 46, column: 76 }, end: { line: 46, column: 92 } }], line: 46 }, "5": { loc: { start: { line: 46, column: 46 }, end: { line: 46, column: 67 } }, type: "binary-expr", locations: [{ start: { line: 46, column: 46 }, end: { line: 46, column: 49 } }, { start: { line: 46, column: 53 }, end: { line: 46, column: 67 } }], line: 46 }, "6": { loc: { start: { line: 51, column: 2 }, end: { line: 59, column: 3 } }, type: "if", locations: [{ start: { line: 51, column: 2 }, end: { line: 59, column: 3 } }, { start: { line: 51, column: 2 }, end: { line: 59, column: 3 } }], line: 51 }, "7": { loc: { start: { line: 51, column: 6 }, end: { line: 51, column: 85 } }, type: "binary-expr", locations: [{ start: { line: 51, column: 6 }, end: { line: 51, column: 32 } }, { start: { line: 51, column: 36 }, end: { line: 51, column: 47 } }, { start: { line: 51, column: 51 }, end: { line: 51, column: 85 } }], line: 51 }, "8": { loc: { start: { line: 53, column: 9 }, end: { line: 59, column: 3 } }, type: "if", locations: [{ start: { line: 53, column: 9 }, end: { line: 59, column: 3 } }, { start: { line: 53, column: 9 }, end: { line: 59, column: 3 } }], line: 53 }, "9": { loc: { start: { line: 53, column: 13 }, end: { line: 53, column: 58 } }, type: "binary-expr", locations: [{ start: { line: 53, column: 13 }, end: { line: 53, column: 41 } }, { start: { line: 53, column: 45 }, end: { line: 53, column: 58 } }], line: 53 }, "10": { loc: { start: { line: 55, column: 9 }, end: { line: 59, column: 3 } }, type: "if", locations: [{ start: { line: 55, column: 9 }, end: { line: 59, column: 3 } }, { start: { line: 55, column: 9 }, end: { line: 59, column: 3 } }], line: 55 }, "11": { loc: { start: { line: 55, column: 13 }, end: { line: 55, column: 56 } }, type: "binary-expr", locations: [{ start: { line: 55, column: 13 }, end: { line: 55, column: 40 } }, { start: { line: 55, column: 44 }, end: { line: 55, column: 56 } }], line: 55 }, "12": { loc: { start: { line: 57, column: 9 }, end: { line: 59, column: 3 } }, type: "if", locations: [{ start: { line: 57, column: 9 }, end: { line: 59, column: 3 } }, { start: { line: 57, column: 9 }, end: { line: 59, column: 3 } }], line: 57 }, "13": { loc: { start: { line: 66, column: 2 }, end: { line: 69, column: 3 } }, type: "if", locations: [{ start: { line: 66, column: 2 }, end: { line: 69, column: 3 } }, { start: { line: 66, column: 2 }, end: { line: 69, column: 3 } }], line: 66 }, "14": { loc: { start: { line: 71, column: 2 }, end: { line: 108, column: 3 } }, type: "switch", locations: [{ start: { line: 72, column: 4 }, end: { line: 73, column: 48 } }, { start: { line: 75, column: 4 }, end: { line: 76, column: 38 } }, { start: { line: 78, column: 4 }, end: { line: 79, column: 44 } }, { start: { line: 81, column: 4 }, end: { line: 82, column: 44 } }, { start: { line: 84, column: 4 }, end: { line: 91, column: 46 } }, { start: { line: 93, column: 4 }, end: { line: 93, column: 18 } }, { start: { line: 94, column: 4 }, end: { line: 99, column: 57 } }, { start: { line: 101, column: 4 }, end: { line: 103, column: 38 } }, { start: { line: 105, column: 4 }, end: { line: 107, column: 23 } }], line: 71 }, "15": { loc: { start: { line: 87, column: 6 }, end: { line: 89, column: 7 } }, type: "if", locations: [{ start: { line: 87, column: 6 }, end: { line: 89, column: 7 } }, { start: { line: 87, column: 6 }, end: { line: 89, column: 7 } }], line: 87 }, "16": { loc: { start: { line: 96, column: 6 }, end: { line: 98, column: 7 } }, type: "if", locations: [{ start: { line: 96, column: 6 }, end: { line: 98, column: 7 } }, { start: { line: 96, column: 6 }, end: { line: 98, column: 7 } }], line: 96 }, "17": { loc: { start: { line: 115, column: 2 }, end: { line: 117, column: 3 } }, type: "if", locations: [{ start: { line: 115, column: 2 }, end: { line: 117, column: 3 } }, { start: { line: 115, column: 2 }, end: { line: 117, column: 3 } }], line: 115 }, "18": { loc: { start: { line: 122, column: 2 }, end: { line: 184, column: 3 } }, type: "switch", locations: [{ start: { line: 124, column: 4 }, end: { line: 124, column: 17 } }, { start: { line: 125, column: 4 }, end: { line: 134, column: 57 } }, { start: { line: 136, column: 4 }, end: { line: 147, column: 16 } }, { start: { line: 149, column: 4 }, end: { line: 178, column: 10 } }, { start: { line: 180, column: 4 }, end: { line: 182, column: 23 } }], line: 122 }, "19": { loc: { start: { line: 155, column: 36 }, end: { line: 155, column: 145 } }, type: "cond-expr", locations: [{ start: { line: 155, column: 58 }, end: { line: 155, column: 99 } }, { start: { line: 155, column: 102 }, end: { line: 155, column: 145 } }], line: 155 }, "20": { loc: { start: { line: 157, column: 26 }, end: { line: 157, column: 61 } }, type: "binary-expr", locations: [{ start: { line: 157, column: 26 }, end: { line: 157, column: 55 } }, { start: { line: 157, column: 59 }, end: { line: 157, column: 61 } }], line: 157 }, "21": { loc: { start: { line: 159, column: 43 }, end: { line: 159, column: 58 } }, type: "binary-expr", locations: [{ start: { line: 159, column: 43 }, end: { line: 159, column: 52 } }, { start: { line: 159, column: 56 }, end: { line: 159, column: 58 } }], line: 159 }, "22": { loc: { start: { line: 195, column: 2 }, end: { line: 309, column: 3 } }, type: "switch", locations: [{ start: { line: 196, column: 4 }, end: { line: 249, column: 9 } }, { start: { line: 251, column: 4 }, end: { line: 251, column: 17 } }, { start: { line: 252, column: 4 }, end: { line: 284, column: 7 } }, { start: { line: 286, column: 4 }, end: { line: 304, column: 11 } }, { start: { line: 306, column: 4 }, end: { line: 308, column: 23 } }], line: 195 }, "23": { loc: { start: { line: 199, column: 6 }, end: { line: 201, column: 7 } }, type: "if", locations: [{ start: { line: 199, column: 6 }, end: { line: 201, column: 7 } }, { start: { line: 199, column: 6 }, end: { line: 201, column: 7 } }], line: 199 }, "24": { loc: { start: { line: 212, column: 8 }, end: { line: 214, column: 9 } }, type: "if", locations: [{ start: { line: 212, column: 8 }, end: { line: 214, column: 9 } }, { start: { line: 212, column: 8 }, end: { line: 214, column: 9 } }], line: 212 }, "25": { loc: { start: { line: 220, column: 8 }, end: { line: 222, column: 9 } }, type: "if", locations: [{ start: { line: 220, column: 8 }, end: { line: 222, column: 9 } }, { start: { line: 220, column: 8 }, end: { line: 222, column: 9 } }], line: 220 }, "26": { loc: { start: { line: 237, column: 18 }, end: { line: 237, column: 80 } }, type: "cond-expr", locations: [{ start: { line: 237, column: 52 }, end: { line: 237, column: 66 } }, { start: { line: 237, column: 69 }, end: { line: 237, column: 80 } }], line: 237 }, "27": { loc: { start: { line: 254, column: 6 }, end: { line: 256, column: 7 } }, type: "if", locations: [{ start: { line: 254, column: 6 }, end: { line: 256, column: 7 } }, { start: { line: 254, column: 6 }, end: { line: 256, column: 7 } }], line: 254 }, "28": { loc: { start: { line: 260, column: 6 }, end: { line: 262, column: 7 } }, type: "if", locations: [{ start: { line: 260, column: 6 }, end: { line: 262, column: 7 } }, { start: { line: 260, column: 6 }, end: { line: 262, column: 7 } }], line: 260 }, "29": { loc: { start: { line: 264, column: 6 }, end: { line: 284, column: 7 } }, type: "if", locations: [{ start: { line: 264, column: 6 }, end: { line: 284, column: 7 } }, { start: { line: 264, column: 6 }, end: { line: 284, column: 7 } }], line: 264 }, "30": { loc: { start: { line: 268, column: 8 }, end: { line: 270, column: 9 } }, type: "if", locations: [{ start: { line: 268, column: 8 }, end: { line: 270, column: 9 } }, { start: { line: 268, column: 8 }, end: { line: 270, column: 9 } }], line: 268 }, "31": { loc: { start: { line: 289, column: 36 }, end: { line: 289, column: 134 } }, type: "cond-expr", locations: [{ start: { line: 289, column: 58 }, end: { line: 289, column: 99 } }, { start: { line: 289, column: 102 }, end: { line: 289, column: 134 } }], line: 289 }, "32": { loc: { start: { line: 291, column: 24 }, end: { line: 291, column: 77 } }, type: "binary-expr", locations: [{ start: { line: 291, column: 24 }, end: { line: 291, column: 71 } }, { start: { line: 291, column: 75 }, end: { line: 291, column: 77 } }], line: 291 }, "33": { loc: { start: { line: 291, column: 25 }, end: { line: 291, column: 60 } }, type: "binary-expr", locations: [{ start: { line: 291, column: 25 }, end: { line: 291, column: 54 } }, { start: { line: 291, column: 58 }, end: { line: 291, column: 60 } }], line: 291 }, "34": { loc: { start: { line: 294, column: 6 }, end: { line: 298, column: 7 } }, type: "if", locations: [{ start: { line: 294, column: 6 }, end: { line: 298, column: 7 } }, { start: { line: 294, column: 6 }, end: { line: 298, column: 7 } }], line: 294 }, "35": { loc: { start: { line: 313, column: 2 }, end: { line: 316, column: 3 } }, type: "if", locations: [{ start: { line: 313, column: 2 }, end: { line: 316, column: 3 } }, { start: { line: 313, column: 2 }, end: { line: 316, column: 3 } }], line: 313 }, "36": { loc: { start: { line: 322, column: 13 }, end: { line: 322, column: 69 } }, type: "binary-expr", locations: [{ start: { line: 322, column: 13 }, end: { line: 322, column: 63 } }, { start: { line: 322, column: 67 }, end: { line: 322, column: 69 } }], line: 322 }, "37": { loc: { start: { line: 329, column: 2 }, end: { line: 331, column: 3 } }, type: "if", locations: [{ start: { line: 329, column: 2 }, end: { line: 331, column: 3 } }, { start: { line: 329, column: 2 }, end: { line: 331, column: 3 } }], line: 329 }, "38": { loc: { start: { line: 354, column: 4 }, end: { line: 356, column: 5 } }, type: "if", locations: [{ start: { line: 354, column: 4 }, end: { line: 356, column: 5 } }, { start: { line: 354, column: 4 }, end: { line: 356, column: 5 } }], line: 354 }, "39": { loc: { start: { line: 363, column: 2 }, end: { line: 365, column: 3 } }, type: "if", locations: [{ start: { line: 363, column: 2 }, end: { line: 365, column: 3 } }, { start: { line: 363, column: 2 }, end: { line: 365, column: 3 } }], line: 363 }, "40": { loc: { start: { line: 368, column: 2 }, end: { line: 380, column: 3 } }, type: "if", locations: [{ start: { line: 368, column: 2 }, end: { line: 380, column: 3 } }, { start: { line: 368, column: 2 }, end: { line: 380, column: 3 } }], line: 368 }, "41": { loc: { start: { line: 369, column: 4 }, end: { line: 379, column: 5 } }, type: "switch", locations: [{ start: { line: 370, column: 6 }, end: { line: 372, column: 64 } }, { start: { line: 373, column: 6 }, end: { line: 375, column: 65 } }, { start: { line: 376, column: 6 }, end: { line: 378, column: 25 } }], line: 369 }, "42": { loc: { start: { line: 382, column: 2 }, end: { line: 385, column: 3 } }, type: "if", locations: [{ start: { line: 382, column: 2 }, end: { line: 385, column: 3 } }, { start: { line: 382, column: 2 }, end: { line: 385, column: 3 } }], line: 382 } }, s: { "0": 0, "1": 0, "2": 0, "3": 0, "4": 0, "5": 0, "6": 0, "7": 0, "8": 0, "9": 0, "10": 0, "11": 0, "12": 0, "13": 0, "14": 0, "15": 0, "16": 0, "17": 0, "18": 0, "19": 0, "20": 0, "21": 0, "22": 0, "23": 0, "24": 0, "25": 0, "26": 0, "27": 0, "28": 0, "29": 0, "30": 0, "31": 0, "32": 0, "33": 0, "34": 0, "35": 0, "36": 0, "37": 0, "38": 0, "39": 0, "40": 0, "41": 0, "42": 0, "43": 0, "44": 0, "45": 0, "46": 0, "47": 0, "48": 0, "49": 0, "50": 0, "51": 0, "52": 0, "53": 0, "54": 0, "55": 0, "56": 0, "57": 0, "58": 0, "59": 0, "60": 0, "61": 0, "62": 0, "63": 0, "64": 0, "65": 0, "66": 0, "67": 0, "68": 0, "69": 0, "70": 0, "71": 0, "72": 0, "73": 0, "74": 0, "75": 0, "76": 0, "77": 0, "78": 0, "79": 0, "80": 0, "81": 0, "82": 0, "83": 0, "84": 0, "85": 0, "86": 0, "87": 0, "88": 0, "89": 0, "90": 0, "91": 0, "92": 0, "93": 0, "94": 0, "95": 0, "96": 0, "97": 0, "98": 0, "99": 0, "100": 0, "101": 0, "102": 0, "103": 0, "104": 0, "105": 0, "106": 0, "107": 0, "108": 0, "109": 0, "110": 0, "111": 0, "112": 0, "113": 0, "114": 0, "115": 0, "116": 0, "117": 0, "118": 0, "119": 0, "120": 0, "121": 0, "122": 0, "123": 0, "124": 0, "125": 0, "126": 0, "127": 0, "128": 0, "129": 0, "130": 0, "131": 0, "132": 0, "133": 0, "134": 0, "135": 0, "136": 0, "137": 0, "138": 0, "139": 0, "140": 0, "141": 0, "142": 0, "143": 0, "144": 0, "145": 0, "146": 0, "147": 0, "148": 0, "149": 0, "150": 0, "151": 0, "152": 0, "153": 0, "154": 0, "155": 0, "156": 0, "157": 0, "158": 0, "159": 0, "160": 0, "161": 0, "162": 0, "163": 0, "164": 0, "165": 0, "166": 0, "167": 0, "168": 0, "169": 0, "170": 0, "171": 0, "172": 0, "173": 0, "174": 0, "175": 0, "176": 0, "177": 0, "178": 0, "179": 0, "180": 0, "181": 0, "182": 0 }, f: { "0": 0, "1": 0, "2": 0, "3": 0, "4": 0, "5": 0, "6": 0, "7": 0, "8": 0, "9": 0, "10": 0, "11": 0, "12": 0, "13": 0, "14": 0 }, b: { "0": [0, 0], "1": [0, 0], "2": [0, 0], "3": [0, 0], "4": [0, 0], "5": [0, 0], "6": [0, 0], "7": [0, 0, 0], "8": [0, 0], "9": [0, 0], "10": [0, 0], "11": [0, 0], "12": [0, 0], "13": [0, 0], "14": [0, 0, 0, 0, 0, 0, 0, 0, 0], "15": [0, 0], "16": [0, 0], "17": [0, 0], "18": [0, 0, 0, 0, 0], "19": [0, 0], "20": [0, 0], "21": [0, 0], "22": [0, 0, 0, 0, 0], "23": [0, 0], "24": [0, 0], "25": [0, 0], "26": [0, 0], "27": [0, 0], "28": [0, 0], "29": [0, 0], "30": [0, 0], "31": [0, 0], "32": [0, 0], "33": [0, 0], "34": [0, 0], "35": [0, 0], "36": [0, 0], "37": [0, 0], "38": [0, 0], "39": [0, 0], "40": [0, 0], "41": [0, 0, 0], "42": [0, 0] }, inputSourceMap: { version: 3, sources: ["lib/data/decode/index.js"], names: ["read", "decodeValue", "decodeMemoryReference", "decodeStorageReference", "decodeMapping", "decode", "memory", "storage", "utils", "debug", "pointer", "state", "stack", "undefined", "length", "readRange", "readBytes", "start", "literal", "definition", "info", "typeClass", "bytes", "toBigNumber", "isZero", "toSignedBigNumber", "toHexString", "typeIdentifier", "specifiedSize", "String", "fromCharCode", "apply", "rawValue", "toNumber", "WORD_SIZE", "childPointer", "chunk", "map", "baseDefinition", "scopes", "referencedDeclaration", "typeName", "expression", "variables", "name", "id", "i", "memberDefinition", "memberPointer", "typeDescriptions", "replace", "data", "slot", "baseSize", "storageSize", "perWord", "Math", "floor", "offset", "index", "position", "from", "normalizeSlot", "Array", "keys", "childFrom", "path", "idx", "lengthByte", "to", "minus", "div", "allocation", "allocateDeclarations", "children", "mappingKeys", "augmentWithDepth", "keyDefinition", "keyType", "valueDefinition", "valueType", "baseSlot", "isArray", "mapping", "key", "keyPointer", "valuePointer", "keyValue", "toString", "identifier", "isReference", "referenceType", "isMapping"], mappings: "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", file: "index.js", sourceRoot: "/Users/gnidan/src/work/truffle/packages/truffle-debugger", sourcesContent: ["import debugModule from \"debug\";\nconst debug = debugModule(\"debugger:data:decode\");\n\nimport {BigNumber} from \"bignumber.js\";\n\nimport * as memory from \"./memory\";\nimport * as storage from \"./storage\";\nimport * as utils from \"./utils\";\nimport { WORD_SIZE } from \"./utils\";\n\nexport function read(pointer, state) {\n  if (pointer.stack != undefined && state.stack && pointer.stack < state.stack.length) {\n    return state.stack[pointer.stack];\n  } else if (pointer.storage != undefined && state.storage) {\n    return storage.readRange(state.storage, pointer.storage);\n  } else if (pointer.memory != undefined && state.memory) {\n    return memory.readBytes(state.memory, pointer.memory.start, pointer.memory.length);\n  } else if (pointer.literal != undefined) {\n    return pointer.literal;\n  }\n}\n\n\nexport function decodeValue(definition, pointer, info) {\n  const { state } = info;\n  debug(\n    \"decoding value, pointer: %o, typeClass: %s\",\n    pointer, utils.typeClass(definition)\n  );\n  let bytes = read(pointer, state);\n  if (bytes == undefined) {\n    debug(\"segfault, pointer %o, state: %O\", pointer, state);\n    return undefined;\n  }\n\n  switch (utils.typeClass(definition)) {\n    case \"bool\":\n      return !utils.toBigNumber(bytes).isZero();\n\n    case \"uint\":\n      return utils.toBigNumber(bytes);\n\n    case \"int\":\n      return utils.toSignedBigNumber(bytes);\n\n    case \"address\":\n      return utils.toHexString(bytes, true);\n\n    case \"bytes\":\n      debug(\"typeIdentifier %s %o\", utils.typeIdentifier(definition), bytes);\n      // HACK bytes may be getting passed in as a literal hexstring\n      if (typeof bytes == \"string\") {\n        return bytes;\n      }\n      let length = utils.specifiedSize(definition);\n      return utils.toHexString(bytes, length);\n\n    case \"string\":\n    case \"stringliteral\":\n      debug(\"typeIdentifier %s %o\", utils.typeIdentifier(definition), bytes);\n      if (typeof bytes == \"string\") {\n        return bytes;\n      }\n      return String.fromCharCode.apply(undefined, bytes);\n\n    case \"rational\":\n      debug(\"typeIdentifier %s %o\", utils.typeIdentifier(definition), bytes);\n      return utils.toBigNumber(bytes);\n\n    default:\n      debug(\"Unknown value type: %s\", utils.typeIdentifier(definition));\n      return undefined;\n  }\n}\n\nexport function decodeMemoryReference(definition, pointer, info) {\n  const { state } = info\n  debug(\"pointer %o\", pointer);\n  let rawValue = read(pointer, state)\n  if (rawValue == undefined) {\n    return undefined;\n  }\n\n  rawValue = utils.toBigNumber(rawValue).toNumber();\n\n  var bytes;\n  switch (utils.typeClass(definition)) {\n\n    case \"bytes\":\n    case \"string\":\n      bytes = read({\n        memory: { start: rawValue, length: WORD_SIZE}\n      }, state); // bytes contain length\n\n      let childPointer = {\n        memory: { start: rawValue + WORD_SIZE, length: bytes }\n      }\n\n      return decodeValue(definition, childPointer, info);\n\n    case \"array\":\n      bytes = utils.toBigNumber(read({\n        memory: { start: rawValue, length: WORD_SIZE },\n      }, state)).toNumber();  // bytes contain array length\n\n      bytes = read({ memory: {\n        start: rawValue + WORD_SIZE, length: bytes * WORD_SIZE\n      }}, state); // now bytes contain items\n\n      return memory.chunk(bytes, WORD_SIZE)\n        .map(\n          (chunk) => decode(utils.baseDefinition(definition), {\n            literal: chunk\n          }, info)\n        )\n\n    case \"struct\":\n      const { scopes } = info;\n\n      // Declaration reference usually appears in `typeName`, but for\n      // { nodeType: \"FunctionCall\", kind: \"structConstructorCall\" }, this\n      // reference appears to live in `expression`\n      const referencedDeclaration = (definition.typeName)\n        ? definition.typeName.referencedDeclaration\n        : definition.expression.referencedDeclaration;\n\n      let { variables } = (scopes[referencedDeclaration] || {});\n\n      return Object.assign(\n        {}, ...(variables || [])\n          .map(\n            ({name, id}, i) => {\n              let memberDefinition = scopes[id].definition;\n              let memberPointer = {\n                memory: { start: rawValue + i * WORD_SIZE, length: WORD_SIZE }\n              };\n              // let memberPointer = memory.read(state.memory, pointer + i * WORD_SIZE);\n\n              // HACK\n              memberDefinition = {\n                ...memberDefinition,\n\n                typeDescriptions: {\n                  ...memberDefinition.typeDescriptions,\n\n                  typeIdentifier:\n                    memberDefinition.typeDescriptions.typeIdentifier\n                      .replace(/_storage_/g, \"_memory_\")\n                }\n              };\n\n              return {\n                [name]: decode(\n                  memberDefinition, memberPointer, info\n                )\n              };\n            }\n          )\n      );\n\n\n    default:\n      debug(\"Unknown memory reference type: %s\", utils.typeIdentifier(definition));\n      return undefined;\n\n  }\n\n}\n\nexport function decodeStorageReference(definition, pointer, info) {\n  var data;\n  var bytes;\n  var length;\n  var slot;\n\n  const { state } = info;\n\n  switch (utils.typeClass(definition)) {\n    case \"array\":\n      debug(\"storage array! %o\", pointer);\n      data = read(pointer, state);\n      if (!data) {\n        return undefined;\n      }\n\n      length = utils.toBigNumber(data).toNumber();\n      debug(\"length %o\", length);\n\n      const baseSize = utils.storageSize(utils.baseDefinition(definition));\n      const perWord = Math.floor(WORD_SIZE / baseSize);\n      debug(\"baseSize %o\", baseSize);\n      debug(\"perWord %d\", perWord);\n\n      const offset = (i) => {\n        if (perWord == 1) {\n          return i;\n        }\n\n        return Math.floor(i * baseSize / WORD_SIZE);\n      }\n\n      const index = (i) => {\n        if (perWord == 1) {\n          return WORD_SIZE - baseSize;\n        }\n\n        const position = perWord - i % perWord - 1;\n        return position * baseSize;\n      }\n\n      let from = {\n        slot: utils.normalizeSlot(pointer.storage.from.slot),\n        index: pointer.storage.from.index\n      };\n\n      debug(\"pointer: %o\", pointer);\n      return [...Array(length).keys()]\n        .map( (i) => {\n          let childFrom = {\n            slot: {\n              path: (from.slot.path instanceof Array)\n                ? from.slot.path\n                : [from.slot],\n              offset: offset(i),\n            },\n            index: index(i)\n          };\n          return childFrom;\n        })\n        .map( (childFrom, idx) => {\n          debug(\"childFrom %d, %o\", idx, childFrom);\n          return decode(utils.baseDefinition(definition), { storage: {\n            from: childFrom,\n            length: baseSize\n          }}, info);\n        });\n\n    case \"bytes\":\n    case \"string\":\n      data = read(pointer, state);\n      if (data == undefined) {\n        return undefined;\n      }\n\n      debug(\"data %O\", data);\n      let lengthByte = data[WORD_SIZE - 1];\n      if (!lengthByte) {\n        lengthByte = 0;\n      }\n\n      if (lengthByte % 2 == 0) {\n        // string lives in word, length is last byte / 2\n        length = lengthByte / 2;\n        debug(\"in-word; length %o\", length);\n        if (length == 0) {\n          return \"\";\n        }\n\n        return decodeValue(definition, { storage: {\n          from: { slot: pointer.storage.from.slot, index: 0 },\n          to: { slot: pointer.storage.from.slot, index: length - 1}\n        }}, info);\n\n      } else {\n        length = utils.toBigNumber(data).minus(1).div(2).toNumber();\n        debug(\"new-word, length %o\", length);\n\n        return decodeValue(definition, { storage: {\n          from: { slot: [pointer.storage.from.slot], index: 0 },\n          length\n        }}, info);\n      }\n\n    case \"struct\":\n      const { scopes } = info;\n\n      const referencedDeclaration = (definition.typeName)\n        ? definition.typeName.referencedDeclaration\n        : definition.referencedDeclaration;\n\n      const variables = (scopes[referencedDeclaration] || {}).variables || [];\n\n      let slot;\n      if (pointer.storage != undefined) {\n        slot = pointer.storage.from.slot;\n      } else {\n        slot = utils.normalizeSlot(utils.toBigNumber(read(pointer, state)));\n      }\n\n      const allocation = utils.allocateDeclarations(variables, scopes, slot);\n\n      return Object.assign(\n        {}, ...Object.entries(allocation.children)\n          .map( ([id, childPointer]) => ({\n            [childPointer.name]: decode(\n              scopes[id].definition, { storage: childPointer }, info\n            )\n          }))\n      );\n\n    default:\n      debug(\"Unknown storage reference type: %s\", utils.typeIdentifier(definition));\n      return undefined;\n  }\n}\n\nexport function decodeMapping(definition, pointer, info) {\n  if (definition.referencedDeclaration) {\n    // attempting to decode reference to mapping, thus missing valid pointer\n    return undefined;\n  }\n\n  const { mappingKeys } = info;\n\n  debug(\"mapping %O\", pointer);\n  debug(\"mapping definition %O\", definition);\n  let keys = mappingKeys[utils.augmentWithDepth(definition.id)] || [];\n  debug(\"known keys %o\", keys);\n\n  let keyDefinition = definition.typeName.keyType;\n  let valueDefinition = definition.typeName.valueType;\n\n  let baseSlot = pointer.storage.from.slot;\n  if (!Array.isArray(baseSlot)) {\n    baseSlot = [baseSlot];\n  }\n\n  let mapping = {};\n  debug(\"mapping %O\", mapping);\n  for (let key of keys) {\n    let keyPointer = { \"literal\": key };\n    let valuePointer = {\n      storage: {\n        from: {\n          slot: [key, ...baseSlot],\n          index: 0\n        },\n        to: {\n          slot: [key, ...baseSlot],\n          index: 31\n        }\n      }\n    };\n    debug(\"keyPointer %o\", keyPointer);\n\n    // NOTE mapping keys are potentially lossy because JS only likes strings\n    let keyValue = decode(keyDefinition, keyPointer, info);\n    debug(\"keyValue %o\", keyValue);\n    if (keyValue != undefined) {\n      mapping[keyValue.toString()] =\n        decode(valueDefinition, valuePointer, info);\n    }\n  }\n\n  return mapping;\n}\n\n\nexport default function decode(definition, pointer, info) {\n  if (pointer.literal != undefined) {\n    return decodeValue(definition, pointer, info);\n  }\n\n  const identifier = utils.typeIdentifier(definition);\n  if (utils.isReference(definition)) {\n    switch (utils.referenceType(definition)) {\n      case \"memory\":\n        debug(\"decoding memory reference, type: %s\", identifier);\n        return decodeMemoryReference(definition, pointer, info);\n      case \"storage\":\n        debug(\"decoding storage reference, type: %s\", identifier);\n        return decodeStorageReference(definition, pointer, info);\n      default:\n        debug(\"Unknown reference category: %s\", utils.typeIdentifier(definition));\n        return undefined;\n    }\n  }\n\n  if (utils.isMapping(definition)) {\n    debug(\"decoding mapping, type: %s\", identifier);\n    return decodeMapping(definition, pointer, info);\n  }\n\n  debug(\"decoding value, type: %s\", identifier);\n  return decodeValue(definition, pointer, info);\n}\n"] }, _coverageSchema: "332fd63041d2c1bcb487cc26dd0d5f7d97098a6c" },
      coverage = global[gcv] || (global[gcv] = {});if (coverage[path] && coverage[path].hash === hash) {
    return coverage[path];
  }coverageData.hash = hash;return coverage[path] = coverageData;
}();cov_2h0rawf57g.s[0]++;Object.defineProperty(exports, "__esModule", { value: true });var _entries = (cov_2h0rawf57g.s[1]++, __webpack_require__(1));var _entries2 = (cov_2h0rawf57g.s[2]++, _interopRequireDefault(_entries));var _extends2 = (cov_2h0rawf57g.s[3]++, __webpack_require__(4));var _extends3 = (cov_2h0rawf57g.s[4]++, _interopRequireDefault(_extends2));var _assign = (cov_2h0rawf57g.s[5]++, __webpack_require__(5));var _assign2 = (cov_2h0rawf57g.s[6]++, _interopRequireDefault(_assign));cov_2h0rawf57g.s[7]++;exports.read = read;cov_2h0rawf57g.s[8]++;exports.decodeValue = decodeValue;cov_2h0rawf57g.s[9]++;exports.decodeMemoryReference = decodeMemoryReference;cov_2h0rawf57g.s[10]++;exports.decodeStorageReference = decodeStorageReference;cov_2h0rawf57g.s[11]++;exports.decodeMapping = decodeMapping;cov_2h0rawf57g.s[12]++;exports.default = decode;var _debug = (cov_2h0rawf57g.s[13]++, __webpack_require__(0));var _debug2 = (cov_2h0rawf57g.s[14]++, _interopRequireDefault(_debug));var _bignumber = (cov_2h0rawf57g.s[15]++, __webpack_require__(20));var _memory = (cov_2h0rawf57g.s[16]++, __webpack_require__(64));var memory = (cov_2h0rawf57g.s[17]++, _interopRequireWildcard(_memory));var _storage = (cov_2h0rawf57g.s[18]++, __webpack_require__(65));var storage = (cov_2h0rawf57g.s[19]++, _interopRequireWildcard(_storage));var _utils = (cov_2h0rawf57g.s[20]++, __webpack_require__(11));var utils = (cov_2h0rawf57g.s[21]++, _interopRequireWildcard(_utils));function _interopRequireWildcard(obj) {
  cov_2h0rawf57g.f[0]++;cov_2h0rawf57g.s[22]++;if ((cov_2h0rawf57g.b[1][0]++, obj) && (cov_2h0rawf57g.b[1][1]++, obj.__esModule)) {
    cov_2h0rawf57g.b[0][0]++;cov_2h0rawf57g.s[23]++;return obj;
  } else {
    cov_2h0rawf57g.b[0][1]++;var newObj = (cov_2h0rawf57g.s[24]++, {});cov_2h0rawf57g.s[25]++;if (obj != null) {
      cov_2h0rawf57g.b[2][0]++;cov_2h0rawf57g.s[26]++;for (var key in obj) {
        cov_2h0rawf57g.s[27]++;if (Object.prototype.hasOwnProperty.call(obj, key)) {
          cov_2h0rawf57g.b[3][0]++;cov_2h0rawf57g.s[28]++;newObj[key] = obj[key];
        } else {
          cov_2h0rawf57g.b[3][1]++;
        }
      }
    } else {
      cov_2h0rawf57g.b[2][1]++;
    }cov_2h0rawf57g.s[29]++;newObj.default = obj;cov_2h0rawf57g.s[30]++;return newObj;
  }
}function _interopRequireDefault(obj) {
  cov_2h0rawf57g.f[1]++;cov_2h0rawf57g.s[31]++;return (cov_2h0rawf57g.b[5][0]++, obj) && (cov_2h0rawf57g.b[5][1]++, obj.__esModule) ? (cov_2h0rawf57g.b[4][0]++, obj) : (cov_2h0rawf57g.b[4][1]++, { default: obj });
}const debug = (cov_2h0rawf57g.s[32]++, (0, _debug2.default)("debugger:data:decode"));function read(pointer, state) {
  cov_2h0rawf57g.f[2]++;cov_2h0rawf57g.s[33]++;if ((cov_2h0rawf57g.b[7][0]++, pointer.stack != undefined) && (cov_2h0rawf57g.b[7][1]++, state.stack) && (cov_2h0rawf57g.b[7][2]++, pointer.stack < state.stack.length)) {
    cov_2h0rawf57g.b[6][0]++;cov_2h0rawf57g.s[34]++;return state.stack[pointer.stack];
  } else {
    cov_2h0rawf57g.b[6][1]++;cov_2h0rawf57g.s[35]++;if ((cov_2h0rawf57g.b[9][0]++, pointer.storage != undefined) && (cov_2h0rawf57g.b[9][1]++, state.storage)) {
      cov_2h0rawf57g.b[8][0]++;cov_2h0rawf57g.s[36]++;return storage.readRange(state.storage, pointer.storage);
    } else {
      cov_2h0rawf57g.b[8][1]++;cov_2h0rawf57g.s[37]++;if ((cov_2h0rawf57g.b[11][0]++, pointer.memory != undefined) && (cov_2h0rawf57g.b[11][1]++, state.memory)) {
        cov_2h0rawf57g.b[10][0]++;cov_2h0rawf57g.s[38]++;return memory.readBytes(state.memory, pointer.memory.start, pointer.memory.length);
      } else {
        cov_2h0rawf57g.b[10][1]++;cov_2h0rawf57g.s[39]++;if (pointer.literal != undefined) {
          cov_2h0rawf57g.b[12][0]++;cov_2h0rawf57g.s[40]++;return pointer.literal;
        } else {
          cov_2h0rawf57g.b[12][1]++;
        }
      }
    }
  }
}function decodeValue(definition, pointer, info) {
  cov_2h0rawf57g.f[3]++;const { state } = (cov_2h0rawf57g.s[41]++, info);cov_2h0rawf57g.s[42]++;debug("decoding value, pointer: %o, typeClass: %s", pointer, utils.typeClass(definition));let bytes = (cov_2h0rawf57g.s[43]++, read(pointer, state));cov_2h0rawf57g.s[44]++;if (bytes == undefined) {
    cov_2h0rawf57g.b[13][0]++;cov_2h0rawf57g.s[45]++;debug("segfault, pointer %o, state: %O", pointer, state);cov_2h0rawf57g.s[46]++;return undefined;
  } else {
    cov_2h0rawf57g.b[13][1]++;
  }cov_2h0rawf57g.s[47]++;switch (utils.typeClass(definition)) {case "bool":
      cov_2h0rawf57g.b[14][0]++;cov_2h0rawf57g.s[48]++;return !utils.toBigNumber(bytes).isZero();case "uint":
      cov_2h0rawf57g.b[14][1]++;cov_2h0rawf57g.s[49]++;return utils.toBigNumber(bytes);case "int":
      cov_2h0rawf57g.b[14][2]++;cov_2h0rawf57g.s[50]++;return utils.toSignedBigNumber(bytes);case "address":
      cov_2h0rawf57g.b[14][3]++;cov_2h0rawf57g.s[51]++;return utils.toHexString(bytes, true);case "bytes":
      cov_2h0rawf57g.b[14][4]++;cov_2h0rawf57g.s[52]++;debug("typeIdentifier %s %o", utils.typeIdentifier(definition), bytes);cov_2h0rawf57g.s[53]++;if (typeof bytes == "string") {
        cov_2h0rawf57g.b[15][0]++;cov_2h0rawf57g.s[54]++;return bytes;
      } else {
        cov_2h0rawf57g.b[15][1]++;
      }let length = (cov_2h0rawf57g.s[55]++, utils.specifiedSize(definition));cov_2h0rawf57g.s[56]++;return utils.toHexString(bytes, length);case "string":
      cov_2h0rawf57g.b[14][5]++;case "stringliteral":
      cov_2h0rawf57g.b[14][6]++;cov_2h0rawf57g.s[57]++;debug("typeIdentifier %s %o", utils.typeIdentifier(definition), bytes);cov_2h0rawf57g.s[58]++;if (typeof bytes == "string") {
        cov_2h0rawf57g.b[16][0]++;cov_2h0rawf57g.s[59]++;return bytes;
      } else {
        cov_2h0rawf57g.b[16][1]++;
      }cov_2h0rawf57g.s[60]++;return String.fromCharCode.apply(undefined, bytes);case "rational":
      cov_2h0rawf57g.b[14][7]++;cov_2h0rawf57g.s[61]++;debug("typeIdentifier %s %o", utils.typeIdentifier(definition), bytes);cov_2h0rawf57g.s[62]++;return utils.toBigNumber(bytes);default:
      cov_2h0rawf57g.b[14][8]++;cov_2h0rawf57g.s[63]++;debug("Unknown value type: %s", utils.typeIdentifier(definition));cov_2h0rawf57g.s[64]++;return undefined;}
}function decodeMemoryReference(definition, pointer, info) {
  cov_2h0rawf57g.f[4]++;const { state } = (cov_2h0rawf57g.s[65]++, info);cov_2h0rawf57g.s[66]++;debug("pointer %o", pointer);let rawValue = (cov_2h0rawf57g.s[67]++, read(pointer, state));cov_2h0rawf57g.s[68]++;if (rawValue == undefined) {
    cov_2h0rawf57g.b[17][0]++;cov_2h0rawf57g.s[69]++;return undefined;
  } else {
    cov_2h0rawf57g.b[17][1]++;
  }cov_2h0rawf57g.s[70]++;rawValue = utils.toBigNumber(rawValue).toNumber();var bytes;cov_2h0rawf57g.s[71]++;switch (utils.typeClass(definition)) {case "bytes":
      cov_2h0rawf57g.b[18][0]++;case "string":
      cov_2h0rawf57g.b[18][1]++;cov_2h0rawf57g.s[72]++;bytes = read({ memory: { start: rawValue, length: _utils.WORD_SIZE } }, state);let childPointer = (cov_2h0rawf57g.s[73]++, { memory: { start: rawValue + _utils.WORD_SIZE, length: bytes } });cov_2h0rawf57g.s[74]++;return decodeValue(definition, childPointer, info);case "array":
      cov_2h0rawf57g.b[18][2]++;cov_2h0rawf57g.s[75]++;bytes = utils.toBigNumber(read({ memory: { start: rawValue, length: _utils.WORD_SIZE } }, state)).toNumber();cov_2h0rawf57g.s[76]++;bytes = read({ memory: { start: rawValue + _utils.WORD_SIZE, length: bytes * _utils.WORD_SIZE } }, state);cov_2h0rawf57g.s[77]++;return memory.chunk(bytes, _utils.WORD_SIZE).map(chunk => {
        cov_2h0rawf57g.f[5]++;cov_2h0rawf57g.s[78]++;return decode(utils.baseDefinition(definition), { literal: chunk }, info);
      });case "struct":
      cov_2h0rawf57g.b[18][3]++;const { scopes } = (cov_2h0rawf57g.s[79]++, info);const referencedDeclaration = (cov_2h0rawf57g.s[80]++, definition.typeName ? (cov_2h0rawf57g.b[19][0]++, definition.typeName.referencedDeclaration) : (cov_2h0rawf57g.b[19][1]++, definition.expression.referencedDeclaration));let { variables } = (cov_2h0rawf57g.s[81]++, (cov_2h0rawf57g.b[20][0]++, scopes[referencedDeclaration]) || (cov_2h0rawf57g.b[20][1]++, {}));cov_2h0rawf57g.s[82]++;return (0, _assign2.default)({}, ...((cov_2h0rawf57g.b[21][0]++, variables) || (cov_2h0rawf57g.b[21][1]++, [])).map(({ name, id }, i) => {
        cov_2h0rawf57g.f[6]++;let memberDefinition = (cov_2h0rawf57g.s[83]++, scopes[id].definition);let memberPointer = (cov_2h0rawf57g.s[84]++, { memory: { start: rawValue + i * _utils.WORD_SIZE, length: _utils.WORD_SIZE } });cov_2h0rawf57g.s[85]++;memberDefinition = (0, _extends3.default)({}, memberDefinition, { typeDescriptions: (0, _extends3.default)({}, memberDefinition.typeDescriptions, { typeIdentifier: memberDefinition.typeDescriptions.typeIdentifier.replace(/_storage_/g, "_memory_") }) });cov_2h0rawf57g.s[86]++;return { [name]: decode(memberDefinition, memberPointer, info) };
      }));default:
      cov_2h0rawf57g.b[18][4]++;cov_2h0rawf57g.s[87]++;debug("Unknown memory reference type: %s", utils.typeIdentifier(definition));cov_2h0rawf57g.s[88]++;return undefined;}
}function decodeStorageReference(definition, pointer, info) {
  cov_2h0rawf57g.f[7]++;var data;var bytes;var length;var slot;const { state } = (cov_2h0rawf57g.s[89]++, info);cov_2h0rawf57g.s[90]++;switch (utils.typeClass(definition)) {case "array":
      cov_2h0rawf57g.b[22][0]++;cov_2h0rawf57g.s[91]++;debug("storage array! %o", pointer);cov_2h0rawf57g.s[92]++;data = read(pointer, state);cov_2h0rawf57g.s[93]++;if (!data) {
        cov_2h0rawf57g.b[23][0]++;cov_2h0rawf57g.s[94]++;return undefined;
      } else {
        cov_2h0rawf57g.b[23][1]++;
      }cov_2h0rawf57g.s[95]++;length = utils.toBigNumber(data).toNumber();cov_2h0rawf57g.s[96]++;debug("length %o", length);const baseSize = (cov_2h0rawf57g.s[97]++, utils.storageSize(utils.baseDefinition(definition)));const perWord = (cov_2h0rawf57g.s[98]++, Math.floor(_utils.WORD_SIZE / baseSize));cov_2h0rawf57g.s[99]++;debug("baseSize %o", baseSize);cov_2h0rawf57g.s[100]++;debug("perWord %d", perWord);const offset = (cov_2h0rawf57g.s[101]++, i => {
        cov_2h0rawf57g.f[8]++;cov_2h0rawf57g.s[102]++;if (perWord == 1) {
          cov_2h0rawf57g.b[24][0]++;cov_2h0rawf57g.s[103]++;return i;
        } else {
          cov_2h0rawf57g.b[24][1]++;
        }cov_2h0rawf57g.s[104]++;return Math.floor(i * baseSize / _utils.WORD_SIZE);
      });const index = (cov_2h0rawf57g.s[105]++, i => {
        cov_2h0rawf57g.f[9]++;cov_2h0rawf57g.s[106]++;if (perWord == 1) {
          cov_2h0rawf57g.b[25][0]++;cov_2h0rawf57g.s[107]++;return _utils.WORD_SIZE - baseSize;
        } else {
          cov_2h0rawf57g.b[25][1]++;
        }const position = (cov_2h0rawf57g.s[108]++, perWord - i % perWord - 1);cov_2h0rawf57g.s[109]++;return position * baseSize;
      });let from = (cov_2h0rawf57g.s[110]++, { slot: utils.normalizeSlot(pointer.storage.from.slot), index: pointer.storage.from.index });cov_2h0rawf57g.s[111]++;debug("pointer: %o", pointer);cov_2h0rawf57g.s[112]++;return [...Array(length).keys()].map(i => {
        cov_2h0rawf57g.f[10]++;let childFrom = (cov_2h0rawf57g.s[113]++, { slot: { path: from.slot.path instanceof Array ? (cov_2h0rawf57g.b[26][0]++, from.slot.path) : (cov_2h0rawf57g.b[26][1]++, [from.slot]), offset: offset(i) }, index: index(i) });cov_2h0rawf57g.s[114]++;return childFrom;
      }).map((childFrom, idx) => {
        cov_2h0rawf57g.f[11]++;cov_2h0rawf57g.s[115]++;debug("childFrom %d, %o", idx, childFrom);cov_2h0rawf57g.s[116]++;return decode(utils.baseDefinition(definition), { storage: { from: childFrom, length: baseSize } }, info);
      });case "bytes":
      cov_2h0rawf57g.b[22][1]++;case "string":
      cov_2h0rawf57g.b[22][2]++;cov_2h0rawf57g.s[117]++;data = read(pointer, state);cov_2h0rawf57g.s[118]++;if (data == undefined) {
        cov_2h0rawf57g.b[27][0]++;cov_2h0rawf57g.s[119]++;return undefined;
      } else {
        cov_2h0rawf57g.b[27][1]++;
      }cov_2h0rawf57g.s[120]++;debug("data %O", data);let lengthByte = (cov_2h0rawf57g.s[121]++, data[_utils.WORD_SIZE - 1]);cov_2h0rawf57g.s[122]++;if (!lengthByte) {
        cov_2h0rawf57g.b[28][0]++;cov_2h0rawf57g.s[123]++;lengthByte = 0;
      } else {
        cov_2h0rawf57g.b[28][1]++;
      }cov_2h0rawf57g.s[124]++;if (lengthByte % 2 == 0) {
        cov_2h0rawf57g.b[29][0]++;cov_2h0rawf57g.s[125]++;length = lengthByte / 2;cov_2h0rawf57g.s[126]++;debug("in-word; length %o", length);cov_2h0rawf57g.s[127]++;if (length == 0) {
          cov_2h0rawf57g.b[30][0]++;cov_2h0rawf57g.s[128]++;return "";
        } else {
          cov_2h0rawf57g.b[30][1]++;
        }cov_2h0rawf57g.s[129]++;return decodeValue(definition, { storage: { from: { slot: pointer.storage.from.slot, index: 0 }, to: { slot: pointer.storage.from.slot, index: length - 1 } } }, info);
      } else {
        cov_2h0rawf57g.b[29][1]++;cov_2h0rawf57g.s[130]++;length = utils.toBigNumber(data).minus(1).div(2).toNumber();cov_2h0rawf57g.s[131]++;debug("new-word, length %o", length);cov_2h0rawf57g.s[132]++;return decodeValue(definition, { storage: { from: { slot: [pointer.storage.from.slot], index: 0 }, length } }, info);
      }case "struct":
      cov_2h0rawf57g.b[22][3]++;const { scopes } = (cov_2h0rawf57g.s[133]++, info);const referencedDeclaration = (cov_2h0rawf57g.s[134]++, definition.typeName ? (cov_2h0rawf57g.b[31][0]++, definition.typeName.referencedDeclaration) : (cov_2h0rawf57g.b[31][1]++, definition.referencedDeclaration));const variables = (cov_2h0rawf57g.s[135]++, (cov_2h0rawf57g.b[32][0]++, ((cov_2h0rawf57g.b[33][0]++, scopes[referencedDeclaration]) || (cov_2h0rawf57g.b[33][1]++, {})).variables) || (cov_2h0rawf57g.b[32][1]++, []));let slot;cov_2h0rawf57g.s[136]++;if (pointer.storage != undefined) {
        cov_2h0rawf57g.b[34][0]++;cov_2h0rawf57g.s[137]++;slot = pointer.storage.from.slot;
      } else {
        cov_2h0rawf57g.b[34][1]++;cov_2h0rawf57g.s[138]++;slot = utils.normalizeSlot(utils.toBigNumber(read(pointer, state)));
      }const allocation = (cov_2h0rawf57g.s[139]++, utils.allocateDeclarations(variables, scopes, slot));cov_2h0rawf57g.s[140]++;return (0, _assign2.default)({}, ...(0, _entries2.default)(allocation.children).map(([id, childPointer]) => {
        cov_2h0rawf57g.f[12]++;cov_2h0rawf57g.s[141]++;return { [childPointer.name]: decode(scopes[id].definition, { storage: childPointer }, info) };
      }));default:
      cov_2h0rawf57g.b[22][4]++;cov_2h0rawf57g.s[142]++;debug("Unknown storage reference type: %s", utils.typeIdentifier(definition));cov_2h0rawf57g.s[143]++;return undefined;}
}function decodeMapping(definition, pointer, info) {
  cov_2h0rawf57g.f[13]++;cov_2h0rawf57g.s[144]++;if (definition.referencedDeclaration) {
    cov_2h0rawf57g.b[35][0]++;cov_2h0rawf57g.s[145]++;return undefined;
  } else {
    cov_2h0rawf57g.b[35][1]++;
  }const { mappingKeys } = (cov_2h0rawf57g.s[146]++, info);cov_2h0rawf57g.s[147]++;debug("mapping %O", pointer);cov_2h0rawf57g.s[148]++;debug("mapping definition %O", definition);let keys = (cov_2h0rawf57g.s[149]++, (cov_2h0rawf57g.b[36][0]++, mappingKeys[utils.augmentWithDepth(definition.id)]) || (cov_2h0rawf57g.b[36][1]++, []));cov_2h0rawf57g.s[150]++;debug("known keys %o", keys);let keyDefinition = (cov_2h0rawf57g.s[151]++, definition.typeName.keyType);let valueDefinition = (cov_2h0rawf57g.s[152]++, definition.typeName.valueType);let baseSlot = (cov_2h0rawf57g.s[153]++, pointer.storage.from.slot);cov_2h0rawf57g.s[154]++;if (!Array.isArray(baseSlot)) {
    cov_2h0rawf57g.b[37][0]++;cov_2h0rawf57g.s[155]++;baseSlot = [baseSlot];
  } else {
    cov_2h0rawf57g.b[37][1]++;
  }let mapping = (cov_2h0rawf57g.s[156]++, {});cov_2h0rawf57g.s[157]++;debug("mapping %O", mapping);cov_2h0rawf57g.s[158]++;for (let key of keys) {
    let keyPointer = (cov_2h0rawf57g.s[159]++, { "literal": key });let valuePointer = (cov_2h0rawf57g.s[160]++, { storage: { from: { slot: [key, ...baseSlot], index: 0 }, to: { slot: [key, ...baseSlot], index: 31 } } });cov_2h0rawf57g.s[161]++;debug("keyPointer %o", keyPointer);let keyValue = (cov_2h0rawf57g.s[162]++, decode(keyDefinition, keyPointer, info));cov_2h0rawf57g.s[163]++;debug("keyValue %o", keyValue);cov_2h0rawf57g.s[164]++;if (keyValue != undefined) {
      cov_2h0rawf57g.b[38][0]++;cov_2h0rawf57g.s[165]++;mapping[keyValue.toString()] = decode(valueDefinition, valuePointer, info);
    } else {
      cov_2h0rawf57g.b[38][1]++;
    }
  }cov_2h0rawf57g.s[166]++;return mapping;
}function decode(definition, pointer, info) {
  cov_2h0rawf57g.f[14]++;cov_2h0rawf57g.s[167]++;if (pointer.literal != undefined) {
    cov_2h0rawf57g.b[39][0]++;cov_2h0rawf57g.s[168]++;return decodeValue(definition, pointer, info);
  } else {
    cov_2h0rawf57g.b[39][1]++;
  }const identifier = (cov_2h0rawf57g.s[169]++, utils.typeIdentifier(definition));cov_2h0rawf57g.s[170]++;if (utils.isReference(definition)) {
    cov_2h0rawf57g.b[40][0]++;cov_2h0rawf57g.s[171]++;switch (utils.referenceType(definition)) {case "memory":
        cov_2h0rawf57g.b[41][0]++;cov_2h0rawf57g.s[172]++;debug("decoding memory reference, type: %s", identifier);cov_2h0rawf57g.s[173]++;return decodeMemoryReference(definition, pointer, info);case "storage":
        cov_2h0rawf57g.b[41][1]++;cov_2h0rawf57g.s[174]++;debug("decoding storage reference, type: %s", identifier);cov_2h0rawf57g.s[175]++;return decodeStorageReference(definition, pointer, info);default:
        cov_2h0rawf57g.b[41][2]++;cov_2h0rawf57g.s[176]++;debug("Unknown reference category: %s", utils.typeIdentifier(definition));cov_2h0rawf57g.s[177]++;return undefined;}
  } else {
    cov_2h0rawf57g.b[40][1]++;
  }cov_2h0rawf57g.s[178]++;if (utils.isMapping(definition)) {
    cov_2h0rawf57g.b[42][0]++;cov_2h0rawf57g.s[179]++;debug("decoding mapping, type: %s", identifier);cov_2h0rawf57g.s[180]++;return decodeMapping(definition, pointer, info);
  } else {
    cov_2h0rawf57g.b[42][1]++;
  }cov_2h0rawf57g.s[181]++;debug("decoding value, type: %s", identifier);cov_2h0rawf57g.s[182]++;return decodeValue(definition, pointer, info);
}

/***/ }),
/* 64 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var cov_2qvig2sh12 = function () {
  var path = "/Users/gnidan/src/work/truffle/packages/truffle-debugger/lib/data/decode/memory.js",
      hash = "adbfefaca980df26f25dae427e514d86983594f6",
      Function = function () {}.constructor,
      global = new Function('return this')(),
      gcv = "__coverage__",
      coverageData = { path: "/Users/gnidan/src/work/truffle/packages/truffle-debugger/lib/data/decode/memory.js", statementMap: { "0": { start: { line: 3, column: 0 }, end: { line: 5, column: 3 } }, "1": { start: { line: 6, column: 0 }, end: { line: 6, column: 20 } }, "2": { start: { line: 7, column: 0 }, end: { line: 7, column: 30 } }, "3": { start: { line: 8, column: 0 }, end: { line: 8, column: 22 } }, "4": { start: { line: 10, column: 13 }, end: { line: 10, column: 29 } }, "5": { start: { line: 12, column: 14 }, end: { line: 12, column: 44 } }, "6": { start: { line: 14, column: 17 }, end: { line: 14, column: 40 } }, "7": { start: { line: 16, column: 13 }, end: { line: 16, column: 31 } }, "8": { start: { line: 18, column: 12 }, end: { line: 18, column: 43 } }, "9": { start: { line: 20, column: 40 }, end: { line: 20, column: 267 } }, "10": { start: { line: 20, column: 69 }, end: { line: 20, column: 80 } }, "11": { start: { line: 20, column: 103 }, end: { line: 20, column: 105 } }, "12": { start: { line: 20, column: 107 }, end: { line: 20, column: 228 } }, "13": { start: { line: 20, column: 126 }, end: { line: 20, column: 226 } }, "14": { start: { line: 20, column: 149 }, end: { line: 20, column: 224 } }, "15": { start: { line: 20, column: 201 }, end: { line: 20, column: 224 } }, "16": { start: { line: 20, column: 229 }, end: { line: 20, column: 250 } }, "17": { start: { line: 20, column: 251 }, end: { line: 20, column: 265 } }, "18": { start: { line: 22, column: 39 }, end: { line: 22, column: 93 } }, "19": { start: { line: 24, column: 14 }, end: { line: 24, column: 65 } }, "20": { start: { line: 35, column: 2 }, end: { line: 35, column: 51 } }, "21": { start: { line: 44, column: 2 }, end: { line: 44, column: 33 } }, "22": { start: { line: 45, column: 2 }, end: { line: 45, column: 37 } }, "23": { start: { line: 47, column: 2 }, end: { line: 49, column: 3 } }, "24": { start: { line: 48, column: 4 }, end: { line: 48, column: 58 } }, "25": { start: { line: 51, column: 2 }, end: { line: 53, column: 3 } }, "26": { start: { line: 52, column: 4 }, end: { line: 52, column: 58 } }, "27": { start: { line: 56, column: 14 }, end: { line: 56, column: 47 } }, "28": { start: { line: 59, column: 15 }, end: { line: 59, column: 64 } }, "29": { start: { line: 60, column: 2 }, end: { line: 62, column: 3 } }, "30": { start: { line: 61, column: 4 }, end: { line: 61, column: 65 } }, "31": { start: { line: 64, column: 17 }, end: { line: 64, column: 82 } }, "32": { start: { line: 66, column: 2 }, end: { line: 66, column: 22 } }, "33": { start: { line: 68, column: 2 }, end: { line: 68, column: 15 } }, "34": { start: { line: 75, column: 15 }, end: { line: 75, column: 17 } }, "35": { start: { line: 77, column: 2 }, end: { line: 80, column: 3 } }, "36": { start: { line: 78, column: 16 }, end: { line: 78, column: 42 } }, "37": { start: { line: 79, column: 4 }, end: { line: 79, column: 23 } }, "38": { start: { line: 82, column: 2 }, end: { line: 82, column: 16 } } }, fnMap: { "0": { name: "_interopRequireWildcard", decl: { start: { line: 20, column: 9 }, end: { line: 20, column: 32 } }, loc: { start: { line: 20, column: 38 }, end: { line: 20, column: 269 } }, line: 20 }, "1": { name: "_interopRequireDefault", decl: { start: { line: 22, column: 9 }, end: { line: 22, column: 31 } }, loc: { start: { line: 22, column: 37 }, end: { line: 22, column: 95 } }, line: 22 }, "2": { name: "read", decl: { start: { line: 34, column: 9 }, end: { line: 34, column: 13 } }, loc: { start: { line: 34, column: 28 }, end: { line: 36, column: 1 } }, line: 34 }, "3": { name: "readBytes", decl: { start: { line: 43, column: 9 }, end: { line: 43, column: 18 } }, loc: { start: { line: 43, column: 41 }, end: { line: 69, column: 1 } }, line: 43 }, "4": { name: "chunk", decl: { start: { line: 74, column: 9 }, end: { line: 74, column: 14 } }, loc: { start: { line: 74, column: 48 }, end: { line: 83, column: 1 } }, line: 74 } }, branchMap: { "0": { loc: { start: { line: 20, column: 40 }, end: { line: 20, column: 267 } }, type: "if", locations: [{ start: { line: 20, column: 40 }, end: { line: 20, column: 267 } }, { start: { line: 20, column: 40 }, end: { line: 20, column: 267 } }], line: 20 }, "1": { loc: { start: { line: 20, column: 44 }, end: { line: 20, column: 65 } }, type: "binary-expr", locations: [{ start: { line: 20, column: 44 }, end: { line: 20, column: 47 } }, { start: { line: 20, column: 51 }, end: { line: 20, column: 65 } }], line: 20 }, "2": { loc: { start: { line: 20, column: 107 }, end: { line: 20, column: 228 } }, type: "if", locations: [{ start: { line: 20, column: 107 }, end: { line: 20, column: 228 } }, { start: { line: 20, column: 107 }, end: { line: 20, column: 228 } }], line: 20 }, "3": { loc: { start: { line: 20, column: 149 }, end: { line: 20, column: 224 } }, type: "if", locations: [{ start: { line: 20, column: 149 }, end: { line: 20, column: 224 } }, { start: { line: 20, column: 149 }, end: { line: 20, column: 224 } }], line: 20 }, "4": { loc: { start: { line: 22, column: 46 }, end: { line: 22, column: 92 } }, type: "cond-expr", locations: [{ start: { line: 22, column: 70 }, end: { line: 22, column: 73 } }, { start: { line: 22, column: 76 }, end: { line: 22, column: 92 } }], line: 22 }, "5": { loc: { start: { line: 22, column: 46 }, end: { line: 22, column: 67 } }, type: "binary-expr", locations: [{ start: { line: 22, column: 46 }, end: { line: 22, column: 49 } }, { start: { line: 22, column: 53 }, end: { line: 22, column: 67 } }], line: 22 }, "6": { loc: { start: { line: 47, column: 2 }, end: { line: 49, column: 3 } }, type: "if", locations: [{ start: { line: 47, column: 2 }, end: { line: 49, column: 3 } }, { start: { line: 47, column: 2 }, end: { line: 49, column: 3 } }], line: 47 }, "7": { loc: { start: { line: 48, column: 26 }, end: { line: 48, column: 56 } }, type: "cond-expr", locations: [{ start: { line: 48, column: 35 }, end: { line: 48, column: 52 } }, { start: { line: 48, column: 55 }, end: { line: 48, column: 56 } }], line: 48 }, "8": { loc: { start: { line: 51, column: 2 }, end: { line: 53, column: 3 } }, type: "if", locations: [{ start: { line: 51, column: 2 }, end: { line: 53, column: 3 } }, { start: { line: 51, column: 2 }, end: { line: 53, column: 3 } }], line: 51 }, "9": { loc: { start: { line: 60, column: 2 }, end: { line: 62, column: 3 } }, type: "if", locations: [{ start: { line: 60, column: 2 }, end: { line: 62, column: 3 } }, { start: { line: 60, column: 2 }, end: { line: 62, column: 3 } }], line: 60 }, "10": { loc: { start: { line: 74, column: 23 }, end: { line: 74, column: 46 } }, type: "default-arg", locations: [{ start: { line: 74, column: 30 }, end: { line: 74, column: 46 } }], line: 74 } }, s: { "0": 0, "1": 0, "2": 0, "3": 0, "4": 0, "5": 0, "6": 0, "7": 0, "8": 0, "9": 0, "10": 0, "11": 0, "12": 0, "13": 0, "14": 0, "15": 0, "16": 0, "17": 0, "18": 0, "19": 0, "20": 0, "21": 0, "22": 0, "23": 0, "24": 0, "25": 0, "26": 0, "27": 0, "28": 0, "29": 0, "30": 0, "31": 0, "32": 0, "33": 0, "34": 0, "35": 0, "36": 0, "37": 0, "38": 0 }, f: { "0": 0, "1": 0, "2": 0, "3": 0, "4": 0 }, b: { "0": [0, 0], "1": [0, 0], "2": [0, 0], "3": [0, 0], "4": [0, 0], "5": [0, 0], "6": [0, 0], "7": [0, 0], "8": [0, 0], "9": [0, 0], "10": [0] }, inputSourceMap: { version: 3, sources: ["lib/data/decode/memory.js"], names: ["read", "readBytes", "chunk", "utils", "debug", "memory", "byte", "WORD_SIZE", "length", "toBigNumber", "toNumber", "Uint8Array", "undefined", "buffer", "bytes", "excess", "plus", "minus", "BigNumber", "existing", "set", "size", "chunks", "i", "push"], mappings: ";;;;;QAgBgBA,I,GAAAA,I;QASAC,S,GAAAA,S;QA+BAC,K,GAAAA,K;;AAxDhB;;;;AAGA;;AAEA;;IAAYC,K;;;;;;AAJZ,MAAMC,QAAQ,qBAAY,6BAAZ,CAAd;;AAOA;;;;;;;;AAQO,SAASJ,IAAT,CAAcK,MAAd,EAAsBC,IAAtB,EAA4B;AACjC,SAAOL,UAAUI,MAAV,EAAkBC,IAAlB,EAAwBC,gBAAxB,CAAP;AACD;;AAED;;;;;AAKO,SAASN,SAAT,CAAmBI,MAAnB,EAA2BC,IAA3B,EAAiCE,MAAjC,EAAyC;AAC9CF,SAAOH,MAAMM,WAAN,CAAkBH,IAAlB,CAAP;AACAE,WAASL,MAAMM,WAAN,CAAkBD,MAAlB,CAAT;;AAEA,MAAIF,KAAKI,QAAL,MAAmBL,OAAOG,MAA9B,EAAsC;AACpC,WAAO,IAAIG,UAAJ,CAAeH,SAASA,OAAOE,QAAP,EAAT,GAA6B,CAA5C,CAAP;AACD;;AAED,MAAIF,UAAUI,SAAd,EAAyB;AACvB,WAAO,IAAID,UAAJ,CAAeN,OAAOQ,MAAtB,EAA8BP,KAAKI,QAAL,EAA9B,CAAP;AACD;;AAED;AACA,MAAII,QAAQ,IAAIH,UAAJ,CAAeH,OAAOE,QAAP,EAAf,CAAZ;;AAEA;AACA,MAAIK,SAAST,KAAKU,IAAL,CAAUR,MAAV,EAAkBS,KAAlB,CAAwBZ,OAAOG,MAA/B,EAAuCE,QAAvC,EAAb;AACA,MAAIK,SAAS,CAAb,EAAgB;AACdP,aAAS,IAAIU,oBAAJ,CAAcb,OAAOG,MAArB,EAA6BS,KAA7B,CAAmCX,IAAnC,CAAT;AACD;;AAED,MAAIa,WAAW,IAAIR,UAAJ,CAAeN,OAAOQ,MAAtB,EAA8BP,KAAKI,QAAL,EAA9B,EAA+CF,OAAOE,QAAP,EAA/C,CAAf;;AAEAI,QAAMM,GAAN,CAAUD,QAAV;;AAEA,SAAOL,KAAP;AACD;;AAED;;;AAGO,SAASZ,KAAT,CAAeG,MAAf,EAAuBgB,OAAOd,gBAA9B,EAAyC;AAC9C,MAAIe,SAAS,EAAb;;AAEA,OAAK,IAAIC,IAAI,CAAb,EAAgBA,IAAIlB,OAAOG,MAA3B,EAAmCe,KAAKF,IAAxC,EAA8C;AAC5C,QAAInB,QAAQD,UAAUI,MAAV,EAAkBkB,CAAlB,EAAqBF,IAArB,CAAZ;AACAC,WAAOE,IAAP,CAAYtB,KAAZ;AACD;;AAED,SAAOoB,MAAP;AACD", file: "memory.js", sourceRoot: "/Users/gnidan/src/work/truffle/packages/truffle-debugger", sourcesContent: ["import debugModule from \"debug\";\nconst debug = debugModule(\"debugger:data:decode:memory\");\n\nimport { BigNumber } from \"bignumber.js\";\n\nimport * as utils from \"./utils\";\nimport { WORD_SIZE } from \"./utils\";\n\n/**\n * read word from memory\n *\n * requires `byte` to be a multiple of WORD_SIZE (32)\n *\n * @param memory - Uint8Array\n * @return {BigNumber}\n */\nexport function read(memory, byte) {\n  return readBytes(memory, byte, WORD_SIZE);\n}\n\n/**\n * read <bytes> amount of bytes from memory, starting at byte <start>\n *\n * @param memory - Uint8Array\n */\nexport function readBytes(memory, byte, length) {\n  byte = utils.toBigNumber(byte);\n  length = utils.toBigNumber(length);\n\n  if (byte.toNumber() >= memory.length) {\n    return new Uint8Array(length ? length.toNumber() : 0);\n  }\n\n  if (length == undefined) {\n    return new Uint8Array(memory.buffer, byte.toNumber());\n  }\n\n  // grab `length` bytes no matter what, here fill this array\n  var bytes = new Uint8Array(length.toNumber());\n\n  // if we're reading past the end of memory, truncate the length to read\n  let excess = byte.plus(length).minus(memory.length).toNumber();\n  if (excess > 0) {\n    length = new BigNumber(memory.length).minus(byte);\n  }\n\n  let existing = new Uint8Array(memory.buffer, byte.toNumber(), length.toNumber());\n\n  bytes.set(existing);\n\n  return bytes;\n}\n\n/**\n * Split memory into chunks\n */\nexport function chunk(memory, size = WORD_SIZE) {\n  let chunks = [];\n\n  for (let i = 0; i < memory.length; i += size) {\n    let chunk = readBytes(memory, i, size);\n    chunks.push(chunk);\n  }\n\n  return chunks;\n}\n"] }, _coverageSchema: "332fd63041d2c1bcb487cc26dd0d5f7d97098a6c" },
      coverage = global[gcv] || (global[gcv] = {});if (coverage[path] && coverage[path].hash === hash) {
    return coverage[path];
  }coverageData.hash = hash;return coverage[path] = coverageData;
}();cov_2qvig2sh12.s[0]++;Object.defineProperty(exports, "__esModule", { value: true });cov_2qvig2sh12.s[1]++;exports.read = read;cov_2qvig2sh12.s[2]++;exports.readBytes = readBytes;cov_2qvig2sh12.s[3]++;exports.chunk = chunk;var _debug = (cov_2qvig2sh12.s[4]++, __webpack_require__(0));var _debug2 = (cov_2qvig2sh12.s[5]++, _interopRequireDefault(_debug));var _bignumber = (cov_2qvig2sh12.s[6]++, __webpack_require__(20));var _utils = (cov_2qvig2sh12.s[7]++, __webpack_require__(11));var utils = (cov_2qvig2sh12.s[8]++, _interopRequireWildcard(_utils));function _interopRequireWildcard(obj) {
  cov_2qvig2sh12.f[0]++;cov_2qvig2sh12.s[9]++;if ((cov_2qvig2sh12.b[1][0]++, obj) && (cov_2qvig2sh12.b[1][1]++, obj.__esModule)) {
    cov_2qvig2sh12.b[0][0]++;cov_2qvig2sh12.s[10]++;return obj;
  } else {
    cov_2qvig2sh12.b[0][1]++;var newObj = (cov_2qvig2sh12.s[11]++, {});cov_2qvig2sh12.s[12]++;if (obj != null) {
      cov_2qvig2sh12.b[2][0]++;cov_2qvig2sh12.s[13]++;for (var key in obj) {
        cov_2qvig2sh12.s[14]++;if (Object.prototype.hasOwnProperty.call(obj, key)) {
          cov_2qvig2sh12.b[3][0]++;cov_2qvig2sh12.s[15]++;newObj[key] = obj[key];
        } else {
          cov_2qvig2sh12.b[3][1]++;
        }
      }
    } else {
      cov_2qvig2sh12.b[2][1]++;
    }cov_2qvig2sh12.s[16]++;newObj.default = obj;cov_2qvig2sh12.s[17]++;return newObj;
  }
}function _interopRequireDefault(obj) {
  cov_2qvig2sh12.f[1]++;cov_2qvig2sh12.s[18]++;return (cov_2qvig2sh12.b[5][0]++, obj) && (cov_2qvig2sh12.b[5][1]++, obj.__esModule) ? (cov_2qvig2sh12.b[4][0]++, obj) : (cov_2qvig2sh12.b[4][1]++, { default: obj });
}const debug = (cov_2qvig2sh12.s[19]++, (0, _debug2.default)("debugger:data:decode:memory"));function read(memory, byte) {
  cov_2qvig2sh12.f[2]++;cov_2qvig2sh12.s[20]++;return readBytes(memory, byte, _utils.WORD_SIZE);
}function readBytes(memory, byte, length) {
  cov_2qvig2sh12.f[3]++;cov_2qvig2sh12.s[21]++;byte = utils.toBigNumber(byte);cov_2qvig2sh12.s[22]++;length = utils.toBigNumber(length);cov_2qvig2sh12.s[23]++;if (byte.toNumber() >= memory.length) {
    cov_2qvig2sh12.b[6][0]++;cov_2qvig2sh12.s[24]++;return new Uint8Array(length ? (cov_2qvig2sh12.b[7][0]++, length.toNumber()) : (cov_2qvig2sh12.b[7][1]++, 0));
  } else {
    cov_2qvig2sh12.b[6][1]++;
  }cov_2qvig2sh12.s[25]++;if (length == undefined) {
    cov_2qvig2sh12.b[8][0]++;cov_2qvig2sh12.s[26]++;return new Uint8Array(memory.buffer, byte.toNumber());
  } else {
    cov_2qvig2sh12.b[8][1]++;
  }var bytes = (cov_2qvig2sh12.s[27]++, new Uint8Array(length.toNumber()));let excess = (cov_2qvig2sh12.s[28]++, byte.plus(length).minus(memory.length).toNumber());cov_2qvig2sh12.s[29]++;if (excess > 0) {
    cov_2qvig2sh12.b[9][0]++;cov_2qvig2sh12.s[30]++;length = new _bignumber.BigNumber(memory.length).minus(byte);
  } else {
    cov_2qvig2sh12.b[9][1]++;
  }let existing = (cov_2qvig2sh12.s[31]++, new Uint8Array(memory.buffer, byte.toNumber(), length.toNumber()));cov_2qvig2sh12.s[32]++;bytes.set(existing);cov_2qvig2sh12.s[33]++;return bytes;
}function chunk(memory, size = (cov_2qvig2sh12.b[10][0]++, _utils.WORD_SIZE)) {
  cov_2qvig2sh12.f[4]++;let chunks = (cov_2qvig2sh12.s[34]++, []);cov_2qvig2sh12.s[35]++;for (let i = 0; i < memory.length; i += size) {
    let chunk = (cov_2qvig2sh12.s[36]++, readBytes(memory, i, size));cov_2qvig2sh12.s[37]++;chunks.push(chunk);
  }cov_2qvig2sh12.s[38]++;return chunks;
}

/***/ }),
/* 65 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var cov_222z4jyetz = function () {
  var path = "/Users/gnidan/src/work/truffle/packages/truffle-debugger/lib/data/decode/storage.js",
      hash = "36cf890169006f72ab7fbfc02ae334c284677031",
      Function = function () {}.constructor,
      global = new Function('return this')(),
      gcv = "__coverage__",
      coverageData = { path: "/Users/gnidan/src/work/truffle/packages/truffle-debugger/lib/data/decode/storage.js", statementMap: { "0": { start: { line: 3, column: 0 }, end: { line: 5, column: 3 } }, "1": { start: { line: 7, column: 16 }, end: { line: 7, column: 56 } }, "2": { start: { line: 9, column: 16 }, end: { line: 9, column: 49 } }, "3": { start: { line: 11, column: 0 }, end: { line: 11, column: 34 } }, "4": { start: { line: 12, column: 0 }, end: { line: 12, column: 20 } }, "5": { start: { line: 13, column: 0 }, end: { line: 13, column: 30 } }, "6": { start: { line: 15, column: 13 }, end: { line: 15, column: 29 } }, "7": { start: { line: 17, column: 14 }, end: { line: 17, column: 44 } }, "8": { start: { line: 19, column: 13 }, end: { line: 19, column: 31 } }, "9": { start: { line: 21, column: 12 }, end: { line: 21, column: 43 } }, "10": { start: { line: 23, column: 40 }, end: { line: 23, column: 267 } }, "11": { start: { line: 23, column: 69 }, end: { line: 23, column: 80 } }, "12": { start: { line: 23, column: 103 }, end: { line: 23, column: 105 } }, "13": { start: { line: 23, column: 107 }, end: { line: 23, column: 228 } }, "14": { start: { line: 23, column: 126 }, end: { line: 23, column: 226 } }, "15": { start: { line: 23, column: 149 }, end: { line: 23, column: 224 } }, "16": { start: { line: 23, column: 201 }, end: { line: 23, column: 224 } }, "17": { start: { line: 23, column: 229 }, end: { line: 23, column: 250 } }, "18": { start: { line: 23, column: 251 }, end: { line: 23, column: 265 } }, "19": { start: { line: 25, column: 39 }, end: { line: 25, column: 93 } }, "20": { start: { line: 27, column: 14 }, end: { line: 27, column: 66 } }, "21": { start: { line: 38, column: 2 }, end: { line: 47, column: 3 } }, "22": { start: { line: 39, column: 4 }, end: { line: 39, column: 53 } }, "23": { start: { line: 40, column: 9 }, end: { line: 47, column: 3 } }, "24": { start: { line: 41, column: 27 }, end: { line: 41, column: 31 } }, "25": { start: { line: 42, column: 4 }, end: { line: 42, column: 61 } }, "26": { start: { line: 43, column: 9 }, end: { line: 47, column: 3 } }, "27": { start: { line: 44, column: 4 }, end: { line: 44, column: 35 } }, "28": { start: { line: 46, column: 4 }, end: { line: 46, column: 16 } }, "29": { start: { line: 57, column: 18 }, end: { line: 57, column: 35 } }, "30": { start: { line: 59, column: 2 }, end: { line: 59, column: 56 } }, "31": { start: { line: 61, column: 13 }, end: { line: 61, column: 102 } }, "32": { start: { line: 63, column: 2 }, end: { line: 63, column: 25 } }, "33": { start: { line: 64, column: 2 }, end: { line: 64, column: 14 } }, "34": { start: { line: 92, column: 2 }, end: { line: 92, column: 31 } }, "35": { start: { line: 94, column: 29 }, end: { line: 94, column: 34 } }, "36": { start: { line: 95, column: 2 }, end: { line: 97, column: 3 } }, "37": { start: { line: 96, column: 4 }, end: { line: 96, column: 62 } }, "38": { start: { line: 99, column: 2 }, end: { line: 102, column: 4 } }, "39": { start: { line: 104, column: 2 }, end: { line: 117, column: 3 } }, "40": { start: { line: 105, column: 4 }, end: { line: 111, column: 6 } }, "41": { start: { line: 113, column: 4 }, end: { line: 116, column: 6 } }, "42": { start: { line: 119, column: 2 }, end: { line: 119, column: 49 } }, "43": { start: { line: 121, column: 21 }, end: { line: 121, column: 58 } }, "44": { start: { line: 122, column: 2 }, end: { line: 122, column: 37 } }, "45": { start: { line: 124, column: 13 }, end: { line: 124, column: 58 } }, "46": { start: { line: 126, column: 2 }, end: { line: 129, column: 3 } }, "47": { start: { line: 127, column: 17 }, end: { line: 127, column: 37 } }, "48": { start: { line: 128, column: 4 }, end: { line: 128, column: 101 } }, "49": { start: { line: 130, column: 2 }, end: { line: 130, column: 26 } }, "50": { start: { line: 132, column: 2 }, end: { line: 132, column: 84 } }, "51": { start: { line: 134, column: 2 }, end: { line: 134, column: 26 } }, "52": { start: { line: 136, column: 2 }, end: { line: 136, column: 14 } } }, fnMap: { "0": { name: "_interopRequireWildcard", decl: { start: { line: 23, column: 9 }, end: { line: 23, column: 32 } }, loc: { start: { line: 23, column: 38 }, end: { line: 23, column: 269 } }, line: 23 }, "1": { name: "_interopRequireDefault", decl: { start: { line: 25, column: 9 }, end: { line: 25, column: 31 } }, loc: { start: { line: 25, column: 37 }, end: { line: 25, column: 95 } }, line: 25 }, "2": { name: "slotAddress", decl: { start: { line: 37, column: 9 }, end: { line: 37, column: 20 } }, loc: { start: { line: 37, column: 27 }, end: { line: 48, column: 1 } }, line: 37 }, "3": { name: "read", decl: { start: { line: 56, column: 9 }, end: { line: 56, column: 13 } }, loc: { start: { line: 56, column: 29 }, end: { line: 65, column: 1 } }, line: 56 }, "4": { name: "readRange", decl: { start: { line: 91, column: 9 }, end: { line: 91, column: 18 } }, loc: { start: { line: 91, column: 35 }, end: { line: 137, column: 1 } }, line: 91 } }, branchMap: { "0": { loc: { start: { line: 23, column: 40 }, end: { line: 23, column: 267 } }, type: "if", locations: [{ start: { line: 23, column: 40 }, end: { line: 23, column: 267 } }, { start: { line: 23, column: 40 }, end: { line: 23, column: 267 } }], line: 23 }, "1": { loc: { start: { line: 23, column: 44 }, end: { line: 23, column: 65 } }, type: "binary-expr", locations: [{ start: { line: 23, column: 44 }, end: { line: 23, column: 47 } }, { start: { line: 23, column: 51 }, end: { line: 23, column: 65 } }], line: 23 }, "2": { loc: { start: { line: 23, column: 107 }, end: { line: 23, column: 228 } }, type: "if", locations: [{ start: { line: 23, column: 107 }, end: { line: 23, column: 228 } }, { start: { line: 23, column: 107 }, end: { line: 23, column: 228 } }], line: 23 }, "3": { loc: { start: { line: 23, column: 149 }, end: { line: 23, column: 224 } }, type: "if", locations: [{ start: { line: 23, column: 149 }, end: { line: 23, column: 224 } }, { start: { line: 23, column: 149 }, end: { line: 23, column: 224 } }], line: 23 }, "4": { loc: { start: { line: 25, column: 46 }, end: { line: 25, column: 92 } }, type: "cond-expr", locations: [{ start: { line: 25, column: 70 }, end: { line: 25, column: 73 } }, { start: { line: 25, column: 76 }, end: { line: 25, column: 92 } }], line: 25 }, "5": { loc: { start: { line: 25, column: 46 }, end: { line: 25, column: 67 } }, type: "binary-expr", locations: [{ start: { line: 25, column: 46 }, end: { line: 25, column: 49 } }, { start: { line: 25, column: 53 }, end: { line: 25, column: 67 } }], line: 25 }, "6": { loc: { start: { line: 38, column: 2 }, end: { line: 47, column: 3 } }, type: "if", locations: [{ start: { line: 38, column: 2 }, end: { line: 47, column: 3 } }, { start: { line: 38, column: 2 }, end: { line: 47, column: 3 } }], line: 38 }, "7": { loc: { start: { line: 40, column: 9 }, end: { line: 47, column: 3 } }, type: "if", locations: [{ start: { line: 40, column: 9 }, end: { line: 47, column: 3 } }, { start: { line: 40, column: 9 }, end: { line: 47, column: 3 } }], line: 40 }, "8": { loc: { start: { line: 40, column: 13 }, end: { line: 40, column: 62 } }, type: "binary-expr", locations: [{ start: { line: 40, column: 13 }, end: { line: 40, column: 36 } }, { start: { line: 40, column: 40 }, end: { line: 40, column: 62 } }], line: 40 }, "9": { loc: { start: { line: 43, column: 9 }, end: { line: 47, column: 3 } }, type: "if", locations: [{ start: { line: 43, column: 9 }, end: { line: 47, column: 3 } }, { start: { line: 43, column: 9 }, end: { line: 47, column: 3 } }], line: 43 }, "10": { loc: { start: { line: 43, column: 13 }, end: { line: 43, column: 64 } }, type: "binary-expr", locations: [{ start: { line: 43, column: 13 }, end: { line: 43, column: 36 } }, { start: { line: 43, column: 40 }, end: { line: 43, column: 64 } }], line: 43 }, "11": { loc: { start: { line: 61, column: 13 }, end: { line: 61, column: 102 } }, type: "binary-expr", locations: [{ start: { line: 61, column: 13 }, end: { line: 61, column: 66 } }, { start: { line: 61, column: 70 }, end: { line: 61, column: 102 } }], line: 61 }, "12": { loc: { start: { line: 95, column: 2 }, end: { line: 97, column: 3 } }, type: "if", locations: [{ start: { line: 95, column: 2 }, end: { line: 97, column: 3 } }, { start: { line: 95, column: 2 }, end: { line: 97, column: 3 } }], line: 95 }, "13": { loc: { start: { line: 95, column: 6 }, end: { line: 95, column: 36 } }, type: "binary-expr", locations: [{ start: { line: 95, column: 6 }, end: { line: 95, column: 13 } }, { start: { line: 95, column: 17 }, end: { line: 95, column: 20 } }, { start: { line: 95, column: 24 }, end: { line: 95, column: 30 } }, { start: { line: 95, column: 34 }, end: { line: 95, column: 36 } }], line: 95 }, "14": { loc: { start: { line: 101, column: 11 }, end: { line: 101, column: 26 } }, type: "binary-expr", locations: [{ start: { line: 101, column: 11 }, end: { line: 101, column: 21 } }, { start: { line: 101, column: 25 }, end: { line: 101, column: 26 } }], line: 101 }, "15": { loc: { start: { line: 104, column: 2 }, end: { line: 117, column: 3 } }, type: "if", locations: [{ start: { line: 104, column: 2 }, end: { line: 117, column: 3 } }, { start: { line: 104, column: 2 }, end: { line: 117, column: 3 } }], line: 104 } }, s: { "0": 0, "1": 0, "2": 0, "3": 0, "4": 0, "5": 0, "6": 0, "7": 0, "8": 0, "9": 0, "10": 0, "11": 0, "12": 0, "13": 0, "14": 0, "15": 0, "16": 0, "17": 0, "18": 0, "19": 0, "20": 0, "21": 0, "22": 0, "23": 0, "24": 0, "25": 0, "26": 0, "27": 0, "28": 0, "29": 0, "30": 0, "31": 0, "32": 0, "33": 0, "34": 0, "35": 0, "36": 0, "37": 0, "38": 0, "39": 0, "40": 0, "41": 0, "42": 0, "43": 0, "44": 0, "45": 0, "46": 0, "47": 0, "48": 0, "49": 0, "50": 0, "51": 0, "52": 0 }, f: { "0": 0, "1": 0, "2": 0, "3": 0, "4": 0 }, b: { "0": [0, 0], "1": [0, 0], "2": [0, 0], "3": [0, 0], "4": [0, 0], "5": [0, 0], "6": [0, 0], "7": [0, 0], "8": [0, 0], "9": [0, 0], "10": [0, 0], "11": [0, 0], "12": [0, 0], "13": [0, 0, 0, 0], "14": [0, 0], "15": [0, 0] }, inputSourceMap: { version: 3, sources: ["lib/data/decode/storage.js"], names: ["slotAddress", "read", "readRange", "utils", "debug", "slot", "Array", "keccak256", "map", "path", "undefined", "offset", "toBigNumber", "plus", "slice", "storage", "address", "toHexString", "word", "WORD_SIZE", "Uint8Array", "range", "from", "to", "length", "Error", "normalizeSlot", "index", "Math", "floor", "totalWords", "data", "i", "set"], mappings: "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", file: "storage.js", sourceRoot: "/Users/gnidan/src/work/truffle/packages/truffle-debugger", sourcesContent: ["import debugModule from \"debug\";\nconst debug = debugModule(\"debugger:data:decode:storage\");\n\nimport { WORD_SIZE } from \"./utils\";\nimport * as utils from \"./utils\";\n\n/**\n * convert a slot to a word corresponding to actual storage address\n *\n * if `slot` is an array, return hash of array values.\n * if `slot` array is nested, recurse on sub-arrays\n *\n * @param slot - number or possibly-nested array of numbers\n */\nexport function slotAddress(slot) {\n  if (slot instanceof Array) {\n    return utils.keccak256(...slot.map(slotAddress));\n  } else if (typeof slot == \"object\" && slot.path != undefined) {\n    let { path, offset } = slot;\n    return utils.toBigNumber(slotAddress(path)).plus(offset);\n  } else if (typeof slot == \"string\" && slot.slice(0,2) == \"0x\") {\n    return utils.toBigNumber(slot);\n  } else {\n    return slot;\n  }\n}\n\n/**\n * read slot from storage\n *\n * @param slot - big number or array of regular numbers\n * @param offset - for array, offset from the keccak determined location\n */\nexport function read(storage, slot) {\n  const address = slotAddress(slot);\n\n  debug(\"reading slot: %o\", utils.toHexString(address));\n\n  let word = storage[utils.toHexString(address, WORD_SIZE)] ||\n    new Uint8Array(WORD_SIZE);\n\n  debug(\"word %o\", word);\n  return word\n}\n\n/**\n * read all bytes in some range.\n *\n * parameters `from` and `to` are objects with the following properties:\n *\n *   slot - (required) one of the following:\n *     - a literal value referring to a slot (a number, a bytestring, etc.)\n *\n *     - a \"path\" array of literal values\n *       path array values get converted into keccak256 hash as per solidity\n *       storage allocation method, after recursing.\n *\n *     - an object { path, offset }, where path is one of the above ^\n *       offset values indicate sequential address offset, post-keccak\n *\n *     ref: https://solidity.readthedocs.io/en/v0.4.23/miscellaneous.html#layout-of-state-variables-in-storage\n *     (search \"concatenation\")\n *\n *  index - (default: 0) byte index in word\n *\n * @param from - location (see ^)\n * @param to - location (see ^). inclusive.\n * @param length - instead of `to`, number of bytes after `from`\n */\nexport function readRange(storage, range) {\n  debug(\"readRange %o\", range);\n\n  let { from, to, length } = range;\n  if (!length && !to || length && to) {\n    throw new Error(\"must specify exactly one `to`|`length`\");\n  }\n\n  from = {\n    slot: utils.normalizeSlot(from.slot),\n    index: from.index || 0\n  };\n\n  if (length) {\n    to = {\n      slot: {\n        path: from.slot.path,\n        offset: from.slot.offset +\n          Math.floor((from.index + length - 1) / WORD_SIZE)\n      },\n      index: (from.index + length - 1) % WORD_SIZE\n    };\n  } else {\n    to = {\n      slot: utils.normalizeSlot(to.slot),\n      index: to.index\n    }\n  }\n\n  debug(\"normalized readRange %o\", {from,to});\n\n  const totalWords = to.slot.offset - from.slot.offset + 1;\n  debug(\"totalWords %o\", totalWords);\n\n  let data = new Uint8Array(totalWords * WORD_SIZE);\n\n  for (let i = 0; i < totalWords; i++) {\n    let offset = i + from.slot.offset;\n    data.set(read(storage, { ...from.slot, offset }), i * WORD_SIZE);\n  }\n  debug(\"words %o\", data);\n\n  data = data.slice(from.index, (totalWords - 1) * WORD_SIZE + to.index + 1);\n\n  debug(\"data: %o\", data);\n\n  return data;\n}\n\n"] }, _coverageSchema: "332fd63041d2c1bcb487cc26dd0d5f7d97098a6c" },
      coverage = global[gcv] || (global[gcv] = {});if (coverage[path] && coverage[path].hash === hash) {
    return coverage[path];
  }coverageData.hash = hash;return coverage[path] = coverageData;
}();cov_222z4jyetz.s[0]++;Object.defineProperty(exports, "__esModule", { value: true });var _extends2 = (cov_222z4jyetz.s[1]++, __webpack_require__(4));var _extends3 = (cov_222z4jyetz.s[2]++, _interopRequireDefault(_extends2));cov_222z4jyetz.s[3]++;exports.slotAddress = slotAddress;cov_222z4jyetz.s[4]++;exports.read = read;cov_222z4jyetz.s[5]++;exports.readRange = readRange;var _debug = (cov_222z4jyetz.s[6]++, __webpack_require__(0));var _debug2 = (cov_222z4jyetz.s[7]++, _interopRequireDefault(_debug));var _utils = (cov_222z4jyetz.s[8]++, __webpack_require__(11));var utils = (cov_222z4jyetz.s[9]++, _interopRequireWildcard(_utils));function _interopRequireWildcard(obj) {
  cov_222z4jyetz.f[0]++;cov_222z4jyetz.s[10]++;if ((cov_222z4jyetz.b[1][0]++, obj) && (cov_222z4jyetz.b[1][1]++, obj.__esModule)) {
    cov_222z4jyetz.b[0][0]++;cov_222z4jyetz.s[11]++;return obj;
  } else {
    cov_222z4jyetz.b[0][1]++;var newObj = (cov_222z4jyetz.s[12]++, {});cov_222z4jyetz.s[13]++;if (obj != null) {
      cov_222z4jyetz.b[2][0]++;cov_222z4jyetz.s[14]++;for (var key in obj) {
        cov_222z4jyetz.s[15]++;if (Object.prototype.hasOwnProperty.call(obj, key)) {
          cov_222z4jyetz.b[3][0]++;cov_222z4jyetz.s[16]++;newObj[key] = obj[key];
        } else {
          cov_222z4jyetz.b[3][1]++;
        }
      }
    } else {
      cov_222z4jyetz.b[2][1]++;
    }cov_222z4jyetz.s[17]++;newObj.default = obj;cov_222z4jyetz.s[18]++;return newObj;
  }
}function _interopRequireDefault(obj) {
  cov_222z4jyetz.f[1]++;cov_222z4jyetz.s[19]++;return (cov_222z4jyetz.b[5][0]++, obj) && (cov_222z4jyetz.b[5][1]++, obj.__esModule) ? (cov_222z4jyetz.b[4][0]++, obj) : (cov_222z4jyetz.b[4][1]++, { default: obj });
}const debug = (cov_222z4jyetz.s[20]++, (0, _debug2.default)("debugger:data:decode:storage"));function slotAddress(slot) {
  cov_222z4jyetz.f[2]++;cov_222z4jyetz.s[21]++;if (slot instanceof Array) {
    cov_222z4jyetz.b[6][0]++;cov_222z4jyetz.s[22]++;return utils.keccak256(...slot.map(slotAddress));
  } else {
    cov_222z4jyetz.b[6][1]++;cov_222z4jyetz.s[23]++;if ((cov_222z4jyetz.b[8][0]++, typeof slot == "object") && (cov_222z4jyetz.b[8][1]++, slot.path != undefined)) {
      cov_222z4jyetz.b[7][0]++;let { path, offset } = (cov_222z4jyetz.s[24]++, slot);cov_222z4jyetz.s[25]++;return utils.toBigNumber(slotAddress(path)).plus(offset);
    } else {
      cov_222z4jyetz.b[7][1]++;cov_222z4jyetz.s[26]++;if ((cov_222z4jyetz.b[10][0]++, typeof slot == "string") && (cov_222z4jyetz.b[10][1]++, slot.slice(0, 2) == "0x")) {
        cov_222z4jyetz.b[9][0]++;cov_222z4jyetz.s[27]++;return utils.toBigNumber(slot);
      } else {
        cov_222z4jyetz.b[9][1]++;cov_222z4jyetz.s[28]++;return slot;
      }
    }
  }
}function read(storage, slot) {
  cov_222z4jyetz.f[3]++;const address = (cov_222z4jyetz.s[29]++, slotAddress(slot));cov_222z4jyetz.s[30]++;debug("reading slot: %o", utils.toHexString(address));let word = (cov_222z4jyetz.s[31]++, (cov_222z4jyetz.b[11][0]++, storage[utils.toHexString(address, _utils.WORD_SIZE)]) || (cov_222z4jyetz.b[11][1]++, new Uint8Array(_utils.WORD_SIZE)));cov_222z4jyetz.s[32]++;debug("word %o", word);cov_222z4jyetz.s[33]++;return word;
}function readRange(storage, range) {
  cov_222z4jyetz.f[4]++;cov_222z4jyetz.s[34]++;debug("readRange %o", range);let { from, to, length } = (cov_222z4jyetz.s[35]++, range);cov_222z4jyetz.s[36]++;if ((cov_222z4jyetz.b[13][0]++, !length) && (cov_222z4jyetz.b[13][1]++, !to) || (cov_222z4jyetz.b[13][2]++, length) && (cov_222z4jyetz.b[13][3]++, to)) {
    cov_222z4jyetz.b[12][0]++;cov_222z4jyetz.s[37]++;throw new Error("must specify exactly one `to`|`length`");
  } else {
    cov_222z4jyetz.b[12][1]++;
  }cov_222z4jyetz.s[38]++;from = { slot: utils.normalizeSlot(from.slot), index: (cov_222z4jyetz.b[14][0]++, from.index) || (cov_222z4jyetz.b[14][1]++, 0) };cov_222z4jyetz.s[39]++;if (length) {
    cov_222z4jyetz.b[15][0]++;cov_222z4jyetz.s[40]++;to = { slot: { path: from.slot.path, offset: from.slot.offset + Math.floor((from.index + length - 1) / _utils.WORD_SIZE) }, index: (from.index + length - 1) % _utils.WORD_SIZE };
  } else {
    cov_222z4jyetz.b[15][1]++;cov_222z4jyetz.s[41]++;to = { slot: utils.normalizeSlot(to.slot), index: to.index };
  }cov_222z4jyetz.s[42]++;debug("normalized readRange %o", { from, to });const totalWords = (cov_222z4jyetz.s[43]++, to.slot.offset - from.slot.offset + 1);cov_222z4jyetz.s[44]++;debug("totalWords %o", totalWords);let data = (cov_222z4jyetz.s[45]++, new Uint8Array(totalWords * _utils.WORD_SIZE));cov_222z4jyetz.s[46]++;for (let i = 0; i < totalWords; i++) {
    let offset = (cov_222z4jyetz.s[47]++, i + from.slot.offset);cov_222z4jyetz.s[48]++;data.set(read(storage, (0, _extends3.default)({}, from.slot, { offset })), i * _utils.WORD_SIZE);
  }cov_222z4jyetz.s[49]++;debug("words %o", data);cov_222z4jyetz.s[50]++;data = data.slice(from.index, (totalWords - 1) * _utils.WORD_SIZE + to.index + 1);cov_222z4jyetz.s[51]++;debug("data: %o", data);cov_222z4jyetz.s[52]++;return data;
}

/***/ }),
/* 66 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var cov_z8p1jzvq = function () {
  var path = "/Users/gnidan/src/work/truffle/packages/truffle-debugger/lib/ast/actions/index.js",
      hash = "c7f4a3199894cf8f50c5983236a17102e7674382",
      Function = function () {}.constructor,
      global = new Function('return this')(),
      gcv = "__coverage__",
      coverageData = { path: "/Users/gnidan/src/work/truffle/packages/truffle-debugger/lib/ast/actions/index.js", statementMap: { "0": { start: { line: 3, column: 0 }, end: { line: 5, column: 3 } }, "1": { start: { line: 6, column: 0 }, end: { line: 6, column: 22 } }, "2": { start: { line: 7, column: 0 }, end: { line: 7, column: 36 } }, "3": { start: { line: 8, column: 14 }, end: { line: 8, column: 37 } }, "4": { start: { line: 10, column: 2 }, end: { line: 13, column: 4 } }, "5": { start: { line: 16, column: 22 }, end: { line: 16, column: 61 } }, "6": { start: { line: 18, column: 2 }, end: { line: 20, column: 4 } } }, fnMap: { "0": { name: "visit", decl: { start: { line: 9, column: 9 }, end: { line: 9, column: 14 } }, loc: { start: { line: 9, column: 30 }, end: { line: 14, column: 1 } }, line: 9 }, "1": { name: "doneVisiting", decl: { start: { line: 17, column: 9 }, end: { line: 17, column: 21 } }, loc: { start: { line: 17, column: 24 }, end: { line: 21, column: 1 } }, line: 17 } }, branchMap: {}, s: { "0": 0, "1": 0, "2": 0, "3": 0, "4": 0, "5": 0, "6": 0 }, f: { "0": 0, "1": 0 }, b: {}, inputSourceMap: { version: 3, sources: ["lib/ast/actions/index.js"], names: ["visit", "doneVisiting", "VISIT", "sourceId", "ast", "type", "DONE_VISITING"], mappings: ";;;;;QACgBA,K,GAAAA,K;QAQAC,Y,GAAAA,Y;AATT,MAAMC,wBAAQ,OAAd;AACA,SAASF,KAAT,CAAeG,QAAf,EAAyBC,GAAzB,EAA8B;AACnC,SAAO;AACLC,UAAMH,KADD;AAELC,YAFK,EAEKC;AAFL,GAAP;AAID;;AAEM,MAAME,wCAAgB,eAAtB;AACA,SAASL,YAAT,GAAwB;AAC7B,SAAO;AACLI,UAAMC;AADD,GAAP;AAGD", file: "index.js", sourceRoot: "/Users/gnidan/src/work/truffle/packages/truffle-debugger", sourcesContent: ["export const VISIT = \"VISIT\";\nexport function visit(sourceId, ast) {\n  return {\n    type: VISIT,\n    sourceId, ast\n  }\n}\n\nexport const DONE_VISITING = \"DONE_VISITING\";\nexport function doneVisiting() {\n  return {\n    type: DONE_VISITING\n  };\n}\n"] }, _coverageSchema: "332fd63041d2c1bcb487cc26dd0d5f7d97098a6c" },
      coverage = global[gcv] || (global[gcv] = {});if (coverage[path] && coverage[path].hash === hash) {
    return coverage[path];
  }coverageData.hash = hash;return coverage[path] = coverageData;
}();cov_z8p1jzvq.s[0]++;Object.defineProperty(exports, "__esModule", { value: true });cov_z8p1jzvq.s[1]++;exports.visit = visit;cov_z8p1jzvq.s[2]++;exports.doneVisiting = doneVisiting;const VISIT = (cov_z8p1jzvq.s[3]++, exports.VISIT = "VISIT");function visit(sourceId, ast) {
  cov_z8p1jzvq.f[0]++;cov_z8p1jzvq.s[4]++;return { type: VISIT, sourceId, ast };
}const DONE_VISITING = (cov_z8p1jzvq.s[5]++, exports.DONE_VISITING = "DONE_VISITING");function doneVisiting() {
  cov_z8p1jzvq.f[1]++;cov_z8p1jzvq.s[6]++;return { type: DONE_VISITING };
}

/***/ }),
/* 67 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var cov_2he17h4koc = function () {
  var path = "/Users/gnidan/src/work/truffle/packages/truffle-debugger/lib/controller/sagas/index.js",
      hash = "23541e83be181b7d39268bef2caee92cb3234bf7",
      Function = function () {}.constructor,
      global = new Function('return this')(),
      gcv = "__coverage__",
      coverageData = { path: "/Users/gnidan/src/work/truffle/packages/truffle-debugger/lib/controller/sagas/index.js", statementMap: { "0": { start: { line: 3, column: 0 }, end: { line: 5, column: 3 } }, "1": { start: { line: 7, column: 12 }, end: { line: 7, column: 56 } }, "2": { start: { line: 9, column: 13 }, end: { line: 9, column: 42 } }, "3": { start: { line: 11, column: 11 }, end: { line: 11, column: 47 } }, "4": { start: { line: 13, column: 12 }, end: { line: 13, column: 40 } }, "5": { start: { line: 15, column: 0 }, end: { line: 15, column: 20 } }, "6": { start: { line: 17, column: 13 }, end: { line: 17, column: 29 } }, "7": { start: { line: 19, column: 14 }, end: { line: 19, column: 44 } }, "8": { start: { line: 21, column: 15 }, end: { line: 21, column: 44 } }, "9": { start: { line: 23, column: 15 }, end: { line: 23, column: 37 } }, "10": { start: { line: 25, column: 13 }, end: { line: 25, column: 39 } }, "11": { start: { line: 27, column: 12 }, end: { line: 27, column: 43 } }, "12": { start: { line: 29, column: 15 }, end: { line: 29, column: 36 } }, "13": { start: { line: 31, column: 14 }, end: { line: 31, column: 47 } }, "14": { start: { line: 33, column: 17 }, end: { line: 33, column: 40 } }, "15": { start: { line: 35, column: 18 }, end: { line: 35, column: 52 } }, "16": { start: { line: 37, column: 40 }, end: { line: 37, column: 267 } }, "17": { start: { line: 37, column: 69 }, end: { line: 37, column: 80 } }, "18": { start: { line: 37, column: 103 }, end: { line: 37, column: 105 } }, "19": { start: { line: 37, column: 107 }, end: { line: 37, column: 228 } }, "20": { start: { line: 37, column: 126 }, end: { line: 37, column: 226 } }, "21": { start: { line: 37, column: 149 }, end: { line: 37, column: 224 } }, "22": { start: { line: 37, column: 201 }, end: { line: 37, column: 224 } }, "23": { start: { line: 37, column: 229 }, end: { line: 37, column: 250 } }, "24": { start: { line: 37, column: 251 }, end: { line: 37, column: 265 } }, "25": { start: { line: 39, column: 39 }, end: { line: 39, column: 93 } }, "26": { start: { line: 41, column: 14 }, end: { line: 41, column: 63 } }, "27": { start: { line: 43, column: 22 }, end: { line: 50, column: 1 } }, "28": { start: { line: 53, column: 22 }, end: { line: 53, column: 86 } }, "29": { start: { line: 56, column: 2 }, end: { line: 68, column: 3 } }, "30": { start: { line: 57, column: 4 }, end: { line: 57, column: 40 } }, "31": { start: { line: 58, column: 17 }, end: { line: 58, column: 77 } }, "32": { start: { line: 59, column: 4 }, end: { line: 59, column: 32 } }, "33": { start: { line: 60, column: 15 }, end: { line: 60, column: 41 } }, "34": { start: { line: 62, column: 4 }, end: { line: 62, column: 60 } }, "35": { start: { line: 64, column: 4 }, end: { line: 67, column: 7 } }, "36": { start: { line: 71, column: 0 }, end: { line: 71, column: 63 } }, "37": { start: { line: 79, column: 2 }, end: { line: 79, column: 25 } }, "38": { start: { line: 90, column: 24 }, end: { line: 90, column: 100 } }, "39": { start: { line: 94, column: 2 }, end: { line: 106, column: 193 } }, "40": { start: { line: 96, column: 4 }, end: { line: 96, column: 21 } }, "41": { start: { line: 99, column: 4 }, end: { line: 103, column: 5 } }, "42": { start: { line: 100, column: 6 }, end: { line: 100, column: 82 } }, "43": { start: { line: 102, column: 6 }, end: { line: 102, column: 22 } }, "44": { start: { line: 122, column: 2 }, end: { line: 126, column: 3 } }, "45": { start: { line: 123, column: 4 }, end: { line: 123, column: 22 } }, "46": { start: { line: 125, column: 4 }, end: { line: 125, column: 11 } }, "47": { start: { line: 128, column: 2 }, end: { line: 132, column: 3 } }, "48": { start: { line: 129, column: 4 }, end: { line: 129, column: 22 } }, "49": { start: { line: 131, column: 4 }, end: { line: 131, column: 11 } }, "50": { start: { line: 134, column: 24 }, end: { line: 134, column: 93 } }, "51": { start: { line: 135, column: 24 }, end: { line: 135, column: 100 } }, "52": { start: { line: 139, column: 2 }, end: { line: 152, column: 90 } }, "53": { start: { line: 140, column: 4 }, end: { line: 140, column: 22 } }, "54": { start: { line: 142, column: 4 }, end: { line: 142, column: 89 } }, "55": { start: { line: 143, column: 4 }, end: { line: 143, column: 96 } }, "56": { start: { line: 161, column: 2 }, end: { line: 165, column: 3 } }, "57": { start: { line: 162, column: 4 }, end: { line: 162, column: 22 } }, "58": { start: { line: 164, column: 4 }, end: { line: 164, column: 11 } }, "59": { start: { line: 167, column: 24 }, end: { line: 167, column: 93 } }, "60": { start: { line: 170, column: 2 }, end: { line: 174, column: 42 } }, "61": { start: { line: 171, column: 4 }, end: { line: 171, column: 22 } }, "62": { start: { line: 173, column: 4 }, end: { line: 173, column: 89 } }, "63": { start: { line: 184, column: 24 }, end: { line: 184, column: 93 } }, "64": { start: { line: 185, column: 24 }, end: { line: 185, column: 100 } }, "65": { start: { line: 189, column: 2 }, end: { line: 203, column: 100 } }, "66": { start: { line: 190, column: 4 }, end: { line: 190, column: 22 } }, "67": { start: { line: 192, column: 4 }, end: { line: 192, column: 89 } }, "68": { start: { line: 193, column: 4 }, end: { line: 193, column: 96 } }, "69": { start: { line: 213, column: 20 }, end: { line: 213, column: 79 } }, "70": { start: { line: 215, column: 22 }, end: { line: 215, column: 27 } }, "71": { start: { line: 217, column: 2 }, end: { line: 217, column: 85 } }, "72": { start: { line: 218, column: 2 }, end: { line: 218, column: 40 } }, "73": { start: { line: 219, column: 2 }, end: { line: 219, column: 61 } }, "74": { start: { line: 220, column: 2 }, end: { line: 220, column: 46 } }, "75": { start: { line: 222, column: 2 }, end: { line: 242, column: 27 } }, "76": { start: { line: 223, column: 4 }, end: { line: 223, column: 22 } }, "77": { start: { line: 225, column: 4 }, end: { line: 225, column: 31 } }, "78": { start: { line: 226, column: 4 }, end: { line: 226, column: 39 } }, "79": { start: { line: 228, column: 4 }, end: { line: 228, column: 87 } }, "80": { start: { line: 229, column: 4 }, end: { line: 229, column: 42 } }, "81": { start: { line: 230, column: 4 }, end: { line: 230, column: 63 } }, "82": { start: { line: 231, column: 4 }, end: { line: 231, column: 48 } }, "83": { start: { line: 233, column: 4 }, end: { line: 241, column: 18 } }, "84": { start: { line: 234, column: 6 }, end: { line: 237, column: 7 } }, "85": { start: { line: 235, column: 8 }, end: { line: 235, column: 59 } }, "86": { start: { line: 236, column: 8 }, end: { line: 236, column: 68 } }, "87": { start: { line: 240, column: 6 }, end: { line: 240, column: 140 } } }, fnMap: { "0": { name: "_interopRequireWildcard", decl: { start: { line: 37, column: 9 }, end: { line: 37, column: 32 } }, loc: { start: { line: 37, column: 38 }, end: { line: 37, column: 269 } }, line: 37 }, "1": { name: "_interopRequireDefault", decl: { start: { line: 39, column: 9 }, end: { line: 39, column: 31 } }, loc: { start: { line: 39, column: 37 }, end: { line: 39, column: 95 } }, line: 39 }, "2": { name: "saga", decl: { start: { line: 55, column: 10 }, end: { line: 55, column: 14 } }, loc: { start: { line: 55, column: 17 }, end: { line: 69, column: 1 } }, line: 55 }, "3": { name: "advance", decl: { start: { line: 77, column: 10 }, end: { line: 77, column: 17 } }, loc: { start: { line: 77, column: 20 }, end: { line: 80, column: 1 } }, line: 77 }, "4": { name: "stepNext", decl: { start: { line: 89, column: 10 }, end: { line: 89, column: 18 } }, loc: { start: { line: 89, column: 21 }, end: { line: 107, column: 1 } }, line: 89 }, "5": { name: "stepInto", decl: { start: { line: 121, column: 10 }, end: { line: 121, column: 18 } }, loc: { start: { line: 121, column: 21 }, end: { line: 153, column: 1 } }, line: 121 }, "6": { name: "stepOut", decl: { start: { line: 160, column: 10 }, end: { line: 160, column: 17 } }, loc: { start: { line: 160, column: 20 }, end: { line: 175, column: 1 } }, line: 160 }, "7": { name: "stepOver", decl: { start: { line: 183, column: 10 }, end: { line: 183, column: 18 } }, loc: { start: { line: 183, column: 21 }, end: { line: 204, column: 1 } }, line: 183 }, "8": { name: "continueUntilBreakpoint", decl: { start: { line: 209, column: 10 }, end: { line: 209, column: 33 } }, loc: { start: { line: 209, column: 36 }, end: { line: 243, column: 1 } }, line: 209 }, "9": { name: "(anonymous_9)", decl: { start: { line: 233, column: 39 }, end: { line: 233, column: 40 } }, loc: { start: { line: 233, column: 69 }, end: { line: 241, column: 5 } }, line: 233 } }, branchMap: { "0": { loc: { start: { line: 37, column: 40 }, end: { line: 37, column: 267 } }, type: "if", locations: [{ start: { line: 37, column: 40 }, end: { line: 37, column: 267 } }, { start: { line: 37, column: 40 }, end: { line: 37, column: 267 } }], line: 37 }, "1": { loc: { start: { line: 37, column: 44 }, end: { line: 37, column: 65 } }, type: "binary-expr", locations: [{ start: { line: 37, column: 44 }, end: { line: 37, column: 47 } }, { start: { line: 37, column: 51 }, end: { line: 37, column: 65 } }], line: 37 }, "2": { loc: { start: { line: 37, column: 107 }, end: { line: 37, column: 228 } }, type: "if", locations: [{ start: { line: 37, column: 107 }, end: { line: 37, column: 228 } }, { start: { line: 37, column: 107 }, end: { line: 37, column: 228 } }], line: 37 }, "3": { loc: { start: { line: 37, column: 149 }, end: { line: 37, column: 224 } }, type: "if", locations: [{ start: { line: 37, column: 149 }, end: { line: 37, column: 224 } }, { start: { line: 37, column: 149 }, end: { line: 37, column: 224 } }], line: 37 }, "4": { loc: { start: { line: 39, column: 46 }, end: { line: 39, column: 92 } }, type: "cond-expr", locations: [{ start: { line: 39, column: 70 }, end: { line: 39, column: 73 } }, { start: { line: 39, column: 76 }, end: { line: 39, column: 92 } }], line: 39 }, "5": { loc: { start: { line: 39, column: 46 }, end: { line: 39, column: 67 } }, type: "binary-expr", locations: [{ start: { line: 39, column: 46 }, end: { line: 39, column: 49 } }, { start: { line: 39, column: 53 }, end: { line: 39, column: 67 } }], line: 39 }, "6": { loc: { start: { line: 106, column: 11 }, end: { line: 106, column: 191 } }, type: "binary-expr", locations: [{ start: { line: 106, column: 11 }, end: { line: 106, column: 20 } }, { start: { line: 106, column: 24 }, end: { line: 106, column: 38 } }, { start: { line: 106, column: 42 }, end: { line: 106, column: 83 } }, { start: { line: 106, column: 87 }, end: { line: 106, column: 136 } }, { start: { line: 106, column: 140 }, end: { line: 106, column: 191 } }], line: 106 }, "7": { loc: { start: { line: 122, column: 2 }, end: { line: 126, column: 3 } }, type: "if", locations: [{ start: { line: 122, column: 2 }, end: { line: 126, column: 3 } }, { start: { line: 122, column: 2 }, end: { line: 126, column: 3 } }], line: 122 }, "8": { loc: { start: { line: 128, column: 2 }, end: { line: 132, column: 3 } }, type: "if", locations: [{ start: { line: 128, column: 2 }, end: { line: 132, column: 3 } }, { start: { line: 128, column: 2 }, end: { line: 132, column: 3 } }], line: 128 }, "9": { loc: { start: { line: 146, column: 2 }, end: { line: 152, column: 88 } }, type: "binary-expr", locations: [{ start: { line: 146, column: 2 }, end: { line: 146, column: 31 } }, { start: { line: 149, column: 2 }, end: { line: 149, column: 43 } }, { start: { line: 152, column: 2 }, end: { line: 152, column: 88 } }], line: 146 }, "10": { loc: { start: { line: 161, column: 2 }, end: { line: 165, column: 3 } }, type: "if", locations: [{ start: { line: 161, column: 2 }, end: { line: 165, column: 3 } }, { start: { line: 161, column: 2 }, end: { line: 165, column: 3 } }], line: 161 }, "11": { loc: { start: { line: 198, column: 2 }, end: { line: 203, column: 98 } }, type: "binary-expr", locations: [{ start: { line: 198, column: 2 }, end: { line: 198, column: 33 } }, { start: { line: 203, column: 2 }, end: { line: 203, column: 30 } }, { start: { line: 203, column: 34 }, end: { line: 203, column: 97 } }], line: 198 }, "12": { loc: { start: { line: 234, column: 6 }, end: { line: 237, column: 7 } }, type: "if", locations: [{ start: { line: 234, column: 6 }, end: { line: 237, column: 7 } }, { start: { line: 234, column: 6 }, end: { line: 237, column: 7 } }], line: 234 }, "13": { loc: { start: { line: 236, column: 15 }, end: { line: 236, column: 67 } }, type: "binary-expr", locations: [{ start: { line: 236, column: 15 }, end: { line: 236, column: 43 } }, { start: { line: 236, column: 47 }, end: { line: 236, column: 67 } }], line: 236 }, "14": { loc: { start: { line: 240, column: 13 }, end: { line: 240, column: 139 } }, type: "binary-expr", locations: [{ start: { line: 240, column: 13 }, end: { line: 240, column: 41 } }, { start: { line: 240, column: 45 }, end: { line: 240, column: 65 } }, { start: { line: 240, column: 70 }, end: { line: 240, column: 106 } }, { start: { line: 240, column: 110 }, end: { line: 240, column: 138 } }], line: 240 } }, s: { "0": 0, "1": 0, "2": 0, "3": 0, "4": 0, "5": 0, "6": 0, "7": 0, "8": 0, "9": 0, "10": 0, "11": 0, "12": 0, "13": 0, "14": 0, "15": 0, "16": 0, "17": 0, "18": 0, "19": 0, "20": 0, "21": 0, "22": 0, "23": 0, "24": 0, "25": 0, "26": 0, "27": 0, "28": 0, "29": 0, "30": 0, "31": 0, "32": 0, "33": 0, "34": 0, "35": 0, "36": 0, "37": 0, "38": 0, "39": 0, "40": 0, "41": 0, "42": 0, "43": 0, "44": 0, "45": 0, "46": 0, "47": 0, "48": 0, "49": 0, "50": 0, "51": 0, "52": 0, "53": 0, "54": 0, "55": 0, "56": 0, "57": 0, "58": 0, "59": 0, "60": 0, "61": 0, "62": 0, "63": 0, "64": 0, "65": 0, "66": 0, "67": 0, "68": 0, "69": 0, "70": 0, "71": 0, "72": 0, "73": 0, "74": 0, "75": 0, "76": 0, "77": 0, "78": 0, "79": 0, "80": 0, "81": 0, "82": 0, "83": 0, "84": 0, "85": 0, "86": 0, "87": 0 }, f: { "0": 0, "1": 0, "2": 0, "3": 0, "4": 0, "5": 0, "6": 0, "7": 0, "8": 0, "9": 0 }, b: { "0": [0, 0], "1": [0, 0], "2": [0, 0], "3": [0, 0], "4": [0, 0], "5": [0, 0], "6": [0, 0, 0, 0, 0], "7": [0, 0], "8": [0, 0], "9": [0, 0, 0], "10": [0, 0], "11": [0, 0, 0], "12": [0, 0], "13": [0, 0], "14": [0, 0, 0, 0] }, inputSourceMap: { version: 3, sources: ["lib/controller/sagas/index.js"], names: ["saga", "trace", "actions", "debug", "CONTROL_SAGAS", "ADVANCE", "advance", "STEP_NEXT", "stepNext", "STEP_OVER", "stepOver", "STEP_INTO", "stepInto", "STEP_OUT", "stepOut", "CONTINUE", "continueUntilBreakpoint", "SKIPPED_TYPES", "action", "type", "beginStep", "exec", "interrupt", "INTERRUPT", "startingRange", "controller", "current", "location", "sourceRange", "upcoming", "e", "node", "has", "nodeType", "start", "length", "willJump", "isMultiline", "startingDepth", "functionDepth", "currentDepth", "currentRange", "lines", "line", "currentLocation", "currentNode", "currentLine", "currentSourceId", "previousLine", "previousSourceId", "breakpoints", "breakpointHit", "id", "source", "filter", "sourceId", "undefined"], mappings: "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", file: "index.js", sourceRoot: "/Users/gnidan/src/work/truffle/packages/truffle-debugger", sourcesContent: ["import debugModule from \"debug\";\nconst debug = debugModule(\"debugger:controller:sagas\");\n\nimport { put, call, race, take, select } from 'redux-saga/effects';\n\nimport { prefixName } from \"lib/helpers\";\n\nimport * as trace from \"lib/trace/sagas\";\n\nimport * as actions from \"../actions\";\n\nimport controller from \"../selectors\";\n\nconst CONTROL_SAGAS = {\n  [actions.ADVANCE]: advance,\n  [actions.STEP_NEXT]: stepNext,\n  [actions.STEP_OVER]: stepOver,\n  [actions.STEP_INTO]: stepInto,\n  [actions.STEP_OUT]: stepOut,\n  [actions.CONTINUE]: continueUntilBreakpoint\n};\n\n/** AST node types that are skipped to filter out some noise */\nconst SKIPPED_TYPES = new Set([\n  \"ContractDefinition\",\n  \"VariableDeclaration\",\n]);\n\nexport function* saga() {\n  while (true) {\n    debug(\"waiting for control action\");\n    let action = yield take(Object.keys(CONTROL_SAGAS));\n    debug(\"got control action\");\n    let saga = CONTROL_SAGAS[action.type];\n\n    yield put(actions.beginStep(action.type));\n\n    yield race({\n      exec: call(saga, action),\n      interrupt: take(actions.INTERRUPT)\n    });\n  }\n}\n\nexport default prefixName(\"controller\", saga);\n\n/**\n * Advance the state by one instruction\n */\nfunction* advance() {\n  // send action to advance trace\n  yield *trace.advance();\n}\n\n/**\n * stepNext - step to the next logical code segment\n *\n * Note: It might take multiple instructions to express the same section of code.\n * \"Stepping\", then, is stepping to the next logical item, not stepping to the next\n * instruction. See advance() if you'd like to advance by one instruction.\n */\nfunction* stepNext () {\n  const startingRange = yield select(controller.current.location.sourceRange);\n\n  var upcoming;\n\n  do {\n    // advance at least once step\n    yield* advance();\n\n    // and check the next source range\n    try {\n      upcoming = yield select(controller.current.location);\n    } catch (e) {\n      upcoming = null;\n    }\n\n    // if the next step's source range is still the same, keep going\n  } while (\n    !upcoming ||\n    !upcoming.node ||\n    SKIPPED_TYPES.has(upcoming.node.nodeType) ||\n\n    upcoming.sourceRange.start == startingRange.start &&\n    upcoming.sourceRange.length == startingRange.length\n  );\n}\n\n/**\n * stepInto - step into the current function\n *\n * Conceptually this is easy, but from a programming standpoint it's hard.\n * Code like `getBalance(msg.sender)` might be highlighted, but there could\n * be a number of different intermediate steps (like evaluating `msg.sender`)\n * before `getBalance` is stepped into. This function will step into the first\n * function available (where instruction.jump == \"i\"), ignoring any intermediate\n * steps that fall within the same code range. If there's a step encountered\n * that exists outside of the range, then stepInto will only execute until that\n * step.\n */\nfunction* stepInto () {\n  if (yield select(controller.current.willJump)) {\n    yield* stepNext();\n\n    return;\n  }\n\n  if (yield select(controller.current.location.isMultiline)) {\n    yield* stepOver();\n\n    return;\n  }\n\n  const startingDepth = yield select(controller.current.functionDepth);\n  const startingRange = yield select(controller.current.location.sourceRange);\n  var currentDepth;\n  var currentRange;\n\n  do {\n    yield* stepNext();\n\n    currentDepth = yield select(controller.current.functionDepth);\n    currentRange = yield select(controller.current.location.sourceRange);\n\n  } while (\n    // the function stack has not increased,\n    currentDepth <= startingDepth &&\n\n    // the current source range begins on or after the starting range\n    currentRange.start >= startingRange.start &&\n\n    // and the current range ends on or before the starting range ends\n    (currentRange.start + currentRange.length) <=\n      (startingRange.start + startingRange.length)\n  );\n}\n\n/**\n * Step out of the current function\n *\n * This will run until the debugger encounters a decrease in function depth.\n */\nfunction* stepOut () {\n  if (yield select(controller.current.location.isMultiline)) {\n    yield *stepOver();\n\n    return;\n  }\n\n  const startingDepth = yield select(controller.current.functionDepth);\n  var currentDepth;\n\n  do {\n    yield* stepNext();\n\n    currentDepth = yield select(controller.current.functionDepth);\n\n  } while(currentDepth >= startingDepth);\n}\n\n/**\n * stepOver - step over the current line\n *\n * Step over the current line. This will step to the next instruction that\n * exists on a different line of code within the same function depth.\n */\nfunction* stepOver () {\n  const startingDepth = yield select(controller.current.functionDepth);\n  const startingRange = yield select(controller.current.location.sourceRange);\n  var currentDepth;\n  var currentRange;\n\n  do {\n    yield* stepNext();\n\n    currentDepth = yield select(controller.current.functionDepth);\n    currentRange = yield select(controller.current.location.sourceRange);\n\n  } while (\n    // keep stepping provided:\n    //\n    // we haven't jumped out\n    !(currentDepth < startingDepth) &&\n\n    // either: function depth is greater than starting (ignore function calls)\n    // or, if we're at the same depth, keep stepping until we're on a new\n    // line.\n    (currentDepth > startingDepth ||\n      currentRange.lines.start.line == startingRange.lines.start.line)\n  )\n}\n\n/**\n * continueUntilBreakpoint - step through execution until a breakpoint\n */\nfunction *continueUntilBreakpoint () {\n  var currentLocation, currentNode, currentLine, currentSourceId;\n  var previousLine, previousSourceId;\n\n  let breakpoints = yield select(controller.breakpoints);\n\n  let breakpointHit = false;\n\n  currentLocation = yield select(controller.current.location);\n  currentNode = currentLocation.node.id;\n  currentLine = currentLocation.sourceRange.lines.start.line;\n  currentSourceId = currentLocation.source.id;\n\n  do {\n    yield* stepNext();\n\n    previousLine = currentLine;\n    previousSourceId = currentSourceId;\n\n    currentLocation = yield select(controller.current.location);\n    currentNode = currentLocation.node.id;\n    currentLine = currentLocation.sourceRange.lines.start.line;\n    currentSourceId = currentLocation.source.id;\n\n    breakpointHit = breakpoints\n      .filter( ({sourceId, line, node}) =>\n        {\n          if(node !== undefined)\n          {\n            debug(\"node %d currentNode %d\",node,currentNode);\n            return sourceId === currentSourceId && node === currentNode;\n          }\n          //otherwise, we have a line-style breakpoint; we want to stop at the\n          //*first* point on the line\n          return sourceId === currentSourceId && line === currentLine\n          && (currentSourceId !== previousSourceId || currentLine !== previousLine);\n        }\n      )\n      .length > 0;\n    \n  } while(!breakpointHit);\n}\n"] }, _coverageSchema: "332fd63041d2c1bcb487cc26dd0d5f7d97098a6c" },
      coverage = global[gcv] || (global[gcv] = {});if (coverage[path] && coverage[path].hash === hash) {
    return coverage[path];
  }coverageData.hash = hash;return coverage[path] = coverageData;
}();cov_2he17h4koc.s[0]++;Object.defineProperty(exports, "__esModule", { value: true });var _keys = (cov_2he17h4koc.s[1]++, __webpack_require__(16));var _keys2 = (cov_2he17h4koc.s[2]++, _interopRequireDefault(_keys));var _set = (cov_2he17h4koc.s[3]++, __webpack_require__(22));var _set2 = (cov_2he17h4koc.s[4]++, _interopRequireDefault(_set));cov_2he17h4koc.s[5]++;exports.saga = saga;var _debug = (cov_2he17h4koc.s[6]++, __webpack_require__(0));var _debug2 = (cov_2he17h4koc.s[7]++, _interopRequireDefault(_debug));var _effects = (cov_2he17h4koc.s[8]++, __webpack_require__(10));var _helpers = (cov_2he17h4koc.s[9]++, __webpack_require__(6));var _sagas = (cov_2he17h4koc.s[10]++, __webpack_require__(33));var trace = (cov_2he17h4koc.s[11]++, _interopRequireWildcard(_sagas));var _actions = (cov_2he17h4koc.s[12]++, __webpack_require__(25));var actions = (cov_2he17h4koc.s[13]++, _interopRequireWildcard(_actions));var _selectors = (cov_2he17h4koc.s[14]++, __webpack_require__(34));var _selectors2 = (cov_2he17h4koc.s[15]++, _interopRequireDefault(_selectors));function _interopRequireWildcard(obj) {
  cov_2he17h4koc.f[0]++;cov_2he17h4koc.s[16]++;if ((cov_2he17h4koc.b[1][0]++, obj) && (cov_2he17h4koc.b[1][1]++, obj.__esModule)) {
    cov_2he17h4koc.b[0][0]++;cov_2he17h4koc.s[17]++;return obj;
  } else {
    cov_2he17h4koc.b[0][1]++;var newObj = (cov_2he17h4koc.s[18]++, {});cov_2he17h4koc.s[19]++;if (obj != null) {
      cov_2he17h4koc.b[2][0]++;cov_2he17h4koc.s[20]++;for (var key in obj) {
        cov_2he17h4koc.s[21]++;if (Object.prototype.hasOwnProperty.call(obj, key)) {
          cov_2he17h4koc.b[3][0]++;cov_2he17h4koc.s[22]++;newObj[key] = obj[key];
        } else {
          cov_2he17h4koc.b[3][1]++;
        }
      }
    } else {
      cov_2he17h4koc.b[2][1]++;
    }cov_2he17h4koc.s[23]++;newObj.default = obj;cov_2he17h4koc.s[24]++;return newObj;
  }
}function _interopRequireDefault(obj) {
  cov_2he17h4koc.f[1]++;cov_2he17h4koc.s[25]++;return (cov_2he17h4koc.b[5][0]++, obj) && (cov_2he17h4koc.b[5][1]++, obj.__esModule) ? (cov_2he17h4koc.b[4][0]++, obj) : (cov_2he17h4koc.b[4][1]++, { default: obj });
}const debug = (cov_2he17h4koc.s[26]++, (0, _debug2.default)("debugger:controller:sagas"));const CONTROL_SAGAS = (cov_2he17h4koc.s[27]++, { [actions.ADVANCE]: advance, [actions.STEP_NEXT]: stepNext, [actions.STEP_OVER]: stepOver, [actions.STEP_INTO]: stepInto, [actions.STEP_OUT]: stepOut, [actions.CONTINUE]: continueUntilBreakpoint });const SKIPPED_TYPES = (cov_2he17h4koc.s[28]++, new _set2.default(["ContractDefinition", "VariableDeclaration"]));function* saga() {
  cov_2he17h4koc.f[2]++;cov_2he17h4koc.s[29]++;while (true) {
    cov_2he17h4koc.s[30]++;debug("waiting for control action");let action = (cov_2he17h4koc.s[31]++, yield (0, _effects.take)((0, _keys2.default)(CONTROL_SAGAS)));cov_2he17h4koc.s[32]++;debug("got control action");let saga = (cov_2he17h4koc.s[33]++, CONTROL_SAGAS[action.type]);cov_2he17h4koc.s[34]++;yield (0, _effects.put)(actions.beginStep(action.type));cov_2he17h4koc.s[35]++;yield (0, _effects.race)({ exec: (0, _effects.call)(saga, action), interrupt: (0, _effects.take)(actions.INTERRUPT) });
  }
}cov_2he17h4koc.s[36]++;exports.default = (0, _helpers.prefixName)("controller", saga);function* advance() {
  cov_2he17h4koc.f[3]++;cov_2he17h4koc.s[37]++;yield* trace.advance();
}function* stepNext() {
  cov_2he17h4koc.f[4]++;const startingRange = (cov_2he17h4koc.s[38]++, yield (0, _effects.select)(_selectors2.default.current.location.sourceRange));var upcoming;cov_2he17h4koc.s[39]++;do {
    cov_2he17h4koc.s[40]++;yield* advance();cov_2he17h4koc.s[41]++;try {
      cov_2he17h4koc.s[42]++;upcoming = yield (0, _effects.select)(_selectors2.default.current.location);
    } catch (e) {
      cov_2he17h4koc.s[43]++;upcoming = null;
    }
  } while ((cov_2he17h4koc.b[6][0]++, !upcoming) || (cov_2he17h4koc.b[6][1]++, !upcoming.node) || (cov_2he17h4koc.b[6][2]++, SKIPPED_TYPES.has(upcoming.node.nodeType)) || (cov_2he17h4koc.b[6][3]++, upcoming.sourceRange.start == startingRange.start) && (cov_2he17h4koc.b[6][4]++, upcoming.sourceRange.length == startingRange.length));
}function* stepInto() {
  cov_2he17h4koc.f[5]++;cov_2he17h4koc.s[44]++;if (yield (0, _effects.select)(_selectors2.default.current.willJump)) {
    cov_2he17h4koc.b[7][0]++;cov_2he17h4koc.s[45]++;yield* stepNext();cov_2he17h4koc.s[46]++;return;
  } else {
    cov_2he17h4koc.b[7][1]++;
  }cov_2he17h4koc.s[47]++;if (yield (0, _effects.select)(_selectors2.default.current.location.isMultiline)) {
    cov_2he17h4koc.b[8][0]++;cov_2he17h4koc.s[48]++;yield* stepOver();cov_2he17h4koc.s[49]++;return;
  } else {
    cov_2he17h4koc.b[8][1]++;
  }const startingDepth = (cov_2he17h4koc.s[50]++, yield (0, _effects.select)(_selectors2.default.current.functionDepth));const startingRange = (cov_2he17h4koc.s[51]++, yield (0, _effects.select)(_selectors2.default.current.location.sourceRange));var currentDepth;var currentRange;cov_2he17h4koc.s[52]++;do {
    cov_2he17h4koc.s[53]++;yield* stepNext();cov_2he17h4koc.s[54]++;currentDepth = yield (0, _effects.select)(_selectors2.default.current.functionDepth);cov_2he17h4koc.s[55]++;currentRange = yield (0, _effects.select)(_selectors2.default.current.location.sourceRange);
  } while ((cov_2he17h4koc.b[9][0]++, currentDepth <= startingDepth) && (cov_2he17h4koc.b[9][1]++, currentRange.start >= startingRange.start) && (cov_2he17h4koc.b[9][2]++, currentRange.start + currentRange.length <= startingRange.start + startingRange.length));
}function* stepOut() {
  cov_2he17h4koc.f[6]++;cov_2he17h4koc.s[56]++;if (yield (0, _effects.select)(_selectors2.default.current.location.isMultiline)) {
    cov_2he17h4koc.b[10][0]++;cov_2he17h4koc.s[57]++;yield* stepOver();cov_2he17h4koc.s[58]++;return;
  } else {
    cov_2he17h4koc.b[10][1]++;
  }const startingDepth = (cov_2he17h4koc.s[59]++, yield (0, _effects.select)(_selectors2.default.current.functionDepth));var currentDepth;cov_2he17h4koc.s[60]++;do {
    cov_2he17h4koc.s[61]++;yield* stepNext();cov_2he17h4koc.s[62]++;currentDepth = yield (0, _effects.select)(_selectors2.default.current.functionDepth);
  } while (currentDepth >= startingDepth);
}function* stepOver() {
  cov_2he17h4koc.f[7]++;const startingDepth = (cov_2he17h4koc.s[63]++, yield (0, _effects.select)(_selectors2.default.current.functionDepth));const startingRange = (cov_2he17h4koc.s[64]++, yield (0, _effects.select)(_selectors2.default.current.location.sourceRange));var currentDepth;var currentRange;cov_2he17h4koc.s[65]++;do {
    cov_2he17h4koc.s[66]++;yield* stepNext();cov_2he17h4koc.s[67]++;currentDepth = yield (0, _effects.select)(_selectors2.default.current.functionDepth);cov_2he17h4koc.s[68]++;currentRange = yield (0, _effects.select)(_selectors2.default.current.location.sourceRange);
  } while ((cov_2he17h4koc.b[11][0]++, !(currentDepth < startingDepth)) && ((cov_2he17h4koc.b[11][1]++, currentDepth > startingDepth) || (cov_2he17h4koc.b[11][2]++, currentRange.lines.start.line == startingRange.lines.start.line)));
}function* continueUntilBreakpoint() {
  cov_2he17h4koc.f[8]++;var currentLocation, currentNode, currentLine, currentSourceId;var previousLine, previousSourceId;let breakpoints = (cov_2he17h4koc.s[69]++, yield (0, _effects.select)(_selectors2.default.breakpoints));let breakpointHit = (cov_2he17h4koc.s[70]++, false);cov_2he17h4koc.s[71]++;currentLocation = yield (0, _effects.select)(_selectors2.default.current.location);cov_2he17h4koc.s[72]++;currentNode = currentLocation.node.id;cov_2he17h4koc.s[73]++;currentLine = currentLocation.sourceRange.lines.start.line;cov_2he17h4koc.s[74]++;currentSourceId = currentLocation.source.id;cov_2he17h4koc.s[75]++;do {
    cov_2he17h4koc.s[76]++;yield* stepNext();cov_2he17h4koc.s[77]++;previousLine = currentLine;cov_2he17h4koc.s[78]++;previousSourceId = currentSourceId;cov_2he17h4koc.s[79]++;currentLocation = yield (0, _effects.select)(_selectors2.default.current.location);cov_2he17h4koc.s[80]++;currentNode = currentLocation.node.id;cov_2he17h4koc.s[81]++;currentLine = currentLocation.sourceRange.lines.start.line;cov_2he17h4koc.s[82]++;currentSourceId = currentLocation.source.id;cov_2he17h4koc.s[83]++;breakpointHit = breakpoints.filter(({ sourceId, line, node }) => {
      cov_2he17h4koc.f[9]++;cov_2he17h4koc.s[84]++;if (node !== undefined) {
        cov_2he17h4koc.b[12][0]++;cov_2he17h4koc.s[85]++;debug("node %d currentNode %d", node, currentNode);cov_2he17h4koc.s[86]++;return (cov_2he17h4koc.b[13][0]++, sourceId === currentSourceId) && (cov_2he17h4koc.b[13][1]++, node === currentNode);
      } else {
        cov_2he17h4koc.b[12][1]++;
      }cov_2he17h4koc.s[87]++;return (cov_2he17h4koc.b[14][0]++, sourceId === currentSourceId) && (cov_2he17h4koc.b[14][1]++, line === currentLine) && ((cov_2he17h4koc.b[14][2]++, currentSourceId !== previousSourceId) || (cov_2he17h4koc.b[14][3]++, currentLine !== previousLine));
    }).length > 0;
  } while (!breakpointHit);
}

/***/ }),
/* 68 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var cov_l72hxq5wc = function () {
  var path = "/Users/gnidan/src/work/truffle/packages/truffle-debugger/lib/solidity/sagas/index.js",
      hash = "c0ae92a0d019ab8aa14d5ef3f668cf2df5b566fe",
      Function = function () {}.constructor,
      global = new Function('return this')(),
      gcv = "__coverage__",
      coverageData = { path: "/Users/gnidan/src/work/truffle/packages/truffle-debugger/lib/solidity/sagas/index.js", statementMap: { "0": { start: { line: 3, column: 0 }, end: { line: 5, column: 3 } }, "1": { start: { line: 6, column: 0 }, end: { line: 6, column: 30 } }, "2": { start: { line: 7, column: 0 }, end: { line: 7, column: 36 } }, "3": { start: { line: 8, column: 0 }, end: { line: 8, column: 20 } }, "4": { start: { line: 10, column: 13 }, end: { line: 10, column: 29 } }, "5": { start: { line: 12, column: 14 }, end: { line: 12, column: 44 } }, "6": { start: { line: 14, column: 15 }, end: { line: 14, column: 44 } }, "7": { start: { line: 16, column: 15 }, end: { line: 16, column: 37 } }, "8": { start: { line: 18, column: 15 }, end: { line: 18, column: 36 } }, "9": { start: { line: 20, column: 14 }, end: { line: 20, column: 47 } }, "10": { start: { line: 22, column: 16 }, end: { line: 22, column: 44 } }, "11": { start: { line: 24, column: 17 }, end: { line: 24, column: 40 } }, "12": { start: { line: 26, column: 18 }, end: { line: 26, column: 52 } }, "13": { start: { line: 28, column: 40 }, end: { line: 28, column: 267 } }, "14": { start: { line: 28, column: 69 }, end: { line: 28, column: 80 } }, "15": { start: { line: 28, column: 103 }, end: { line: 28, column: 105 } }, "16": { start: { line: 28, column: 107 }, end: { line: 28, column: 228 } }, "17": { start: { line: 28, column: 126 }, end: { line: 28, column: 226 } }, "18": { start: { line: 28, column: 149 }, end: { line: 28, column: 224 } }, "19": { start: { line: 28, column: 201 }, end: { line: 28, column: 224 } }, "20": { start: { line: 28, column: 229 }, end: { line: 28, column: 250 } }, "21": { start: { line: 28, column: 251 }, end: { line: 28, column: 265 } }, "22": { start: { line: 30, column: 39 }, end: { line: 30, column: 93 } }, "23": { start: { line: 32, column: 14 }, end: { line: 32, column: 61 } }, "24": { start: { line: 35, column: 2 }, end: { line: 35, column: 70 } }, "25": { start: { line: 39, column: 2 }, end: { line: 39, column: 67 } }, "26": { start: { line: 43, column: 2 }, end: { line: 48, column: 3 } }, "27": { start: { line: 44, column: 4 }, end: { line: 44, column: 45 } }, "28": { start: { line: 45, column: 4 }, end: { line: 45, column: 22 } }, "29": { start: { line: 47, column: 4 }, end: { line: 47, column: 31 } }, "30": { start: { line: 52, column: 2 }, end: { line: 56, column: 3 } }, "31": { start: { line: 53, column: 24 }, end: { line: 53, column: 93 } }, "32": { start: { line: 55, column: 4 }, end: { line: 55, column: 57 } }, "33": { start: { line: 60, column: 2 }, end: { line: 60, column: 37 } }, "34": { start: { line: 63, column: 0 }, end: { line: 63, column: 61 } } }, fnMap: { "0": { name: "_interopRequireWildcard", decl: { start: { line: 28, column: 9 }, end: { line: 28, column: 32 } }, loc: { start: { line: 28, column: 38 }, end: { line: 28, column: 269 } }, line: 28 }, "1": { name: "_interopRequireDefault", decl: { start: { line: 30, column: 9 }, end: { line: 30, column: 31 } }, loc: { start: { line: 30, column: 37 }, end: { line: 30, column: 95 } }, line: 30 }, "2": { name: "addSource", decl: { start: { line: 34, column: 10 }, end: { line: 34, column: 19 } }, loc: { start: { line: 34, column: 45 }, end: { line: 36, column: 1 } }, line: 34 }, "3": { name: "addSourceMap", decl: { start: { line: 38, column: 10 }, end: { line: 38, column: 22 } }, loc: { start: { line: 38, column: 42 }, end: { line: 40, column: 1 } }, line: 38 }, "4": { name: "tickSaga", decl: { start: { line: 42, column: 10 }, end: { line: 42, column: 18 } }, loc: { start: { line: 42, column: 21 }, end: { line: 49, column: 1 } }, line: 42 }, "5": { name: "functionDepthSaga", decl: { start: { line: 51, column: 10 }, end: { line: 51, column: 27 } }, loc: { start: { line: 51, column: 30 }, end: { line: 57, column: 1 } }, line: 51 }, "6": { name: "saga", decl: { start: { line: 59, column: 10 }, end: { line: 59, column: 14 } }, loc: { start: { line: 59, column: 17 }, end: { line: 61, column: 1 } }, line: 59 } }, branchMap: { "0": { loc: { start: { line: 28, column: 40 }, end: { line: 28, column: 267 } }, type: "if", locations: [{ start: { line: 28, column: 40 }, end: { line: 28, column: 267 } }, { start: { line: 28, column: 40 }, end: { line: 28, column: 267 } }], line: 28 }, "1": { loc: { start: { line: 28, column: 44 }, end: { line: 28, column: 65 } }, type: "binary-expr", locations: [{ start: { line: 28, column: 44 }, end: { line: 28, column: 47 } }, { start: { line: 28, column: 51 }, end: { line: 28, column: 65 } }], line: 28 }, "2": { loc: { start: { line: 28, column: 107 }, end: { line: 28, column: 228 } }, type: "if", locations: [{ start: { line: 28, column: 107 }, end: { line: 28, column: 228 } }, { start: { line: 28, column: 107 }, end: { line: 28, column: 228 } }], line: 28 }, "3": { loc: { start: { line: 28, column: 149 }, end: { line: 28, column: 224 } }, type: "if", locations: [{ start: { line: 28, column: 149 }, end: { line: 28, column: 224 } }, { start: { line: 28, column: 149 }, end: { line: 28, column: 224 } }], line: 28 }, "4": { loc: { start: { line: 30, column: 46 }, end: { line: 30, column: 92 } }, type: "cond-expr", locations: [{ start: { line: 30, column: 70 }, end: { line: 30, column: 73 } }, { start: { line: 30, column: 76 }, end: { line: 30, column: 92 } }], line: 30 }, "5": { loc: { start: { line: 30, column: 46 }, end: { line: 30, column: 67 } }, type: "binary-expr", locations: [{ start: { line: 30, column: 46 }, end: { line: 30, column: 49 } }, { start: { line: 30, column: 53 }, end: { line: 30, column: 67 } }], line: 30 }, "6": { loc: { start: { line: 52, column: 2 }, end: { line: 56, column: 3 } }, type: "if", locations: [{ start: { line: 52, column: 2 }, end: { line: 56, column: 3 } }, { start: { line: 52, column: 2 }, end: { line: 56, column: 3 } }], line: 52 } }, s: { "0": 0, "1": 0, "2": 0, "3": 0, "4": 0, "5": 0, "6": 0, "7": 0, "8": 0, "9": 0, "10": 0, "11": 0, "12": 0, "13": 0, "14": 0, "15": 0, "16": 0, "17": 0, "18": 0, "19": 0, "20": 0, "21": 0, "22": 0, "23": 0, "24": 0, "25": 0, "26": 0, "27": 0, "28": 0, "29": 0, "30": 0, "31": 0, "32": 0, "33": 0, "34": 0 }, f: { "0": 0, "1": 0, "2": 0, "3": 0, "4": 0, "5": 0, "6": 0 }, b: { "0": [0, 0], "1": [0, 0], "2": [0, 0], "3": [0, 0], "4": [0, 0], "5": [0, 0], "6": [0, 0] }, inputSourceMap: { version: 3, sources: ["lib/solidity/sagas/index.js"], names: ["addSource", "addSourceMap", "saga", "actions", "debug", "source", "sourcePath", "ast", "binary", "sourceMap", "tickSaga", "TICK", "functionDepthSaga", "solidity", "current", "willJump", "jumpDirection", "jump"], mappings: ";;;;;QAWiBA,S,GAAAA,S;QAIAC,Y,GAAAA,Y;QAsBAC,I,GAAAA,I;;AArCjB;;;;AAGA;;AACA;;AAEA;;IAAYC,O;;AACZ;;AAEA;;;;;;;;AARA,MAAMC,QAAQ,qBAAY,yBAAZ,CAAd;;AAUO,UAAUJ,SAAV,CAAoBK,MAApB,EAA4BC,UAA5B,EAAwCC,GAAxC,EAA6C;AAClD,QAAM,kBAAIJ,QAAQH,SAAR,CAAkBK,MAAlB,EAA0BC,UAA1B,EAAsCC,GAAtC,CAAJ,CAAN;AACD;;AAEM,UAAUN,YAAV,CAAuBO,MAAvB,EAA+BC,SAA/B,EAA0C;AAC/C,QAAM,kBAAIN,QAAQF,YAAR,CAAqBO,MAArB,EAA6BC,SAA7B,CAAJ,CAAN;AACD;;AAED,UAAUC,QAAV,GAAqB;AACnB,SAAO,IAAP,EAAa;AACX,UAAM,mBAAKC,cAAL,CAAN;AACAP,UAAM,UAAN;;AAEA,WAAOQ,mBAAP;AACD;AACF;;AAED,UAAUA,iBAAV,GAA+B;AAC7B,MAAI,MAAM,qBAAOC,oBAASC,OAAT,CAAiBC,QAAxB,CAAV,EAA6C;AAC3C,QAAIC,gBAAgB,MAAM,qBAAOH,oBAASC,OAAT,CAAiBE,aAAxB,CAA1B;;AAGA,UAAM,kBAAIb,QAAQc,IAAR,CAAaD,aAAb,CAAJ,CAAN;AACD;AACF;;AAEM,UAAUd,IAAV,GAAkB;AACvB,QAAM,mBAAKQ,QAAL,CAAN;AACD;;kBAEc,yBAAW,UAAX,EAAuBR,IAAvB,C", file: "index.js", sourceRoot: "/Users/gnidan/src/work/truffle/packages/truffle-debugger", sourcesContent: ["import debugModule from \"debug\";\nconst debug = debugModule(\"debugger:solidity:sagas\");\n\nimport { call, put, take, select } from \"redux-saga/effects\";\nimport { prefixName } from \"lib/helpers\";\n\nimport * as actions from \"../actions\";\nimport { TICK } from \"lib/trace/actions\";\n\nimport solidity from \"../selectors\";\n\nexport function *addSource(source, sourcePath, ast) {\n  yield put(actions.addSource(source, sourcePath, ast));\n}\n\nexport function *addSourceMap(binary, sourceMap) {\n  yield put(actions.addSourceMap(binary, sourceMap));\n}\n\nfunction *tickSaga() {\n  while (true) {\n    yield take(TICK);\n    debug(\"got TICK\");\n\n    yield *functionDepthSaga();\n  }\n}\n\nfunction* functionDepthSaga () {\n  if (yield select(solidity.current.willJump)) {\n    let jumpDirection = yield select(solidity.current.jumpDirection);\n\n\n    yield put(actions.jump(jumpDirection));\n  }\n}\n\nexport function* saga () {\n  yield call(tickSaga);\n}\n\nexport default prefixName(\"solidity\", saga);\n"] }, _coverageSchema: "332fd63041d2c1bcb487cc26dd0d5f7d97098a6c" },
      coverage = global[gcv] || (global[gcv] = {});if (coverage[path] && coverage[path].hash === hash) {
    return coverage[path];
  }coverageData.hash = hash;return coverage[path] = coverageData;
}();cov_l72hxq5wc.s[0]++;Object.defineProperty(exports, "__esModule", { value: true });cov_l72hxq5wc.s[1]++;exports.addSource = addSource;cov_l72hxq5wc.s[2]++;exports.addSourceMap = addSourceMap;cov_l72hxq5wc.s[3]++;exports.saga = saga;var _debug = (cov_l72hxq5wc.s[4]++, __webpack_require__(0));var _debug2 = (cov_l72hxq5wc.s[5]++, _interopRequireDefault(_debug));var _effects = (cov_l72hxq5wc.s[6]++, __webpack_require__(10));var _helpers = (cov_l72hxq5wc.s[7]++, __webpack_require__(6));var _actions = (cov_l72hxq5wc.s[8]++, __webpack_require__(35));var actions = (cov_l72hxq5wc.s[9]++, _interopRequireWildcard(_actions));var _actions2 = (cov_l72hxq5wc.s[10]++, __webpack_require__(21));var _selectors = (cov_l72hxq5wc.s[11]++, __webpack_require__(2));var _selectors2 = (cov_l72hxq5wc.s[12]++, _interopRequireDefault(_selectors));function _interopRequireWildcard(obj) {
  cov_l72hxq5wc.f[0]++;cov_l72hxq5wc.s[13]++;if ((cov_l72hxq5wc.b[1][0]++, obj) && (cov_l72hxq5wc.b[1][1]++, obj.__esModule)) {
    cov_l72hxq5wc.b[0][0]++;cov_l72hxq5wc.s[14]++;return obj;
  } else {
    cov_l72hxq5wc.b[0][1]++;var newObj = (cov_l72hxq5wc.s[15]++, {});cov_l72hxq5wc.s[16]++;if (obj != null) {
      cov_l72hxq5wc.b[2][0]++;cov_l72hxq5wc.s[17]++;for (var key in obj) {
        cov_l72hxq5wc.s[18]++;if (Object.prototype.hasOwnProperty.call(obj, key)) {
          cov_l72hxq5wc.b[3][0]++;cov_l72hxq5wc.s[19]++;newObj[key] = obj[key];
        } else {
          cov_l72hxq5wc.b[3][1]++;
        }
      }
    } else {
      cov_l72hxq5wc.b[2][1]++;
    }cov_l72hxq5wc.s[20]++;newObj.default = obj;cov_l72hxq5wc.s[21]++;return newObj;
  }
}function _interopRequireDefault(obj) {
  cov_l72hxq5wc.f[1]++;cov_l72hxq5wc.s[22]++;return (cov_l72hxq5wc.b[5][0]++, obj) && (cov_l72hxq5wc.b[5][1]++, obj.__esModule) ? (cov_l72hxq5wc.b[4][0]++, obj) : (cov_l72hxq5wc.b[4][1]++, { default: obj });
}const debug = (cov_l72hxq5wc.s[23]++, (0, _debug2.default)("debugger:solidity:sagas"));function* addSource(source, sourcePath, ast) {
  cov_l72hxq5wc.f[2]++;cov_l72hxq5wc.s[24]++;yield (0, _effects.put)(actions.addSource(source, sourcePath, ast));
}function* addSourceMap(binary, sourceMap) {
  cov_l72hxq5wc.f[3]++;cov_l72hxq5wc.s[25]++;yield (0, _effects.put)(actions.addSourceMap(binary, sourceMap));
}function* tickSaga() {
  cov_l72hxq5wc.f[4]++;cov_l72hxq5wc.s[26]++;while (true) {
    cov_l72hxq5wc.s[27]++;yield (0, _effects.take)(_actions2.TICK);cov_l72hxq5wc.s[28]++;debug("got TICK");cov_l72hxq5wc.s[29]++;yield* functionDepthSaga();
  }
}function* functionDepthSaga() {
  cov_l72hxq5wc.f[5]++;cov_l72hxq5wc.s[30]++;if (yield (0, _effects.select)(_selectors2.default.current.willJump)) {
    cov_l72hxq5wc.b[6][0]++;let jumpDirection = (cov_l72hxq5wc.s[31]++, yield (0, _effects.select)(_selectors2.default.current.jumpDirection));cov_l72hxq5wc.s[32]++;yield (0, _effects.put)(actions.jump(jumpDirection));
  } else {
    cov_l72hxq5wc.b[6][1]++;
  }
}function* saga() {
  cov_l72hxq5wc.f[6]++;cov_l72hxq5wc.s[33]++;yield (0, _effects.call)(tickSaga);
}cov_l72hxq5wc.s[34]++;exports.default = (0, _helpers.prefixName)("solidity", saga);

/***/ }),
/* 69 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var cov_gj3m4bc7n = function () {
  var path = "/Users/gnidan/src/work/truffle/packages/truffle-debugger/lib/evm/sagas/index.js",
      hash = "caee372d4f397b35c6949d57083b3e9e41ba9dd3",
      Function = function () {}.constructor,
      global = new Function('return this')(),
      gcv = "__coverage__",
      coverageData = { path: "/Users/gnidan/src/work/truffle/packages/truffle-debugger/lib/evm/sagas/index.js", statementMap: { "0": { start: { line: 3, column: 0 }, end: { line: 5, column: 3 } }, "1": { start: { line: 6, column: 0 }, end: { line: 6, column: 32 } }, "2": { start: { line: 7, column: 0 }, end: { line: 7, column: 34 } }, "3": { start: { line: 8, column: 0 }, end: { line: 8, column: 22 } }, "4": { start: { line: 9, column: 0 }, end: { line: 9, column: 38 } }, "5": { start: { line: 10, column: 0 }, end: { line: 10, column: 20 } }, "6": { start: { line: 12, column: 13 }, end: { line: 12, column: 29 } }, "7": { start: { line: 14, column: 14 }, end: { line: 14, column: 44 } }, "8": { start: { line: 16, column: 15 }, end: { line: 16, column: 44 } }, "9": { start: { line: 18, column: 15 }, end: { line: 18, column: 37 } }, "10": { start: { line: 20, column: 15 }, end: { line: 20, column: 43 } }, "11": { start: { line: 22, column: 16 }, end: { line: 22, column: 37 } }, "12": { start: { line: 24, column: 14 }, end: { line: 24, column: 48 } }, "13": { start: { line: 26, column: 17 }, end: { line: 26, column: 40 } }, "14": { start: { line: 28, column: 18 }, end: { line: 28, column: 52 } }, "15": { start: { line: 30, column: 40 }, end: { line: 30, column: 267 } }, "16": { start: { line: 30, column: 69 }, end: { line: 30, column: 80 } }, "17": { start: { line: 30, column: 103 }, end: { line: 30, column: 105 } }, "18": { start: { line: 30, column: 107 }, end: { line: 30, column: 228 } }, "19": { start: { line: 30, column: 126 }, end: { line: 30, column: 226 } }, "20": { start: { line: 30, column: 149 }, end: { line: 30, column: 224 } }, "21": { start: { line: 30, column: 201 }, end: { line: 30, column: 224 } }, "22": { start: { line: 30, column: 229 }, end: { line: 30, column: 250 } }, "23": { start: { line: 30, column: 251 }, end: { line: 30, column: 265 } }, "24": { start: { line: 32, column: 39 }, end: { line: 32, column: 93 } }, "25": { start: { line: 34, column: 14 }, end: { line: 34, column: 56 } }, "26": { start: { line: 42, column: 2 }, end: { line: 42, column: 68 } }, "27": { start: { line: 44, column: 2 }, end: { line: 44, column: 41 } }, "28": { start: { line: 53, column: 15 }, end: { line: 53, column: 83 } }, "29": { start: { line: 54, column: 2 }, end: { line: 60, column: 3 } }, "30": { start: { line: 55, column: 22 }, end: { line: 55, column: 36 } }, "31": { start: { line: 57, column: 4 }, end: { line: 57, column: 75 } }, "32": { start: { line: 59, column: 4 }, end: { line: 59, column: 19 } }, "33": { start: { line: 64, column: 2 }, end: { line: 68, column: 3 } }, "34": { start: { line: 65, column: 4 }, end: { line: 65, column: 51 } }, "35": { start: { line: 67, column: 4 }, end: { line: 67, column: 52 } }, "36": { start: { line: 72, column: 2 }, end: { line: 90, column: 3 } }, "37": { start: { line: 73, column: 4 }, end: { line: 73, column: 44 } }, "38": { start: { line: 74, column: 4 }, end: { line: 74, column: 22 } }, "39": { start: { line: 76, column: 4 }, end: { line: 89, column: 5 } }, "40": { start: { line: 77, column: 6 }, end: { line: 77, column: 24 } }, "41": { start: { line: 78, column: 20 }, end: { line: 78, column: 92 } }, "42": { start: { line: 80, column: 6 }, end: { line: 80, column: 53 } }, "43": { start: { line: 81, column: 11 }, end: { line: 89, column: 5 } }, "44": { start: { line: 82, column: 6 }, end: { line: 82, column: 26 } }, "45": { start: { line: 83, column: 19 }, end: { line: 83, column: 92 } }, "46": { start: { line: 85, column: 6 }, end: { line: 85, column: 54 } }, "47": { start: { line: 86, column: 11 }, end: { line: 89, column: 5 } }, "48": { start: { line: 87, column: 6 }, end: { line: 87, column: 26 } }, "49": { start: { line: 88, column: 6 }, end: { line: 88, column: 52 } }, "50": { start: { line: 94, column: 2 }, end: { line: 94, column: 42 } }, "51": { start: { line: 97, column: 0 }, end: { line: 97, column: 56 } } }, fnMap: { "0": { name: "_interopRequireWildcard", decl: { start: { line: 30, column: 9 }, end: { line: 30, column: 32 } }, loc: { start: { line: 30, column: 38 }, end: { line: 30, column: 269 } }, line: 30 }, "1": { name: "_interopRequireDefault", decl: { start: { line: 32, column: 9 }, end: { line: 32, column: 31 } }, loc: { start: { line: 32, column: 37 }, end: { line: 32, column: 95 } }, line: 32 }, "2": { name: "addContext", decl: { start: { line: 41, column: 10 }, end: { line: 41, column: 20 } }, loc: { start: { line: 41, column: 43 }, end: { line: 45, column: 1 } }, line: 41 }, "3": { name: "addInstance", decl: { start: { line: 52, column: 10 }, end: { line: 52, column: 21 } }, loc: { start: { line: 52, column: 39 }, end: { line: 61, column: 1 } }, line: 52 }, "4": { name: "begin", decl: { start: { line: 63, column: 10 }, end: { line: 63, column: 15 } }, loc: { start: { line: 63, column: 37 }, end: { line: 69, column: 1 } }, line: 63 }, "5": { name: "callstackSaga", decl: { start: { line: 71, column: 10 }, end: { line: 71, column: 23 } }, loc: { start: { line: 71, column: 26 }, end: { line: 91, column: 1 } }, line: 71 }, "6": { name: "saga", decl: { start: { line: 93, column: 10 }, end: { line: 93, column: 14 } }, loc: { start: { line: 93, column: 17 }, end: { line: 95, column: 1 } }, line: 93 } }, branchMap: { "0": { loc: { start: { line: 30, column: 40 }, end: { line: 30, column: 267 } }, type: "if", locations: [{ start: { line: 30, column: 40 }, end: { line: 30, column: 267 } }, { start: { line: 30, column: 40 }, end: { line: 30, column: 267 } }], line: 30 }, "1": { loc: { start: { line: 30, column: 44 }, end: { line: 30, column: 65 } }, type: "binary-expr", locations: [{ start: { line: 30, column: 44 }, end: { line: 30, column: 47 } }, { start: { line: 30, column: 51 }, end: { line: 30, column: 65 } }], line: 30 }, "2": { loc: { start: { line: 30, column: 107 }, end: { line: 30, column: 228 } }, type: "if", locations: [{ start: { line: 30, column: 107 }, end: { line: 30, column: 228 } }, { start: { line: 30, column: 107 }, end: { line: 30, column: 228 } }], line: 30 }, "3": { loc: { start: { line: 30, column: 149 }, end: { line: 30, column: 224 } }, type: "if", locations: [{ start: { line: 30, column: 149 }, end: { line: 30, column: 224 } }, { start: { line: 30, column: 149 }, end: { line: 30, column: 224 } }], line: 30 }, "4": { loc: { start: { line: 32, column: 46 }, end: { line: 32, column: 92 } }, type: "cond-expr", locations: [{ start: { line: 32, column: 70 }, end: { line: 32, column: 73 } }, { start: { line: 32, column: 76 }, end: { line: 32, column: 92 } }], line: 32 }, "5": { loc: { start: { line: 32, column: 46 }, end: { line: 32, column: 67 } }, type: "binary-expr", locations: [{ start: { line: 32, column: 46 }, end: { line: 32, column: 49 } }, { start: { line: 32, column: 53 }, end: { line: 32, column: 67 } }], line: 32 }, "6": { loc: { start: { line: 54, column: 2 }, end: { line: 60, column: 3 } }, type: "if", locations: [{ start: { line: 54, column: 2 }, end: { line: 60, column: 3 } }, { start: { line: 54, column: 2 }, end: { line: 60, column: 3 } }], line: 54 }, "7": { loc: { start: { line: 64, column: 2 }, end: { line: 68, column: 3 } }, type: "if", locations: [{ start: { line: 64, column: 2 }, end: { line: 68, column: 3 } }, { start: { line: 64, column: 2 }, end: { line: 68, column: 3 } }], line: 64 }, "8": { loc: { start: { line: 76, column: 4 }, end: { line: 89, column: 5 } }, type: "if", locations: [{ start: { line: 76, column: 4 }, end: { line: 89, column: 5 } }, { start: { line: 76, column: 4 }, end: { line: 89, column: 5 } }], line: 76 }, "9": { loc: { start: { line: 81, column: 11 }, end: { line: 89, column: 5 } }, type: "if", locations: [{ start: { line: 81, column: 11 }, end: { line: 89, column: 5 } }, { start: { line: 81, column: 11 }, end: { line: 89, column: 5 } }], line: 81 }, "10": { loc: { start: { line: 86, column: 11 }, end: { line: 89, column: 5 } }, type: "if", locations: [{ start: { line: 86, column: 11 }, end: { line: 89, column: 5 } }, { start: { line: 86, column: 11 }, end: { line: 89, column: 5 } }], line: 86 } }, s: { "0": 0, "1": 0, "2": 0, "3": 0, "4": 0, "5": 0, "6": 0, "7": 0, "8": 0, "9": 0, "10": 0, "11": 0, "12": 0, "13": 0, "14": 0, "15": 0, "16": 0, "17": 0, "18": 0, "19": 0, "20": 0, "21": 0, "22": 0, "23": 0, "24": 0, "25": 0, "26": 0, "27": 0, "28": 0, "29": 0, "30": 0, "31": 0, "32": 0, "33": 0, "34": 0, "35": 0, "36": 0, "37": 0, "38": 0, "39": 0, "40": 0, "41": 0, "42": 0, "43": 0, "44": 0, "45": 0, "46": 0, "47": 0, "48": 0, "49": 0, "50": 0, "51": 0 }, f: { "0": 0, "1": 0, "2": 0, "3": 0, "4": 0, "5": 0, "6": 0 }, b: { "0": [0, 0], "1": [0, 0], "2": [0, 0], "3": [0, 0], "4": [0, 0], "5": [0, 0], "6": [0, 0], "7": [0, 0], "8": [0, 0], "9": [0, 0], "10": [0, 0] }, inputSourceMap: { version: 3, sources: ["lib/evm/sagas/index.js"], names: ["addContext", "addInstance", "begin", "callstackSaga", "saga", "actions", "debug", "contractName", "binary", "address", "search", "evm", "info", "binaries", "context", "call", "create", "TICK", "current", "step", "isCall", "callAddress", "isCreate", "createBinary", "isHalting", "returnCall"], mappings: ";;;;;QAgBiBA,U,GAAAA,U;QAWAC,W,GAAAA,W;QAWAC,K,GAAAA,K;QAQAC,a,GAAAA,a;QAwBAC,I,GAAAA,I;;AAtEjB;;;;AAGA;;AACA;;AAEA;;AACA;;IAAYC,O;;AAEZ;;;;;;;;AARA,MAAMC,QAAQ,qBAAY,oBAAZ,CAAd;;AAUA;;;;;AAKO,UAAUN,UAAV,CAAqBO,YAArB,EAAmCC,MAAnC,EAA2C;AAChD,QAAM,kBAAIH,QAAQL,UAAR,CAAmBO,YAAnB,EAAiCC,MAAjC,CAAJ,CAAN;;AAEA,SAAO,wBAAUA,MAAV,CAAP;AACD;;AAED;;;;;AAKO,UAAUP,WAAV,CAAsBQ,OAAtB,EAA+BD,MAA/B,EAAuC;AAC5C,MAAIE,SAAS,MAAM,qBAAOC,oBAAIC,IAAJ,CAASC,QAAT,CAAkBH,MAAzB,CAAnB;AACA,MAAIF,UAAU,KAAd,EAAqB;AACnB,QAAI,EAAEM,OAAF,KAAcJ,OAAOF,MAAP,CAAlB;;AAEA,UAAM,kBAAIH,QAAQJ,WAAR,CAAoBQ,OAApB,EAA6BK,OAA7B,EAAsCN,MAAtC,CAAJ,CAAN;;AAEA,WAAOM,OAAP;AACD;AACF;;AAEM,UAAUZ,KAAV,CAAgB,EAAEO,OAAF,EAAWD,MAAX,EAAhB,EAAqC;AAC1C,MAAIC,OAAJ,EAAa;AACX,UAAM,kBAAIJ,QAAQU,IAAR,CAAaN,OAAb,CAAJ,CAAN;AACD,GAFD,MAEO;AACL,UAAM,kBAAIJ,QAAQW,MAAR,CAAeR,MAAf,CAAJ,CAAN;AACD;AACF;;AAEM,UAAUL,aAAV,GAA2B;AAChC,SAAO,IAAP,EAAa;AACX,UAAM,mBAAKc,aAAL,CAAN;AACAX,UAAM,UAAN;;AAEA,QAAI,MAAM,qBAAOK,oBAAIO,OAAJ,CAAYC,IAAZ,CAAiBC,MAAxB,CAAV,EAA2C;AACzCd,YAAM,UAAN;AACA,UAAIG,UAAU,MAAM,qBAAOE,oBAAIO,OAAJ,CAAYC,IAAZ,CAAiBE,WAAxB,CAApB;;AAEA,YAAM,kBAAIhB,QAAQU,IAAR,CAAaN,OAAb,CAAJ,CAAN;AAED,KAND,MAMO,IAAI,MAAM,qBAAOE,oBAAIO,OAAJ,CAAYC,IAAZ,CAAiBG,QAAxB,CAAV,EAA6C;AAClDhB,YAAM,YAAN;AACA,UAAIE,SAAS,MAAM,qBAAOG,oBAAIO,OAAJ,CAAYC,IAAZ,CAAiBI,YAAxB,CAAnB;;AAEA,YAAM,kBAAIlB,QAAQW,MAAR,CAAeR,MAAf,CAAJ,CAAN;AAED,KANM,MAMA,IAAI,MAAM,qBAAOG,oBAAIO,OAAJ,CAAYC,IAAZ,CAAiBK,SAAxB,CAAV,EAA8C;AACnDlB,YAAM,YAAN;AACA,YAAM,kBAAID,QAAQoB,UAAR,EAAJ,CAAN;AACD;AACF;AACF;;AAEM,UAAUrB,IAAV,GAAkB;AACvB,QAAM,mBAAKD,aAAL,CAAN;AACD;;kBAEc,yBAAW,KAAX,EAAkBC,IAAlB,C", file: "index.js", sourceRoot: "/Users/gnidan/src/work/truffle/packages/truffle-debugger", sourcesContent: ["import debugModule from \"debug\";\nconst debug = debugModule(\"debugger:evm:sagas\");\n\nimport { call, put, take, select } from \"redux-saga/effects\";\nimport { prefixName, keccak256 } from \"lib/helpers\";\n\nimport { TICK } from \"lib/trace/actions\";\nimport * as actions from \"../actions\";\n\nimport evm from \"../selectors\";\n\n/**\n * Adds EVM bytecode context\n *\n * @return {string} ID (0x-prefixed keccak of binary)\n */\nexport function *addContext(contractName, binary) {\n  yield put(actions.addContext(contractName, binary));\n\n  return keccak256(binary);\n}\n\n/**\n * Adds known deployed instance of binary at address\n *\n * @return {string} ID (0x-prefixed keccak of binary)\n */\nexport function *addInstance(address, binary) {\n  let search = yield select(evm.info.binaries.search);\n  if (binary != \"0x0\") {\n    let { context } = search(binary);\n\n    yield put(actions.addInstance(address, context, binary));\n\n    return context;\n  }\n}\n\nexport function* begin({ address, binary }) {\n  if (address) {\n    yield put(actions.call(address));\n  } else {\n    yield put(actions.create(binary));\n  }\n}\n\nexport function* callstackSaga () {\n  while (true) {\n    yield take(TICK);\n    debug(\"got TICK\");\n\n    if (yield select(evm.current.step.isCall)) {\n      debug(\"got call\");\n      let address = yield select(evm.current.step.callAddress);\n\n      yield put(actions.call(address));\n\n    } else if (yield select(evm.current.step.isCreate)) {\n      debug(\"got create\");\n      let binary = yield select(evm.current.step.createBinary);\n\n      yield put(actions.create(binary));\n\n    } else if (yield select(evm.current.step.isHalting)) {\n      debug(\"got return\");\n      yield put(actions.returnCall());\n    }\n  }\n}\n\nexport function* saga () {\n  yield call(callstackSaga);\n}\n\nexport default prefixName(\"evm\", saga);\n"] }, _coverageSchema: "332fd63041d2c1bcb487cc26dd0d5f7d97098a6c" },
      coverage = global[gcv] || (global[gcv] = {});if (coverage[path] && coverage[path].hash === hash) {
    return coverage[path];
  }coverageData.hash = hash;return coverage[path] = coverageData;
}();cov_gj3m4bc7n.s[0]++;Object.defineProperty(exports, "__esModule", { value: true });cov_gj3m4bc7n.s[1]++;exports.addContext = addContext;cov_gj3m4bc7n.s[2]++;exports.addInstance = addInstance;cov_gj3m4bc7n.s[3]++;exports.begin = begin;cov_gj3m4bc7n.s[4]++;exports.callstackSaga = callstackSaga;cov_gj3m4bc7n.s[5]++;exports.saga = saga;var _debug = (cov_gj3m4bc7n.s[6]++, __webpack_require__(0));var _debug2 = (cov_gj3m4bc7n.s[7]++, _interopRequireDefault(_debug));var _effects = (cov_gj3m4bc7n.s[8]++, __webpack_require__(10));var _helpers = (cov_gj3m4bc7n.s[9]++, __webpack_require__(6));var _actions = (cov_gj3m4bc7n.s[10]++, __webpack_require__(21));var _actions2 = (cov_gj3m4bc7n.s[11]++, __webpack_require__(36));var actions = (cov_gj3m4bc7n.s[12]++, _interopRequireWildcard(_actions2));var _selectors = (cov_gj3m4bc7n.s[13]++, __webpack_require__(3));var _selectors2 = (cov_gj3m4bc7n.s[14]++, _interopRequireDefault(_selectors));function _interopRequireWildcard(obj) {
  cov_gj3m4bc7n.f[0]++;cov_gj3m4bc7n.s[15]++;if ((cov_gj3m4bc7n.b[1][0]++, obj) && (cov_gj3m4bc7n.b[1][1]++, obj.__esModule)) {
    cov_gj3m4bc7n.b[0][0]++;cov_gj3m4bc7n.s[16]++;return obj;
  } else {
    cov_gj3m4bc7n.b[0][1]++;var newObj = (cov_gj3m4bc7n.s[17]++, {});cov_gj3m4bc7n.s[18]++;if (obj != null) {
      cov_gj3m4bc7n.b[2][0]++;cov_gj3m4bc7n.s[19]++;for (var key in obj) {
        cov_gj3m4bc7n.s[20]++;if (Object.prototype.hasOwnProperty.call(obj, key)) {
          cov_gj3m4bc7n.b[3][0]++;cov_gj3m4bc7n.s[21]++;newObj[key] = obj[key];
        } else {
          cov_gj3m4bc7n.b[3][1]++;
        }
      }
    } else {
      cov_gj3m4bc7n.b[2][1]++;
    }cov_gj3m4bc7n.s[22]++;newObj.default = obj;cov_gj3m4bc7n.s[23]++;return newObj;
  }
}function _interopRequireDefault(obj) {
  cov_gj3m4bc7n.f[1]++;cov_gj3m4bc7n.s[24]++;return (cov_gj3m4bc7n.b[5][0]++, obj) && (cov_gj3m4bc7n.b[5][1]++, obj.__esModule) ? (cov_gj3m4bc7n.b[4][0]++, obj) : (cov_gj3m4bc7n.b[4][1]++, { default: obj });
}const debug = (cov_gj3m4bc7n.s[25]++, (0, _debug2.default)("debugger:evm:sagas"));function* addContext(contractName, binary) {
  cov_gj3m4bc7n.f[2]++;cov_gj3m4bc7n.s[26]++;yield (0, _effects.put)(actions.addContext(contractName, binary));cov_gj3m4bc7n.s[27]++;return (0, _helpers.keccak256)(binary);
}function* addInstance(address, binary) {
  cov_gj3m4bc7n.f[3]++;let search = (cov_gj3m4bc7n.s[28]++, yield (0, _effects.select)(_selectors2.default.info.binaries.search));cov_gj3m4bc7n.s[29]++;if (binary != "0x0") {
    cov_gj3m4bc7n.b[6][0]++;let { context } = (cov_gj3m4bc7n.s[30]++, search(binary));cov_gj3m4bc7n.s[31]++;yield (0, _effects.put)(actions.addInstance(address, context, binary));cov_gj3m4bc7n.s[32]++;return context;
  } else {
    cov_gj3m4bc7n.b[6][1]++;
  }
}function* begin({ address, binary }) {
  cov_gj3m4bc7n.f[4]++;cov_gj3m4bc7n.s[33]++;if (address) {
    cov_gj3m4bc7n.b[7][0]++;cov_gj3m4bc7n.s[34]++;yield (0, _effects.put)(actions.call(address));
  } else {
    cov_gj3m4bc7n.b[7][1]++;cov_gj3m4bc7n.s[35]++;yield (0, _effects.put)(actions.create(binary));
  }
}function* callstackSaga() {
  cov_gj3m4bc7n.f[5]++;cov_gj3m4bc7n.s[36]++;while (true) {
    cov_gj3m4bc7n.s[37]++;yield (0, _effects.take)(_actions.TICK);cov_gj3m4bc7n.s[38]++;debug("got TICK");cov_gj3m4bc7n.s[39]++;if (yield (0, _effects.select)(_selectors2.default.current.step.isCall)) {
      cov_gj3m4bc7n.b[8][0]++;cov_gj3m4bc7n.s[40]++;debug("got call");let address = (cov_gj3m4bc7n.s[41]++, yield (0, _effects.select)(_selectors2.default.current.step.callAddress));cov_gj3m4bc7n.s[42]++;yield (0, _effects.put)(actions.call(address));
    } else {
      cov_gj3m4bc7n.b[8][1]++;cov_gj3m4bc7n.s[43]++;if (yield (0, _effects.select)(_selectors2.default.current.step.isCreate)) {
        cov_gj3m4bc7n.b[9][0]++;cov_gj3m4bc7n.s[44]++;debug("got create");let binary = (cov_gj3m4bc7n.s[45]++, yield (0, _effects.select)(_selectors2.default.current.step.createBinary));cov_gj3m4bc7n.s[46]++;yield (0, _effects.put)(actions.create(binary));
      } else {
        cov_gj3m4bc7n.b[9][1]++;cov_gj3m4bc7n.s[47]++;if (yield (0, _effects.select)(_selectors2.default.current.step.isHalting)) {
          cov_gj3m4bc7n.b[10][0]++;cov_gj3m4bc7n.s[48]++;debug("got return");cov_gj3m4bc7n.s[49]++;yield (0, _effects.put)(actions.returnCall());
        } else {
          cov_gj3m4bc7n.b[10][1]++;
        }
      }
    }
  }
}function* saga() {
  cov_gj3m4bc7n.f[6]++;cov_gj3m4bc7n.s[50]++;yield (0, _effects.call)(callstackSaga);
}cov_gj3m4bc7n.s[51]++;exports.default = (0, _helpers.prefixName)("evm", saga);

/***/ }),
/* 70 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var cov_qeobva4y7 = function () {
  var path = "/Users/gnidan/src/work/truffle/packages/truffle-debugger/lib/web3/sagas/index.js",
      hash = "e482860c3485140ae5e895f198ac5bcd8139a911",
      Function = function () {}.constructor,
      global = new Function('return this')(),
      gcv = "__coverage__",
      coverageData = { path: "/Users/gnidan/src/work/truffle/packages/truffle-debugger/lib/web3/sagas/index.js", statementMap: { "0": { start: { line: 3, column: 0 }, end: { line: 5, column: 3 } }, "1": { start: { line: 6, column: 0 }, end: { line: 6, column: 48 } }, "2": { start: { line: 7, column: 0 }, end: { line: 7, column: 40 } }, "3": { start: { line: 8, column: 0 }, end: { line: 8, column: 20 } }, "4": { start: { line: 10, column: 13 }, end: { line: 10, column: 29 } }, "5": { start: { line: 12, column: 14 }, end: { line: 12, column: 44 } }, "6": { start: { line: 14, column: 15 }, end: { line: 14, column: 44 } }, "7": { start: { line: 16, column: 15 }, end: { line: 16, column: 37 } }, "8": { start: { line: 18, column: 15 }, end: { line: 18, column: 36 } }, "9": { start: { line: 20, column: 14 }, end: { line: 20, column: 47 } }, "10": { start: { line: 22, column: 15 }, end: { line: 22, column: 36 } }, "11": { start: { line: 24, column: 16 }, end: { line: 24, column: 48 } }, "12": { start: { line: 26, column: 40 }, end: { line: 26, column: 267 } }, "13": { start: { line: 26, column: 69 }, end: { line: 26, column: 80 } }, "14": { start: { line: 26, column: 103 }, end: { line: 26, column: 105 } }, "15": { start: { line: 26, column: 107 }, end: { line: 26, column: 228 } }, "16": { start: { line: 26, column: 126 }, end: { line: 26, column: 226 } }, "17": { start: { line: 26, column: 149 }, end: { line: 26, column: 224 } }, "18": { start: { line: 26, column: 201 }, end: { line: 26, column: 224 } }, "19": { start: { line: 26, column: 229 }, end: { line: 26, column: 250 } }, "20": { start: { line: 26, column: 251 }, end: { line: 26, column: 265 } }, "21": { start: { line: 28, column: 39 }, end: { line: 28, column: 93 } }, "22": { start: { line: 30, column: 14 }, end: { line: 30, column: 57 } }, "23": { start: { line: 33, column: 2 }, end: { line: 33, column: 34 } }, "24": { start: { line: 35, column: 2 }, end: { line: 41, column: 3 } }, "25": { start: { line: 36, column: 4 }, end: { line: 36, column: 75 } }, "26": { start: { line: 38, column: 4 }, end: { line: 38, column: 27 } }, "27": { start: { line: 39, column: 4 }, end: { line: 39, column: 46 } }, "28": { start: { line: 40, column: 4 }, end: { line: 40, column: 11 } }, "29": { start: { line: 43, column: 2 }, end: { line: 43, column: 21 } }, "30": { start: { line: 44, column: 2 }, end: { line: 44, column: 55 } }, "31": { start: { line: 46, column: 11 }, end: { line: 46, column: 79 } }, "32": { start: { line: 47, column: 2 }, end: { line: 50, column: 3 } }, "33": { start: { line: 48, column: 4 }, end: { line: 48, column: 69 } }, "34": { start: { line: 49, column: 4 }, end: { line: 49, column: 11 } }, "35": { start: { line: 52, column: 16 }, end: { line: 52, column: 80 } }, "36": { start: { line: 53, column: 2 }, end: { line: 56, column: 3 } }, "37": { start: { line: 54, column: 4 }, end: { line: 54, column: 71 } }, "38": { start: { line: 55, column: 4 }, end: { line: 55, column: 11 } }, "39": { start: { line: 58, column: 2 }, end: { line: 58, column: 193 } }, "40": { start: { line: 62, column: 2 }, end: { line: 62, column: 43 } }, "41": { start: { line: 63, column: 15 }, end: { line: 63, column: 85 } }, "42": { start: { line: 65, column: 2 }, end: { line: 65, column: 43 } }, "43": { start: { line: 66, column: 2 }, end: { line: 66, column: 66 } }, "44": { start: { line: 70, column: 2 }, end: { line: 70, column: 50 } }, "45": { start: { line: 71, column: 2 }, end: { line: 71, column: 51 } }, "46": { start: { line: 73, column: 15 }, end: { line: 73, column: 114 } }, "47": { start: { line: 73, column: 54 }, end: { line: 73, column: 113 } }, "48": { start: { line: 74, column: 2 }, end: { line: 74, column: 29 } }, "49": { start: { line: 77, column: 2 }, end: { line: 82, column: 3 } }, "50": { start: { line: 78, column: 4 }, end: { line: 78, column: 25 } }, "51": { start: { line: 79, column: 4 }, end: { line: 79, column: 28 } }, "52": { start: { line: 81, column: 4 }, end: { line: 81, column: 35 } }, "53": { start: { line: 84, column: 28 }, end: { line: 84, column: 74 } }, "54": { start: { line: 85, column: 2 }, end: { line: 85, column: 25 } }, "55": { start: { line: 87, column: 2 }, end: { line: 87, column: 36 } }, "56": { start: { line: 91, column: 14 }, end: { line: 91, column: 107 } }, "57": { start: { line: 91, column: 63 }, end: { line: 91, column: 105 } }, "58": { start: { line: 93, column: 2 }, end: { line: 93, column: 31 } }, "59": { start: { line: 94, column: 2 }, end: { line: 94, column: 101 } }, "60": { start: { line: 94, column: 51 }, end: { line: 94, column: 98 } }, "61": { start: { line: 96, column: 17 }, end: { line: 96, column: 19 } }, "62": { start: { line: 97, column: 2 }, end: { line: 97, column: 82 } }, "63": { start: { line: 97, column: 55 }, end: { line: 97, column: 79 } }, "64": { start: { line: 99, column: 2 }, end: { line: 99, column: 33 } }, "65": { start: { line: 101, column: 2 }, end: { line: 101, column: 18 } }, "66": { start: { line: 105, column: 19 }, end: { line: 105, column: 121 } }, "67": { start: { line: 105, column: 54 }, end: { line: 105, column: 120 } }, "68": { start: { line: 106, column: 2 }, end: { line: 106, column: 38 } }, "69": { start: { line: 108, column: 2 }, end: { line: 108, column: 16 } }, "70": { start: { line: 113, column: 21 }, end: { line: 113, column: 64 } }, "71": { start: { line: 114, column: 16 }, end: { line: 114, column: 47 } }, "72": { start: { line: 116, column: 2 }, end: { line: 116, column: 80 } }, "73": { start: { line: 117, column: 2 }, end: { line: 117, column: 76 } }, "74": { start: { line: 120, column: 0 }, end: { line: 120, column: 57 } } }, fnMap: { "0": { name: "_interopRequireWildcard", decl: { start: { line: 26, column: 9 }, end: { line: 26, column: 32 } }, loc: { start: { line: 26, column: 38 }, end: { line: 26, column: 269 } }, line: 26 }, "1": { name: "_interopRequireDefault", decl: { start: { line: 28, column: 9 }, end: { line: 28, column: 31 } }, loc: { start: { line: 28, column: 37 }, end: { line: 28, column: 95 } }, line: 28 }, "2": { name: "fetchTransactionInfo", decl: { start: { line: 32, column: 10 }, end: { line: 32, column: 30 } }, loc: { start: { line: 32, column: 52 }, end: { line: 59, column: 1 } }, line: 32 }, "3": { name: "fetchBinary", decl: { start: { line: 61, column: 10 }, end: { line: 61, column: 21 } }, loc: { start: { line: 61, column: 44 }, end: { line: 67, column: 1 } }, line: 61 }, "4": { name: "inspectTransaction", decl: { start: { line: 69, column: 10 }, end: { line: 69, column: 28 } }, loc: { start: { line: 69, column: 47 }, end: { line: 88, column: 1 } }, line: 69 }, "5": { name: "(anonymous_5)", decl: { start: { line: 73, column: 40 }, end: { line: 73, column: 41 } }, loc: { start: { line: 73, column: 54 }, end: { line: 73, column: 113 } }, line: 73 }, "6": { name: "obtainBinaries", decl: { start: { line: 90, column: 10 }, end: { line: 90, column: 24 } }, loc: { start: { line: 90, column: 36 }, end: { line: 102, column: 1 } }, line: 90 }, "7": { name: "(anonymous_7)", decl: { start: { line: 91, column: 52 }, end: { line: 91, column: 53 } }, loc: { start: { line: 91, column: 63 }, end: { line: 91, column: 105 } }, line: 91 }, "8": { name: "(anonymous_8)", decl: { start: { line: 94, column: 40 }, end: { line: 94, column: 41 } }, loc: { start: { line: 94, column: 51 }, end: { line: 94, column: 98 } }, line: 94 }, "9": { name: "(anonymous_9)", decl: { start: { line: 97, column: 47 }, end: { line: 97, column: 48 } }, loc: { start: { line: 97, column: 55 }, end: { line: 97, column: 79 } }, line: 97 }, "10": { name: "receiveBinary", decl: { start: { line: 104, column: 10 }, end: { line: 104, column: 23 } }, loc: { start: { line: 104, column: 33 }, end: { line: 109, column: 1 } }, line: 104 }, "11": { name: "(anonymous_11)", decl: { start: { line: 105, column: 44 }, end: { line: 105, column: 45 } }, loc: { start: { line: 105, column: 54 }, end: { line: 105, column: 120 } }, line: 105 }, "12": { name: "saga", decl: { start: { line: 111, column: 10 }, end: { line: 111, column: 14 } }, loc: { start: { line: 111, column: 17 }, end: { line: 118, column: 1 } }, line: 111 } }, branchMap: { "0": { loc: { start: { line: 26, column: 40 }, end: { line: 26, column: 267 } }, type: "if", locations: [{ start: { line: 26, column: 40 }, end: { line: 26, column: 267 } }, { start: { line: 26, column: 40 }, end: { line: 26, column: 267 } }], line: 26 }, "1": { loc: { start: { line: 26, column: 44 }, end: { line: 26, column: 65 } }, type: "binary-expr", locations: [{ start: { line: 26, column: 44 }, end: { line: 26, column: 47 } }, { start: { line: 26, column: 51 }, end: { line: 26, column: 65 } }], line: 26 }, "2": { loc: { start: { line: 26, column: 107 }, end: { line: 26, column: 228 } }, type: "if", locations: [{ start: { line: 26, column: 107 }, end: { line: 26, column: 228 } }, { start: { line: 26, column: 107 }, end: { line: 26, column: 228 } }], line: 26 }, "3": { loc: { start: { line: 26, column: 149 }, end: { line: 26, column: 224 } }, type: "if", locations: [{ start: { line: 26, column: 149 }, end: { line: 26, column: 224 } }, { start: { line: 26, column: 149 }, end: { line: 26, column: 224 } }], line: 26 }, "4": { loc: { start: { line: 28, column: 46 }, end: { line: 28, column: 92 } }, type: "cond-expr", locations: [{ start: { line: 28, column: 70 }, end: { line: 28, column: 73 } }, { start: { line: 28, column: 76 }, end: { line: 28, column: 92 } }], line: 28 }, "5": { loc: { start: { line: 28, column: 46 }, end: { line: 28, column: 67 } }, type: "binary-expr", locations: [{ start: { line: 28, column: 46 }, end: { line: 28, column: 49 } }, { start: { line: 28, column: 53 }, end: { line: 28, column: 67 } }], line: 28 }, "6": { loc: { start: { line: 47, column: 2 }, end: { line: 50, column: 3 } }, type: "if", locations: [{ start: { line: 47, column: 2 }, end: { line: 50, column: 3 } }, { start: { line: 47, column: 2 }, end: { line: 50, column: 3 } }], line: 47 }, "7": { loc: { start: { line: 47, column: 6 }, end: { line: 47, column: 29 } }, type: "binary-expr", locations: [{ start: { line: 47, column: 6 }, end: { line: 47, column: 11 } }, { start: { line: 47, column: 15 }, end: { line: 47, column: 29 } }], line: 47 }, "8": { loc: { start: { line: 53, column: 2 }, end: { line: 56, column: 3 } }, type: "if", locations: [{ start: { line: 53, column: 2 }, end: { line: 56, column: 3 } }, { start: { line: 53, column: 2 }, end: { line: 56, column: 3 } }], line: 53 }, "9": { loc: { start: { line: 73, column: 54 }, end: { line: 73, column: 113 } }, type: "binary-expr", locations: [{ start: { line: 73, column: 54 }, end: { line: 73, column: 83 } }, { start: { line: 73, column: 87 }, end: { line: 73, column: 113 } }], line: 73 }, "10": { loc: { start: { line: 77, column: 2 }, end: { line: 82, column: 3 } }, type: "if", locations: [{ start: { line: 77, column: 2 }, end: { line: 82, column: 3 } }, { start: { line: 77, column: 2 }, end: { line: 82, column: 3 } }], line: 77 }, "11": { loc: { start: { line: 105, column: 54 }, end: { line: 105, column: 120 } }, type: "binary-expr", locations: [{ start: { line: 105, column: 54 }, end: { line: 105, column: 91 } }, { start: { line: 105, column: 95 }, end: { line: 105, column: 120 } }], line: 105 } }, s: { "0": 0, "1": 0, "2": 0, "3": 0, "4": 0, "5": 0, "6": 0, "7": 0, "8": 0, "9": 0, "10": 0, "11": 0, "12": 0, "13": 0, "14": 0, "15": 0, "16": 0, "17": 0, "18": 0, "19": 0, "20": 0, "21": 0, "22": 0, "23": 0, "24": 0, "25": 0, "26": 0, "27": 0, "28": 0, "29": 0, "30": 0, "31": 0, "32": 0, "33": 0, "34": 0, "35": 0, "36": 0, "37": 0, "38": 0, "39": 0, "40": 0, "41": 0, "42": 0, "43": 0, "44": 0, "45": 0, "46": 0, "47": 0, "48": 0, "49": 0, "50": 0, "51": 0, "52": 0, "53": 0, "54": 0, "55": 0, "56": 0, "57": 0, "58": 0, "59": 0, "60": 0, "61": 0, "62": 0, "63": 0, "64": 0, "65": 0, "66": 0, "67": 0, "68": 0, "69": 0, "70": 0, "71": 0, "72": 0, "73": 0, "74": 0 }, f: { "0": 0, "1": 0, "2": 0, "3": 0, "4": 0, "5": 0, "6": 0, "7": 0, "8": 0, "9": 0, "10": 0, "11": 0, "12": 0 }, b: { "0": [0, 0], "1": [0, 0], "2": [0, 0], "3": [0, 0], "4": [0, 0], "5": [0, 0], "6": [0, 0], "7": [0, 0], "8": [0, 0], "9": [0, 0], "10": [0, 0], "11": [0, 0] }, inputSourceMap: { version: 3, sources: ["lib/web3/sagas/index.js"], names: ["inspectTransaction", "obtainBinaries", "saga", "actions", "debug", "fetchTransactionInfo", "adapter", "txHash", "trace", "getTrace", "e", "error", "receiveTrace", "tx", "getTransaction", "to", "receiveCall", "address", "receipt", "getReceipt", "contractAddress", "binary", "input", "Error", "fetchBinary", "getDeployedCode", "receiveBinary", "provider", "init", "inspect", "action", "type", "RECEIVE_TRACE", "ERROR_WEB3", "RECEIVE_CALL", "addresses", "tasks", "map", "binaries", "task", "RECEIVE_BINARY", "INIT_WEB3", "Web3Adapter", "INSPECT", "FETCH_BINARY"], mappings: "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", file: "index.js", sourceRoot: "/Users/gnidan/src/work/truffle/packages/truffle-debugger", sourcesContent: ["import debugModule from \"debug\";\nconst debug = debugModule(\"debugger:web3:sagas\");\n\nimport { all, takeEvery, apply, fork, join, take, put, select } from 'redux-saga/effects';\nimport { prefixName } from \"lib/helpers\";\n\nimport * as actions from \"../actions\";\n\nimport Web3Adapter from \"../adapter\";\n\nfunction* fetchTransactionInfo(adapter, {txHash}) {\n  debug(\"inspecting transaction\");\n  var trace;\n  try {\n    trace = yield apply(adapter, adapter.getTrace, [txHash]);\n  } catch(e) {\n    debug(\"putting error\");\n    yield put(actions.error(e));\n    return;\n  }\n\n  debug(\"got trace\");\n  yield put(actions.receiveTrace(trace));\n\n  let tx = yield apply(adapter, adapter.getTransaction, [txHash]);\n  if (tx.to && tx.to != \"0x0\") {\n    yield put(actions.receiveCall({address: tx.to}));\n    return;\n  }\n\n  let receipt = yield apply(adapter, adapter.getReceipt, [txHash]);\n  if (receipt.contractAddress) {\n    yield put(actions.receiveCall({binary: tx.input}));\n    return;\n  }\n\n  throw new Error(\n    \"Could not find contract associated with transaction. \" +\n    \"Please make sure you're debugging a transaction that executes a \" +\n    \"contract function or creates a new contract.\"\n  );\n}\n\nfunction* fetchBinary(adapter, {address}) {\n  debug(\"fetching binary for %s\", address);\n  let binary = yield apply(adapter, adapter.getDeployedCode, [address]);\n\n  debug(\"received binary for %s\", address);\n  yield put(actions.receiveBinary(address, binary));\n}\n\nexport function *inspectTransaction(txHash, provider) {\n  yield put(actions.init(provider));\n  yield put(actions.inspect(txHash));\n\n  let action = yield take( ({type}) =>\n    type == actions.RECEIVE_TRACE || type == actions.ERROR_WEB3\n  );\n  debug(\"action %o\", action);\n\n  var trace;\n  if (action.type == actions.RECEIVE_TRACE) {\n    trace = action.trace;\n    debug(\"received trace\");\n  } else {\n    return { error: action.error };\n  }\n\n  let {address, binary} = yield take(actions.RECEIVE_CALL);\n  debug(\"received call\");\n\n  return { trace, address, binary };\n}\n\nexport function *obtainBinaries(addresses) {\n  let tasks = yield all(\n    addresses.map( (address) => fork(receiveBinary, address) )\n  );\n\n  debug(\"requesting binaries\");\n  yield all(\n    addresses.map( (address) => put(actions.fetchBinary(address)) )\n  );\n\n  let binaries = [];\n  binaries = yield all(\n    tasks.map(task => join(task))\n  );\n\n  debug(\"binaries %o\", binaries);\n\n  return binaries;\n}\n\nfunction *receiveBinary(address) {\n  let {binary} = yield take((action) => (\n    action.type == actions.RECEIVE_BINARY &&\n    action.address == address\n  ));\n  debug(\"got binary for %s\", address);\n\n  return binary;\n}\n\nexport function* saga() {\n  // wait for web3 init signal\n  let {provider} = yield take(actions.INIT_WEB3);\n  let adapter = new Web3Adapter(provider);\n\n  yield takeEvery(actions.INSPECT, fetchTransactionInfo, adapter);\n  yield takeEvery(actions.FETCH_BINARY, fetchBinary, adapter);\n}\n\nexport default prefixName(\"web3\", saga);\n"] }, _coverageSchema: "332fd63041d2c1bcb487cc26dd0d5f7d97098a6c" },
      coverage = global[gcv] || (global[gcv] = {});if (coverage[path] && coverage[path].hash === hash) {
    return coverage[path];
  }coverageData.hash = hash;return coverage[path] = coverageData;
}();cov_qeobva4y7.s[0]++;Object.defineProperty(exports, "__esModule", { value: true });cov_qeobva4y7.s[1]++;exports.inspectTransaction = inspectTransaction;cov_qeobva4y7.s[2]++;exports.obtainBinaries = obtainBinaries;cov_qeobva4y7.s[3]++;exports.saga = saga;var _debug = (cov_qeobva4y7.s[4]++, __webpack_require__(0));var _debug2 = (cov_qeobva4y7.s[5]++, _interopRequireDefault(_debug));var _effects = (cov_qeobva4y7.s[6]++, __webpack_require__(10));var _helpers = (cov_qeobva4y7.s[7]++, __webpack_require__(6));var _actions = (cov_qeobva4y7.s[8]++, __webpack_require__(71));var actions = (cov_qeobva4y7.s[9]++, _interopRequireWildcard(_actions));var _adapter = (cov_qeobva4y7.s[10]++, __webpack_require__(72));var _adapter2 = (cov_qeobva4y7.s[11]++, _interopRequireDefault(_adapter));function _interopRequireWildcard(obj) {
  cov_qeobva4y7.f[0]++;cov_qeobva4y7.s[12]++;if ((cov_qeobva4y7.b[1][0]++, obj) && (cov_qeobva4y7.b[1][1]++, obj.__esModule)) {
    cov_qeobva4y7.b[0][0]++;cov_qeobva4y7.s[13]++;return obj;
  } else {
    cov_qeobva4y7.b[0][1]++;var newObj = (cov_qeobva4y7.s[14]++, {});cov_qeobva4y7.s[15]++;if (obj != null) {
      cov_qeobva4y7.b[2][0]++;cov_qeobva4y7.s[16]++;for (var key in obj) {
        cov_qeobva4y7.s[17]++;if (Object.prototype.hasOwnProperty.call(obj, key)) {
          cov_qeobva4y7.b[3][0]++;cov_qeobva4y7.s[18]++;newObj[key] = obj[key];
        } else {
          cov_qeobva4y7.b[3][1]++;
        }
      }
    } else {
      cov_qeobva4y7.b[2][1]++;
    }cov_qeobva4y7.s[19]++;newObj.default = obj;cov_qeobva4y7.s[20]++;return newObj;
  }
}function _interopRequireDefault(obj) {
  cov_qeobva4y7.f[1]++;cov_qeobva4y7.s[21]++;return (cov_qeobva4y7.b[5][0]++, obj) && (cov_qeobva4y7.b[5][1]++, obj.__esModule) ? (cov_qeobva4y7.b[4][0]++, obj) : (cov_qeobva4y7.b[4][1]++, { default: obj });
}const debug = (cov_qeobva4y7.s[22]++, (0, _debug2.default)("debugger:web3:sagas"));function* fetchTransactionInfo(adapter, { txHash }) {
  cov_qeobva4y7.f[2]++;cov_qeobva4y7.s[23]++;debug("inspecting transaction");var trace;cov_qeobva4y7.s[24]++;try {
    cov_qeobva4y7.s[25]++;trace = yield (0, _effects.apply)(adapter, adapter.getTrace, [txHash]);
  } catch (e) {
    cov_qeobva4y7.s[26]++;debug("putting error");cov_qeobva4y7.s[27]++;yield (0, _effects.put)(actions.error(e));cov_qeobva4y7.s[28]++;return;
  }cov_qeobva4y7.s[29]++;debug("got trace");cov_qeobva4y7.s[30]++;yield (0, _effects.put)(actions.receiveTrace(trace));let tx = (cov_qeobva4y7.s[31]++, yield (0, _effects.apply)(adapter, adapter.getTransaction, [txHash]));cov_qeobva4y7.s[32]++;if ((cov_qeobva4y7.b[7][0]++, tx.to) && (cov_qeobva4y7.b[7][1]++, tx.to != "0x0")) {
    cov_qeobva4y7.b[6][0]++;cov_qeobva4y7.s[33]++;yield (0, _effects.put)(actions.receiveCall({ address: tx.to }));cov_qeobva4y7.s[34]++;return;
  } else {
    cov_qeobva4y7.b[6][1]++;
  }let receipt = (cov_qeobva4y7.s[35]++, yield (0, _effects.apply)(adapter, adapter.getReceipt, [txHash]));cov_qeobva4y7.s[36]++;if (receipt.contractAddress) {
    cov_qeobva4y7.b[8][0]++;cov_qeobva4y7.s[37]++;yield (0, _effects.put)(actions.receiveCall({ binary: tx.input }));cov_qeobva4y7.s[38]++;return;
  } else {
    cov_qeobva4y7.b[8][1]++;
  }cov_qeobva4y7.s[39]++;throw new Error("Could not find contract associated with transaction. " + "Please make sure you're debugging a transaction that executes a " + "contract function or creates a new contract.");
}function* fetchBinary(adapter, { address }) {
  cov_qeobva4y7.f[3]++;cov_qeobva4y7.s[40]++;debug("fetching binary for %s", address);let binary = (cov_qeobva4y7.s[41]++, yield (0, _effects.apply)(adapter, adapter.getDeployedCode, [address]));cov_qeobva4y7.s[42]++;debug("received binary for %s", address);cov_qeobva4y7.s[43]++;yield (0, _effects.put)(actions.receiveBinary(address, binary));
}function* inspectTransaction(txHash, provider) {
  cov_qeobva4y7.f[4]++;cov_qeobva4y7.s[44]++;yield (0, _effects.put)(actions.init(provider));cov_qeobva4y7.s[45]++;yield (0, _effects.put)(actions.inspect(txHash));let action = (cov_qeobva4y7.s[46]++, yield (0, _effects.take)(({ type }) => {
    cov_qeobva4y7.f[5]++;cov_qeobva4y7.s[47]++;return (cov_qeobva4y7.b[9][0]++, type == actions.RECEIVE_TRACE) || (cov_qeobva4y7.b[9][1]++, type == actions.ERROR_WEB3);
  }));cov_qeobva4y7.s[48]++;debug("action %o", action);var trace;cov_qeobva4y7.s[49]++;if (action.type == actions.RECEIVE_TRACE) {
    cov_qeobva4y7.b[10][0]++;cov_qeobva4y7.s[50]++;trace = action.trace;cov_qeobva4y7.s[51]++;debug("received trace");
  } else {
    cov_qeobva4y7.b[10][1]++;cov_qeobva4y7.s[52]++;return { error: action.error };
  }let { address, binary } = (cov_qeobva4y7.s[53]++, yield (0, _effects.take)(actions.RECEIVE_CALL));cov_qeobva4y7.s[54]++;debug("received call");cov_qeobva4y7.s[55]++;return { trace, address, binary };
}function* obtainBinaries(addresses) {
  cov_qeobva4y7.f[6]++;let tasks = (cov_qeobva4y7.s[56]++, yield (0, _effects.all)(addresses.map(address => {
    cov_qeobva4y7.f[7]++;cov_qeobva4y7.s[57]++;return (0, _effects.fork)(receiveBinary, address);
  })));cov_qeobva4y7.s[58]++;debug("requesting binaries");cov_qeobva4y7.s[59]++;yield (0, _effects.all)(addresses.map(address => {
    cov_qeobva4y7.f[8]++;cov_qeobva4y7.s[60]++;return (0, _effects.put)(actions.fetchBinary(address));
  }));let binaries = (cov_qeobva4y7.s[61]++, []);cov_qeobva4y7.s[62]++;binaries = yield (0, _effects.all)(tasks.map(task => {
    cov_qeobva4y7.f[9]++;cov_qeobva4y7.s[63]++;return (0, _effects.join)(task);
  }));cov_qeobva4y7.s[64]++;debug("binaries %o", binaries);cov_qeobva4y7.s[65]++;return binaries;
}function* receiveBinary(address) {
  cov_qeobva4y7.f[10]++;let { binary } = (cov_qeobva4y7.s[66]++, yield (0, _effects.take)(action => {
    cov_qeobva4y7.f[11]++;cov_qeobva4y7.s[67]++;return (cov_qeobva4y7.b[11][0]++, action.type == actions.RECEIVE_BINARY) && (cov_qeobva4y7.b[11][1]++, action.address == address);
  }));cov_qeobva4y7.s[68]++;debug("got binary for %s", address);cov_qeobva4y7.s[69]++;return binary;
}function* saga() {
  cov_qeobva4y7.f[12]++;let { provider } = (cov_qeobva4y7.s[70]++, yield (0, _effects.take)(actions.INIT_WEB3));let adapter = (cov_qeobva4y7.s[71]++, new _adapter2.default(provider));cov_qeobva4y7.s[72]++;yield (0, _effects.takeEvery)(actions.INSPECT, fetchTransactionInfo, adapter);cov_qeobva4y7.s[73]++;yield (0, _effects.takeEvery)(actions.FETCH_BINARY, fetchBinary, adapter);
}cov_qeobva4y7.s[74]++;exports.default = (0, _helpers.prefixName)("web3", saga);

/***/ }),
/* 71 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var cov_1820yj2utr = function () {
  var path = "/Users/gnidan/src/work/truffle/packages/truffle-debugger/lib/web3/actions/index.js",
      hash = "05a74dc611be52283a52c7930c537384983828ca",
      Function = function () {}.constructor,
      global = new Function('return this')(),
      gcv = "__coverage__",
      coverageData = { path: "/Users/gnidan/src/work/truffle/packages/truffle-debugger/lib/web3/actions/index.js", statementMap: { "0": { start: { line: 3, column: 0 }, end: { line: 5, column: 3 } }, "1": { start: { line: 6, column: 0 }, end: { line: 6, column: 20 } }, "2": { start: { line: 7, column: 0 }, end: { line: 7, column: 26 } }, "3": { start: { line: 8, column: 0 }, end: { line: 8, column: 34 } }, "4": { start: { line: 9, column: 0 }, end: { line: 9, column: 38 } }, "5": { start: { line: 10, column: 0 }, end: { line: 10, column: 36 } }, "6": { start: { line: 11, column: 0 }, end: { line: 11, column: 34 } }, "7": { start: { line: 12, column: 0 }, end: { line: 12, column: 22 } }, "8": { start: { line: 13, column: 18 }, end: { line: 13, column: 49 } }, "9": { start: { line: 15, column: 2 }, end: { line: 18, column: 4 } }, "10": { start: { line: 21, column: 16 }, end: { line: 21, column: 55 } }, "11": { start: { line: 23, column: 2 }, end: { line: 26, column: 4 } }, "12": { start: { line: 29, column: 21 }, end: { line: 29, column: 58 } }, "13": { start: { line: 31, column: 2 }, end: { line: 34, column: 4 } }, "14": { start: { line: 37, column: 23 }, end: { line: 37, column: 64 } }, "15": { start: { line: 39, column: 2 }, end: { line: 42, column: 4 } }, "16": { start: { line: 45, column: 22 }, end: { line: 45, column: 61 } }, "17": { start: { line: 47, column: 2 }, end: { line: 50, column: 4 } }, "18": { start: { line: 53, column: 21 }, end: { line: 53, column: 58 } }, "19": { start: { line: 55, column: 2 }, end: { line: 58, column: 4 } }, "20": { start: { line: 61, column: 19 }, end: { line: 61, column: 52 } }, "21": { start: { line: 63, column: 2 }, end: { line: 66, column: 4 } } }, fnMap: { "0": { name: "init", decl: { start: { line: 14, column: 9 }, end: { line: 14, column: 13 } }, loc: { start: { line: 14, column: 24 }, end: { line: 19, column: 1 } }, line: 14 }, "1": { name: "inspect", decl: { start: { line: 22, column: 9 }, end: { line: 22, column: 16 } }, loc: { start: { line: 22, column: 25 }, end: { line: 27, column: 1 } }, line: 22 }, "2": { name: "fetchBinary", decl: { start: { line: 30, column: 9 }, end: { line: 30, column: 20 } }, loc: { start: { line: 30, column: 30 }, end: { line: 35, column: 1 } }, line: 30 }, "3": { name: "receiveBinary", decl: { start: { line: 38, column: 9 }, end: { line: 38, column: 22 } }, loc: { start: { line: 38, column: 40 }, end: { line: 43, column: 1 } }, line: 38 }, "4": { name: "receiveTrace", decl: { start: { line: 46, column: 9 }, end: { line: 46, column: 21 } }, loc: { start: { line: 46, column: 29 }, end: { line: 51, column: 1 } }, line: 46 }, "5": { name: "receiveCall", decl: { start: { line: 54, column: 9 }, end: { line: 54, column: 20 } }, loc: { start: { line: 54, column: 42 }, end: { line: 59, column: 1 } }, line: 54 }, "6": { name: "error", decl: { start: { line: 62, column: 9 }, end: { line: 62, column: 14 } }, loc: { start: { line: 62, column: 22 }, end: { line: 67, column: 1 } }, line: 62 } }, branchMap: {}, s: { "0": 0, "1": 0, "2": 0, "3": 0, "4": 0, "5": 0, "6": 0, "7": 0, "8": 0, "9": 0, "10": 0, "11": 0, "12": 0, "13": 0, "14": 0, "15": 0, "16": 0, "17": 0, "18": 0, "19": 0, "20": 0, "21": 0 }, f: { "0": 0, "1": 0, "2": 0, "3": 0, "4": 0, "5": 0, "6": 0 }, b: {}, inputSourceMap: { version: 3, sources: ["lib/web3/actions/index.js"], names: ["init", "inspect", "fetchBinary", "receiveBinary", "receiveTrace", "receiveCall", "error", "INIT_WEB3", "provider", "type", "INSPECT", "txHash", "FETCH_BINARY", "address", "RECEIVE_BINARY", "binary", "RECEIVE_TRACE", "trace", "RECEIVE_CALL", "ERROR_WEB3"], mappings: ";;;;;QACgBA,I,GAAAA,I;QAQAC,O,GAAAA,O;QAQAC,W,GAAAA,W;QAQAC,a,GAAAA,a;QAQAC,Y,GAAAA,Y;QAQAC,W,GAAAA,W;QAQAC,K,GAAAA,K;AAjDT,MAAMC,gCAAY,WAAlB;AACA,SAASP,IAAT,CAAcQ,QAAd,EAAwB;AAC7B,SAAO;AACLC,UAAMF,SADD;AAELC;AAFK,GAAP;AAID;;AAEM,MAAME,4BAAU,qBAAhB;AACA,SAAST,OAAT,CAAiBU,MAAjB,EAAyB;AAC9B,SAAO;AACLF,UAAMC,OADD;AAELC;AAFK,GAAP;AAID;;AAEM,MAAMC,sCAAe,cAArB;AACA,SAASV,WAAT,CAAqBW,OAArB,EAA8B;AACnC,SAAO;AACLJ,UAAMG,YADD;AAELC;AAFK,GAAP;AAID;;AAEM,MAAMC,0CAAiB,gBAAvB;AACA,SAASX,aAAT,CAAuBU,OAAvB,EAAgCE,MAAhC,EAAwC;AAC7C,SAAO;AACLN,UAAMK,cADD;AAELD,WAFK,EAEIE;AAFJ,GAAP;AAID;;AAEM,MAAMC,wCAAgB,eAAtB;AACA,SAASZ,YAAT,CAAsBa,KAAtB,EAA6B;AAClC,SAAO;AACLR,UAAMO,aADD;AAELC;AAFK,GAAP;AAID;;AAEM,MAAMC,sCAAe,cAArB;AACA,SAASb,WAAT,CAAqB,EAACQ,OAAD,EAAUE,MAAV,EAArB,EAAwC;AAC7C,SAAO;AACLN,UAAMS,YADD;AAELL,WAFK,EAEIE;AAFJ,GAAP;AAID;;AAEM,MAAMI,kCAAa,YAAnB;AACA,SAASb,KAAT,CAAeA,KAAf,EAAsB;AAC3B,SAAO;AACLG,UAAMU,UADD;AAELb;AAFK,GAAP;AAID", file: "index.js", sourceRoot: "/Users/gnidan/src/work/truffle/packages/truffle-debugger", sourcesContent: ["export const INIT_WEB3 = \"INIT_WEB3\";\nexport function init(provider) {\n  return {\n    type: INIT_WEB3,\n    provider\n  }\n}\n\nexport const INSPECT = \"INSPECT_TRANSACTION\";\nexport function inspect(txHash) {\n  return {\n    type: INSPECT,\n    txHash\n  }\n}\n\nexport const FETCH_BINARY = \"FETCH_BINARY\";\nexport function fetchBinary(address) {\n  return {\n    type: FETCH_BINARY,\n    address\n  };\n}\n\nexport const RECEIVE_BINARY = \"RECEIVE_BINARY\";\nexport function receiveBinary(address, binary) {\n  return {\n    type: RECEIVE_BINARY,\n    address, binary\n  }\n}\n\nexport const RECEIVE_TRACE = \"RECEIVE_TRACE\";\nexport function receiveTrace(trace) {\n  return {\n    type: RECEIVE_TRACE,\n    trace\n  }\n}\n\nexport const RECEIVE_CALL = \"RECEIVE_CALL\";\nexport function receiveCall({address, binary}) {\n  return {\n    type: RECEIVE_CALL,\n    address, binary\n  }\n}\n\nexport const ERROR_WEB3 = \"ERROR_WEB3\";\nexport function error(error) {\n  return {\n    type: ERROR_WEB3,\n    error\n  };\n}\n"] }, _coverageSchema: "332fd63041d2c1bcb487cc26dd0d5f7d97098a6c" },
      coverage = global[gcv] || (global[gcv] = {});if (coverage[path] && coverage[path].hash === hash) {
    return coverage[path];
  }coverageData.hash = hash;return coverage[path] = coverageData;
}();cov_1820yj2utr.s[0]++;Object.defineProperty(exports, "__esModule", { value: true });cov_1820yj2utr.s[1]++;exports.init = init;cov_1820yj2utr.s[2]++;exports.inspect = inspect;cov_1820yj2utr.s[3]++;exports.fetchBinary = fetchBinary;cov_1820yj2utr.s[4]++;exports.receiveBinary = receiveBinary;cov_1820yj2utr.s[5]++;exports.receiveTrace = receiveTrace;cov_1820yj2utr.s[6]++;exports.receiveCall = receiveCall;cov_1820yj2utr.s[7]++;exports.error = error;const INIT_WEB3 = (cov_1820yj2utr.s[8]++, exports.INIT_WEB3 = "INIT_WEB3");function init(provider) {
  cov_1820yj2utr.f[0]++;cov_1820yj2utr.s[9]++;return { type: INIT_WEB3, provider };
}const INSPECT = (cov_1820yj2utr.s[10]++, exports.INSPECT = "INSPECT_TRANSACTION");function inspect(txHash) {
  cov_1820yj2utr.f[1]++;cov_1820yj2utr.s[11]++;return { type: INSPECT, txHash };
}const FETCH_BINARY = (cov_1820yj2utr.s[12]++, exports.FETCH_BINARY = "FETCH_BINARY");function fetchBinary(address) {
  cov_1820yj2utr.f[2]++;cov_1820yj2utr.s[13]++;return { type: FETCH_BINARY, address };
}const RECEIVE_BINARY = (cov_1820yj2utr.s[14]++, exports.RECEIVE_BINARY = "RECEIVE_BINARY");function receiveBinary(address, binary) {
  cov_1820yj2utr.f[3]++;cov_1820yj2utr.s[15]++;return { type: RECEIVE_BINARY, address, binary };
}const RECEIVE_TRACE = (cov_1820yj2utr.s[16]++, exports.RECEIVE_TRACE = "RECEIVE_TRACE");function receiveTrace(trace) {
  cov_1820yj2utr.f[4]++;cov_1820yj2utr.s[17]++;return { type: RECEIVE_TRACE, trace };
}const RECEIVE_CALL = (cov_1820yj2utr.s[18]++, exports.RECEIVE_CALL = "RECEIVE_CALL");function receiveCall({ address, binary }) {
  cov_1820yj2utr.f[5]++;cov_1820yj2utr.s[19]++;return { type: RECEIVE_CALL, address, binary };
}const ERROR_WEB3 = (cov_1820yj2utr.s[20]++, exports.ERROR_WEB3 = "ERROR_WEB3");function error(error) {
  cov_1820yj2utr.f[6]++;cov_1820yj2utr.s[21]++;return { type: ERROR_WEB3, error };
}

/***/ }),
/* 72 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var cov_1g3b2au6c6 = function () {
  var path = "/Users/gnidan/src/work/truffle/packages/truffle-debugger/lib/web3/adapter.js",
      hash = "3c84fdf4ea5d1b72e6e2f7c1f96ba07f4f82b46f",
      Function = function () {}.constructor,
      global = new Function('return this')(),
      gcv = "__coverage__",
      coverageData = { path: "/Users/gnidan/src/work/truffle/packages/truffle-debugger/lib/web3/adapter.js", statementMap: { "0": { start: { line: 3, column: 0 }, end: { line: 5, column: 3 } }, "1": { start: { line: 7, column: 15 }, end: { line: 7, column: 55 } }, "2": { start: { line: 9, column: 16 }, end: { line: 9, column: 48 } }, "3": { start: { line: 11, column: 25 }, end: { line: 11, column: 74 } }, "4": { start: { line: 13, column: 25 }, end: { line: 13, column: 67 } }, "5": { start: { line: 15, column: 13 }, end: { line: 15, column: 29 } }, "6": { start: { line: 17, column: 14 }, end: { line: 17, column: 44 } }, "7": { start: { line: 19, column: 11 }, end: { line: 19, column: 26 } }, "8": { start: { line: 21, column: 12 }, end: { line: 21, column: 40 } }, "9": { start: { line: 23, column: 39 }, end: { line: 23, column: 93 } }, "10": { start: { line: 25, column: 14 }, end: { line: 25, column: 59 } }, "11": { start: { line: 29, column: 4 }, end: { line: 29, column: 44 } }, "12": { start: { line: 33, column: 16 }, end: { line: 33, column: 20 } }, "13": { start: { line: 35, column: 4 }, end: { line: 49, column: 9 } }, "14": { start: { line: 36, column: 6 }, end: { line: 48, column: 9 } }, "15": { start: { line: 37, column: 8 }, end: { line: 47, column: 11 } }, "16": { start: { line: 43, column: 10 }, end: { line: 43, column: 38 } }, "17": { start: { line: 43, column: 19 }, end: { line: 43, column: 38 } }, "18": { start: { line: 44, column: 10 }, end: { line: 44, column: 75 } }, "19": { start: { line: 44, column: 28 }, end: { line: 44, column: 75 } }, "20": { start: { line: 45, column: 10 }, end: { line: 45, column: 38 } }, "21": { start: { line: 46, column: 10 }, end: { line: 46, column: 43 } }, "22": { start: { line: 53, column: 17 }, end: { line: 53, column: 21 } }, "23": { start: { line: 55, column: 4 }, end: { line: 63, column: 9 } }, "24": { start: { line: 56, column: 6 }, end: { line: 62, column: 9 } }, "25": { start: { line: 57, column: 8 }, end: { line: 61, column: 11 } }, "26": { start: { line: 58, column: 10 }, end: { line: 58, column: 38 } }, "27": { start: { line: 58, column: 19 }, end: { line: 58, column: 38 } }, "28": { start: { line: 60, column: 10 }, end: { line: 60, column: 28 } }, "29": { start: { line: 67, column: 17 }, end: { line: 67, column: 21 } }, "30": { start: { line: 69, column: 4 }, end: { line: 77, column: 9 } }, "31": { start: { line: 70, column: 6 }, end: { line: 76, column: 9 } }, "32": { start: { line: 71, column: 8 }, end: { line: 75, column: 11 } }, "33": { start: { line: 72, column: 10 }, end: { line: 72, column: 38 } }, "34": { start: { line: 72, column: 19 }, end: { line: 72, column: 38 } }, "35": { start: { line: 74, column: 10 }, end: { line: 74, column: 33 } }, "36": { start: { line: 86, column: 17 }, end: { line: 86, column: 21 } }, "37": { start: { line: 88, column: 4 }, end: { line: 98, column: 9 } }, "38": { start: { line: 89, column: 6 }, end: { line: 89, column: 53 } }, "39": { start: { line: 90, column: 6 }, end: { line: 97, column: 9 } }, "40": { start: { line: 91, column: 8 }, end: { line: 96, column: 11 } }, "41": { start: { line: 92, column: 10 }, end: { line: 92, column: 43 } }, "42": { start: { line: 92, column: 19 }, end: { line: 92, column: 43 } }, "43": { start: { line: 93, column: 10 }, end: { line: 93, column: 38 } }, "44": { start: { line: 93, column: 19 }, end: { line: 93, column: 38 } }, "45": { start: { line: 94, column: 10 }, end: { line: 94, column: 53 } }, "46": { start: { line: 95, column: 10 }, end: { line: 95, column: 33 } }, "47": { start: { line: 101, column: 0 }, end: { line: 101, column: 30 } } }, fnMap: { "0": { name: "_interopRequireDefault", decl: { start: { line: 23, column: 9 }, end: { line: 23, column: 31 } }, loc: { start: { line: 23, column: 37 }, end: { line: 23, column: 95 } }, line: 23 }, "1": { name: "(anonymous_1)", decl: { start: { line: 28, column: 2 }, end: { line: 28, column: 3 } }, loc: { start: { line: 28, column: 24 }, end: { line: 30, column: 3 } }, line: 28 }, "2": { name: "(anonymous_2)", decl: { start: { line: 32, column: 2 }, end: { line: 32, column: 3 } }, loc: { start: { line: 32, column: 19 }, end: { line: 50, column: 3 } }, line: 32 }, "3": { name: "(anonymous_3)", decl: { start: { line: 35, column: 43 }, end: { line: 35, column: 44 } }, loc: { start: { line: 35, column: 56 }, end: { line: 49, column: 5 } }, line: 35 }, "4": { name: "(anonymous_4)", decl: { start: { line: 36, column: 35 }, end: { line: 36, column: 36 } }, loc: { start: { line: 36, column: 61 }, end: { line: 48, column: 7 } }, line: 36 }, "5": { name: "(anonymous_5)", decl: { start: { line: 42, column: 11 }, end: { line: 42, column: 12 } }, loc: { start: { line: 42, column: 34 }, end: { line: 47, column: 9 } }, line: 42 }, "6": { name: "(anonymous_6)", decl: { start: { line: 52, column: 2 }, end: { line: 52, column: 3 } }, loc: { start: { line: 52, column: 25 }, end: { line: 64, column: 3 } }, line: 52 }, "7": { name: "(anonymous_7)", decl: { start: { line: 55, column: 43 }, end: { line: 55, column: 44 } }, loc: { start: { line: 55, column: 56 }, end: { line: 63, column: 5 } }, line: 55 }, "8": { name: "(anonymous_8)", decl: { start: { line: 56, column: 35 }, end: { line: 56, column: 36 } }, loc: { start: { line: 56, column: 61 }, end: { line: 62, column: 7 } }, line: 56 }, "9": { name: "(anonymous_9)", decl: { start: { line: 57, column: 47 }, end: { line: 57, column: 48 } }, loc: { start: { line: 57, column: 66 }, end: { line: 61, column: 9 } }, line: 57 }, "10": { name: "(anonymous_10)", decl: { start: { line: 66, column: 2 }, end: { line: 66, column: 3 } }, loc: { start: { line: 66, column: 21 }, end: { line: 78, column: 3 } }, line: 66 }, "11": { name: "(anonymous_11)", decl: { start: { line: 69, column: 43 }, end: { line: 69, column: 44 } }, loc: { start: { line: 69, column: 56 }, end: { line: 77, column: 5 } }, line: 69 }, "12": { name: "(anonymous_12)", decl: { start: { line: 70, column: 35 }, end: { line: 70, column: 36 } }, loc: { start: { line: 70, column: 61 }, end: { line: 76, column: 7 } }, line: 70 }, "13": { name: "(anonymous_13)", decl: { start: { line: 71, column: 54 }, end: { line: 71, column: 55 } }, loc: { start: { line: 71, column: 78 }, end: { line: 75, column: 9 } }, line: 71 }, "14": { name: "(anonymous_14)", decl: { start: { line: 85, column: 2 }, end: { line: 85, column: 3 } }, loc: { start: { line: 85, column: 27 }, end: { line: 99, column: 3 } }, line: 85 }, "15": { name: "(anonymous_15)", decl: { start: { line: 88, column: 43 }, end: { line: 88, column: 44 } }, loc: { start: { line: 88, column: 56 }, end: { line: 98, column: 5 } }, line: 88 }, "16": { name: "(anonymous_16)", decl: { start: { line: 90, column: 35 }, end: { line: 90, column: 36 } }, loc: { start: { line: 90, column: 61 }, end: { line: 97, column: 7 } }, line: 90 }, "17": { name: "(anonymous_17)", decl: { start: { line: 91, column: 41 }, end: { line: 91, column: 42 } }, loc: { start: { line: 91, column: 72 }, end: { line: 96, column: 9 } }, line: 91 } }, branchMap: { "0": { loc: { start: { line: 23, column: 46 }, end: { line: 23, column: 92 } }, type: "cond-expr", locations: [{ start: { line: 23, column: 70 }, end: { line: 23, column: 73 } }, { start: { line: 23, column: 76 }, end: { line: 23, column: 92 } }], line: 23 }, "1": { loc: { start: { line: 23, column: 46 }, end: { line: 23, column: 67 } }, type: "binary-expr", locations: [{ start: { line: 23, column: 46 }, end: { line: 23, column: 49 } }, { start: { line: 23, column: 53 }, end: { line: 23, column: 67 } }], line: 23 }, "2": { loc: { start: { line: 43, column: 10 }, end: { line: 43, column: 38 } }, type: "if", locations: [{ start: { line: 43, column: 10 }, end: { line: 43, column: 38 } }, { start: { line: 43, column: 10 }, end: { line: 43, column: 38 } }], line: 43 }, "3": { loc: { start: { line: 44, column: 10 }, end: { line: 44, column: 75 } }, type: "if", locations: [{ start: { line: 44, column: 10 }, end: { line: 44, column: 75 } }, { start: { line: 44, column: 10 }, end: { line: 44, column: 75 } }], line: 44 }, "4": { loc: { start: { line: 58, column: 10 }, end: { line: 58, column: 38 } }, type: "if", locations: [{ start: { line: 58, column: 10 }, end: { line: 58, column: 38 } }, { start: { line: 58, column: 10 }, end: { line: 58, column: 38 } }], line: 58 }, "5": { loc: { start: { line: 72, column: 10 }, end: { line: 72, column: 38 } }, type: "if", locations: [{ start: { line: 72, column: 10 }, end: { line: 72, column: 38 } }, { start: { line: 72, column: 10 }, end: { line: 72, column: 38 } }], line: 72 }, "6": { loc: { start: { line: 92, column: 10 }, end: { line: 92, column: 43 } }, type: "if", locations: [{ start: { line: 92, column: 10 }, end: { line: 92, column: 43 } }, { start: { line: 92, column: 10 }, end: { line: 92, column: 43 } }], line: 92 }, "7": { loc: { start: { line: 93, column: 10 }, end: { line: 93, column: 38 } }, type: "if", locations: [{ start: { line: 93, column: 10 }, end: { line: 93, column: 38 } }, { start: { line: 93, column: 10 }, end: { line: 93, column: 38 } }], line: 93 } }, s: { "0": 0, "1": 0, "2": 0, "3": 0, "4": 0, "5": 0, "6": 0, "7": 0, "8": 0, "9": 0, "10": 0, "11": 0, "12": 0, "13": 0, "14": 0, "15": 0, "16": 0, "17": 0, "18": 0, "19": 0, "20": 0, "21": 0, "22": 0, "23": 0, "24": 0, "25": 0, "26": 0, "27": 0, "28": 0, "29": 0, "30": 0, "31": 0, "32": 0, "33": 0, "34": 0, "35": 0, "36": 0, "37": 0, "38": 0, "39": 0, "40": 0, "41": 0, "42": 0, "43": 0, "44": 0, "45": 0, "46": 0, "47": 0 }, f: { "0": 0, "1": 0, "2": 0, "3": 0, "4": 0, "5": 0, "6": 0, "7": 0, "8": 0, "9": 0, "10": 0, "11": 0, "12": 0, "13": 0, "14": 0, "15": 0, "16": 0, "17": 0 }, b: { "0": [0, 0], "1": [0, 0], "2": [0, 0], "3": [0, 0], "4": [0, 0], "5": [0, 0], "6": [0, 0], "7": [0, 0] }, inputSourceMap: { version: 3, sources: ["lib/web3/adapter.js"], names: ["debug", "Web3Adapter", "constructor", "provider", "web3", "Web3", "getTrace", "txHash", "accept", "reject", "currentProvider", "send", "jsonrpc", "method", "params", "id", "Date", "getTime", "err", "result", "error", "Error", "message", "structLogs", "getTransaction", "eth", "tx", "getReceipt", "getTransactionReceipt", "receipt", "getDeployedCode", "address", "getCode", "deployedBinary"], mappings: ";;;;;;;;;;;;;;AAAA;;;;AAEA;;;;;;AAEA,MAAMA,QAAQ,qBAAY,uBAAZ,CAAd;;AAEe,MAAMC,WAAN,CAAkB;AAC/BC,cAAYC,QAAZ,EAAsB;AACpB,SAAKC,IAAL,GAAY,IAAIC,aAAJ,CAASF,QAAT,CAAZ;AACD;;AAEKG,UAAN,CAAeC,MAAf,EAAuB;AAAA;;AAAA;AACrB,aAAO,sBAAa,UAACC,MAAD,EAASC,MAAT,EAAoB;AACtC,cAAKL,IAAL,CAAUM,eAAV,CAA0BC,IAA1B,CAA+B;AAC7BC,mBAAS,KADoB;AAE7BC,kBAAQ,wBAFqB;AAG7BC,kBAAQ,CAACP,MAAD,EAAS,EAAT,CAHqB;AAI7BQ,cAAI,IAAIC,IAAJ,GAAWC,OAAX;AAJyB,SAA/B,EAKG,UAACC,GAAD,EAAMC,MAAN,EAAiB;AAClB,cAAID,GAAJ,EAAS,OAAOT,OAAOS,GAAP,CAAP;AACT,cAAIC,OAAOC,KAAX,EAAkB,OAAOX,OAAO,IAAIY,KAAJ,CAAUF,OAAOC,KAAP,CAAaE,OAAvB,CAAP,CAAP;AAClBtB,gBAAM,YAAN,EAAoBmB,MAApB;AACAX,iBAAOW,OAAOA,MAAP,CAAcI,UAArB;AACD,SAVD;AAWD,OAZM,CAAP;AADqB;AActB;;AAEKC,gBAAN,CAAqBjB,MAArB,EAA6B;AAAA;;AAAA;AAC3B,aAAO,sBAAa,UAACC,MAAD,EAASC,MAAT,EAAoB;AACtC,eAAKL,IAAL,CAAUqB,GAAV,CAAcD,cAAd,CAA6BjB,MAA7B,EAAqC,UAACW,GAAD,EAAMQ,EAAN,EAAa;AAChD,cAAIR,GAAJ,EAAS,OAAOT,OAAOS,GAAP,CAAP;;AAET,iBAAOV,OAAOkB,EAAP,CAAP;AACD,SAJD;AAKD,OANM,CAAP;AAD2B;AAQ5B;;AAEKC,YAAN,CAAiBpB,MAAjB,EAAyB;AAAA;;AAAA;AACvB,aAAO,sBAAa,UAACC,MAAD,EAASC,MAAT,EAAoB;AACtC,eAAKL,IAAL,CAAUqB,GAAV,CAAcG,qBAAd,CAAoCrB,MAApC,EAA4C,UAACW,GAAD,EAAMW,OAAN,EAAkB;AAC5D,cAAIX,GAAJ,EAAS,OAAOT,OAAOS,GAAP,CAAP;;AAET,iBAAOV,OAAOqB,OAAP,CAAP;AACD,SAJD;AAKD,OANM,CAAP;AADuB;AAQxB;;AAED;;;;;AAKMC,iBAAN,CAAsBC,OAAtB,EAA+B;AAAA;;AAAA;AAC7B/B,YAAM,8BAAN,EAAsC+B,OAAtC;AACA,aAAO,sBAAY,UAACvB,MAAD,EAASC,MAAT,EAAoB;AACrC,eAAKL,IAAL,CAAUqB,GAAV,CAAcO,OAAd,CAAsBD,OAAtB,EAA+B,UAACb,GAAD,EAAMe,cAAN,EAAyB;AACtD,cAAIf,GAAJ,EAASlB,MAAM,WAAN,EAAmBkB,GAAnB;AACT,cAAIA,GAAJ,EAAS,OAAOT,OAAOS,GAAP,CAAP;AACTlB,gBAAM,0BAAN,EAAkC+B,OAAlC;AACAvB,iBAAOyB,cAAP;AACD,SALD;AAMD,OAPM,CAAP;AAF6B;AAU9B;AAxD8B;kBAAZhC,W", file: "adapter.js", sourceRoot: "/Users/gnidan/src/work/truffle/packages/truffle-debugger", sourcesContent: ["import debugModule from \"debug\";\n\nimport Web3 from \"web3\";\n\nconst debug = debugModule(\"debugger:web3:adapter\");\n\nexport default class Web3Adapter {\n  constructor(provider) {\n    this.web3 = new Web3(provider);\n  }\n\n  async getTrace(txHash) {\n    return new Promise( (accept, reject) => {\n      this.web3.currentProvider.send({\n        jsonrpc: \"2.0\",\n        method: \"debug_traceTransaction\",\n        params: [txHash, {}],\n        id: new Date().getTime()\n      }, (err, result) => {\n        if (err) return reject(err);\n        if (result.error) return reject(new Error(result.error.message));\n        debug(\"result: %o\", result);\n        accept(result.result.structLogs);\n      });\n    });\n  };\n\n  async getTransaction(txHash) {\n    return new Promise( (accept, reject) => {\n      this.web3.eth.getTransaction(txHash, (err, tx) => {\n        if (err) return reject(err);\n\n        return accept(tx);\n      });\n    });\n  };\n\n  async getReceipt(txHash) {\n    return new Promise( (accept, reject) => {\n      this.web3.eth.getTransactionReceipt(txHash, (err, receipt) => {\n        if (err) return reject(err);\n\n        return accept(receipt);\n      });\n    });\n  };\n\n  /**\n   * getDeployedCode - get the deployed code for an address from the client\n   * @param  {String} address\n   * @return {String}         deployedBinary\n   */\n  async getDeployedCode(address) {\n    debug(\"getting deployed code for %s\", address);\n    return new Promise((accept, reject) => {\n      this.web3.eth.getCode(address, (err, deployedBinary) => {\n        if (err) debug(\"error: %o\", err);\n        if (err) return reject(err);\n        debug(\"got deployed code for %s\", address);\n        accept(deployedBinary);\n      });\n    });\n  };\n}\n"] }, _coverageSchema: "332fd63041d2c1bcb487cc26dd0d5f7d97098a6c" },
      coverage = global[gcv] || (global[gcv] = {});if (coverage[path] && coverage[path].hash === hash) {
    return coverage[path];
  }coverageData.hash = hash;return coverage[path] = coverageData;
}();cov_1g3b2au6c6.s[0]++;Object.defineProperty(exports, "__esModule", { value: true });var _promise = (cov_1g3b2au6c6.s[1]++, __webpack_require__(23));var _promise2 = (cov_1g3b2au6c6.s[2]++, _interopRequireDefault(_promise));var _asyncToGenerator2 = (cov_1g3b2au6c6.s[3]++, __webpack_require__(7));var _asyncToGenerator3 = (cov_1g3b2au6c6.s[4]++, _interopRequireDefault(_asyncToGenerator2));var _debug = (cov_1g3b2au6c6.s[5]++, __webpack_require__(0));var _debug2 = (cov_1g3b2au6c6.s[6]++, _interopRequireDefault(_debug));var _web = (cov_1g3b2au6c6.s[7]++, __webpack_require__(8));var _web2 = (cov_1g3b2au6c6.s[8]++, _interopRequireDefault(_web));function _interopRequireDefault(obj) {
  cov_1g3b2au6c6.f[0]++;cov_1g3b2au6c6.s[9]++;return (cov_1g3b2au6c6.b[1][0]++, obj) && (cov_1g3b2au6c6.b[1][1]++, obj.__esModule) ? (cov_1g3b2au6c6.b[0][0]++, obj) : (cov_1g3b2au6c6.b[0][1]++, { default: obj });
}const debug = (cov_1g3b2au6c6.s[10]++, (0, _debug2.default)("debugger:web3:adapter"));class Web3Adapter {
  constructor(provider) {
    cov_1g3b2au6c6.f[1]++;cov_1g3b2au6c6.s[11]++;this.web3 = new _web2.default(provider);
  }getTrace(txHash) {
    cov_1g3b2au6c6.f[2]++;var _this = (cov_1g3b2au6c6.s[12]++, this);cov_1g3b2au6c6.s[13]++;return (0, _asyncToGenerator3.default)(function* () {
      cov_1g3b2au6c6.f[3]++;cov_1g3b2au6c6.s[14]++;return new _promise2.default(function (accept, reject) {
        cov_1g3b2au6c6.f[4]++;cov_1g3b2au6c6.s[15]++;_this.web3.currentProvider.send({ jsonrpc: "2.0", method: "debug_traceTransaction", params: [txHash, {}], id: new Date().getTime() }, function (err, result) {
          cov_1g3b2au6c6.f[5]++;cov_1g3b2au6c6.s[16]++;if (err) {
            cov_1g3b2au6c6.b[2][0]++;cov_1g3b2au6c6.s[17]++;return reject(err);
          } else {
            cov_1g3b2au6c6.b[2][1]++;
          }cov_1g3b2au6c6.s[18]++;if (result.error) {
            cov_1g3b2au6c6.b[3][0]++;cov_1g3b2au6c6.s[19]++;return reject(new Error(result.error.message));
          } else {
            cov_1g3b2au6c6.b[3][1]++;
          }cov_1g3b2au6c6.s[20]++;debug("result: %o", result);cov_1g3b2au6c6.s[21]++;accept(result.result.structLogs);
        });
      });
    })();
  }getTransaction(txHash) {
    cov_1g3b2au6c6.f[6]++;var _this2 = (cov_1g3b2au6c6.s[22]++, this);cov_1g3b2au6c6.s[23]++;return (0, _asyncToGenerator3.default)(function* () {
      cov_1g3b2au6c6.f[7]++;cov_1g3b2au6c6.s[24]++;return new _promise2.default(function (accept, reject) {
        cov_1g3b2au6c6.f[8]++;cov_1g3b2au6c6.s[25]++;_this2.web3.eth.getTransaction(txHash, function (err, tx) {
          cov_1g3b2au6c6.f[9]++;cov_1g3b2au6c6.s[26]++;if (err) {
            cov_1g3b2au6c6.b[4][0]++;cov_1g3b2au6c6.s[27]++;return reject(err);
          } else {
            cov_1g3b2au6c6.b[4][1]++;
          }cov_1g3b2au6c6.s[28]++;return accept(tx);
        });
      });
    })();
  }getReceipt(txHash) {
    cov_1g3b2au6c6.f[10]++;var _this3 = (cov_1g3b2au6c6.s[29]++, this);cov_1g3b2au6c6.s[30]++;return (0, _asyncToGenerator3.default)(function* () {
      cov_1g3b2au6c6.f[11]++;cov_1g3b2au6c6.s[31]++;return new _promise2.default(function (accept, reject) {
        cov_1g3b2au6c6.f[12]++;cov_1g3b2au6c6.s[32]++;_this3.web3.eth.getTransactionReceipt(txHash, function (err, receipt) {
          cov_1g3b2au6c6.f[13]++;cov_1g3b2au6c6.s[33]++;if (err) {
            cov_1g3b2au6c6.b[5][0]++;cov_1g3b2au6c6.s[34]++;return reject(err);
          } else {
            cov_1g3b2au6c6.b[5][1]++;
          }cov_1g3b2au6c6.s[35]++;return accept(receipt);
        });
      });
    })();
  }getDeployedCode(address) {
    cov_1g3b2au6c6.f[14]++;var _this4 = (cov_1g3b2au6c6.s[36]++, this);cov_1g3b2au6c6.s[37]++;return (0, _asyncToGenerator3.default)(function* () {
      cov_1g3b2au6c6.f[15]++;cov_1g3b2au6c6.s[38]++;debug("getting deployed code for %s", address);cov_1g3b2au6c6.s[39]++;return new _promise2.default(function (accept, reject) {
        cov_1g3b2au6c6.f[16]++;cov_1g3b2au6c6.s[40]++;_this4.web3.eth.getCode(address, function (err, deployedBinary) {
          cov_1g3b2au6c6.f[17]++;cov_1g3b2au6c6.s[41]++;if (err) {
            cov_1g3b2au6c6.b[6][0]++;cov_1g3b2au6c6.s[42]++;debug("error: %o", err);
          } else {
            cov_1g3b2au6c6.b[6][1]++;
          }cov_1g3b2au6c6.s[43]++;if (err) {
            cov_1g3b2au6c6.b[7][0]++;cov_1g3b2au6c6.s[44]++;return reject(err);
          } else {
            cov_1g3b2au6c6.b[7][1]++;
          }cov_1g3b2au6c6.s[45]++;debug("got deployed code for %s", address);cov_1g3b2au6c6.s[46]++;accept(deployedBinary);
        });
      });
    })();
  }
}cov_1g3b2au6c6.s[47]++;exports.default = Web3Adapter;

/***/ }),
/* 73 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var cov_1tkg2zem3h = function () {
  var path = "/Users/gnidan/src/work/truffle/packages/truffle-debugger/lib/session/reducers.js",
      hash = "181f0006830707aec135f24389a2e10d5fefd2fe",
      Function = function () {}.constructor,
      global = new Function('return this')(),
      gcv = "__coverage__",
      coverageData = { path: "/Users/gnidan/src/work/truffle/packages/truffle-debugger/lib/session/reducers.js", statementMap: { "0": { start: { line: 3, column: 0 }, end: { line: 5, column: 3 } }, "1": { start: { line: 6, column: 0 }, end: { line: 6, column: 80 } }, "2": { start: { line: 7, column: 0 }, end: { line: 7, column: 26 } }, "3": { start: { line: 9, column: 13 }, end: { line: 9, column: 29 } }, "4": { start: { line: 11, column: 16 }, end: { line: 11, column: 44 } }, "5": { start: { line: 13, column: 17 }, end: { line: 13, column: 50 } }, "6": { start: { line: 15, column: 17 }, end: { line: 15, column: 44 } }, "7": { start: { line: 17, column: 17 }, end: { line: 17, column: 51 } }, "8": { start: { line: 19, column: 17 }, end: { line: 19, column: 49 } }, "9": { start: { line: 21, column: 17 }, end: { line: 21, column: 51 } }, "10": { start: { line: 23, column: 17 }, end: { line: 23, column: 46 } }, "11": { start: { line: 25, column: 17 }, end: { line: 25, column: 51 } }, "12": { start: { line: 27, column: 17 }, end: { line: 27, column: 51 } }, "13": { start: { line: 29, column: 18 }, end: { line: 29, column: 52 } }, "14": { start: { line: 31, column: 15 }, end: { line: 31, column: 35 } }, "15": { start: { line: 33, column: 14 }, end: { line: 33, column: 47 } }, "16": { start: { line: 35, column: 40 }, end: { line: 35, column: 267 } }, "17": { start: { line: 35, column: 69 }, end: { line: 35, column: 80 } }, "18": { start: { line: 35, column: 103 }, end: { line: 35, column: 105 } }, "19": { start: { line: 35, column: 107 }, end: { line: 35, column: 228 } }, "20": { start: { line: 35, column: 126 }, end: { line: 35, column: 226 } }, "21": { start: { line: 35, column: 149 }, end: { line: 35, column: 224 } }, "22": { start: { line: 35, column: 201 }, end: { line: 35, column: 224 } }, "23": { start: { line: 35, column: 229 }, end: { line: 35, column: 250 } }, "24": { start: { line: 35, column: 251 }, end: { line: 35, column: 265 } }, "25": { start: { line: 37, column: 39 }, end: { line: 37, column: 93 } }, "26": { start: { line: 39, column: 16 }, end: { line: 39, column: 43 } }, "27": { start: { line: 40, column: 15 }, end: { line: 40, column: 40 } }, "28": { start: { line: 41, column: 14 }, end: { line: 41, column: 37 } }, "29": { start: { line: 42, column: 17 }, end: { line: 42, column: 46 } }, "30": { start: { line: 45, column: 2 }, end: { line: 57, column: 3 } }, "31": { start: { line: 47, column: 6 }, end: { line: 47, column: 20 } }, "32": { start: { line: 50, column: 6 }, end: { line: 50, column: 37 } }, "33": { start: { line: 53, column: 6 }, end: { line: 53, column: 22 } }, "34": { start: { line: 56, column: 6 }, end: { line: 56, column: 19 } }, "35": { start: { line: 60, column: 20 }, end: { line: 67, column: 2 } }, "36": { start: { line: 69, column: 0 }, end: { line: 69, column: 30 } } }, fnMap: { "0": { name: "_interopRequireWildcard", decl: { start: { line: 35, column: 9 }, end: { line: 35, column: 32 } }, loc: { start: { line: 35, column: 38 }, end: { line: 35, column: 269 } }, line: 35 }, "1": { name: "_interopRequireDefault", decl: { start: { line: 37, column: 9 }, end: { line: 37, column: 31 } }, loc: { start: { line: 37, column: 37 }, end: { line: 37, column: 95 } }, line: 37 }, "2": { name: "session", decl: { start: { line: 44, column: 9 }, end: { line: 44, column: 16 } }, loc: { start: { line: 44, column: 42 }, end: { line: 58, column: 1 } }, line: 44 } }, branchMap: { "0": { loc: { start: { line: 35, column: 40 }, end: { line: 35, column: 267 } }, type: "if", locations: [{ start: { line: 35, column: 40 }, end: { line: 35, column: 267 } }, { start: { line: 35, column: 40 }, end: { line: 35, column: 267 } }], line: 35 }, "1": { loc: { start: { line: 35, column: 44 }, end: { line: 35, column: 65 } }, type: "binary-expr", locations: [{ start: { line: 35, column: 44 }, end: { line: 35, column: 47 } }, { start: { line: 35, column: 51 }, end: { line: 35, column: 65 } }], line: 35 }, "2": { loc: { start: { line: 35, column: 107 }, end: { line: 35, column: 228 } }, type: "if", locations: [{ start: { line: 35, column: 107 }, end: { line: 35, column: 228 } }, { start: { line: 35, column: 107 }, end: { line: 35, column: 228 } }], line: 35 }, "3": { loc: { start: { line: 35, column: 149 }, end: { line: 35, column: 224 } }, type: "if", locations: [{ start: { line: 35, column: 149 }, end: { line: 35, column: 224 } }, { start: { line: 35, column: 149 }, end: { line: 35, column: 224 } }], line: 35 }, "4": { loc: { start: { line: 37, column: 46 }, end: { line: 37, column: 92 } }, type: "cond-expr", locations: [{ start: { line: 37, column: 70 }, end: { line: 37, column: 73 } }, { start: { line: 37, column: 76 }, end: { line: 37, column: 92 } }], line: 37 }, "5": { loc: { start: { line: 37, column: 46 }, end: { line: 37, column: 67 } }, type: "binary-expr", locations: [{ start: { line: 37, column: 46 }, end: { line: 37, column: 49 } }, { start: { line: 37, column: 53 }, end: { line: 37, column: 67 } }], line: 37 }, "6": { loc: { start: { line: 44, column: 17 }, end: { line: 44, column: 32 } }, type: "default-arg", locations: [{ start: { line: 44, column: 25 }, end: { line: 44, column: 32 } }], line: 44 }, "7": { loc: { start: { line: 45, column: 2 }, end: { line: 57, column: 3 } }, type: "switch", locations: [{ start: { line: 46, column: 4 }, end: { line: 47, column: 20 } }, { start: { line: 49, column: 4 }, end: { line: 50, column: 37 } }, { start: { line: 52, column: 4 }, end: { line: 53, column: 22 } }, { start: { line: 55, column: 4 }, end: { line: 56, column: 19 } }], line: 45 } }, s: { "0": 0, "1": 0, "2": 0, "3": 0, "4": 0, "5": 0, "6": 0, "7": 0, "8": 0, "9": 0, "10": 0, "11": 0, "12": 0, "13": 0, "14": 0, "15": 0, "16": 0, "17": 0, "18": 0, "19": 0, "20": 0, "21": 0, "22": 0, "23": 0, "24": 0, "25": 0, "26": 0, "27": 0, "28": 0, "29": 0, "30": 0, "31": 0, "32": 0, "33": 0, "34": 0, "35": 0, "36": 0 }, f: { "0": 0, "1": 0, "2": 0 }, b: { "0": [0, 0], "1": [0, 0], "2": [0, 0], "3": [0, 0], "4": [0, 0], "5": [0, 0], "6": [0], "7": [0, 0, 0, 0] }, inputSourceMap: { version: 3, sources: ["lib/session/reducers.js"], names: ["session", "actions", "WAITING", "ACTIVE", "ERROR", "FINISHED", "state", "action", "type", "READY", "error", "FINISH", "reduceState", "data", "evm", "solidity", "trace", "controller"], mappings: ";;;;;;QAegBA,O,GAAAA,O;;AAfhB;;AAEA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AAEA;;IAAYC,O;;;;;;AAEL,MAAMC,4BAAU,SAAhB;AACA,MAAMC,0BAAS,QAAf;AACA,MAAMC,wBAAQ,OAAd;AACA,MAAMC,8BAAW,UAAjB;;AAEA,SAASL,OAAT,CAAiBM,QAAQJ,OAAzB,EAAkCK,MAAlC,EAA0C;AAC/C,UAAQA,OAAOC,IAAf;AACE,SAAKP,QAAQQ,KAAb;AACE,aAAON,MAAP;;AAEF,SAAKF,QAAQG,KAAb;AACE,aAAO,EAAEM,OAAOH,OAAOG,KAAhB,EAAP;;AAEF,SAAKT,QAAQU,MAAb;AACE,aAAON,QAAP;;AAEF;AACE,aAAOC,KAAP;AAXJ;AAaD;;AAED,MAAMM,cAAc,4BAAgB;AAClCZ,SADkC;AAElCa,0BAFkC;AAGlCC,yBAHkC;AAIlCC,8BAJkC;AAKlCC,2BALkC;AAMlCC;AANkC,CAAhB,CAApB;;kBASeL,W", file: "reducers.js", sourceRoot: "/Users/gnidan/src/work/truffle/packages/truffle-debugger", sourcesContent: ["import { combineReducers } from \"redux\";\n\nimport data from \"lib/data/reducers\";\nimport evm from \"lib/evm/reducers\";\nimport solidity from \"lib/solidity/reducers\";\nimport trace from \"lib/trace/reducers\";\nimport controller from \"lib/controller/reducers\";\n\nimport * as actions from \"./actions\";\n\nexport const WAITING = \"WAITING\";\nexport const ACTIVE = \"ACTIVE\";\nexport const ERROR = \"ERROR\";\nexport const FINISHED = \"FINISHED\";\n\nexport function session(state = WAITING, action) {\n  switch (action.type) {\n    case actions.READY:\n      return ACTIVE;\n\n    case actions.ERROR:\n      return { error: action.error };\n\n    case actions.FINISH:\n      return FINISHED;\n\n    default:\n      return state;\n  }\n}\n\nconst reduceState = combineReducers({\n  session,\n  data,\n  evm,\n  solidity,\n  trace,\n  controller\n});\n\nexport default reduceState;\n"] }, _coverageSchema: "332fd63041d2c1bcb487cc26dd0d5f7d97098a6c" },
      coverage = global[gcv] || (global[gcv] = {});if (coverage[path] && coverage[path].hash === hash) {
    return coverage[path];
  }coverageData.hash = hash;return coverage[path] = coverageData;
}();cov_1tkg2zem3h.s[0]++;Object.defineProperty(exports, "__esModule", { value: true });cov_1tkg2zem3h.s[1]++;exports.FINISHED = exports.ERROR = exports.ACTIVE = exports.WAITING = undefined;cov_1tkg2zem3h.s[2]++;exports.session = session;var _redux = (cov_1tkg2zem3h.s[3]++, __webpack_require__(14));var _reducers = (cov_1tkg2zem3h.s[4]++, __webpack_require__(74));var _reducers2 = (cov_1tkg2zem3h.s[5]++, _interopRequireDefault(_reducers));var _reducers3 = (cov_1tkg2zem3h.s[6]++, __webpack_require__(75));var _reducers4 = (cov_1tkg2zem3h.s[7]++, _interopRequireDefault(_reducers3));var _reducers5 = (cov_1tkg2zem3h.s[8]++, __webpack_require__(77));var _reducers6 = (cov_1tkg2zem3h.s[9]++, _interopRequireDefault(_reducers5));var _reducers7 = (cov_1tkg2zem3h.s[10]++, __webpack_require__(78));var _reducers8 = (cov_1tkg2zem3h.s[11]++, _interopRequireDefault(_reducers7));var _reducers9 = (cov_1tkg2zem3h.s[12]++, __webpack_require__(79));var _reducers10 = (cov_1tkg2zem3h.s[13]++, _interopRequireDefault(_reducers9));var _actions = (cov_1tkg2zem3h.s[14]++, __webpack_require__(26));var actions = (cov_1tkg2zem3h.s[15]++, _interopRequireWildcard(_actions));function _interopRequireWildcard(obj) {
  cov_1tkg2zem3h.f[0]++;cov_1tkg2zem3h.s[16]++;if ((cov_1tkg2zem3h.b[1][0]++, obj) && (cov_1tkg2zem3h.b[1][1]++, obj.__esModule)) {
    cov_1tkg2zem3h.b[0][0]++;cov_1tkg2zem3h.s[17]++;return obj;
  } else {
    cov_1tkg2zem3h.b[0][1]++;var newObj = (cov_1tkg2zem3h.s[18]++, {});cov_1tkg2zem3h.s[19]++;if (obj != null) {
      cov_1tkg2zem3h.b[2][0]++;cov_1tkg2zem3h.s[20]++;for (var key in obj) {
        cov_1tkg2zem3h.s[21]++;if (Object.prototype.hasOwnProperty.call(obj, key)) {
          cov_1tkg2zem3h.b[3][0]++;cov_1tkg2zem3h.s[22]++;newObj[key] = obj[key];
        } else {
          cov_1tkg2zem3h.b[3][1]++;
        }
      }
    } else {
      cov_1tkg2zem3h.b[2][1]++;
    }cov_1tkg2zem3h.s[23]++;newObj.default = obj;cov_1tkg2zem3h.s[24]++;return newObj;
  }
}function _interopRequireDefault(obj) {
  cov_1tkg2zem3h.f[1]++;cov_1tkg2zem3h.s[25]++;return (cov_1tkg2zem3h.b[5][0]++, obj) && (cov_1tkg2zem3h.b[5][1]++, obj.__esModule) ? (cov_1tkg2zem3h.b[4][0]++, obj) : (cov_1tkg2zem3h.b[4][1]++, { default: obj });
}const WAITING = (cov_1tkg2zem3h.s[26]++, exports.WAITING = "WAITING");const ACTIVE = (cov_1tkg2zem3h.s[27]++, exports.ACTIVE = "ACTIVE");const ERROR = (cov_1tkg2zem3h.s[28]++, exports.ERROR = "ERROR");const FINISHED = (cov_1tkg2zem3h.s[29]++, exports.FINISHED = "FINISHED");function session(state = (cov_1tkg2zem3h.b[6][0]++, WAITING), action) {
  cov_1tkg2zem3h.f[2]++;cov_1tkg2zem3h.s[30]++;switch (action.type) {case actions.READY:
      cov_1tkg2zem3h.b[7][0]++;cov_1tkg2zem3h.s[31]++;return ACTIVE;case actions.ERROR:
      cov_1tkg2zem3h.b[7][1]++;cov_1tkg2zem3h.s[32]++;return { error: action.error };case actions.FINISH:
      cov_1tkg2zem3h.b[7][2]++;cov_1tkg2zem3h.s[33]++;return FINISHED;default:
      cov_1tkg2zem3h.b[7][3]++;cov_1tkg2zem3h.s[34]++;return state;}
}const reduceState = (cov_1tkg2zem3h.s[35]++, (0, _redux.combineReducers)({ session, data: _reducers2.default, evm: _reducers4.default, solidity: _reducers6.default, trace: _reducers8.default, controller: _reducers10.default }));cov_1tkg2zem3h.s[36]++;exports.default = reduceState;

/***/ }),
/* 74 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var cov_1fv1dskiyx = function () {
  var path = "/Users/gnidan/src/work/truffle/packages/truffle-debugger/lib/data/reducers.js",
      hash = "917a69546d0842a0251fd7ab185633a94dbbb404",
      Function = function () {}.constructor,
      global = new Function('return this')(),
      gcv = "__coverage__",
      coverageData = { path: "/Users/gnidan/src/work/truffle/packages/truffle-debugger/lib/data/reducers.js", statementMap: { "0": { start: { line: 3, column: 0 }, end: { line: 5, column: 3 } }, "1": { start: { line: 7, column: 11 }, end: { line: 7, column: 47 } }, "2": { start: { line: 9, column: 12 }, end: { line: 9, column: 40 } }, "3": { start: { line: 11, column: 15 }, end: { line: 11, column: 62 } }, "4": { start: { line: 13, column: 16 }, end: { line: 13, column: 48 } }, "5": { start: { line: 15, column: 14 }, end: { line: 15, column: 60 } }, "6": { start: { line: 17, column: 15 }, end: { line: 17, column: 46 } }, "7": { start: { line: 19, column: 16 }, end: { line: 19, column: 56 } }, "8": { start: { line: 21, column: 16 }, end: { line: 21, column: 49 } }, "9": { start: { line: 23, column: 13 }, end: { line: 23, column: 29 } }, "10": { start: { line: 25, column: 14 }, end: { line: 25, column: 44 } }, "11": { start: { line: 27, column: 13 }, end: { line: 27, column: 29 } }, "12": { start: { line: 29, column: 15 }, end: { line: 29, column: 35 } }, "13": { start: { line: 31, column: 14 }, end: { line: 31, column: 47 } }, "14": { start: { line: 33, column: 40 }, end: { line: 33, column: 267 } }, "15": { start: { line: 33, column: 69 }, end: { line: 33, column: 80 } }, "16": { start: { line: 33, column: 103 }, end: { line: 33, column: 105 } }, "17": { start: { line: 33, column: 107 }, end: { line: 33, column: 228 } }, "18": { start: { line: 33, column: 126 }, end: { line: 33, column: 226 } }, "19": { start: { line: 33, column: 149 }, end: { line: 33, column: 224 } }, "20": { start: { line: 33, column: 201 }, end: { line: 33, column: 224 } }, "21": { start: { line: 33, column: 229 }, end: { line: 33, column: 250 } }, "22": { start: { line: 33, column: 251 }, end: { line: 33, column: 265 } }, "23": { start: { line: 35, column: 39 }, end: { line: 35, column: 93 } }, "24": { start: { line: 37, column: 14 }, end: { line: 37, column: 60 } }, "25": { start: { line: 39, column: 23 }, end: { line: 41, column: 1 } }, "26": { start: { line: 48, column: 2 }, end: { line: 81, column: 3 } }, "27": { start: { line: 50, column: 6 }, end: { line: 50, column: 42 } }, "28": { start: { line: 52, column: 6 }, end: { line: 63, column: 8 } }, "29": { start: { line: 66, column: 6 }, end: { line: 66, column: 50 } }, "30": { start: { line: 67, column: 6 }, end: { line: 67, column: 40 } }, "31": { start: { line: 69, column: 6 }, end: { line: 77, column: 8 } }, "32": { start: { line: 80, column: 6 }, end: { line: 80, column: 19 } }, "33": { start: { line: 84, column: 13 }, end: { line: 86, column: 2 } }, "34": { start: { line: 88, column: 28 }, end: { line: 90, column: 1 } }, "35": { start: { line: 93, column: 2 }, end: { line: 105, column: 3 } }, "36": { start: { line: 95, column: 6 }, end: { line: 101, column: 8 } }, "37": { start: { line: 96, column: 145 }, end: { line: 100, column: 9 } }, "38": { start: { line: 104, column: 6 }, end: { line: 104, column: 19 } }, "39": { start: { line: 108, column: 29 }, end: { line: 110, column: 1 } }, "40": { start: { line: 113, column: 2 }, end: { line: 126, column: 3 } }, "41": { start: { line: 115, column: 24 }, end: { line: 115, column: 30 } }, "42": { start: { line: 116, column: 6 }, end: { line: 122, column: 8 } }, "43": { start: { line: 125, column: 6 }, end: { line: 125, column: 19 } }, "44": { start: { line: 129, column: 13 }, end: { line: 132, column: 2 } }, "45": { start: { line: 134, column: 16 }, end: { line: 137, column: 2 } }, "46": { start: { line: 139, column: 0 }, end: { line: 139, column: 26 } } }, fnMap: { "0": { name: "_interopRequireWildcard", decl: { start: { line: 33, column: 9 }, end: { line: 33, column: 32 } }, loc: { start: { line: 33, column: 38 }, end: { line: 33, column: 269 } }, line: 33 }, "1": { name: "_interopRequireDefault", decl: { start: { line: 35, column: 9 }, end: { line: 35, column: 31 } }, loc: { start: { line: 35, column: 37 }, end: { line: 35, column: 95 } }, line: 35 }, "2": { name: "scopes", decl: { start: { line: 43, column: 9 }, end: { line: 43, column: 15 } }, loc: { start: { line: 43, column: 48 }, end: { line: 82, column: 1 } }, line: 43 }, "3": { name: "assignments", decl: { start: { line: 92, column: 9 }, end: { line: 92, column: 20 } }, loc: { start: { line: 92, column: 58 }, end: { line: 106, column: 1 } }, line: 92 }, "4": { name: "(anonymous_4)", decl: { start: { line: 96, column: 129 }, end: { line: 96, column: 130 } }, loc: { start: { line: 96, column: 145 }, end: { line: 100, column: 9 } }, line: 96 }, "5": { name: "mappingKeys", decl: { start: { line: 112, column: 9 }, end: { line: 112, column: 20 } }, loc: { start: { line: 112, column: 59 }, end: { line: 127, column: 1 } }, line: 112 } }, branchMap: { "0": { loc: { start: { line: 33, column: 40 }, end: { line: 33, column: 267 } }, type: "if", locations: [{ start: { line: 33, column: 40 }, end: { line: 33, column: 267 } }, { start: { line: 33, column: 40 }, end: { line: 33, column: 267 } }], line: 33 }, "1": { loc: { start: { line: 33, column: 44 }, end: { line: 33, column: 65 } }, type: "binary-expr", locations: [{ start: { line: 33, column: 44 }, end: { line: 33, column: 47 } }, { start: { line: 33, column: 51 }, end: { line: 33, column: 65 } }], line: 33 }, "2": { loc: { start: { line: 33, column: 107 }, end: { line: 33, column: 228 } }, type: "if", locations: [{ start: { line: 33, column: 107 }, end: { line: 33, column: 228 } }, { start: { line: 33, column: 107 }, end: { line: 33, column: 228 } }], line: 33 }, "3": { loc: { start: { line: 33, column: 149 }, end: { line: 33, column: 224 } }, type: "if", locations: [{ start: { line: 33, column: 149 }, end: { line: 33, column: 224 } }, { start: { line: 33, column: 149 }, end: { line: 33, column: 224 } }], line: 33 }, "4": { loc: { start: { line: 35, column: 46 }, end: { line: 35, column: 92 } }, type: "cond-expr", locations: [{ start: { line: 35, column: 70 }, end: { line: 35, column: 73 } }, { start: { line: 35, column: 76 }, end: { line: 35, column: 92 } }], line: 35 }, "5": { loc: { start: { line: 35, column: 46 }, end: { line: 35, column: 67 } }, type: "binary-expr", locations: [{ start: { line: 35, column: 46 }, end: { line: 35, column: 49 } }, { start: { line: 35, column: 53 }, end: { line: 35, column: 67 } }], line: 35 }, "6": { loc: { start: { line: 43, column: 16 }, end: { line: 43, column: 38 } }, type: "default-arg", locations: [{ start: { line: 43, column: 24 }, end: { line: 43, column: 38 } }], line: 43 }, "7": { loc: { start: { line: 48, column: 2 }, end: { line: 81, column: 3 } }, type: "switch", locations: [{ start: { line: 49, column: 4 }, end: { line: 63, column: 8 } }, { start: { line: 65, column: 4 }, end: { line: 77, column: 8 } }, { start: { line: 79, column: 4 }, end: { line: 80, column: 19 } }], line: 48 }, "8": { loc: { start: { line: 50, column: 14 }, end: { line: 50, column: 41 } }, type: "binary-expr", locations: [{ start: { line: 50, column: 14 }, end: { line: 50, column: 35 } }, { start: { line: 50, column: 39 }, end: { line: 50, column: 41 } }], line: 50 }, "9": { loc: { start: { line: 66, column: 14 }, end: { line: 66, column: 49 } }, type: "binary-expr", locations: [{ start: { line: 66, column: 14 }, end: { line: 66, column: 43 } }, { start: { line: 66, column: 47 }, end: { line: 66, column: 49 } }], line: 66 }, "10": { loc: { start: { line: 67, column: 18 }, end: { line: 67, column: 39 } }, type: "binary-expr", locations: [{ start: { line: 67, column: 18 }, end: { line: 67, column: 33 } }, { start: { line: 67, column: 37 }, end: { line: 67, column: 39 } }], line: 67 }, "11": { loc: { start: { line: 92, column: 21 }, end: { line: 92, column: 48 } }, type: "default-arg", locations: [{ start: { line: 92, column: 29 }, end: { line: 92, column: 48 } }], line: 92 }, "12": { loc: { start: { line: 93, column: 2 }, end: { line: 105, column: 3 } }, type: "switch", locations: [{ start: { line: 94, column: 4 }, end: { line: 101, column: 8 } }, { start: { line: 103, column: 4 }, end: { line: 104, column: 19 } }], line: 93 }, "13": { loc: { start: { line: 112, column: 21 }, end: { line: 112, column: 49 } }, type: "default-arg", locations: [{ start: { line: 112, column: 29 }, end: { line: 112, column: 49 } }], line: 112 }, "14": { loc: { start: { line: 113, column: 2 }, end: { line: 126, column: 3 } }, type: "switch", locations: [{ start: { line: 114, column: 4 }, end: { line: 122, column: 8 } }, { start: { line: 124, column: 4 }, end: { line: 125, column: 19 } }], line: 113 }, "15": { loc: { start: { line: 120, column: 43 }, end: { line: 120, column: 63 } }, type: "binary-expr", locations: [{ start: { line: 120, column: 43 }, end: { line: 120, column: 57 } }, { start: { line: 120, column: 61 }, end: { line: 120, column: 63 } }], line: 120 } }, s: { "0": 0, "1": 0, "2": 0, "3": 0, "4": 0, "5": 0, "6": 0, "7": 0, "8": 0, "9": 0, "10": 0, "11": 0, "12": 0, "13": 0, "14": 0, "15": 0, "16": 0, "17": 0, "18": 0, "19": 0, "20": 0, "21": 0, "22": 0, "23": 0, "24": 0, "25": 0, "26": 0, "27": 0, "28": 0, "29": 0, "30": 0, "31": 0, "32": 0, "33": 0, "34": 0, "35": 0, "36": 0, "37": 0, "38": 0, "39": 0, "40": 0, "41": 0, "42": 0, "43": 0, "44": 0, "45": 0, "46": 0 }, f: { "0": 0, "1": 0, "2": 0, "3": 0, "4": 0, "5": 0 }, b: { "0": [0, 0], "1": [0, 0], "2": [0, 0], "3": [0, 0], "4": [0, 0], "5": [0, 0], "6": [0], "7": [0, 0, 0], "8": [0, 0], "9": [0, 0], "10": [0, 0], "11": [0], "12": [0, 0], "13": [0], "14": [0, 0], "15": [0, 0] }, inputSourceMap: { version: 3, sources: ["lib/data/reducers.js"], names: ["actions", "debug", "DEFAULT_SCOPES", "byId", "scopes", "state", "action", "context", "scope", "variables", "type", "SCOPE", "id", "sourceId", "parentId", "pointer", "DECLARE", "node", "name", "info", "DEFAULT_ASSIGNMENTS", "assignments", "ASSIGN", "map", "ref", "DEFAULT_MAPPING_KEYS", "mappingKeys", "MAP_KEY", "key", "proc", "reducer"], mappings: ";;;;;;;;;;;;;;;;;;;;;;AAAA;;;;AAGA;;AAEA;;IAAYA,O;;;;;;AAJZ,MAAMC,QAAQ,qBAAY,wBAAZ,CAAd;;AAMA,MAAMC,iBAAiB;AACrBC,QAAM;AADe,CAAvB;;AAIA,SAASC,MAAT,CAAgBC,QAAQH,cAAxB,EAAwCI,MAAxC,EAAgD;AAC9C,MAAIC,OAAJ;AACA,MAAIC,KAAJ;AACA,MAAIC,SAAJ;;AAEA,UAAQH,OAAOI,IAAf;AACE,SAAKV,QAAQW,KAAb;AACEH,cAAQH,MAAMF,IAAN,CAAWG,OAAOM,EAAlB,KAAyB,EAAjC;;AAEA,aAAO;AACLT,yCACKE,MAAMF,IADX;;AAGE,WAACG,OAAOM,EAAR,8BACKJ,KADL;;AAGEI,gBAAIN,OAAOM,EAHb;AAIEC,sBAAUP,OAAOO,QAJnB;AAKEC,sBAAUR,OAAOQ,QALnB;AAMEC,qBAAST,OAAOS;AANlB;AAHF;AADK,OAAP;;AAeF,SAAKf,QAAQgB,OAAb;AACER,cAAQH,MAAMF,IAAN,CAAWG,OAAOW,IAAP,CAAYT,KAAvB,KAAiC,EAAzC;AACAC,kBAAYD,MAAMC,SAAN,IAAmB,EAA/B;;AAEA,aAAO;AACLN,yCACKE,MAAMF,IADX;;AAGE,WAACG,OAAOW,IAAP,CAAYT,KAAb,8BACKA,KADL;;AAGEC,uBAAW,CACT,GAAGA,SADM,EAGT,EAACS,MAAMZ,OAAOW,IAAP,CAAYC,IAAnB,EAAyBN,IAAIN,OAAOW,IAAP,CAAYL,EAAzC,EAHS;AAHb;AAHF;AADK,OAAP;;AAgBF;AACE,aAAOP,KAAP;AAxCJ;AA0CD;;AAED,MAAMc,OAAO,4BAAgB;AAC3Bf;AAD2B,CAAhB,CAAb;;AAIA,MAAMgB,sBAAsB;AAC1BjB,QAAM;AADoB,CAA5B;;AAIA,SAASkB,WAAT,CAAqBhB,QAAQe,mBAA7B,EAAkDd,MAAlD,EAA0D;AACxD,UAAQA,OAAOI,IAAf;AACE,SAAKV,QAAQsB,MAAb;AACE,aAAO;AACLnB,yCACKE,MAAMF,IADX,EAGK,sBAAc,EAAd,EACD,GAAG,uBAAeG,OAAOe,WAAtB,EAAmCE,GAAnC,CACD,CAAC,CAACX,EAAD,EAAKY,GAAL,CAAD,MAAgB;AACd,WAACZ,EAAD,8BACKP,MAAMF,IAAN,CAAWS,EAAX,CADL,IACqB;AACnBY;AAFF;AADc,SAAhB,CADC,CADF,CAHL;AADK,OAAP;;AAiBF;AACE,aAAOnB,KAAP;AApBJ;AAsBD;;AAED,MAAMoB,uBAAuB;AAC3BtB,QAAM;AADqB,CAA7B;;AAIA,SAASuB,WAAT,CAAqBrB,QAAQoB,oBAA7B,EAAmDnB,MAAnD,EAA2D;AACzD,UAAQA,OAAOI,IAAf;AACE,SAAKV,QAAQ2B,OAAb;AACE,UAAI,EAAEf,EAAF,EAAMgB,GAAN,KAActB,MAAlB;AACA,aAAO;AACLH,yCACKE,MAAMF,IADX;;AAGE;AACA,WAACS,EAAD,GAAM,CAAC,GAAG,kBAAQ,CAChB,IAAIP,MAAMF,IAAN,CAAWS,EAAX,KAAkB,EAAtB,CADgB,EAEhBgB,GAFgB,CAAR,CAAJ;AAJR;AADK,OAAP;;AAYF;AACE,aAAOvB,KAAP;AAhBJ;AAkBD;;AAED,MAAMwB,OAAO,4BAAgB;AAC3BR,aAD2B;AAE3BK;AAF2B,CAAhB,CAAb;;AAKA,MAAMI,UAAU,4BAAgB;AAC9BX,MAD8B;AAE9BU;AAF8B,CAAhB,CAAhB;;kBAKeC,O", file: "reducers.js", sourceRoot: "/Users/gnidan/src/work/truffle/packages/truffle-debugger", sourcesContent: ["import debugModule from \"debug\";\nconst debug = debugModule(\"debugger:data:reducers\");\n\nimport { combineReducers } from \"redux\";\n\nimport * as actions from \"./actions\";\n\nconst DEFAULT_SCOPES = {\n  byId: {}\n};\n\nfunction scopes(state = DEFAULT_SCOPES, action) {\n  var context;\n  var scope;\n  var variables;\n\n  switch (action.type) {\n    case actions.SCOPE:\n      scope = state.byId[action.id] || {};\n\n      return {\n        byId: {\n          ...state.byId,\n\n          [action.id]: {\n            ...scope,\n\n            id: action.id,\n            sourceId: action.sourceId,\n            parentId: action.parentId,\n            pointer: action.pointer\n          }\n        }\n      }\n\n    case actions.DECLARE:\n      scope = state.byId[action.node.scope] || {};\n      variables = scope.variables || [];\n\n      return {\n        byId: {\n          ...state.byId,\n\n          [action.node.scope]: {\n            ...scope,\n\n            variables: [\n              ...variables,\n\n              {name: action.node.name, id: action.node.id}\n            ]\n          }\n        }\n      }\n\n    default:\n      return state;\n  }\n}\n\nconst info = combineReducers({\n  scopes\n});\n\nconst DEFAULT_ASSIGNMENTS = {\n  byId: {}\n};\n\nfunction assignments(state = DEFAULT_ASSIGNMENTS, action) {\n  switch (action.type) {\n    case actions.ASSIGN:\n      return {\n        byId: {\n          ...state.byId,\n\n          ...Object.assign({},\n            ...Object.entries(action.assignments).map(\n              ([id, ref]) => ({\n                [id]: {\n                  ...state.byId[id], //note: id here includes depth\n                  ref\n                }\n              })\n            )\n          )\n        }\n      };\n\n    default:\n      return state;\n  }\n};\n\nconst DEFAULT_MAPPING_KEYS = {\n  byId: {}\n}\n\nfunction mappingKeys(state = DEFAULT_MAPPING_KEYS, action) {\n  switch (action.type) {\n    case actions.MAP_KEY:\n      let { id, key } = action;\n      return {\n        byId: {\n          ...state.byId,\n\n          // add new key to set of keys already defined\n          [id]: [...new Set([\n            ...(state.byId[id] || []),\n            key\n          ])]\n        }\n      };\n\n    default:\n      return state;\n  }\n}\n\nconst proc = combineReducers({\n  assignments,\n  mappingKeys\n});\n\nconst reducer = combineReducers({\n  info,\n  proc\n});\n\nexport default reducer;\n"] }, _coverageSchema: "332fd63041d2c1bcb487cc26dd0d5f7d97098a6c" },
      coverage = global[gcv] || (global[gcv] = {});if (coverage[path] && coverage[path].hash === hash) {
    return coverage[path];
  }coverageData.hash = hash;return coverage[path] = coverageData;
}();cov_1fv1dskiyx.s[0]++;Object.defineProperty(exports, "__esModule", { value: true });var _set = (cov_1fv1dskiyx.s[1]++, __webpack_require__(22));var _set2 = (cov_1fv1dskiyx.s[2]++, _interopRequireDefault(_set));var _entries = (cov_1fv1dskiyx.s[3]++, __webpack_require__(1));var _entries2 = (cov_1fv1dskiyx.s[4]++, _interopRequireDefault(_entries));var _assign = (cov_1fv1dskiyx.s[5]++, __webpack_require__(5));var _assign2 = (cov_1fv1dskiyx.s[6]++, _interopRequireDefault(_assign));var _extends2 = (cov_1fv1dskiyx.s[7]++, __webpack_require__(4));var _extends3 = (cov_1fv1dskiyx.s[8]++, _interopRequireDefault(_extends2));var _debug = (cov_1fv1dskiyx.s[9]++, __webpack_require__(0));var _debug2 = (cov_1fv1dskiyx.s[10]++, _interopRequireDefault(_debug));var _redux = (cov_1fv1dskiyx.s[11]++, __webpack_require__(14));var _actions = (cov_1fv1dskiyx.s[12]++, __webpack_require__(32));var actions = (cov_1fv1dskiyx.s[13]++, _interopRequireWildcard(_actions));function _interopRequireWildcard(obj) {
  cov_1fv1dskiyx.f[0]++;cov_1fv1dskiyx.s[14]++;if ((cov_1fv1dskiyx.b[1][0]++, obj) && (cov_1fv1dskiyx.b[1][1]++, obj.__esModule)) {
    cov_1fv1dskiyx.b[0][0]++;cov_1fv1dskiyx.s[15]++;return obj;
  } else {
    cov_1fv1dskiyx.b[0][1]++;var newObj = (cov_1fv1dskiyx.s[16]++, {});cov_1fv1dskiyx.s[17]++;if (obj != null) {
      cov_1fv1dskiyx.b[2][0]++;cov_1fv1dskiyx.s[18]++;for (var key in obj) {
        cov_1fv1dskiyx.s[19]++;if (Object.prototype.hasOwnProperty.call(obj, key)) {
          cov_1fv1dskiyx.b[3][0]++;cov_1fv1dskiyx.s[20]++;newObj[key] = obj[key];
        } else {
          cov_1fv1dskiyx.b[3][1]++;
        }
      }
    } else {
      cov_1fv1dskiyx.b[2][1]++;
    }cov_1fv1dskiyx.s[21]++;newObj.default = obj;cov_1fv1dskiyx.s[22]++;return newObj;
  }
}function _interopRequireDefault(obj) {
  cov_1fv1dskiyx.f[1]++;cov_1fv1dskiyx.s[23]++;return (cov_1fv1dskiyx.b[5][0]++, obj) && (cov_1fv1dskiyx.b[5][1]++, obj.__esModule) ? (cov_1fv1dskiyx.b[4][0]++, obj) : (cov_1fv1dskiyx.b[4][1]++, { default: obj });
}const debug = (cov_1fv1dskiyx.s[24]++, (0, _debug2.default)("debugger:data:reducers"));const DEFAULT_SCOPES = (cov_1fv1dskiyx.s[25]++, { byId: {} });function scopes(state = (cov_1fv1dskiyx.b[6][0]++, DEFAULT_SCOPES), action) {
  cov_1fv1dskiyx.f[2]++;var context;var scope;var variables;cov_1fv1dskiyx.s[26]++;switch (action.type) {case actions.SCOPE:
      cov_1fv1dskiyx.b[7][0]++;cov_1fv1dskiyx.s[27]++;scope = (cov_1fv1dskiyx.b[8][0]++, state.byId[action.id]) || (cov_1fv1dskiyx.b[8][1]++, {});cov_1fv1dskiyx.s[28]++;return { byId: (0, _extends3.default)({}, state.byId, { [action.id]: (0, _extends3.default)({}, scope, { id: action.id, sourceId: action.sourceId, parentId: action.parentId, pointer: action.pointer }) }) };case actions.DECLARE:
      cov_1fv1dskiyx.b[7][1]++;cov_1fv1dskiyx.s[29]++;scope = (cov_1fv1dskiyx.b[9][0]++, state.byId[action.node.scope]) || (cov_1fv1dskiyx.b[9][1]++, {});cov_1fv1dskiyx.s[30]++;variables = (cov_1fv1dskiyx.b[10][0]++, scope.variables) || (cov_1fv1dskiyx.b[10][1]++, []);cov_1fv1dskiyx.s[31]++;return { byId: (0, _extends3.default)({}, state.byId, { [action.node.scope]: (0, _extends3.default)({}, scope, { variables: [...variables, { name: action.node.name, id: action.node.id }] }) }) };default:
      cov_1fv1dskiyx.b[7][2]++;cov_1fv1dskiyx.s[32]++;return state;}
}const info = (cov_1fv1dskiyx.s[33]++, (0, _redux.combineReducers)({ scopes }));const DEFAULT_ASSIGNMENTS = (cov_1fv1dskiyx.s[34]++, { byId: {} });function assignments(state = (cov_1fv1dskiyx.b[11][0]++, DEFAULT_ASSIGNMENTS), action) {
  cov_1fv1dskiyx.f[3]++;cov_1fv1dskiyx.s[35]++;switch (action.type) {case actions.ASSIGN:
      cov_1fv1dskiyx.b[12][0]++;cov_1fv1dskiyx.s[36]++;return { byId: (0, _extends3.default)({}, state.byId, (0, _assign2.default)({}, ...(0, _entries2.default)(action.assignments).map(([id, ref]) => {
          cov_1fv1dskiyx.f[4]++;cov_1fv1dskiyx.s[37]++;return { [id]: (0, _extends3.default)({}, state.byId[id], { ref }) };
        }))) };default:
      cov_1fv1dskiyx.b[12][1]++;cov_1fv1dskiyx.s[38]++;return state;}
};const DEFAULT_MAPPING_KEYS = (cov_1fv1dskiyx.s[39]++, { byId: {} });function mappingKeys(state = (cov_1fv1dskiyx.b[13][0]++, DEFAULT_MAPPING_KEYS), action) {
  cov_1fv1dskiyx.f[5]++;cov_1fv1dskiyx.s[40]++;switch (action.type) {case actions.MAP_KEY:
      cov_1fv1dskiyx.b[14][0]++;let { id, key } = (cov_1fv1dskiyx.s[41]++, action);cov_1fv1dskiyx.s[42]++;return { byId: (0, _extends3.default)({}, state.byId, { [id]: [...new _set2.default([...((cov_1fv1dskiyx.b[15][0]++, state.byId[id]) || (cov_1fv1dskiyx.b[15][1]++, [])), key])] }) };default:
      cov_1fv1dskiyx.b[14][1]++;cov_1fv1dskiyx.s[43]++;return state;}
}const proc = (cov_1fv1dskiyx.s[44]++, (0, _redux.combineReducers)({ assignments, mappingKeys }));const reducer = (cov_1fv1dskiyx.s[45]++, (0, _redux.combineReducers)({ info, proc }));cov_1fv1dskiyx.s[46]++;exports.default = reducer;

/***/ }),
/* 75 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var cov_zru3qzhor = function () {
  var path = "/Users/gnidan/src/work/truffle/packages/truffle-debugger/lib/evm/reducers.js",
      hash = "54012bd3408204db3e178cb1f33bc49b28b76afe",
      Function = function () {}.constructor,
      global = new Function('return this')(),
      gcv = "__coverage__",
      coverageData = { path: "/Users/gnidan/src/work/truffle/packages/truffle-debugger/lib/evm/reducers.js", statementMap: { "0": { start: { line: 3, column: 0 }, end: { line: 5, column: 3 } }, "1": { start: { line: 7, column: 11 }, end: { line: 7, column: 47 } }, "2": { start: { line: 9, column: 12 }, end: { line: 9, column: 40 } }, "3": { start: { line: 11, column: 12 }, end: { line: 11, column: 55 } }, "4": { start: { line: 13, column: 13 }, end: { line: 13, column: 42 } }, "5": { start: { line: 15, column: 16 }, end: { line: 15, column: 56 } }, "6": { start: { line: 17, column: 16 }, end: { line: 17, column: 49 } }, "7": { start: { line: 19, column: 0 }, end: { line: 19, column: 30 } }, "8": { start: { line: 21, column: 13 }, end: { line: 21, column: 29 } }, "9": { start: { line: 23, column: 15 }, end: { line: 23, column: 35 } }, "10": { start: { line: 25, column: 14 }, end: { line: 25, column: 47 } }, "11": { start: { line: 27, column: 15 }, end: { line: 27, column: 37 } }, "12": { start: { line: 29, column: 40 }, end: { line: 29, column: 267 } }, "13": { start: { line: 29, column: 69 }, end: { line: 29, column: 80 } }, "14": { start: { line: 29, column: 103 }, end: { line: 29, column: 105 } }, "15": { start: { line: 29, column: 107 }, end: { line: 29, column: 228 } }, "16": { start: { line: 29, column: 126 }, end: { line: 29, column: 226 } }, "17": { start: { line: 29, column: 149 }, end: { line: 29, column: 224 } }, "18": { start: { line: 29, column: 201 }, end: { line: 29, column: 224 } }, "19": { start: { line: 29, column: 229 }, end: { line: 29, column: 250 } }, "20": { start: { line: 29, column: 251 }, end: { line: 29, column: 265 } }, "21": { start: { line: 31, column: 39 }, end: { line: 31, column: 93 } }, "22": { start: { line: 33, column: 25 }, end: { line: 36, column: 1 } }, "23": { start: { line: 39, column: 2 }, end: { line: 69, column: 3 } }, "24": { start: { line: 44, column: 37 }, end: { line: 44, column: 43 } }, "25": { start: { line: 46, column: 6 }, end: { line: 48, column: 7 } }, "26": { start: { line: 47, column: 8 }, end: { line: 47, column: 21 } }, "27": { start: { line: 50, column: 20 }, end: { line: 50, column: 51 } }, "28": { start: { line: 52, column: 6 }, end: { line: 62, column: 8 } }, "29": { start: { line: 68, column: 6 }, end: { line: 68, column: 19 } }, "30": { start: { line: 72, column: 26 }, end: { line: 75, column: 1 } }, "31": { start: { line: 78, column: 2 }, end: { line: 107, column: 3 } }, "32": { start: { line: 83, column: 41 }, end: { line: 83, column: 47 } }, "33": { start: { line: 86, column: 27 }, end: { line: 86, column: 57 } }, "34": { start: { line: 87, column: 27 }, end: { line: 87, column: 71 } }, "35": { start: { line: 87, column: 63 }, end: { line: 87, column: 70 } }, "36": { start: { line: 89, column: 6 }, end: { line: 100, column: 8 } }, "37": { start: { line: 98, column: 105 }, end: { line: 98, column: 116 } }, "38": { start: { line: 106, column: 6 }, end: { line: 106, column: 19 } }, "39": { start: { line: 110, column: 13 }, end: { line: 113, column: 2 } }, "40": { start: { line: 116, column: 2 }, end: { line: 130, column: 3 } }, "41": { start: { line: 118, column: 20 }, end: { line: 118, column: 34 } }, "42": { start: { line: 119, column: 6 }, end: { line: 119, column: 41 } }, "43": { start: { line: 122, column: 21 }, end: { line: 122, column: 34 } }, "44": { start: { line: 123, column: 6 }, end: { line: 123, column: 40 } }, "45": { start: { line: 126, column: 6 }, end: { line: 126, column: 32 } }, "46": { start: { line: 129, column: 6 }, end: { line: 129, column: 19 } }, "47": { start: { line: 133, column: 13 }, end: { line: 135, column: 2 } }, "48": { start: { line: 137, column: 16 }, end: { line: 140, column: 2 } }, "49": { start: { line: 142, column: 0 }, end: { line: 142, column: 26 } } }, fnMap: { "0": { name: "_interopRequireWildcard", decl: { start: { line: 29, column: 9 }, end: { line: 29, column: 32 } }, loc: { start: { line: 29, column: 38 }, end: { line: 29, column: 269 } }, line: 29 }, "1": { name: "_interopRequireDefault", decl: { start: { line: 31, column: 9 }, end: { line: 31, column: 31 } }, loc: { start: { line: 31, column: 37 }, end: { line: 31, column: 95 } }, line: 31 }, "2": { name: "contexts", decl: { start: { line: 38, column: 9 }, end: { line: 38, column: 17 } }, loc: { start: { line: 38, column: 52 }, end: { line: 70, column: 1 } }, line: 38 }, "3": { name: "instances", decl: { start: { line: 77, column: 9 }, end: { line: 77, column: 18 } }, loc: { start: { line: 77, column: 54 }, end: { line: 108, column: 1 } }, line: 77 }, "4": { name: "(anonymous_4)", decl: { start: { line: 87, column: 46 }, end: { line: 87, column: 47 } }, loc: { start: { line: 87, column: 63 }, end: { line: 87, column: 70 } }, line: 87 }, "5": { name: "(anonymous_5)", decl: { start: { line: 98, column: 93 }, end: { line: 98, column: 94 } }, loc: { start: { line: 98, column: 105 }, end: { line: 98, column: 116 } }, line: 98 }, "6": { name: "callstack", decl: { start: { line: 115, column: 9 }, end: { line: 115, column: 18 } }, loc: { start: { line: 115, column: 39 }, end: { line: 131, column: 1 } }, line: 115 } }, branchMap: { "0": { loc: { start: { line: 29, column: 40 }, end: { line: 29, column: 267 } }, type: "if", locations: [{ start: { line: 29, column: 40 }, end: { line: 29, column: 267 } }, { start: { line: 29, column: 40 }, end: { line: 29, column: 267 } }], line: 29 }, "1": { loc: { start: { line: 29, column: 44 }, end: { line: 29, column: 65 } }, type: "binary-expr", locations: [{ start: { line: 29, column: 44 }, end: { line: 29, column: 47 } }, { start: { line: 29, column: 51 }, end: { line: 29, column: 65 } }], line: 29 }, "2": { loc: { start: { line: 29, column: 107 }, end: { line: 29, column: 228 } }, type: "if", locations: [{ start: { line: 29, column: 107 }, end: { line: 29, column: 228 } }, { start: { line: 29, column: 107 }, end: { line: 29, column: 228 } }], line: 29 }, "3": { loc: { start: { line: 29, column: 149 }, end: { line: 29, column: 224 } }, type: "if", locations: [{ start: { line: 29, column: 149 }, end: { line: 29, column: 224 } }, { start: { line: 29, column: 149 }, end: { line: 29, column: 224 } }], line: 29 }, "4": { loc: { start: { line: 31, column: 46 }, end: { line: 31, column: 92 } }, type: "cond-expr", locations: [{ start: { line: 31, column: 70 }, end: { line: 31, column: 73 } }, { start: { line: 31, column: 76 }, end: { line: 31, column: 92 } }], line: 31 }, "5": { loc: { start: { line: 31, column: 46 }, end: { line: 31, column: 67 } }, type: "binary-expr", locations: [{ start: { line: 31, column: 46 }, end: { line: 31, column: 49 } }, { start: { line: 31, column: 53 }, end: { line: 31, column: 67 } }], line: 31 }, "6": { loc: { start: { line: 38, column: 18 }, end: { line: 38, column: 42 } }, type: "default-arg", locations: [{ start: { line: 38, column: 26 }, end: { line: 38, column: 42 } }], line: 38 }, "7": { loc: { start: { line: 39, column: 2 }, end: { line: 69, column: 3 } }, type: "switch", locations: [{ start: { line: 43, column: 4 }, end: { line: 62, column: 8 } }, { start: { line: 67, column: 4 }, end: { line: 68, column: 19 } }], line: 39 }, "8": { loc: { start: { line: 46, column: 6 }, end: { line: 48, column: 7 } }, type: "if", locations: [{ start: { line: 46, column: 6 }, end: { line: 48, column: 7 } }, { start: { line: 46, column: 6 }, end: { line: 48, column: 7 } }], line: 46 }, "9": { loc: { start: { line: 77, column: 19 }, end: { line: 77, column: 44 } }, type: "default-arg", locations: [{ start: { line: 77, column: 27 }, end: { line: 77, column: 44 } }], line: 77 }, "10": { loc: { start: { line: 78, column: 2 }, end: { line: 107, column: 3 } }, type: "switch", locations: [{ start: { line: 82, column: 4 }, end: { line: 100, column: 8 } }, { start: { line: 105, column: 4 }, end: { line: 106, column: 19 } }], line: 78 }, "11": { loc: { start: { line: 86, column: 27 }, end: { line: 86, column: 57 } }, type: "binary-expr", locations: [{ start: { line: 86, column: 27 }, end: { line: 86, column: 51 } }, { start: { line: 86, column: 55 }, end: { line: 86, column: 57 } }], line: 86 }, "12": { loc: { start: { line: 115, column: 19 }, end: { line: 115, column: 29 } }, type: "default-arg", locations: [{ start: { line: 115, column: 27 }, end: { line: 115, column: 29 } }], line: 115 }, "13": { loc: { start: { line: 116, column: 2 }, end: { line: 130, column: 3 } }, type: "switch", locations: [{ start: { line: 117, column: 4 }, end: { line: 119, column: 41 } }, { start: { line: 121, column: 4 }, end: { line: 123, column: 40 } }, { start: { line: 125, column: 4 }, end: { line: 126, column: 32 } }, { start: { line: 128, column: 4 }, end: { line: 129, column: 19 } }], line: 116 } }, s: { "0": 0, "1": 0, "2": 0, "3": 0, "4": 0, "5": 0, "6": 0, "7": 0, "8": 0, "9": 0, "10": 0, "11": 0, "12": 0, "13": 0, "14": 0, "15": 0, "16": 0, "17": 0, "18": 0, "19": 0, "20": 0, "21": 0, "22": 0, "23": 0, "24": 0, "25": 0, "26": 0, "27": 0, "28": 0, "29": 0, "30": 0, "31": 0, "32": 0, "33": 0, "34": 0, "35": 0, "36": 0, "37": 0, "38": 0, "39": 0, "40": 0, "41": 0, "42": 0, "43": 0, "44": 0, "45": 0, "46": 0, "47": 0, "48": 0, "49": 0 }, f: { "0": 0, "1": 0, "2": 0, "3": 0, "4": 0, "5": 0, "6": 0 }, b: { "0": [0, 0], "1": [0, 0], "2": [0, 0], "3": [0, 0], "4": [0, 0], "5": [0, 0], "6": [0], "7": [0, 0], "8": [0, 0], "9": [0], "10": [0, 0], "11": [0, 0], "12": [0], "13": [0, 0, 0, 0] }, inputSourceMap: { version: 3, sources: ["lib/evm/reducers.js"], names: ["callstack", "actions", "DEFAULT_CONTEXTS", "byContext", "byBinary", "contexts", "state", "action", "type", "ADD_CONTEXT", "contractName", "binary", "context", "DEFAULT_INSTANCES", "byAddress", "instances", "ADD_INSTANCE", "address", "otherInstances", "otherAddresses", "map", "add", "info", "CALL", "concat", "CREATE", "RETURN", "slice", "proc", "reducer"], mappings: ";;;;;;;;;;;;;;;;;;QA6FgBA,S,GAAAA,S;;AA7FhB;;AAEA;;IAAYC,O;;AACZ;;;;;;AAEA,MAAMC,mBAAmB;AACvBC,aAAW,EADY;AAEvBC,YAAU;AAFa,CAAzB;;AAKA,SAASC,QAAT,CAAkBC,QAAQJ,gBAA1B,EAA4CK,MAA5C,EAAoD;AAClD,UAAQA,OAAOC,IAAf;AACE;;;AAGA,SAAKP,QAAQQ,WAAb;AACE,UAAI,EAAEC,YAAF,EAAgBC,MAAhB,KAA2BJ,MAA/B;;AAEA,UAAID,MAAMF,QAAN,CAAeO,MAAf,CAAJ,EAA4B;AAC1B,eAAOL,KAAP;AACD;;AAED,UAAIM,UAAU,wBAAUD,MAAV,CAAd;;AAEA,aAAO;AACLR,8CACKG,MAAMH,SADX;;AAGE,WAACS,OAAD,GAAW,EAAEA,OAAF,EAAWD,MAAX,EAAmBD,YAAnB;AAHb,UADK;;AAOLN,6CACKE,MAAMF,QADX;;AAGE,WAACO,MAAD,GAAU,EAAEC,SAASA,OAAX;AAHZ;AAPK,OAAP;;AAcF;;;AAGA;AACE,aAAON,KAAP;AA/BJ;AAiCD;;AAED,MAAMO,oBAAoB;AACxBC,aAAW,EADa;AAExBX,aAAW;AAFa,CAA1B;;AAKA,SAASY,SAAT,CAAmBT,QAAQO,iBAA3B,EAA8CN,MAA9C,EAAsD;AACpD,UAAQA,OAAOC,IAAf;AACE;;;AAGA,SAAKP,QAAQe,YAAb;AACE,UAAI,EAAEC,OAAF,EAAWL,OAAX,EAAoBD,MAApB,KAA+BJ,MAAnC;;AAEA;AACA,UAAIW,iBAAiBZ,MAAMH,SAAN,CAAgBS,OAAhB,KAA4B,EAAjD;AACA,UAAIO,iBAAiBD,eAAeE,GAAf,CAAmB,CAAC,EAACH,OAAD,EAAD,KAAeA,OAAlC,CAArB;;AAEA,aAAO;AACLH,8CACKR,MAAMQ,SADX;;AAGE,WAACG,OAAD,GAAW,EAAEL,OAAF,EAAWD,MAAX;AAHb,UADK;;AAOLR,8CACKG,MAAMH,SADX;;AAGE;AACA,WAACS,OAAD,GAAW,oBAAW,kBAAQO,cAAR,EAAwBE,GAAxB,CAA4BJ,OAA5B,CAAX,EACRG,GADQ,CACHH,OAAD,KAAc,EAACA,OAAD,EAAd,CADI;AAJb;AAPK,OAAP;;AAgBF;;;AAGA;AACE,aAAOX,KAAP;AA/BJ;AAkCD;;AAED,MAAMgB,OAAO,4BAAgB;AAC3BjB,UAD2B;AAE3BU;AAF2B,CAAhB,CAAb;;AAKO,SAASf,SAAT,CAAmBM,QAAQ,EAA3B,EAA+BC,MAA/B,EAAuC;AAC5C,UAAOA,OAAOC,IAAd;AACE,SAAKP,QAAQsB,IAAb;AACE,UAAIN,UAAUV,OAAOU,OAArB;AACA,aAAOX,MAAMkB,MAAN,CAAa,CAAE,EAACP,OAAD,EAAF,CAAb,CAAP;;AAEF,SAAKhB,QAAQwB,MAAb;AACE,YAAMd,SAASJ,OAAOI,MAAtB;AACA,aAAOL,MAAMkB,MAAN,CAAa,CAAE,EAACb,MAAD,EAAF,CAAb,CAAP;;AAEF,SAAKV,QAAQyB,MAAb;AACE,aAAOpB,MAAMqB,KAAN,CAAY,CAAZ,EAAe,CAAC,CAAhB,CAAP,CAVJ,CAU+B;;AAE7B;AACE,aAAOrB,KAAP;AAbJ,GAcC;AACF;;AAED,MAAMsB,OAAO,4BAAgB;AAC3B5B;AAD2B,CAAhB,CAAb;;AAIA,MAAM6B,UAAU,4BAAgB;AAC9BP,MAD8B;AAE9BM;AAF8B,CAAhB,CAAhB;;kBAKeC,O", file: "reducers.js", sourceRoot: "/Users/gnidan/src/work/truffle/packages/truffle-debugger", sourcesContent: ["import { combineReducers } from \"redux\";\n\nimport * as actions from \"./actions\";\nimport { keccak256 } from \"lib/helpers\";\n\nconst DEFAULT_CONTEXTS = {\n  byContext: {},\n  byBinary: {}\n};\n\nfunction contexts(state = DEFAULT_CONTEXTS, action) {\n  switch (action.type) {\n    /*\n     * Adding a new context\n     */\n    case actions.ADD_CONTEXT:\n      let { contractName, binary } = action;\n\n      if (state.byBinary[binary]) {\n        return state;\n      }\n\n      let context = keccak256(binary);\n\n      return {\n        byContext: {\n          ...state.byContext,\n\n          [context]: { context, binary, contractName }\n        },\n\n        byBinary: {\n          ...state.byBinary,\n\n          [binary]: { context: context }\n        }\n      };\n\n    /*\n     * Default case\n     */\n    default:\n      return state;\n  }\n}\n\nconst DEFAULT_INSTANCES = {\n  byAddress: {},\n  byContext: {}\n}\n\nfunction instances(state = DEFAULT_INSTANCES, action) {\n  switch (action.type) {\n    /*\n     * Adding a new address for context\n     */\n    case actions.ADD_INSTANCE:\n      let { address, context, binary } = action;\n\n      // get known addresses for this context\n      let otherInstances = state.byContext[context] || [];\n      let otherAddresses = otherInstances.map(({address}) => address);\n\n      return {\n        byAddress: {\n          ...state.byAddress,\n\n          [address]: { context, binary }\n        },\n\n        byContext: {\n          ...state.byContext,\n\n          // reconstruct context instances to include new address\n          [context]: Array.from(new Set(otherAddresses).add(address))\n            .map((address) => ({address}))\n        }\n      };\n\n    /*\n     * Default case\n     */\n    default:\n      return state;\n  }\n\n}\n\nconst info = combineReducers({\n  contexts,\n  instances\n});\n\nexport function callstack(state = [], action) {\n  switch(action.type) {\n    case actions.CALL:\n      let address = action.address;\n      return state.concat([ {address} ]);\n\n    case actions.CREATE:\n      const binary = action.binary;\n      return state.concat([ {binary} ]);\n\n    case actions.RETURN:\n      return state.slice(0, -1); // pop\n\n    default:\n      return state;\n  };\n}\n\nconst proc = combineReducers({\n  callstack\n});\n\nconst reducer = combineReducers({\n  info,\n  proc\n});\n\nexport default reducer;\n"] }, _coverageSchema: "332fd63041d2c1bcb487cc26dd0d5f7d97098a6c" },
      coverage = global[gcv] || (global[gcv] = {});if (coverage[path] && coverage[path].hash === hash) {
    return coverage[path];
  }coverageData.hash = hash;return coverage[path] = coverageData;
}();cov_zru3qzhor.s[0]++;Object.defineProperty(exports, "__esModule", { value: true });var _set = (cov_zru3qzhor.s[1]++, __webpack_require__(22));var _set2 = (cov_zru3qzhor.s[2]++, _interopRequireDefault(_set));var _from = (cov_zru3qzhor.s[3]++, __webpack_require__(76));var _from2 = (cov_zru3qzhor.s[4]++, _interopRequireDefault(_from));var _extends2 = (cov_zru3qzhor.s[5]++, __webpack_require__(4));var _extends3 = (cov_zru3qzhor.s[6]++, _interopRequireDefault(_extends2));cov_zru3qzhor.s[7]++;exports.callstack = callstack;var _redux = (cov_zru3qzhor.s[8]++, __webpack_require__(14));var _actions = (cov_zru3qzhor.s[9]++, __webpack_require__(36));var actions = (cov_zru3qzhor.s[10]++, _interopRequireWildcard(_actions));var _helpers = (cov_zru3qzhor.s[11]++, __webpack_require__(6));function _interopRequireWildcard(obj) {
  cov_zru3qzhor.f[0]++;cov_zru3qzhor.s[12]++;if ((cov_zru3qzhor.b[1][0]++, obj) && (cov_zru3qzhor.b[1][1]++, obj.__esModule)) {
    cov_zru3qzhor.b[0][0]++;cov_zru3qzhor.s[13]++;return obj;
  } else {
    cov_zru3qzhor.b[0][1]++;var newObj = (cov_zru3qzhor.s[14]++, {});cov_zru3qzhor.s[15]++;if (obj != null) {
      cov_zru3qzhor.b[2][0]++;cov_zru3qzhor.s[16]++;for (var key in obj) {
        cov_zru3qzhor.s[17]++;if (Object.prototype.hasOwnProperty.call(obj, key)) {
          cov_zru3qzhor.b[3][0]++;cov_zru3qzhor.s[18]++;newObj[key] = obj[key];
        } else {
          cov_zru3qzhor.b[3][1]++;
        }
      }
    } else {
      cov_zru3qzhor.b[2][1]++;
    }cov_zru3qzhor.s[19]++;newObj.default = obj;cov_zru3qzhor.s[20]++;return newObj;
  }
}function _interopRequireDefault(obj) {
  cov_zru3qzhor.f[1]++;cov_zru3qzhor.s[21]++;return (cov_zru3qzhor.b[5][0]++, obj) && (cov_zru3qzhor.b[5][1]++, obj.__esModule) ? (cov_zru3qzhor.b[4][0]++, obj) : (cov_zru3qzhor.b[4][1]++, { default: obj });
}const DEFAULT_CONTEXTS = (cov_zru3qzhor.s[22]++, { byContext: {}, byBinary: {} });function contexts(state = (cov_zru3qzhor.b[6][0]++, DEFAULT_CONTEXTS), action) {
  cov_zru3qzhor.f[2]++;cov_zru3qzhor.s[23]++;switch (action.type) {case actions.ADD_CONTEXT:
      cov_zru3qzhor.b[7][0]++;let { contractName, binary } = (cov_zru3qzhor.s[24]++, action);cov_zru3qzhor.s[25]++;if (state.byBinary[binary]) {
        cov_zru3qzhor.b[8][0]++;cov_zru3qzhor.s[26]++;return state;
      } else {
        cov_zru3qzhor.b[8][1]++;
      }let context = (cov_zru3qzhor.s[27]++, (0, _helpers.keccak256)(binary));cov_zru3qzhor.s[28]++;return { byContext: (0, _extends3.default)({}, state.byContext, { [context]: { context, binary, contractName } }), byBinary: (0, _extends3.default)({}, state.byBinary, { [binary]: { context: context } }) };default:
      cov_zru3qzhor.b[7][1]++;cov_zru3qzhor.s[29]++;return state;}
}const DEFAULT_INSTANCES = (cov_zru3qzhor.s[30]++, { byAddress: {}, byContext: {} });function instances(state = (cov_zru3qzhor.b[9][0]++, DEFAULT_INSTANCES), action) {
  cov_zru3qzhor.f[3]++;cov_zru3qzhor.s[31]++;switch (action.type) {case actions.ADD_INSTANCE:
      cov_zru3qzhor.b[10][0]++;let { address, context, binary } = (cov_zru3qzhor.s[32]++, action);let otherInstances = (cov_zru3qzhor.s[33]++, (cov_zru3qzhor.b[11][0]++, state.byContext[context]) || (cov_zru3qzhor.b[11][1]++, []));let otherAddresses = (cov_zru3qzhor.s[34]++, otherInstances.map(({ address }) => {
        cov_zru3qzhor.f[4]++;cov_zru3qzhor.s[35]++;return address;
      }));cov_zru3qzhor.s[36]++;return { byAddress: (0, _extends3.default)({}, state.byAddress, { [address]: { context, binary } }), byContext: (0, _extends3.default)({}, state.byContext, { [context]: (0, _from2.default)(new _set2.default(otherAddresses).add(address)).map(address => {
            cov_zru3qzhor.f[5]++;cov_zru3qzhor.s[37]++;return { address };
          }) }) };default:
      cov_zru3qzhor.b[10][1]++;cov_zru3qzhor.s[38]++;return state;}
}const info = (cov_zru3qzhor.s[39]++, (0, _redux.combineReducers)({ contexts, instances }));function callstack(state = (cov_zru3qzhor.b[12][0]++, []), action) {
  cov_zru3qzhor.f[6]++;cov_zru3qzhor.s[40]++;switch (action.type) {case actions.CALL:
      cov_zru3qzhor.b[13][0]++;let address = (cov_zru3qzhor.s[41]++, action.address);cov_zru3qzhor.s[42]++;return state.concat([{ address }]);case actions.CREATE:
      cov_zru3qzhor.b[13][1]++;const binary = (cov_zru3qzhor.s[43]++, action.binary);cov_zru3qzhor.s[44]++;return state.concat([{ binary }]);case actions.RETURN:
      cov_zru3qzhor.b[13][2]++;cov_zru3qzhor.s[45]++;return state.slice(0, -1);default:
      cov_zru3qzhor.b[13][3]++;cov_zru3qzhor.s[46]++;return state;};
}const proc = (cov_zru3qzhor.s[47]++, (0, _redux.combineReducers)({ callstack }));const reducer = (cov_zru3qzhor.s[48]++, (0, _redux.combineReducers)({ info, proc }));cov_zru3qzhor.s[49]++;exports.default = reducer;

/***/ }),
/* 76 */
/***/ (function(module, exports) {

module.exports = require("babel-runtime/core-js/array/from");

/***/ }),
/* 77 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var cov_iu6ku0aar = function () {
  var path = "/Users/gnidan/src/work/truffle/packages/truffle-debugger/lib/solidity/reducers.js",
      hash = "8248870eb72066d1b4f183e39f28a69670d22ee3",
      Function = function () {}.constructor,
      global = new Function('return this')(),
      gcv = "__coverage__",
      coverageData = { path: "/Users/gnidan/src/work/truffle/packages/truffle-debugger/lib/solidity/reducers.js", statementMap: { "0": { start: { line: 3, column: 0 }, end: { line: 5, column: 3 } }, "1": { start: { line: 7, column: 16 }, end: { line: 7, column: 56 } }, "2": { start: { line: 9, column: 16 }, end: { line: 9, column: 49 } }, "3": { start: { line: 11, column: 12 }, end: { line: 11, column: 56 } }, "4": { start: { line: 13, column: 13 }, end: { line: 13, column: 42 } }, "5": { start: { line: 15, column: 0 }, end: { line: 15, column: 38 } }, "6": { start: { line: 17, column: 13 }, end: { line: 17, column: 29 } }, "7": { start: { line: 19, column: 15 }, end: { line: 19, column: 37 } }, "8": { start: { line: 21, column: 15 }, end: { line: 21, column: 35 } }, "9": { start: { line: 23, column: 14 }, end: { line: 23, column: 47 } }, "10": { start: { line: 25, column: 40 }, end: { line: 25, column: 267 } }, "11": { start: { line: 25, column: 69 }, end: { line: 25, column: 80 } }, "12": { start: { line: 25, column: 103 }, end: { line: 25, column: 105 } }, "13": { start: { line: 25, column: 107 }, end: { line: 25, column: 228 } }, "14": { start: { line: 25, column: 126 }, end: { line: 25, column: 226 } }, "15": { start: { line: 25, column: 149 }, end: { line: 25, column: 224 } }, "16": { start: { line: 25, column: 201 }, end: { line: 25, column: 224 } }, "17": { start: { line: 25, column: 229 }, end: { line: 25, column: 250 } }, "18": { start: { line: 25, column: 251 }, end: { line: 25, column: 265 } }, "19": { start: { line: 27, column: 39 }, end: { line: 27, column: 93 } }, "20": { start: { line: 29, column: 24 }, end: { line: 31, column: 1 } }, "21": { start: { line: 34, column: 2 }, end: { line: 59, column: 3 } }, "22": { start: { line: 39, column: 40 }, end: { line: 39, column: 46 } }, "23": { start: { line: 41, column: 15 }, end: { line: 41, column: 53 } }, "24": { start: { line: 43, column: 6 }, end: { line: 57, column: 8 } }, "25": { start: { line: 58, column: 6 }, end: { line: 58, column: 19 } }, "26": { start: { line: 62, column: 27 }, end: { line: 64, column: 1 } }, "27": { start: { line: 67, column: 2 }, end: { line: 90, column: 3 } }, "28": { start: { line: 72, column: 34 }, end: { line: 72, column: 40 } }, "29": { start: { line: 73, column: 20 }, end: { line: 73, column: 51 } }, "30": { start: { line: 75, column: 6 }, end: { line: 83, column: 8 } }, "31": { start: { line: 89, column: 6 }, end: { line: 89, column: 19 } }, "32": { start: { line: 93, column: 13 }, end: { line: 96, column: 2 } }, "33": { start: { line: 99, column: 2 }, end: { line: 104, column: 3 } }, "34": { start: { line: 100, column: 18 }, end: { line: 100, column: 47 } }, "35": { start: { line: 101, column: 4 }, end: { line: 101, column: 25 } }, "36": { start: { line: 103, column: 4 }, end: { line: 103, column: 17 } }, "37": { start: { line: 108, column: 2 }, end: { line: 114, column: 3 } }, "38": { start: { line: 109, column: 4 }, end: { line: 109, column: 13 } }, "39": { start: { line: 110, column: 9 }, end: { line: 114, column: 3 } }, "40": { start: { line: 111, column: 4 }, end: { line: 111, column: 14 } }, "41": { start: { line: 113, column: 4 }, end: { line: 113, column: 13 } }, "42": { start: { line: 117, column: 13 }, end: { line: 119, column: 2 } }, "43": { start: { line: 121, column: 16 }, end: { line: 124, column: 2 } }, "44": { start: { line: 126, column: 0 }, end: { line: 126, column: 26 } } }, fnMap: { "0": { name: "_interopRequireWildcard", decl: { start: { line: 25, column: 9 }, end: { line: 25, column: 32 } }, loc: { start: { line: 25, column: 38 }, end: { line: 25, column: 269 } }, line: 25 }, "1": { name: "_interopRequireDefault", decl: { start: { line: 27, column: 9 }, end: { line: 27, column: 31 } }, loc: { start: { line: 27, column: 37 }, end: { line: 27, column: 95 } }, line: 27 }, "2": { name: "sources", decl: { start: { line: 33, column: 9 }, end: { line: 33, column: 16 } }, loc: { start: { line: 33, column: 50 }, end: { line: 60, column: 1 } }, line: 33 }, "3": { name: "sourceMaps", decl: { start: { line: 66, column: 9 }, end: { line: 66, column: 19 } }, loc: { start: { line: 66, column: 56 }, end: { line: 91, column: 1 } }, line: 66 }, "4": { name: "functionDepth", decl: { start: { line: 98, column: 9 }, end: { line: 98, column: 22 } }, loc: { start: { line: 98, column: 42 }, end: { line: 105, column: 1 } }, line: 98 }, "5": { name: "spelunk", decl: { start: { line: 107, column: 9 }, end: { line: 107, column: 16 } }, loc: { start: { line: 107, column: 23 }, end: { line: 115, column: 1 } }, line: 107 } }, branchMap: { "0": { loc: { start: { line: 25, column: 40 }, end: { line: 25, column: 267 } }, type: "if", locations: [{ start: { line: 25, column: 40 }, end: { line: 25, column: 267 } }, { start: { line: 25, column: 40 }, end: { line: 25, column: 267 } }], line: 25 }, "1": { loc: { start: { line: 25, column: 44 }, end: { line: 25, column: 65 } }, type: "binary-expr", locations: [{ start: { line: 25, column: 44 }, end: { line: 25, column: 47 } }, { start: { line: 25, column: 51 }, end: { line: 25, column: 65 } }], line: 25 }, "2": { loc: { start: { line: 25, column: 107 }, end: { line: 25, column: 228 } }, type: "if", locations: [{ start: { line: 25, column: 107 }, end: { line: 25, column: 228 } }, { start: { line: 25, column: 107 }, end: { line: 25, column: 228 } }], line: 25 }, "3": { loc: { start: { line: 25, column: 149 }, end: { line: 25, column: 224 } }, type: "if", locations: [{ start: { line: 25, column: 149 }, end: { line: 25, column: 224 } }, { start: { line: 25, column: 149 }, end: { line: 25, column: 224 } }], line: 25 }, "4": { loc: { start: { line: 27, column: 46 }, end: { line: 27, column: 92 } }, type: "cond-expr", locations: [{ start: { line: 27, column: 70 }, end: { line: 27, column: 73 } }, { start: { line: 27, column: 76 }, end: { line: 27, column: 92 } }], line: 27 }, "5": { loc: { start: { line: 27, column: 46 }, end: { line: 27, column: 67 } }, type: "binary-expr", locations: [{ start: { line: 27, column: 46 }, end: { line: 27, column: 49 } }, { start: { line: 27, column: 53 }, end: { line: 27, column: 67 } }], line: 27 }, "6": { loc: { start: { line: 33, column: 17 }, end: { line: 33, column: 40 } }, type: "default-arg", locations: [{ start: { line: 33, column: 25 }, end: { line: 33, column: 40 } }], line: 33 }, "7": { loc: { start: { line: 34, column: 2 }, end: { line: 59, column: 3 } }, type: "switch", locations: [{ start: { line: 38, column: 4 }, end: { line: 57, column: 8 } }, { start: { line: 57, column: 8 }, end: { line: 58, column: 19 } }], line: 34 }, "8": { loc: { start: { line: 66, column: 20 }, end: { line: 66, column: 46 } }, type: "default-arg", locations: [{ start: { line: 66, column: 28 }, end: { line: 66, column: 46 } }], line: 66 }, "9": { loc: { start: { line: 67, column: 2 }, end: { line: 90, column: 3 } }, type: "switch", locations: [{ start: { line: 71, column: 4 }, end: { line: 83, column: 8 } }, { start: { line: 88, column: 4 }, end: { line: 89, column: 19 } }], line: 67 }, "10": { loc: { start: { line: 98, column: 23 }, end: { line: 98, column: 32 } }, type: "default-arg", locations: [{ start: { line: 98, column: 31 }, end: { line: 98, column: 32 } }], line: 98 }, "11": { loc: { start: { line: 99, column: 2 }, end: { line: 104, column: 3 } }, type: "if", locations: [{ start: { line: 99, column: 2 }, end: { line: 104, column: 3 } }, { start: { line: 99, column: 2 }, end: { line: 104, column: 3 } }], line: 99 }, "12": { loc: { start: { line: 108, column: 2 }, end: { line: 114, column: 3 } }, type: "if", locations: [{ start: { line: 108, column: 2 }, end: { line: 114, column: 3 } }, { start: { line: 108, column: 2 }, end: { line: 114, column: 3 } }], line: 108 }, "13": { loc: { start: { line: 110, column: 9 }, end: { line: 114, column: 3 } }, type: "if", locations: [{ start: { line: 110, column: 9 }, end: { line: 114, column: 3 } }, { start: { line: 110, column: 9 }, end: { line: 114, column: 3 } }], line: 110 } }, s: { "0": 0, "1": 0, "2": 0, "3": 0, "4": 0, "5": 0, "6": 0, "7": 0, "8": 0, "9": 0, "10": 0, "11": 0, "12": 0, "13": 0, "14": 0, "15": 0, "16": 0, "17": 0, "18": 0, "19": 0, "20": 0, "21": 0, "22": 0, "23": 0, "24": 0, "25": 0, "26": 0, "27": 0, "28": 0, "29": 0, "30": 0, "31": 0, "32": 0, "33": 0, "34": 0, "35": 0, "36": 0, "37": 0, "38": 0, "39": 0, "40": 0, "41": 0, "42": 0, "43": 0, "44": 0 }, f: { "0": 0, "1": 0, "2": 0, "3": 0, "4": 0, "5": 0 }, b: { "0": [0, 0], "1": [0, 0], "2": [0, 0], "3": [0, 0], "4": [0, 0], "5": [0, 0], "6": [0], "7": [0, 0], "8": [0], "9": [0, 0], "10": [0], "11": [0, 0], "12": [0, 0], "13": [0, 0] }, inputSourceMap: { version: 3, sources: ["lib/solidity/reducers.js"], names: ["functionDepth", "actions", "DEFAULT_SOURCES", "byId", "sources", "state", "action", "type", "ADD_SOURCE", "ast", "source", "sourcePath", "id", "length", "DEFAULT_SOURCEMAPS", "byContext", "sourceMaps", "ADD_SOURCEMAP", "binary", "sourceMap", "context", "info", "JUMP", "delta", "spelunk", "jumpDirection", "jump", "proc", "reducer"], mappings: ";;;;;;;;;;;;;;QA+EgBA,a,GAAAA,a;;AA/EhB;;AAEA;;AAEA;;IAAYC,O;;;;;;AAEZ,MAAMC,kBAAkB;AACtBC,QAAM;AADgB,CAAxB;;AAIA,SAASC,OAAT,CAAiBC,QAAQH,eAAzB,EAA0CI,MAA1C,EAAkD;AAChD,UAAQA,OAAOC,IAAf;AACE;;;AAGA,SAAKN,QAAQO,UAAb;AACE,UAAI,EAAEC,GAAF,EAAOC,MAAP,EAAeC,UAAf,KAA8BL,MAAlC;;AAEA,UAAIM,KAAK,oBAAYP,MAAMF,IAAlB,EAAwBU,MAAjC;;AAEA,aAAO;AACLV,yCACKE,MAAMF,IADX;;AAGE,WAACS,EAAD,GAAM;AACJA,cADI;AAEJH,eAFI;AAGJC,kBAHI;AAIJC;AAJI;AAHR;;AAYJ;;;AAbS,OAAP,CAgBF;AACE,aAAON,KAAP;AA1BJ;AA4BD;;AAGD,MAAMS,qBAAqB;AACzBC,aAAW;AADc,CAA3B;;AAIA,SAASC,UAAT,CAAoBX,QAAQS,kBAA5B,EAAgDR,MAAhD,EAAwD;AACtD,UAAQA,OAAOC,IAAf;AACE;;;AAGA,SAAKN,QAAQgB,aAAb;AACE,UAAI,EAAEC,MAAF,EAAUC,SAAV,KAAwBb,MAA5B;AACA,UAAIc,UAAU,wBAAUF,MAAV,CAAd;;AAEA,aAAO;AACLH,8CACKV,MAAMU,SADX;;AAGE,WAACK,OAAD,GAAW;AACTA,mBADS;AAETD;AAFS;AAHb;AADK,OAAP;;AAWF;;;AAGA;AACE,aAAOd,KAAP;AAvBJ;AAyBD;;AAED,MAAMgB,OAAO,4BAAgB;AAC3BjB,SAD2B;AAE3BY;AAF2B,CAAhB,CAAb;;AAKO,SAAShB,aAAT,CAAuBK,QAAQ,CAA/B,EAAkCC,MAAlC,EAA0C;AAC/C,MAAIA,OAAOC,IAAP,KAAgBN,QAAQqB,IAA5B,EAAkC;AAChC,UAAMC,QAAQC,QAAQlB,OAAOmB,aAAf,CAAd;AACA,WAAOpB,QAAQkB,KAAf;AACD,GAHD,MAGO;AACL,WAAOlB,KAAP;AACD;AACF;;AAED,SAASmB,OAAT,CAAiBE,IAAjB,EAAuB;AACrB,MAAIA,QAAQ,GAAZ,EAAiB;AACf,WAAO,CAAP;AACD,GAFD,MAEO,IAAIA,QAAQ,GAAZ,EAAiB;AACtB,WAAO,CAAC,CAAR;AACD,GAFM,MAEA;AACL,WAAO,CAAP;AACD;AACF;;AAED,MAAMC,OAAO,4BAAgB;AAC3B3B;AAD2B,CAAhB,CAAb;;AAIA,MAAM4B,UAAU,4BAAgB;AAC9BP,MAD8B;AAE9BM;AAF8B,CAAhB,CAAhB;;kBAKeC,O", file: "reducers.js", sourceRoot: "/Users/gnidan/src/work/truffle/packages/truffle-debugger", sourcesContent: ["import { combineReducers } from \"redux\";\n\nimport { keccak256 } from \"lib/helpers\";\n\nimport * as actions from \"./actions\";\n\nconst DEFAULT_SOURCES = {\n  byId: {}\n};\n\nfunction sources(state = DEFAULT_SOURCES, action) {\n  switch (action.type) {\n    /*\n     * Adding a new source\n     */\n    case actions.ADD_SOURCE:\n      let { ast, source, sourcePath } = action;\n\n      let id = Object.keys(state.byId).length;\n\n      return {\n        byId: {\n          ...state.byId,\n\n          [id]: {\n            id,\n            ast,\n            source,\n            sourcePath\n          }\n        }\n      }\n\n    /*\n     * Default case\n     */\n    default:\n      return state;\n  }\n}\n\n\nconst DEFAULT_SOURCEMAPS = {\n  byContext: {}\n};\n\nfunction sourceMaps(state = DEFAULT_SOURCEMAPS, action) {\n  switch (action.type) {\n    /*\n     * Adding a new sourceMap\n     */\n    case actions.ADD_SOURCEMAP:\n      let { binary, sourceMap } = action;\n      let context = keccak256(binary);\n\n      return {\n        byContext: {\n          ...state.byContext,\n\n          [context]: {\n            context,\n            sourceMap\n          }\n        }\n      };\n\n    /*\n     * Default Case\n     */\n    default:\n      return state;\n  }\n}\n\nconst info = combineReducers({\n  sources,\n  sourceMaps\n});\n\nexport function functionDepth(state = 1, action) {\n  if (action.type === actions.JUMP) {\n    const delta = spelunk(action.jumpDirection)\n    return state + delta;\n  } else {\n    return state;\n  }\n}\n\nfunction spelunk(jump) {\n  if (jump == \"i\") {\n    return 1;\n  } else if (jump == \"o\") {\n    return -1;\n  } else {\n    return 0;\n  }\n}\n\nconst proc = combineReducers({\n  functionDepth\n});\n\nconst reducer = combineReducers({\n  info,\n  proc\n});\n\nexport default reducer;\n"] }, _coverageSchema: "332fd63041d2c1bcb487cc26dd0d5f7d97098a6c" },
      coverage = global[gcv] || (global[gcv] = {});if (coverage[path] && coverage[path].hash === hash) {
    return coverage[path];
  }coverageData.hash = hash;return coverage[path] = coverageData;
}();cov_iu6ku0aar.s[0]++;Object.defineProperty(exports, "__esModule", { value: true });var _extends2 = (cov_iu6ku0aar.s[1]++, __webpack_require__(4));var _extends3 = (cov_iu6ku0aar.s[2]++, _interopRequireDefault(_extends2));var _keys = (cov_iu6ku0aar.s[3]++, __webpack_require__(16));var _keys2 = (cov_iu6ku0aar.s[4]++, _interopRequireDefault(_keys));cov_iu6ku0aar.s[5]++;exports.functionDepth = functionDepth;var _redux = (cov_iu6ku0aar.s[6]++, __webpack_require__(14));var _helpers = (cov_iu6ku0aar.s[7]++, __webpack_require__(6));var _actions = (cov_iu6ku0aar.s[8]++, __webpack_require__(35));var actions = (cov_iu6ku0aar.s[9]++, _interopRequireWildcard(_actions));function _interopRequireWildcard(obj) {
  cov_iu6ku0aar.f[0]++;cov_iu6ku0aar.s[10]++;if ((cov_iu6ku0aar.b[1][0]++, obj) && (cov_iu6ku0aar.b[1][1]++, obj.__esModule)) {
    cov_iu6ku0aar.b[0][0]++;cov_iu6ku0aar.s[11]++;return obj;
  } else {
    cov_iu6ku0aar.b[0][1]++;var newObj = (cov_iu6ku0aar.s[12]++, {});cov_iu6ku0aar.s[13]++;if (obj != null) {
      cov_iu6ku0aar.b[2][0]++;cov_iu6ku0aar.s[14]++;for (var key in obj) {
        cov_iu6ku0aar.s[15]++;if (Object.prototype.hasOwnProperty.call(obj, key)) {
          cov_iu6ku0aar.b[3][0]++;cov_iu6ku0aar.s[16]++;newObj[key] = obj[key];
        } else {
          cov_iu6ku0aar.b[3][1]++;
        }
      }
    } else {
      cov_iu6ku0aar.b[2][1]++;
    }cov_iu6ku0aar.s[17]++;newObj.default = obj;cov_iu6ku0aar.s[18]++;return newObj;
  }
}function _interopRequireDefault(obj) {
  cov_iu6ku0aar.f[1]++;cov_iu6ku0aar.s[19]++;return (cov_iu6ku0aar.b[5][0]++, obj) && (cov_iu6ku0aar.b[5][1]++, obj.__esModule) ? (cov_iu6ku0aar.b[4][0]++, obj) : (cov_iu6ku0aar.b[4][1]++, { default: obj });
}const DEFAULT_SOURCES = (cov_iu6ku0aar.s[20]++, { byId: {} });function sources(state = (cov_iu6ku0aar.b[6][0]++, DEFAULT_SOURCES), action) {
  cov_iu6ku0aar.f[2]++;cov_iu6ku0aar.s[21]++;switch (action.type) {case actions.ADD_SOURCE:
      cov_iu6ku0aar.b[7][0]++;let { ast, source, sourcePath } = (cov_iu6ku0aar.s[22]++, action);let id = (cov_iu6ku0aar.s[23]++, (0, _keys2.default)(state.byId).length);cov_iu6ku0aar.s[24]++;return { byId: (0, _extends3.default)({}, state.byId, { [id]: { id, ast, source, sourcePath } }) };default:
      cov_iu6ku0aar.b[7][1]++;cov_iu6ku0aar.s[25]++;return state;}
}const DEFAULT_SOURCEMAPS = (cov_iu6ku0aar.s[26]++, { byContext: {} });function sourceMaps(state = (cov_iu6ku0aar.b[8][0]++, DEFAULT_SOURCEMAPS), action) {
  cov_iu6ku0aar.f[3]++;cov_iu6ku0aar.s[27]++;switch (action.type) {case actions.ADD_SOURCEMAP:
      cov_iu6ku0aar.b[9][0]++;let { binary, sourceMap } = (cov_iu6ku0aar.s[28]++, action);let context = (cov_iu6ku0aar.s[29]++, (0, _helpers.keccak256)(binary));cov_iu6ku0aar.s[30]++;return { byContext: (0, _extends3.default)({}, state.byContext, { [context]: { context, sourceMap } }) };default:
      cov_iu6ku0aar.b[9][1]++;cov_iu6ku0aar.s[31]++;return state;}
}const info = (cov_iu6ku0aar.s[32]++, (0, _redux.combineReducers)({ sources, sourceMaps }));function functionDepth(state = (cov_iu6ku0aar.b[10][0]++, 1), action) {
  cov_iu6ku0aar.f[4]++;cov_iu6ku0aar.s[33]++;if (action.type === actions.JUMP) {
    cov_iu6ku0aar.b[11][0]++;const delta = (cov_iu6ku0aar.s[34]++, spelunk(action.jumpDirection));cov_iu6ku0aar.s[35]++;return state + delta;
  } else {
    cov_iu6ku0aar.b[11][1]++;cov_iu6ku0aar.s[36]++;return state;
  }
}function spelunk(jump) {
  cov_iu6ku0aar.f[5]++;cov_iu6ku0aar.s[37]++;if (jump == "i") {
    cov_iu6ku0aar.b[12][0]++;cov_iu6ku0aar.s[38]++;return 1;
  } else {
    cov_iu6ku0aar.b[12][1]++;cov_iu6ku0aar.s[39]++;if (jump == "o") {
      cov_iu6ku0aar.b[13][0]++;cov_iu6ku0aar.s[40]++;return -1;
    } else {
      cov_iu6ku0aar.b[13][1]++;cov_iu6ku0aar.s[41]++;return 0;
    }
  }
}const proc = (cov_iu6ku0aar.s[42]++, (0, _redux.combineReducers)({ functionDepth }));const reducer = (cov_iu6ku0aar.s[43]++, (0, _redux.combineReducers)({ info, proc }));cov_iu6ku0aar.s[44]++;exports.default = reducer;

/***/ }),
/* 78 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var cov_2qc9du3ah0 = function () {
  var path = "/Users/gnidan/src/work/truffle/packages/truffle-debugger/lib/trace/reducers.js",
      hash = "bb5879d4f7b5d0319955dc649083729adf219e06",
      Function = function () {}.constructor,
      global = new Function('return this')(),
      gcv = "__coverage__",
      coverageData = { path: "/Users/gnidan/src/work/truffle/packages/truffle-debugger/lib/trace/reducers.js", statementMap: { "0": { start: { line: 3, column: 0 }, end: { line: 5, column: 3 } }, "1": { start: { line: 6, column: 0 }, end: { line: 6, column: 22 } }, "2": { start: { line: 7, column: 0 }, end: { line: 7, column: 22 } }, "3": { start: { line: 9, column: 13 }, end: { line: 9, column: 29 } }, "4": { start: { line: 11, column: 15 }, end: { line: 11, column: 35 } }, "5": { start: { line: 13, column: 14 }, end: { line: 13, column: 47 } }, "6": { start: { line: 15, column: 40 }, end: { line: 15, column: 267 } }, "7": { start: { line: 15, column: 69 }, end: { line: 15, column: 80 } }, "8": { start: { line: 15, column: 103 }, end: { line: 15, column: 105 } }, "9": { start: { line: 15, column: 107 }, end: { line: 15, column: 228 } }, "10": { start: { line: 15, column: 126 }, end: { line: 15, column: 226 } }, "11": { start: { line: 15, column: 149 }, end: { line: 15, column: 224 } }, "12": { start: { line: 15, column: 201 }, end: { line: 15, column: 224 } }, "13": { start: { line: 15, column: 229 }, end: { line: 15, column: 250 } }, "14": { start: { line: 15, column: 251 }, end: { line: 15, column: 265 } }, "15": { start: { line: 18, column: 2 }, end: { line: 22, column: 3 } }, "16": { start: { line: 19, column: 4 }, end: { line: 19, column: 21 } }, "17": { start: { line: 21, column: 4 }, end: { line: 21, column: 17 } }, "18": { start: { line: 26, column: 2 }, end: { line: 30, column: 3 } }, "19": { start: { line: 27, column: 4 }, end: { line: 27, column: 24 } }, "20": { start: { line: 29, column: 4 }, end: { line: 29, column: 17 } }, "21": { start: { line: 33, column: 13 }, end: { line: 35, column: 2 } }, "22": { start: { line: 37, column: 13 }, end: { line: 39, column: 2 } }, "23": { start: { line: 41, column: 16 }, end: { line: 44, column: 2 } }, "24": { start: { line: 46, column: 0 }, end: { line: 46, column: 26 } } }, fnMap: { "0": { name: "_interopRequireWildcard", decl: { start: { line: 15, column: 9 }, end: { line: 15, column: 32 } }, loc: { start: { line: 15, column: 38 }, end: { line: 15, column: 269 } }, line: 15 }, "1": { name: "index", decl: { start: { line: 17, column: 9 }, end: { line: 17, column: 14 } }, loc: { start: { line: 17, column: 34 }, end: { line: 23, column: 1 } }, line: 17 }, "2": { name: "steps", decl: { start: { line: 25, column: 9 }, end: { line: 25, column: 14 } }, loc: { start: { line: 25, column: 37 }, end: { line: 31, column: 1 } }, line: 25 } }, branchMap: { "0": { loc: { start: { line: 15, column: 40 }, end: { line: 15, column: 267 } }, type: "if", locations: [{ start: { line: 15, column: 40 }, end: { line: 15, column: 267 } }, { start: { line: 15, column: 40 }, end: { line: 15, column: 267 } }], line: 15 }, "1": { loc: { start: { line: 15, column: 44 }, end: { line: 15, column: 65 } }, type: "binary-expr", locations: [{ start: { line: 15, column: 44 }, end: { line: 15, column: 47 } }, { start: { line: 15, column: 51 }, end: { line: 15, column: 65 } }], line: 15 }, "2": { loc: { start: { line: 15, column: 107 }, end: { line: 15, column: 228 } }, type: "if", locations: [{ start: { line: 15, column: 107 }, end: { line: 15, column: 228 } }, { start: { line: 15, column: 107 }, end: { line: 15, column: 228 } }], line: 15 }, "3": { loc: { start: { line: 15, column: 149 }, end: { line: 15, column: 224 } }, type: "if", locations: [{ start: { line: 15, column: 149 }, end: { line: 15, column: 224 } }, { start: { line: 15, column: 149 }, end: { line: 15, column: 224 } }], line: 15 }, "4": { loc: { start: { line: 17, column: 15 }, end: { line: 17, column: 24 } }, type: "default-arg", locations: [{ start: { line: 17, column: 23 }, end: { line: 17, column: 24 } }], line: 17 }, "5": { loc: { start: { line: 18, column: 2 }, end: { line: 22, column: 3 } }, type: "if", locations: [{ start: { line: 18, column: 2 }, end: { line: 22, column: 3 } }, { start: { line: 18, column: 2 }, end: { line: 22, column: 3 } }], line: 18 }, "6": { loc: { start: { line: 18, column: 6 }, end: { line: 18, column: 72 } }, type: "binary-expr", locations: [{ start: { line: 18, column: 6 }, end: { line: 18, column: 33 } }, { start: { line: 18, column: 37 }, end: { line: 18, column: 72 } }], line: 18 }, "7": { loc: { start: { line: 25, column: 15 }, end: { line: 25, column: 27 } }, type: "default-arg", locations: [{ start: { line: 25, column: 23 }, end: { line: 25, column: 27 } }], line: 25 }, "8": { loc: { start: { line: 26, column: 2 }, end: { line: 30, column: 3 } }, type: "if", locations: [{ start: { line: 26, column: 2 }, end: { line: 30, column: 3 } }, { start: { line: 26, column: 2 }, end: { line: 30, column: 3 } }], line: 26 } }, s: { "0": 0, "1": 0, "2": 0, "3": 0, "4": 0, "5": 0, "6": 0, "7": 0, "8": 0, "9": 0, "10": 0, "11": 0, "12": 0, "13": 0, "14": 0, "15": 0, "16": 0, "17": 0, "18": 0, "19": 0, "20": 0, "21": 0, "22": 0, "23": 0, "24": 0 }, f: { "0": 0, "1": 0, "2": 0 }, b: { "0": [0, 0], "1": [0, 0], "2": [0, 0], "3": [0, 0], "4": [0], "5": [0, 0], "6": [0, 0], "7": [0], "8": [0, 0] }, inputSourceMap: { version: 3, sources: ["lib/trace/reducers.js"], names: ["index", "steps", "actions", "state", "action", "type", "TOCK", "END_OF_TRACE", "SAVE_STEPS", "info", "proc", "reducer"], mappings: ";;;;;QAIgBA,K,GAAAA,K;QAQAC,K,GAAAA,K;;AAZhB;;AAEA;;IAAYC,O;;;;AAEL,SAASF,KAAT,CAAeG,QAAQ,CAAvB,EAA0BC,MAA1B,EAAkC;AACvC,MAAIA,OAAOC,IAAP,IAAeH,QAAQI,IAAvB,IAA+BF,OAAOC,IAAP,IAAeH,QAAQK,YAA1D,EAAwE;AACtE,WAAOJ,QAAQ,CAAf;AACD,GAFD,MAEO;AACL,WAAOA,KAAP;AACD;AACF;;AAEM,SAASF,KAAT,CAAeE,QAAQ,IAAvB,EAA6BC,MAA7B,EAAqC;AAC1C,MAAIA,OAAOC,IAAP,IAAeH,QAAQM,UAA3B,EAAuC;AACrC,WAAOJ,OAAOH,KAAd;AACD,GAFD,MAEO;AACL,WAAOE,KAAP;AACD;AACF;;AAED,MAAMM,OAAO,4BAAgB;AAC3BR;AAD2B,CAAhB,CAAb;;AAIA,MAAMS,OAAO,4BAAgB;AAC3BV;AAD2B,CAAhB,CAAb;;AAIA,MAAMW,UAAU,4BAAgB;AAC9BF,MAD8B;AAE9BC;AAF8B,CAAhB,CAAhB;;kBAKeC,O", file: "reducers.js", sourceRoot: "/Users/gnidan/src/work/truffle/packages/truffle-debugger", sourcesContent: ["import { combineReducers } from \"redux\";\n\nimport * as actions from \"./actions\";\n\nexport function index(state = 0, action) {\n  if (action.type == actions.TOCK || action.type == actions.END_OF_TRACE) {\n    return state + 1;\n  } else {\n    return state;\n  }\n}\n\nexport function steps(state = null, action) {\n  if (action.type == actions.SAVE_STEPS) {\n    return action.steps;\n  } else {\n    return state;\n  }\n}\n\nconst info = combineReducers({\n  steps\n})\n\nconst proc = combineReducers({\n  index\n})\n\nconst reducer = combineReducers({\n  info,\n  proc\n});\n\nexport default reducer;\n"] }, _coverageSchema: "332fd63041d2c1bcb487cc26dd0d5f7d97098a6c" },
      coverage = global[gcv] || (global[gcv] = {});if (coverage[path] && coverage[path].hash === hash) {
    return coverage[path];
  }coverageData.hash = hash;return coverage[path] = coverageData;
}();cov_2qc9du3ah0.s[0]++;Object.defineProperty(exports, "__esModule", { value: true });cov_2qc9du3ah0.s[1]++;exports.index = index;cov_2qc9du3ah0.s[2]++;exports.steps = steps;var _redux = (cov_2qc9du3ah0.s[3]++, __webpack_require__(14));var _actions = (cov_2qc9du3ah0.s[4]++, __webpack_require__(21));var actions = (cov_2qc9du3ah0.s[5]++, _interopRequireWildcard(_actions));function _interopRequireWildcard(obj) {
  cov_2qc9du3ah0.f[0]++;cov_2qc9du3ah0.s[6]++;if ((cov_2qc9du3ah0.b[1][0]++, obj) && (cov_2qc9du3ah0.b[1][1]++, obj.__esModule)) {
    cov_2qc9du3ah0.b[0][0]++;cov_2qc9du3ah0.s[7]++;return obj;
  } else {
    cov_2qc9du3ah0.b[0][1]++;var newObj = (cov_2qc9du3ah0.s[8]++, {});cov_2qc9du3ah0.s[9]++;if (obj != null) {
      cov_2qc9du3ah0.b[2][0]++;cov_2qc9du3ah0.s[10]++;for (var key in obj) {
        cov_2qc9du3ah0.s[11]++;if (Object.prototype.hasOwnProperty.call(obj, key)) {
          cov_2qc9du3ah0.b[3][0]++;cov_2qc9du3ah0.s[12]++;newObj[key] = obj[key];
        } else {
          cov_2qc9du3ah0.b[3][1]++;
        }
      }
    } else {
      cov_2qc9du3ah0.b[2][1]++;
    }cov_2qc9du3ah0.s[13]++;newObj.default = obj;cov_2qc9du3ah0.s[14]++;return newObj;
  }
}function index(state = (cov_2qc9du3ah0.b[4][0]++, 0), action) {
  cov_2qc9du3ah0.f[1]++;cov_2qc9du3ah0.s[15]++;if ((cov_2qc9du3ah0.b[6][0]++, action.type == actions.TOCK) || (cov_2qc9du3ah0.b[6][1]++, action.type == actions.END_OF_TRACE)) {
    cov_2qc9du3ah0.b[5][0]++;cov_2qc9du3ah0.s[16]++;return state + 1;
  } else {
    cov_2qc9du3ah0.b[5][1]++;cov_2qc9du3ah0.s[17]++;return state;
  }
}function steps(state = (cov_2qc9du3ah0.b[7][0]++, null), action) {
  cov_2qc9du3ah0.f[2]++;cov_2qc9du3ah0.s[18]++;if (action.type == actions.SAVE_STEPS) {
    cov_2qc9du3ah0.b[8][0]++;cov_2qc9du3ah0.s[19]++;return action.steps;
  } else {
    cov_2qc9du3ah0.b[8][1]++;cov_2qc9du3ah0.s[20]++;return state;
  }
}const info = (cov_2qc9du3ah0.s[21]++, (0, _redux.combineReducers)({ steps }));const proc = (cov_2qc9du3ah0.s[22]++, (0, _redux.combineReducers)({ index }));const reducer = (cov_2qc9du3ah0.s[23]++, (0, _redux.combineReducers)({ info, proc }));cov_2qc9du3ah0.s[24]++;exports.default = reducer;

/***/ }),
/* 79 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var cov_p513hhjnm = function () {
  var path = "/Users/gnidan/src/work/truffle/packages/truffle-debugger/lib/controller/reducers.js",
      hash = "e7cc52106362de022e7b7d683a2e38a6a97dc622",
      Function = function () {}.constructor,
      global = new Function('return this')(),
      gcv = "__coverage__",
      coverageData = { path: "/Users/gnidan/src/work/truffle/packages/truffle-debugger/lib/controller/reducers.js", statementMap: { "0": { start: { line: 3, column: 0 }, end: { line: 5, column: 3 } }, "1": { start: { line: 7, column: 13 }, end: { line: 7, column: 29 } }, "2": { start: { line: 9, column: 14 }, end: { line: 9, column: 44 } }, "3": { start: { line: 11, column: 13 }, end: { line: 11, column: 29 } }, "4": { start: { line: 13, column: 15 }, end: { line: 13, column: 35 } }, "5": { start: { line: 15, column: 14 }, end: { line: 15, column: 47 } }, "6": { start: { line: 17, column: 40 }, end: { line: 17, column: 267 } }, "7": { start: { line: 17, column: 69 }, end: { line: 17, column: 80 } }, "8": { start: { line: 17, column: 103 }, end: { line: 17, column: 105 } }, "9": { start: { line: 17, column: 107 }, end: { line: 17, column: 228 } }, "10": { start: { line: 17, column: 126 }, end: { line: 17, column: 226 } }, "11": { start: { line: 17, column: 149 }, end: { line: 17, column: 224 } }, "12": { start: { line: 17, column: 201 }, end: { line: 17, column: 224 } }, "13": { start: { line: 17, column: 229 }, end: { line: 17, column: 250 } }, "14": { start: { line: 17, column: 251 }, end: { line: 17, column: 265 } }, "15": { start: { line: 19, column: 39 }, end: { line: 19, column: 93 } }, "16": { start: { line: 21, column: 14 }, end: { line: 21, column: 66 } }, "17": { start: { line: 24, column: 2 }, end: { line: 45, column: 3 } }, "18": { start: { line: 28, column: 6 }, end: { line: 35, column: 7 } }, "19": { start: { line: 28, column: 37 }, end: { line: 28, column: 179 } }, "20": { start: { line: 31, column: 8 }, end: { line: 31, column: 21 } }, "21": { start: { line: 34, column: 8 }, end: { line: 34, column: 49 } }, "22": { start: { line: 36, column: 6 }, end: { line: 36, column: 12 } }, "23": { start: { line: 39, column: 6 }, end: { line: 40, column: 8 } }, "24": { start: { line: 39, column: 40 }, end: { line: 39, column: 182 } }, "25": { start: { line: 41, column: 6 }, end: { line: 41, column: 12 } }, "26": { start: { line: 44, column: 6 }, end: { line: 44, column: 19 } }, "27": { start: { line: 48, column: 16 }, end: { line: 50, column: 2 } }, "28": { start: { line: 52, column: 0 }, end: { line: 52, column: 26 } } }, fnMap: { "0": { name: "_interopRequireWildcard", decl: { start: { line: 17, column: 9 }, end: { line: 17, column: 32 } }, loc: { start: { line: 17, column: 38 }, end: { line: 17, column: 269 } }, line: 17 }, "1": { name: "_interopRequireDefault", decl: { start: { line: 19, column: 9 }, end: { line: 19, column: 31 } }, loc: { start: { line: 19, column: 37 }, end: { line: 19, column: 95 } }, line: 19 }, "2": { name: "breakpoints", decl: { start: { line: 23, column: 9 }, end: { line: 23, column: 20 } }, loc: { start: { line: 23, column: 41 }, end: { line: 46, column: 1 } }, line: 23 }, "3": { name: "(anonymous_3)", decl: { start: { line: 28, column: 23 }, end: { line: 28, column: 24 } }, loc: { start: { line: 28, column: 37 }, end: { line: 28, column: 179 } }, line: 28 }, "4": { name: "(anonymous_4)", decl: { start: { line: 39, column: 26 }, end: { line: 39, column: 27 } }, loc: { start: { line: 39, column: 40 }, end: { line: 39, column: 182 } }, line: 39 } }, branchMap: { "0": { loc: { start: { line: 17, column: 40 }, end: { line: 17, column: 267 } }, type: "if", locations: [{ start: { line: 17, column: 40 }, end: { line: 17, column: 267 } }, { start: { line: 17, column: 40 }, end: { line: 17, column: 267 } }], line: 17 }, "1": { loc: { start: { line: 17, column: 44 }, end: { line: 17, column: 65 } }, type: "binary-expr", locations: [{ start: { line: 17, column: 44 }, end: { line: 17, column: 47 } }, { start: { line: 17, column: 51 }, end: { line: 17, column: 65 } }], line: 17 }, "2": { loc: { start: { line: 17, column: 107 }, end: { line: 17, column: 228 } }, type: "if", locations: [{ start: { line: 17, column: 107 }, end: { line: 17, column: 228 } }, { start: { line: 17, column: 107 }, end: { line: 17, column: 228 } }], line: 17 }, "3": { loc: { start: { line: 17, column: 149 }, end: { line: 17, column: 224 } }, type: "if", locations: [{ start: { line: 17, column: 149 }, end: { line: 17, column: 224 } }, { start: { line: 17, column: 149 }, end: { line: 17, column: 224 } }], line: 17 }, "4": { loc: { start: { line: 19, column: 46 }, end: { line: 19, column: 92 } }, type: "cond-expr", locations: [{ start: { line: 19, column: 70 }, end: { line: 19, column: 73 } }, { start: { line: 19, column: 76 }, end: { line: 19, column: 92 } }], line: 19 }, "5": { loc: { start: { line: 19, column: 46 }, end: { line: 19, column: 67 } }, type: "binary-expr", locations: [{ start: { line: 19, column: 46 }, end: { line: 19, column: 49 } }, { start: { line: 19, column: 53 }, end: { line: 19, column: 67 } }], line: 19 }, "6": { loc: { start: { line: 23, column: 21 }, end: { line: 23, column: 31 } }, type: "default-arg", locations: [{ start: { line: 23, column: 29 }, end: { line: 23, column: 31 } }], line: 23 }, "7": { loc: { start: { line: 24, column: 2 }, end: { line: 45, column: 3 } }, type: "switch", locations: [{ start: { line: 26, column: 4 }, end: { line: 36, column: 12 } }, { start: { line: 38, column: 4 }, end: { line: 41, column: 12 } }, { start: { line: 43, column: 4 }, end: { line: 44, column: 19 } }], line: 24 }, "8": { loc: { start: { line: 28, column: 6 }, end: { line: 35, column: 7 } }, type: "if", locations: [{ start: { line: 28, column: 6 }, end: { line: 35, column: 7 } }, { start: { line: 28, column: 6 }, end: { line: 35, column: 7 } }], line: 28 }, "9": { loc: { start: { line: 28, column: 37 }, end: { line: 28, column: 179 } }, type: "binary-expr", locations: [{ start: { line: 28, column: 37 }, end: { line: 28, column: 87 } }, { start: { line: 28, column: 91 }, end: { line: 28, column: 133 } }, { start: { line: 28, column: 137 }, end: { line: 28, column: 179 } }], line: 28 }, "10": { loc: { start: { line: 39, column: 40 }, end: { line: 39, column: 182 } }, type: "binary-expr", locations: [{ start: { line: 39, column: 40 }, end: { line: 39, column: 90 } }, { start: { line: 39, column: 94 }, end: { line: 39, column: 136 } }, { start: { line: 39, column: 140 }, end: { line: 39, column: 182 } }], line: 39 } }, s: { "0": 0, "1": 0, "2": 0, "3": 0, "4": 0, "5": 0, "6": 0, "7": 0, "8": 0, "9": 0, "10": 0, "11": 0, "12": 0, "13": 0, "14": 0, "15": 0, "16": 0, "17": 0, "18": 0, "19": 0, "20": 0, "21": 0, "22": 0, "23": 0, "24": 0, "25": 0, "26": 0, "27": 0, "28": 0 }, f: { "0": 0, "1": 0, "2": 0, "3": 0, "4": 0 }, b: { "0": [0, 0], "1": [0, 0], "2": [0, 0], "3": [0, 0], "4": [0, 0], "5": [0, 0], "6": [0], "7": [0, 0, 0], "8": [0, 0], "9": [0, 0, 0], "10": [0, 0, 0] }, inputSourceMap: { version: 3, sources: ["lib/controller/reducers.js"], names: ["actions", "debug", "breakpoints", "state", "action", "type", "ADD_BREAKPOINT", "filter", "breakpoint", "sourceId", "line", "node", "length", "concat", "REMOVE_BREAKPOINT", "reducer"], mappings: ";;;;;;AAAA;;;;AAGA;;AAEA;;IAAYA,O;;;;;;AAJZ,MAAMC,QAAQ,qBAAY,8BAAZ,CAAd;;AAMA,SAASC,WAAT,CAAqBC,QAAQ,EAA7B,EAAiCC,MAAjC,EAAyC;AACvC,UAAQA,OAAOC,IAAf;;AAEE,SAAKL,QAAQM,cAAb;AACE;AACA,UAAGH,MAAMI,MAAN,CAAcC,UAAD,IACdA,WAAWC,QAAX,KAAsBL,OAAOI,UAAP,CAAkBC,QAAxC,IACAD,WAAWE,IAAX,KAAkBN,OAAOI,UAAP,CAAkBE,IADpC,IAEAF,WAAWG,IAAX,KAAkBP,OAAOI,UAAP,CAAkBG,IAHnC,CAGwC;AAHxC,QAIDC,MAJC,GAIM,CAJT,EAKA;AACE;AACP,eAAOT,KAAP;AACM,OARD,MAUA;AACE;AACA,eAAOA,MAAMU,MAAN,CAAa,CAACT,OAAOI,UAAR,CAAb,CAAP;AACD;AACD;;AAEF,SAAKR,QAAQc,iBAAb;AACE,aAAOX,MAAMI,MAAN,CAAcC,UAAD,IAClBA,WAAWC,QAAX,KAAsBL,OAAOI,UAAP,CAAkBC,QAAxC,IACAD,WAAWE,IAAX,KAAkBN,OAAOI,UAAP,CAAkBE,IADpC,IAEAF,WAAWG,IAAX,KAAkBP,OAAOI,UAAP,CAAkBG,IAH/B,CAGoC;AAHpC,OAAP;AAKA;;AAEF;AACE,aAAOR,KAAP;AA7BJ;AA+BD;;AAED,MAAMY,UAAU,4BAAgB;AAC9Bb;AAD8B,CAAhB,CAAhB;;kBAIea,O", file: "reducers.js", sourceRoot: "/Users/gnidan/src/work/truffle/packages/truffle-debugger", sourcesContent: ["import debugModule from \"debug\";\nconst debug = debugModule(\"debugger:controller:reducers\");\n\nimport { combineReducers } from \"redux\";\n\nimport * as actions from \"./actions\";\n\nfunction breakpoints(state = [], action) {\n  switch (action.type) {\n\n    case actions.ADD_BREAKPOINT:\n      //check for any existing identical breakpoints to avoid redundancy\n      if(state.filter((breakpoint)=>\n        breakpoint.sourceId===action.breakpoint.sourceId &&\n        breakpoint.line===action.breakpoint.line &&\n        breakpoint.node===action.breakpoint.node //may be undefined\n      ).length>0)\n      {\n        //if it's already there, do nothing\n\treturn state;\n      }\n      else\n      {\n        //otherwise add it\n        return state.concat([action.breakpoint]);\n      }\n      break;\n\n    case actions.REMOVE_BREAKPOINT:\n      return state.filter((breakpoint)=>\n        breakpoint.sourceId!==action.breakpoint.sourceId ||\n        breakpoint.line!==action.breakpoint.line ||\n        breakpoint.node!==action.breakpoint.node //may be undefined\n      );\n      break;\n\n    default:\n      return state;\n  }\n}\n\nconst reducer = combineReducers({\n  breakpoints\n});\n\nexport default reducer;\n"] }, _coverageSchema: "332fd63041d2c1bcb487cc26dd0d5f7d97098a6c" },
      coverage = global[gcv] || (global[gcv] = {});if (coverage[path] && coverage[path].hash === hash) {
    return coverage[path];
  }coverageData.hash = hash;return coverage[path] = coverageData;
}();cov_p513hhjnm.s[0]++;Object.defineProperty(exports, "__esModule", { value: true });var _debug = (cov_p513hhjnm.s[1]++, __webpack_require__(0));var _debug2 = (cov_p513hhjnm.s[2]++, _interopRequireDefault(_debug));var _redux = (cov_p513hhjnm.s[3]++, __webpack_require__(14));var _actions = (cov_p513hhjnm.s[4]++, __webpack_require__(25));var actions = (cov_p513hhjnm.s[5]++, _interopRequireWildcard(_actions));function _interopRequireWildcard(obj) {
  cov_p513hhjnm.f[0]++;cov_p513hhjnm.s[6]++;if ((cov_p513hhjnm.b[1][0]++, obj) && (cov_p513hhjnm.b[1][1]++, obj.__esModule)) {
    cov_p513hhjnm.b[0][0]++;cov_p513hhjnm.s[7]++;return obj;
  } else {
    cov_p513hhjnm.b[0][1]++;var newObj = (cov_p513hhjnm.s[8]++, {});cov_p513hhjnm.s[9]++;if (obj != null) {
      cov_p513hhjnm.b[2][0]++;cov_p513hhjnm.s[10]++;for (var key in obj) {
        cov_p513hhjnm.s[11]++;if (Object.prototype.hasOwnProperty.call(obj, key)) {
          cov_p513hhjnm.b[3][0]++;cov_p513hhjnm.s[12]++;newObj[key] = obj[key];
        } else {
          cov_p513hhjnm.b[3][1]++;
        }
      }
    } else {
      cov_p513hhjnm.b[2][1]++;
    }cov_p513hhjnm.s[13]++;newObj.default = obj;cov_p513hhjnm.s[14]++;return newObj;
  }
}function _interopRequireDefault(obj) {
  cov_p513hhjnm.f[1]++;cov_p513hhjnm.s[15]++;return (cov_p513hhjnm.b[5][0]++, obj) && (cov_p513hhjnm.b[5][1]++, obj.__esModule) ? (cov_p513hhjnm.b[4][0]++, obj) : (cov_p513hhjnm.b[4][1]++, { default: obj });
}const debug = (cov_p513hhjnm.s[16]++, (0, _debug2.default)("debugger:controller:reducers"));function breakpoints(state = (cov_p513hhjnm.b[6][0]++, []), action) {
  cov_p513hhjnm.f[2]++;cov_p513hhjnm.s[17]++;switch (action.type) {case actions.ADD_BREAKPOINT:
      cov_p513hhjnm.b[7][0]++;cov_p513hhjnm.s[18]++;if (state.filter(breakpoint => {
        cov_p513hhjnm.f[3]++;cov_p513hhjnm.s[19]++;return (cov_p513hhjnm.b[9][0]++, breakpoint.sourceId === action.breakpoint.sourceId) && (cov_p513hhjnm.b[9][1]++, breakpoint.line === action.breakpoint.line) && (cov_p513hhjnm.b[9][2]++, breakpoint.node === action.breakpoint.node);
      }).length > 0) {
        cov_p513hhjnm.b[8][0]++;cov_p513hhjnm.s[20]++;return state;
      } else {
        cov_p513hhjnm.b[8][1]++;cov_p513hhjnm.s[21]++;return state.concat([action.breakpoint]);
      }cov_p513hhjnm.s[22]++;break;case actions.REMOVE_BREAKPOINT:
      cov_p513hhjnm.b[7][1]++;cov_p513hhjnm.s[23]++;return state.filter(breakpoint => {
        cov_p513hhjnm.f[4]++;cov_p513hhjnm.s[24]++;return (cov_p513hhjnm.b[10][0]++, breakpoint.sourceId !== action.breakpoint.sourceId) || (cov_p513hhjnm.b[10][1]++, breakpoint.line !== action.breakpoint.line) || (cov_p513hhjnm.b[10][2]++, breakpoint.node !== action.breakpoint.node);
      });cov_p513hhjnm.s[25]++;break;default:
      cov_p513hhjnm.b[7][2]++;cov_p513hhjnm.s[26]++;return state;}
}const reducer = (cov_p513hhjnm.s[27]++, (0, _redux.combineReducers)({ breakpoints }));cov_p513hhjnm.s[28]++;exports.default = reducer;

/***/ }),
/* 80 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _keys = __webpack_require__(16);

var _keys2 = _interopRequireDefault(_keys);

var _asyncToGenerator2 = __webpack_require__(7);

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _debug = __webpack_require__(0);

var _debug2 = _interopRequireDefault(_debug);

var _chai = __webpack_require__(12);

var _ganacheCli = __webpack_require__(15);

var _ganacheCli2 = _interopRequireDefault(_ganacheCli);

var _web = __webpack_require__(8);

var _web2 = _interopRequireDefault(_web);

var _helpers = __webpack_require__(13);

var _debugger = __webpack_require__(17);

var _debugger2 = _interopRequireDefault(_debugger);

var _selectors = __webpack_require__(37);

var _selectors2 = _interopRequireDefault(_selectors);

var _selectors3 = __webpack_require__(19);

var _selectors4 = _interopRequireDefault(_selectors3);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const debug = (0, _debug2.default)("test:context");

const __OUTER = `
pragma solidity ^0.4.18;

import "./InnerContract.sol";

contract OuterContract {
  event Outer();

  InnerContract inner;

  constructor(address _inner) public {
    inner = InnerContract(_inner);
  }

  function run() public {
    inner.run();

    emit Outer();
  }
}
`;

const __INNER = `
pragma solidity ^0.4.18;

contract InnerContract {
  event Inner();

  function run() public {
    emit Inner();
  }
}
`;

const __MIGRATION = `
let OuterContract = artifacts.require("OuterContract");
let InnerContract = artifacts.require("InnerContract");

module.exports = function(deployer) {
  return deployer
    .then(function() {
      return deployer.deploy(InnerContract);
    })
    .then(function() {
      return InnerContract.deployed();
    })
    .then(function(inner) {
      return deployer.deploy(OuterContract, inner.address);
    });
};
`;

let migrations = {
  "2_deploy_contracts.js": __MIGRATION
};

let sources = {
  "OuterLibrary.sol": __OUTER,
  "InnerContract.sol": __INNER
};

describe("Contexts", function () {
  var provider;
  var web3;

  var abstractions;
  var artifacts;

  before("Create Provider", (0, _asyncToGenerator3.default)(function* () {
    provider = _ganacheCli2.default.provider({ seed: "debugger", gasLimit: 7000000 });
    web3 = new _web2.default(provider);
  }));

  before("Prepare contracts and artifacts", (0, _asyncToGenerator3.default)(function* () {
    this.timeout(30000);

    let prepared = yield (0, _helpers.prepareContracts)(provider, sources, migrations);
    abstractions = prepared.abstractions;
    artifacts = prepared.artifacts;
  }));

  it("returns view of addresses affected", (0, _asyncToGenerator3.default)(function* () {
    let outer = yield abstractions.OuterContract.deployed();
    let inner = yield abstractions.InnerContract.deployed();

    // run outer contract method
    let result = yield outer.run();

    _chai.assert.equal(2, result.receipt.logs.length, "There should be two logs");

    let txHash = result.tx;

    let bugger = yield _debugger2.default.forTx(txHash, {
      provider,
      contracts: artifacts
    });
    debug("debugger ready");

    let session = bugger.connect();

    let affectedInstances = session.view(_selectors2.default.info.affectedInstances);
    debug("affectedInstances: %o", affectedInstances);

    let affectedAddresses = (0, _keys2.default)(affectedInstances).map(function (address) {
      return address.toLowerCase();
    });

    _chai.assert.equal(2, affectedAddresses.length);

    _chai.assert.include(affectedAddresses, outer.address.toLowerCase(), "OuterContract should be an affected address");

    _chai.assert.include(affectedAddresses, inner.address.toLowerCase(), "InnerContract should be an affected address");
  }));
});

/***/ }),
/* 81 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _entries = __webpack_require__(1);

var _entries2 = _interopRequireDefault(_entries);

var _stringify = __webpack_require__(82);

var _stringify2 = _interopRequireDefault(_stringify);

var _assign = __webpack_require__(5);

var _assign2 = _interopRequireDefault(_assign);

var _extends2 = __webpack_require__(4);

var _extends3 = _interopRequireDefault(_extends2);

var _debug = __webpack_require__(0);

var _debug2 = _interopRequireDefault(_debug);

var _faker = __webpack_require__(83);

var _faker2 = _interopRequireDefault(_faker);

var _selectors = __webpack_require__(3);

var _selectors2 = _interopRequireDefault(_selectors);

var _helpers = __webpack_require__(38);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const debug = (0, _debug2.default)("test:data:decode");

const uints = (0, _helpers.generateUints)();

function generateArray(length) {
  return [...Array(length)].map(() => uints.next().value);
}

const commonFixtures = [{
  name: "multipleFullWordArray",
  type: "uint[]",
  value: generateArray(3) // takes up 3 whole words
}, {
  name: "withinWordArray",
  type: "uint16[]",
  value: generateArray(10) // takes up >1/2 word
}, {
  name: "multiplePartWordArray",
  type: "uint64[]",
  value: generateArray(9) // takes up 2.25 words
}, {
  name: "inconvenientlyWordOffsetArray",
  type: "uint240[]",
  value: generateArray(3) // takes up ~2.8 words
}, {
  name: "shortString",
  type: "string",
  value: "hello world"
}, {
  name: "longString",
  type: "string",
  value: "solidity allocation is a fun lesson in endianness"
}];

const mappingFixtures = [{
  name: "simpleMapping",
  type: {
    from: "uint256",
    to: "uint256"
  },
  value: (0, _extends3.default)({}, (0, _assign2.default)({}, ...generateArray(5).map((value, idx) => ({ [idx]: value }))))
}, {
  name: "numberedStrings",
  type: {
    from: "uint256",
    to: "string"
  },
  value: (0, _extends3.default)({}, (0, _assign2.default)({}, ...generateArray(7).map((value, idx) => ({ [value]: _faker2.default.lorem.slug(idx) }))))
}, {
  name: "stringsToStrings",
  type: {
    from: "string",
    to: "string"
  },
  value: (0, _extends3.default)({}, (0, _assign2.default)({}, ...[0, 1, 2, 3, 4].map(idx => ({ [_faker2.default.lorem.slug(idx)]: _faker2.default.lorem.slug(idx) }))))
}];

debug("mappingFixtures %O", mappingFixtures);

describe("Decoding", function () {

  /*
   * Storage Tests
   */
  (0, _helpers.describeDecoding)("Storage Variables", commonFixtures, _selectors2.default.current.state.storage, (contractName, fixtures) => {
    return `pragma solidity ^0.4.23;

contract ${contractName} {

  event Done();

  // declarations
  ${fixtures.map(({ type, name }) => `${type} ${name};`).join("\n  ")}

  function run() public {
    ${fixtures.map(({ name, value }) => `${name} = ${(0, _stringify2.default)(value)};`).join("\n    ")}

    emit Done();
  }
}
`;
  });

  (0, _helpers.describeDecoding)("Mapping Variables", mappingFixtures, _selectors2.default.current.state.storage, (contractName, fixtures) => {
    return `pragma solidity ^0.4.24;

contract ${contractName} {
  event Done();

  // declarations
  ${fixtures.map(({ name, type: { from, to } }) => `mapping (${from} => ${to}) ${name};`).join("\n  ")}

  function run() public {
    ${fixtures.map(({ name, type: { from }, value }) => (0, _entries2.default)(value).map(([k, v]) => from === "string" ? `${name}["${k}"] = ${(0, _stringify2.default)(v)};` : `${name}[${k}] = ${(0, _stringify2.default)(v)};`).join("\n    ")).join("\n\n    ")}

    emit Done();
  }
}
`;
  });

  /*
   * Memory Tests
   */
  (0, _helpers.describeDecoding)("Memory Variables", commonFixtures, _selectors2.default.current.state.memory, (contractName, fixtures) => {
    const separator = ";\n    ";

    function declareAssign({ name, type, value }) {
      if (type.indexOf("[]") != -1) {
        // array, must `new`
        let declare = `${type} memory ${name} = new ${type}(${value.length})`;
        let assigns = value.map((k, i) => `${name}[${i}] = ${k}`);
        return `${declare}${separator}${assigns.join(separator)}`;
      } else {
        return `${type} memory ${name} = ${(0, _stringify2.default)(value)}`;
      }
    }

    return `pragma solidity ^0.4.23;

contract ${contractName} {

  event Done();

  function run() public {
    uint i;
    // declarations
    ${fixtures.map(declareAssign).join(separator)};

    emit Done();
  }
}
`;
  });
});

/***/ }),
/* 82 */
/***/ (function(module, exports) {

module.exports = require("babel-runtime/core-js/json/stringify");

/***/ }),
/* 83 */
/***/ (function(module, exports) {

module.exports = require("faker");

/***/ }),
/* 84 */
/***/ (function(module, exports) {

module.exports = require("change-case");

/***/ }),
/* 85 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _debug = __webpack_require__(0);

var _debug2 = _interopRequireDefault(_debug);

var _chai = __webpack_require__(12);

var _bignumber = __webpack_require__(20);

var _utils = __webpack_require__(11);

var utils = _interopRequireWildcard(_utils);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const debug = (0, _debug2.default)("test:data:decode:utils");

describe("Utils", function () {
  describe("typeClass()", function () {
    it("handles mappings", function () {
      let definition = {
        typeDescriptions: {
          typeIdentifier: "t_mapping$_t_uint256_$_t_uint256_$"
        }
      };

      _chai.assert.equal(utils.typeClass(definition), "mapping");
    });
  });

  describe("toBigNumber()", function () {
    it("returns correct value", function () {
      let bytes = [0xf5, 0xe2, 0xc5, 0x17];
      let expectedValue = new _bignumber.BigNumber("f5e2c517", 16);

      let result = utils.toBigNumber(bytes);

      _chai.assert.equal(result.toString(), expectedValue.toString());
    });
  });

  describe("toSignedBigNumber()", function () {
    it("returns correct negative value", function () {
      let bytes = [0xf5, 0xe2, 0xc5, 0x17]; // starts with 0b1
      let raw = new _bignumber.BigNumber("f5e2c517", 16);
      let bitfipped = new _bignumber.BigNumber(raw.toString(2).replace(/0/g, "x").replace(/1/g, "0").replace(/x/g, "1"), 2);

      let expectedValue = bitfipped.plus(1).negated();

      let result = utils.toSignedBigNumber(bytes);

      _chai.assert.equal(result.toString(), expectedValue.toString());
    });

    it("returns correct positive value", function () {
      let bytes = [0x05, 0xe2, 0xc5, 0x17]; // starts with 0b0
      let raw = new _bignumber.BigNumber("05e2c517", 16);
      let expectedValue = raw;

      let result = utils.toSignedBigNumber(bytes);

      _chai.assert.equal(result.toString(), expectedValue.toString());
    });
  });

  describe("toHexString()", function () {
    it("returns correct representation with full bytes", function () {
      // ie, 0x00 instead of 0x0
      _chai.assert.equal(utils.toHexString([0x05, 0x11]), "0x0511");
      _chai.assert.equal(utils.toHexString([0xff, 0x00, 0xff]), "0xff00ff");
    });

    it("allows removing leading zeroes", function () {
      _chai.assert.equal(utils.toHexString([0x00, 0x00, 0xcc], true), "0xcc");
    });
  });
});

/***/ }),
/* 86 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _asyncToGenerator2 = __webpack_require__(7);

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _debug = __webpack_require__(0);

var _debug2 = _interopRequireDefault(_debug);

var _chai = __webpack_require__(12);

var _ganacheCli = __webpack_require__(15);

var _ganacheCli2 = _interopRequireDefault(_ganacheCli);

var _web = __webpack_require__(8);

var _web2 = _interopRequireDefault(_web);

var _helpers = __webpack_require__(13);

var _debugger = __webpack_require__(17);

var _debugger2 = _interopRequireDefault(_debugger);

var _selectors = __webpack_require__(3);

var _selectors2 = _interopRequireDefault(_selectors);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const debug = (0, _debug2.default)("test:evm");

const __OUTER = `
pragma solidity ^0.4.18;

import "./Inner.sol";

contract Outer {
  event Called();

  Inner inner;

  constructor(address _inner) public {
    inner = Inner(_inner);
  }

  function runSingle() public {
  }

  function run() public {
    inner.run();
  }
}
`;

const __INNER = `
pragma solidity ^0.4.18;

contract Inner {
  function run() public {
  }
}
`;

const __MIGRATION = `
let Outer = artifacts.require("Outer");
let Inner = artifacts.require("Inner");
let HasPrecompile = artifacts.require("HasPrecompile");

module.exports = async function(deployer) {
  await deployer.deploy(Inner);
  const inner = await Inner.deployed();
  await deployer.deploy(Outer, inner.address);
};
`;

let sources = {
  "Inner.sol": __INNER,
  "Outer.sol": __OUTER
};

let migrations = {
  "2_deploy_contracts.js": __MIGRATION
};

describe("EVM Debugging", function () {
  var provider;
  var web3;

  var abstractions;
  var artifacts;
  var files;

  before("Create Provider", (0, _asyncToGenerator3.default)(function* () {
    provider = _ganacheCli2.default.provider({ seed: "debugger", gasLimit: 7000000 });
    web3 = new _web2.default(provider);
  }));

  before("Prepare contracts and artifacts", (0, _asyncToGenerator3.default)(function* () {
    this.timeout(30000);

    let prepared = yield (0, _helpers.prepareContracts)(provider, sources, migrations);
    abstractions = prepared.abstractions;
    artifacts = prepared.artifacts;
    files = prepared.files;
  }));

  describe("Function Depth", function () {
    it("remains at 1 in absence of cross-contract calls", (0, _asyncToGenerator3.default)(function* () {
      const maxExpected = 1;

      let instance = yield abstractions.Inner.deployed();
      let receipt = yield instance.run();
      let txHash = receipt.tx;

      let bugger = yield _debugger2.default.forTx(txHash, {
        provider,
        files,
        contracts: artifacts
      });

      let session = bugger.connect();
      var stepped; // session steppers return false when done

      do {
        stepped = session.stepNext();

        let actual = session.view(_selectors2.default.current.callstack).length;

        _chai.assert.isAtMost(actual, maxExpected);
      } while (stepped);
    }));

    it("tracks callstack correctly", (0, _asyncToGenerator3.default)(function* () {
      // prepare
      let instance = yield abstractions.Outer.deployed();
      let receipt = yield instance.run();
      let txHash = receipt.tx;

      let bugger = yield _debugger2.default.forTx(txHash, {
        provider,
        files,
        contracts: artifacts
      });

      let session = bugger.connect();

      // follow callstack length values in list
      // see source above
      let expectedDepthSequence = [1, 2, 1, 0];
      let actualSequence = [session.view(_selectors2.default.current.callstack).length];

      var stepped;

      do {
        stepped = session.stepNext();

        let currentDepth = session.view(_selectors2.default.current.callstack).length;
        let lastKnown = actualSequence[actualSequence.length - 1];

        if (currentDepth !== lastKnown) {
          actualSequence.push(currentDepth);
        }
      } while (stepped);

      _chai.assert.deepEqual(actualSequence, expectedDepthSequence);
    }));
  });
});

/***/ }),
/* 87 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _asyncToGenerator2 = __webpack_require__(7);

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _debug = __webpack_require__(0);

var _debug2 = _interopRequireDefault(_debug);

var _chai = __webpack_require__(12);

var _ganacheCli = __webpack_require__(15);

var _ganacheCli2 = _interopRequireDefault(_ganacheCli);

var _web = __webpack_require__(8);

var _web2 = _interopRequireDefault(_web);

var _helpers = __webpack_require__(13);

var _debugger = __webpack_require__(17);

var _debugger2 = _interopRequireDefault(_debugger);

var _selectors = __webpack_require__(3);

var _selectors2 = _interopRequireDefault(_selectors);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const debug = (0, _debug2.default)("test:precompiles");

const __PRECOMPILE = `
pragma solidity ^0.4.18;

contract HasPrecompile {
  event Called();

  function run() public {
    sha256("hello world");

    emit Called();
  }
}
`;

let sources = {
  "HasPrecompile.sol": __PRECOMPILE
};

const TEST_CASES = [{
  selector: "evm.current.context"
}];

describe("Precompiled Contracts", () => {
  let provider;
  let web3;

  let abstractions;
  let artifacts;
  let files;

  // object where key is selector name, value is list of results at step
  let results = {};

  before("Create Provider", (0, _asyncToGenerator3.default)(function* () {
    provider = _ganacheCli2.default.provider({ seed: "debugger", gasLimit: 7000000 });
    web3 = new _web2.default(provider);
  }));

  before("Prepare contracts and artifacts", (0, _asyncToGenerator3.default)(function* () {
    this.timeout(30000);

    let prepared = yield (0, _helpers.prepareContracts)(provider, sources);
    abstractions = prepared.abstractions;
    artifacts = prepared.artifacts;
    files = prepared.files;
  }));

  before("Step through debugger", (0, _asyncToGenerator3.default)(function* () {
    // initialize results as mapping of selector to step results list
    for (let _ref4 of TEST_CASES) {
      let { selector } = _ref4;

      results[selector] = [];
    }

    let instance = yield abstractions.HasPrecompile.deployed();
    let receipt = yield instance.run();
    let txHash = receipt.tx;

    let bugger = yield _debugger2.default.forTx(txHash, {
      provider,
      files,
      contracts: artifacts
    });

    let session = bugger.connect();
    var stepped; // session steppers return false when done

    do {
      for (let _ref5 of TEST_CASES) {
        let { selector } = _ref5;

        let stepResult;

        try {
          stepResult = { value: session.view(selector) };
        } catch (e) {
          stepResult = { error: e };
        }

        results[selector].push(stepResult);
      }

      stepped = session.advance();
    } while (stepped);
  }));

  it("never fails to know EVM context", (0, _asyncToGenerator3.default)(function* () {
    const result = results["evm.current.context"];

    for (let step of result) {
      debug("step %o", step);
      _chai.assert.isOk(step.value);
      _chai.assert.isUndefined(step.error);
    }
  }));
});

/***/ }),
/* 88 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _asyncToGenerator2 = __webpack_require__(7);

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _debug = __webpack_require__(0);

var _debug2 = _interopRequireDefault(_debug);

var _chai = __webpack_require__(12);

var _ganacheCli = __webpack_require__(15);

var _ganacheCli2 = _interopRequireDefault(_ganacheCli);

var _web = __webpack_require__(8);

var _web2 = _interopRequireDefault(_web);

var _helpers = __webpack_require__(13);

var _debugger = __webpack_require__(17);

var _debugger2 = _interopRequireDefault(_debugger);

var _selectors = __webpack_require__(2);

var _selectors2 = _interopRequireDefault(_selectors);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const debug = (0, _debug2.default)("test:solidity");

const __SINGLE_CALL = `
pragma solidity ^0.4.18;

contract SingleCall {
  event Called();

  function run() public {
    emit Called();
  }
}
`;

const __NESTED_CALL = `pragma solidity ^0.4.18;

contract NestedCall {
  event First();
  event Second();

  // run()
  //   first()    1
  //     inner()  2
  //       event  3
  //              2
  //   second     1
  //     event    2
  //              1
  function run() public {
    first();
    second();
  }

  function first() public {
    inner();
  }

  function inner() public {
    emit First();
  }

  function second() public {
    emit Second();
  }

}
`;

let sources = {
  "SingleCall.sol": __SINGLE_CALL,
  "NestedCall.sol": __NESTED_CALL
};

describe("Solidity Debugging", function () {
  var provider;
  var web3;

  var abstractions;
  var artifacts;
  var files;

  before("Create Provider", (0, _asyncToGenerator3.default)(function* () {
    provider = _ganacheCli2.default.provider({ seed: "debugger", gasLimit: 7000000 });
    web3 = new _web2.default(provider);
  }));

  before("Prepare contracts and artifacts", (0, _asyncToGenerator3.default)(function* () {
    this.timeout(30000);

    let prepared = yield (0, _helpers.prepareContracts)(provider, sources);
    abstractions = prepared.abstractions;
    artifacts = prepared.artifacts;
    files = prepared.files;
  }));

  it("exposes functionality to stop at breakpoints", (0, _asyncToGenerator3.default)(function* () {
    // prepare
    let instance = yield abstractions.NestedCall.deployed();
    let receipt = yield instance.run();
    let txHash = receipt.tx;

    let bugger = yield _debugger2.default.forTx(txHash, {
      provider,
      files,
      contracts: artifacts
    });

    let session = bugger.connect();

    // at `second();`
    let source = yield session.view(_selectors2.default.current.source);
    let breakpoint = { sourceId: source.id, line: 16 };
    let breakpointStopped = false;

    session.addBreakpoint(breakpoint);

    do {
      session.continueUntilBreakpoint();

      if (!session.finished) {
        let range = yield session.view(_selectors2.default.current.sourceRange);
        _chai.assert.equal(range.lines.start.line, 16);

        breakpointStopped = true;
      }
    } while (!session.finished);
  }));

  describe("Function Depth", function () {
    it("remains at 1 in absence of inner function calls", (0, _asyncToGenerator3.default)(function* () {
      const maxExpected = 1;

      let instance = yield abstractions.SingleCall.deployed();
      let receipt = yield instance.run();
      let txHash = receipt.tx;

      let bugger = yield _debugger2.default.forTx(txHash, {
        provider,
        files,
        contracts: artifacts
      });

      let session = bugger.connect();
      var stepped; // session steppers return false when done

      do {
        stepped = session.stepNext();

        let actual = session.view(_selectors2.default.current.functionDepth);

        _chai.assert.isAtMost(actual, maxExpected);
      } while (stepped);
    }));

    it("spelunks correctly", (0, _asyncToGenerator3.default)(function* () {
      // prepare
      let instance = yield abstractions.NestedCall.deployed();
      let receipt = yield instance.run();
      let txHash = receipt.tx;

      let bugger = yield _debugger2.default.forTx(txHash, {
        provider,
        files,
        contracts: artifacts
      });

      let session = bugger.connect();

      // follow functionDepth values in list
      // see source above
      let expectedDepthSequence = [1, 2, 3, 2, 1, 2, 1, 0];
      let actualSequence = [session.view(_selectors2.default.current.functionDepth)];

      var stepped;

      do {
        stepped = session.stepNext();

        let currentDepth = session.view(_selectors2.default.current.functionDepth);
        let lastKnown = actualSequence[actualSequence.length - 1];

        if (currentDepth !== lastKnown) {
          actualSequence.push(currentDepth);
        }
      } while (stepped);

      _chai.assert.deepEqual(actualSequence, expectedDepthSequence);
    }));
  });
});

/***/ })
/******/ ]);
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,