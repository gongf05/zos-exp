"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const debug_1 = __importDefault(require("debug"));
const debug = debug_1.default("decoder:decode");
const DecodeUtils = __importStar(require("truffle-decode-utils"));
const value_1 = __importDefault(require("./value"));
const memory_1 = __importDefault(require("./memory"));
const storage_1 = __importDefault(require("./storage"));
const pointer_1 = require("../types/pointer");
function decode(definition, pointer, info, web3, contractAddress) {
    return __awaiter(this, void 0, void 0, function* () {
        debug("Decoding %s", definition.name);
        const identifier = DecodeUtils.Definition.typeIdentifier(definition);
        if (DecodeUtils.Definition.isReference(definition)) {
            switch (DecodeUtils.Definition.referenceType(definition)) {
                case "memory":
                    // debug("decoding memory reference, type: %s", identifier);
                    return yield memory_1.default(definition, pointer, info);
                case "storage":
                    // debug("decoding storage reference, type: %s", identifier);
                    return pointer_1.isStoragePointer(pointer) ? yield storage_1.default(definition, pointer, info, web3, contractAddress) : undefined;
                default:
                    // debug("Unknown reference category: %s", DecodeUtils.typeIdentifier(definition));
                    return undefined;
            }
        }
        if (pointer_1.isLiteralPointer(pointer)) {
            return yield value_1.default(definition, pointer, info, web3, contractAddress);
        }
        if (DecodeUtils.Definition.isEnum(definition) && pointer_1.isStoragePointer(pointer)) {
            // debug("decoding mapping, type: %s", identifier);
            return yield storage_1.default(definition, pointer, info, web3, contractAddress);
        }
        if (DecodeUtils.Definition.isMapping(definition) && pointer_1.isStoragePointer(pointer)) {
            // debug("decoding mapping, type: %s", identifier);
            return yield storage_1.default(definition, pointer, info, web3, contractAddress);
        }
        // debug("decoding value, type: %s", identifier);
        return yield value_1.default(definition, pointer, info, web3, contractAddress);
    });
}
exports.default = decode;
//# sourceMappingURL=index.js.map