"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const storage = __importStar(require("./storage"));
const memory = __importStar(require("./memory"));
const pointer_1 = require("../types/pointer");
function read(pointer, state, web3, contractAddress) {
    return __awaiter(this, void 0, void 0, function* () {
        if (pointer_1.isStackPointer(pointer) && state.stack && pointer.stack < state.stack.length) {
            return state.stack[pointer.stack];
        }
        else if (pointer_1.isStoragePointer(pointer) && state.storage) {
            return yield storage.readRange(state.storage, pointer.storage, web3, contractAddress);
        }
        else if (pointer_1.isMemoryPointer(pointer) && state.memory) {
            return memory.readBytes(state.memory, pointer.memory.start, pointer.memory.length);
        }
        else if (pointer_1.isLiteralPointer(pointer)) {
            return pointer.literal;
        }
    });
}
exports.default = read;
//# sourceMappingURL=index.js.map